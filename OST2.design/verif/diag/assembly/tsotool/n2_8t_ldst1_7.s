/*
* ========== Copyright Header Begin ==========================================
* 
* OpenSPARC T2 Processor File: n2_8t_ldst1_7.s
* Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
* 4150 Network Circle, Santa Clara, California 95054, U.S.A.
*
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; version 2 of the License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
* For the avoidance of doubt, and except that if any non-GPL license 
* choice is available it will apply instead, Sun elects to use only 
* the General Public License version 2 (GPLv2) at this time for any 
* software where a choice of GPL license versions is made 
* available with the language indicating that GPLv2 or any later version 
* may be used, or where a choice of which version of the GPL is applied is 
* otherwise unspecified. 
*
* Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
* CA 95054 USA or visit www.sun.com if you need additional information or 
* have any questions. 
*
* 
* ========== Copyright Header End ============================================
*/
#define N_CPUS  8
#define REGION_MAPPED_SIZE_RTL 8192
#define REGION_SIZE_RTL (128 * 1024)
#define RESULTS_BUF_SIZE_PER_CPU_RTL 1024
#define PRIVATE_DATA_AREA_PER_CPU_RTL 64

#define ALIGN_PAGE_8K .align 8192
#define ALIGN_PAGE_64K .align 65536
#define ALIGN_PAGE_512K .align 524288
#define ALIGN_PAGE_4M .align 4194304
#define USER_PAGE_CUSTOM_MAP

SECTION .MY_HYP_SEC TEXT_VA = 0x1100150000
attr_text {
        Name=.MY_HYP_SEC,
        hypervisor
	}
.text
.global intr0x60_custom_trap
intr0x60_custom_trap:
	ldxa	[%g0] 0x72, %g2;
	ldxa	[%g0] 0x74, %g1;	
	retry;

.global intr0x190_custom_trap
intr0x190_custom_trap:

.global intr0x190_custom_trap
intr0x190_custom_trap:

#ifdef SJM
! programming the JBI - not quite rrugho
!=====================
!setx 0x0000000006040012, %g1, %g2
!setx 0x8503000010, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000100, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000000, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000400, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000108, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000101, %g1, %g2
!setx 0x9800000008, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000408, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000110, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000202, %g1, %g2
!setx 0x9800000010, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000410, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000118, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000303, %g1, %g2
!setx 0x9800000018, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000418, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000120, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000404, %g1, %g2
!setx 0x9800000020, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000420, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000128, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000505, %g1, %g2
!setx 0x9800000028, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000428, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000130, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000606, %g1, %g2
!setx 0x9800000030, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000430, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000138, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000707, %g1, %g2
!setx 0x9800000038, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000438, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000140, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000808, %g1, %g2
!setx 0x9800000040, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000440, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000148, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000909, %g1, %g2
!setx 0x9800000048, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000448, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000150, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000a0a, %g1, %g2
!setx 0x9800000050, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000450, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000158, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000b0b, %g1, %g2
!setx 0x9800000058, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000458, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000160, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000c0c, %g1, %g2
!setx 0x9800000060, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000460, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000168, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000d0d, %g1, %g2
!setx 0x9800000068, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000468, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000170, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000e0e, %g1, %g2
!setx 0x9800000070, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000470, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000003, %g1, %g2
!setx 0x8500000178, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000f0f, %g1, %g2
!setx 0x9800000078, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000478, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x000000000000007f, %g1, %g2
!setx 0x8503000008, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000001010, %g1, %g2
!setx 0x9800000080, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000480, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000001111, %g1, %g2
!setx 0x9800000088, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000488, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9300000c00, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9300000e20, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9300000e28, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9300000e38, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000008, %g1, %g2
!setx 0x8503000018, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x9800000828, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000000, %g1, %g2
!setx 0x8503000028, %g1, %g3
!stx %g2, [%g3]
!!=====================
!setx 0x0000000000000001, %g1, %g2
!setx 0x8503000020, %g1, %g3
!stx %g2, [%g3]
!!=====================

/***********************************************************************
  Disable L2 Cache Visibility Port
 ***********************************************************************/

setx 0x0000000000000000, %g1, %g2
setx 0x9800001800, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800001820, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800001828, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800001830, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800001838, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800001840, %g1, %g3
stx %g2, [%g3]
!=====================

/***********************************************************************
  Disable IOBridge Visibility Ports
 ***********************************************************************/

setx 0x0000000000000000, %g1, %g2
setx 0x9800001000, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002000, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002008, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002100, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002140, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002160, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002180, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x98000021a0, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002148, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002168, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002188, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x98000021a8, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002150, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002170, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x9800002190, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000000000000000, %g1, %g2
setx 0x98000021b0, %g1, %g3
stx %g2, [%g3]
!=====================

/***********************************************************************
 Configure jbi controller
 ***********************************************************************/

setx 0x03fb303e00000001, %g1, %g2
setx 0x8000000000, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x000000007033fe0f, %g1, %g2
setx 0x8000000008, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x0000003fc0000000, %g1, %g2
setx 0x80000100a0, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0x00000000fe0003ff, %g1, %g2
setx 0x8000004100, %g1, %g3
stx %g2, [%g3]
!=====================

/***********************************************************************
 IOSYNC cycles to start sjm
 ***********************************************************************/

setx 0xdeadbeefdeadbeef, %g1, %g2
setx 0xcf00beef00, %g1, %g3
stx %g2, [%g3]
!=====================
setx 0xdeadbeefdeadbeef, %g1, %g2
setx 0xef00beef00, %g1, %g3
stx %g2, [%g3]

!=============================
done;

#else
#ifdef  DC_ON_OFF
	
	and	%i0, 0x1, %i0
	brz	%i0, on
	nop

        mov     0xd, %i0
	ba	finish_dc_on_off
        stxa    %l0, [%g0] 0x45         /* turn D-cache off */
on:        
        mov     0xf, %i0
        stxa    %i0, [%g0] 0x45         /* turn D-cache back on */

finish_dc_on_off:
	done

#else
	stxa	%i0, [%g0] 0x73;	
	done;
#endif
#endif
!============================================================================

#define ENABLE_T0_Fp_exception_ieee_754_0x21
#define ENABLE_T0_Fp_exception_other_0x22
#define ENABLE_T0_Fp_disabled_0x20
#define ENABLE_T0_Illegal_instruction_0x10
#define ENABLE_T1_Illegal_instruction_0x10
#define ENABLE_HT0_Illegal_instruction_0x10
#define ENABLE_HT1_Illegal_instruction_0x10
#define ENABLE_T0_Clean_Window_0x24
#define MAIN_PAGE_NUCLEUS_ALSO
#define MAIN_PAGE_HV_ALSO
#define MAIN_PAGE_VA_IS_RA_ALSO




#define H_T0_Trap_Instruction_0
#define My_T0_Trap_Instruction_0	\
	ta      0x90;			\
	done;

#define H_HT0_HTrap_Instruction_0 intr0x190_custom_trap
#ifdef SJM
#define My_HT0_HTrap_Instruction_0 \
	setx intr0x190_custom_trap, %g1, %g2; \
	jmp %g2; nop
#else
#define My_HT0_HTrap_Instruction_0      \
	stxa    %i0, [%g0] 0x73;        \
	done;
#endif

#define H_HT0_Interrupt_0x60 intr0x60_custom_trap
#define My_HT0_Interrupt_0x60   \
        ldxa    [%g0] 0x72, %g2;        \
        ldxa    [%g0] 0x74, %g1;        \
        retry;
#define H_HT0_Trap_Instruction_5
#define My_HT0_Trap_Instruction_5   \
        ldxa [%g0 + %g0]0x45, %g1;     \
		membar #Sync;  \
        xor  %g1, 19, %g1;   \
        stxa %g1, [%g0 + %g0]0x45;  \
		wrpr %g0, 0x200, %pstate;
        done;

#ifndef THREAD_COUNT
#define THREAD_COUNT 8
#endif

#ifndef THREAD_STRIDE
#define THREAD_STRIDE 1
#endif
#define SKIP_TRAPCHECK
! force ta T_RD_THID to return thread%8 (aka 0-7)
#define PORTABLE_CORE
#include "hboot.s"


!try later:
!	stxa    %l6, [$8] (0x22 | ($2 & 0x9)) ! ASI is randomly set
!===========
define(BST_INIT, `
	add     $6, ($7 & 0xfff0), $8	! 4-byte align the offset
	stxa    %l6, [$8] 0x22		! ASI is randomly set
')

!try later:
!ldda    [$8] (0x22 | ($2 & 0x9)), %l6 ! ASI is randomly set
!===========
define(BLD_INIT, `
        add     $6, ($7 & 0xfff0), $8 	! 4-byte align the offset
        ldda    [$8] 0x22, %l6 		! ASI is randomly set
')

define(CHECK_PROC_ID,`
check_cpu_id: 

	wr	%g0, 0x4, %fprs         /* make sure fef is 1 */
	mov 	THREAD_STRIDE, %l2
	th_fork(thread,%l0)

thread_0:
#ifdef SJM
	ta 	0x30
#endif
	mov 	0, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
	
thread_1:
	mov 	1, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_2:
	mov 	2, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_3:
	mov 	3, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_4:
	mov 	4, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_5:
	mov 	5, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_6:
	mov 	6, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_7:
	mov 	7, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_8:
	mov 	8, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_9:
	mov 	9, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_10:
	mov 	10, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_11:
	mov 	11, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_12:
	mov 	12, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_13:
	mov 	13, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_14:
	mov 	14, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_15:
	mov 	15, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_16:
	mov 	16, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_17:
	mov 	17, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_18:
	mov 	18, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_19:
	mov 	19, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_20:
	mov 	20, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_21:
	mov 	21, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_22:
	mov 	22, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_23:
	mov 	23, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_24:
	mov 	24, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_25:
	mov 	25, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_26:
	mov 	26, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
	
thread_27:
	mov 	27, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_28:
	mov 	28, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_29:
	mov 	29, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_30:
	mov 	30, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop
	
thread_31:
	mov 	31, %g1 
        udivx 	%g1, %l2, %g1
	ba	entry_point; nop

thread_32:
    mov     32, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_33:
    mov     33, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_34:
    mov     34, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_35:
    mov     35, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_36:
    mov     36, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_37:
    mov     37, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_38:
    mov     38, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_39:
    mov     39, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_40:
    mov     40, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_41:
    mov     41, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_42:
    mov     42, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_43:
    mov     43, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_44:
    mov     44, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_45:
    mov     45, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_46:
    mov     46, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_47:
    mov     47, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_48:
    mov     48, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_49:
    mov     49, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_50:
    mov     50, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_51:
    mov     51, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_52:
    mov     52, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_53:
    mov     53, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_54:
    mov     54, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_55:
    mov     55, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_56:
    mov     56, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_57:
    mov     57, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_58:
    mov     58, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_59:
    mov     59, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_60:
    mov     60, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_61:
    mov     61, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_62:
    mov     62, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

thread_63:
    mov     63, %g1
        udivx   %g1, %l2, %g1
    ba  entry_point; nop

entry_point:
#ifdef RTGPRIV
	ta	T_CHANGE_PRIV
#endif
	
')
! --- Common Macro Definitions ---
!
! macros will be instantiated with these arguments
! macro_name(P#, rand#, my_cpu#, PA_val, VA_val, VA_reg, VA_offset, \
!            tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3)
!
! P# - Pid, just in case one needs unique number
! rand# - random number
! my_cpu# - CPU id
! PA_val - shared memory physisal address value
! VA_val - shared memory virtual address value
! VA_reg - register containing VA region base address
! VA_offset - VA_reg + VA_offset will give correct VA address value
! tmp_reg0-tmp_reg3 - integer registers for arbitrary use within the macro
!                     tmp_reg0 & tmp_reg1 are even-odd register pair
!
! VA_val may be incorrect since VA will be determined at compile time by assembler
! and may not available at diag generation time, but VA_reg+VA_offset is valid
!
! ex. SAMPLE(1, 1249, 0, 0x43400100, 0x100, %i1, 0x100, %l6, %l7, %o5, %l3)
!
! Sample macro 1:
!  load unsigned byte from the given shared addr into tmp_reg1
!  the given shared addr is 4-byte aligned and we will randomly
!  pick one byte from the 4 bytes.
! 
! define(SAMPLE, `
!        ldub   [$6+$7+($2 mod 4)], $8
! ')
!
! Can also use C-like macro definition format.
!
! Sample macro 2:
!   issue an "ldda" instruction to the randomly picked shared location
!   (aligned it to 16-byte boundary first) with a random ASI value among
!   0x22, 0x23, 0x2a, and 0x2b (utilizing the provided "rand" value).
!
! #define BLD_INIT(Pid, rand, my_cpu, PA_val, \
!                 VA_val, VA_reg, VA_offset, \
!                 tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
!   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
!   ldda [tmp_reg2] (0x22 | (rand & 0x9)), tmp_reg0;
!
! ---

! Macro NOPTRAIN
! Train of NOPs

#define NOPTRAIN(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
		nop;\
		nop;\
		nop;\
		nop;


! Macro STTRAIN4
! Train of total 4 of UW stores.
! Note: doesn't use shared addresses

#define STTRAIN4(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        set 5120, tmp_reg1; \
        add %i0, tmp_reg1, tmp_reg1; \
        set rand, tmp_reg2; \
        stw tmp_reg2, [tmp_reg1]; \
        stw tmp_reg2, [tmp_reg1+4]; \
        stw tmp_reg2, [tmp_reg1+8]; \
        stw tmp_reg2, [tmp_reg1+16];

! Macro STTRAIN8
! Train of total 8 of UW stores 

#define STTRAIN8(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        set 5120, tmp_reg1; \
        add %i0, tmp_reg1, tmp_reg1; \
        set rand, tmp_reg2; \
        add tmp_reg2, rand % 4096, tmp_reg3; \
        stw tmp_reg2, [tmp_reg1]; \
        stw tmp_reg2, [tmp_reg1+4]; \
        stw tmp_reg2, [tmp_reg1+8]; \
        stw tmp_reg2, [tmp_reg1+12]; \
        stw tmp_reg3, [tmp_reg1+4]; \
        stw tmp_reg3, [tmp_reg1+12]; \
        stw tmp_reg3, [tmp_reg1]; \
        stw tmp_reg3, [tmp_reg1+8];
 
! Macro LDTRAIN4
! Train of total 4 of UW Loads
! Note the values of those loads inside the macro will not be analized,
! even though the accesses are [possibly] made to the shared locations

#define LDTRAIN4(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        ld [%i0], tmp_reg1; \
        ld [%i1+4], tmp_reg1; \
        ld [%i2+8], tmp_reg1; \
        ld [%i3+12], tmp_reg1;

! Macro LDTRAIN8

#define LDTRAIN8(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        ld [%i3], tmp_reg1; \
        ld [%i2+4], tmp_reg1; \
        ld [%i1+8], tmp_reg2; \
        ld [%i0+12], tmp_reg2; \
        ld [%i3+4], tmp_reg3; \
        ld [%i2], tmp_reg3; \
        ld [%i1+12], tmp_reg4; \
        ld [%i0+8], tmp_reg4;

! Macro PREFETCHTRAIN4

#define PREFETCHTRAIN4(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        prefetch [%i0+4], 0; \
        prefetch [%i1+12], 0; \
        prefetch [%i2+8], 0; \
        prefetch [%i3], 0;

! Macro PREFETCHTRAIN8

#define PREFETCHTRAIN8(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        prefetch [%i3], 0; \
        prefetch [%i2+4], 0; \
        prefetch [%i1+8], 0; \
        prefetch [%i0+12], 0; \
        prefetch [%i3+4], 1; \
        prefetch [%i2], 1; \
        prefetch [%i1+12], 1; \
        prefetch [%i0+8], 1;

! Macro CASTRAIN4
! This is an interesting macro that will probably create the write congessions
! access to the shared locations (offsets from bases have to be adjusted)
! the values of the locations are not changed, so it should not affect analysis

#define CASTRAIN4(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        set 128, tmp_reg1;\
        add %i0, tmp_reg1, tmp_reg1;\
        set 256, tmp_reg2;\
        add %i1, tmp_reg2, tmp_reg2;\
        ld [tmp_reg1], tmp_reg3;\
        ld [tmp_reg2], tmp_reg4;\
        cas [tmp_reg1], tmp_reg3, tmp_reg3;\
        cas [tmp_reg1], tmp_reg3, tmp_reg3;\
        cas [tmp_reg2], tmp_reg4, tmp_reg4;\
        cas [tmp_reg2], tmp_reg4, tmp_reg4;

! CASTRAIN8
! yet another flavor of cas train theme that actually always use shared locations
! given by the specified instance arguments for the first 4 cases
! and then follows then with another 4 to a randomized offset

#define CASTRAIN8(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
  add VA_reg, VA_offset, tmp_reg1;\
  add VA_reg, (rand&0x0ffc), tmp_reg2;\
  ld [tmp_reg1], tmp_reg3;\
  cas [tmp_reg1], tmp_reg3, tmp_reg3;\
  cas [tmp_reg1], tmp_reg3, tmp_reg3;\
  cas [tmp_reg1], tmp_reg3, tmp_reg3;\
  cas [tmp_reg1], tmp_reg3, tmp_reg3;\
  ld  [tmp_reg2], tmp_reg4;\
  cas [tmp_reg2], tmp_reg4, tmp_reg4;\
  cas [tmp_reg2], tmp_reg4, tmp_reg4;\
  cas [tmp_reg2], tmp_reg4, tmp_reg4;\
  cas [tmp_reg2], tmp_reg4, tmp_reg4;

! Macro ST_BR_ANLD_CAS
! this is meant to reproduce NG6025
! the scenario is the anulled load in the delay slot of the branch is 
! not wiped completely, which creates false RAW hazard, and the following cas
! is getting screwed
! WARNING: there is a store to the %i0+128, which can potentially be a shared 
! location. When using this macro, make sure that the vicinity of offset 128 in
! region 0 is not used

#define ST_BR_ANLD_CAS(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        set 128, tmp_reg1;\
        add %i0, tmp_reg1, tmp_reg1;\
        set rand, tmp_reg3;\
        stw tmp_reg3, [tmp_reg1];\
        ba,a 1;\
        cas [tmp_reg1], tmp_reg3, tmp_reg4;

#define ASI_BLOCK(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
        setx 0x060, tmp_reg1, tmp_reg2; \
        stxa %g0, [tmp_reg2] 0x38;

! Macro SELF_MODIFY
! do a read-unmodify-write at address pc + random[0..0x80]
! this is targetted to catch bugs due to sharing/modification
! of data between D$ and I$. (e.g. Niagara1, Bug #6372)
! 1. 0x80 chosen arbitrarily, is another number better
! 2. should we include an iflush ?
! 3. WT.MACRO.SELF_MODIFY should be given a small non-0 weight by default
! 4. Possible variation: a macro which only does a load
!    from the instruction stream instead of a load-store. 
!    (Niagara1 bug #6372 did not involve stores to instruction
!    stream, just sharing of unmodified data between I$ and D$.)
! 5. this macro needs text segment to be writable. On system runs,
!    this is achieved by using a special map file for the linker.
! - sgh, 25 may 04

#define SELF_MODIFY(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
	rd    %pc, tmp_reg0; \
	ld    [ tmp_reg0 + (rand & 0x7c)], tmp_reg1; \
	st    tmp_reg1, [ tmp_reg0 + (rand & 0x7c)] 

#define ASI_BLOCK(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
        setx 0x060, tmp_reg1, tmp_reg2; \
        stxa %g0, [tmp_reg2] 0x38;


#define ASI_BLOCK_VA_HOLE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
        setx 0x8559e06ff33bad10, tmp_reg1, tmp_reg2; \
        stxa %g0, [tmp_reg2] 0x80;
	
#define PREFETCH_VA_HOLE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        setx 0x8559e06ff33bad10, tmp_reg1, tmp_reg2; \
        prefetch [tmp_reg2], 0; \
        prefetch [tmp_reg2+4], 1; \
        prefetch [tmp_reg2+8], 2; \
        prefetch [tmp_reg2+12], 3; \
        prefetch [tmp_reg2+4], 4; \
        prefetch [tmp_reg2], 5; \
        prefetch [tmp_reg2+12], 6; \
        prefetch [tmp_reg2+8], 7;

#define LOAD_VA_HOLE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        setx 0x8559e06ff33bad10, tmp_reg1, tmp_reg2; \
        ld [tmp_reg2], tmp_reg1; \
        ld [tmp_reg2+4], tmp_reg1; \
        ld [tmp_reg2+8], tmp_reg1; \
        ld [tmp_reg2+12], tmp_reg1;



#define STORE_VA_HOLE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        setx 0x8559e06ff33bad10, tmp_reg2, tmp_reg1; \
        set rand, tmp_reg2; \
        add tmp_reg2, rand % 4096, tmp_reg3; \
        stw tmp_reg2, [tmp_reg1]; \
        stw tmp_reg2, [tmp_reg1+4]; \
        stw tmp_reg2, [tmp_reg1+8]; \
        stw tmp_reg2, [tmp_reg1+12]; \
        stw tmp_reg3, [tmp_reg1+4]; \
        stw tmp_reg3, [tmp_reg1+12]; \
        stw tmp_reg3, [tmp_reg1]; \
        stw tmp_reg3, [tmp_reg1+8];	

#define CAS_VA_HOLE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        setx 0x8559e06ff33bad10, tmp_reg3, tmp_reg1; \
        setx 0x8559e06ff33bad10, tmp_reg3, tmp_reg2; \
        add tmp_reg2, rand % 4096, tmp_reg3; \
        cas [tmp_reg1], tmp_reg3, tmp_reg3;\
        cas [tmp_reg2], tmp_reg4, tmp_reg4;

#define IDC_FLIP(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        ta 0xb5; \
		ta T_CHANGE_NONHPRIV;

! this macro produce ldda/stda to 
! ASI_BLOCK_AS_IF_USER_PRIMARY            0x16
! ASI_BLOCK_AS_IF_USER_SECONDARY          0x17
! ASI_BLOCK_AS_IF_USER_PRIMARY_LITTLE     0x1e
! ASI_BLOCK_AS_IF_USER_SECONDARY_LITTLE   0x1f
!! hardcode for now since illegal asi not working in RS
#define BLD_16(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   ldda [tmp_reg3]0x16, tmp_reg0;
#define BLD_17(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   ldda [tmp_reg3]0x17, tmp_reg0;
#define BLD_1e(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   ldda [tmp_reg3]0x1e, tmp_reg0;
#define BLD_1f(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   ldda [tmp_reg3]0x1f, tmp_reg0;

#define BST_16(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   stda tmp_reg0, [tmp_reg3]0x16;
#define BST_17(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   stda tmp_reg0, [tmp_reg3]0x17;
#define BST_1e(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   stda tmp_reg0, [tmp_reg3]0x1e;
#define BST_1f(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ta      T_CHANGE_PRIV;\
   ta      T_CHANGE_HPRIV;\
   stda tmp_reg0, [tmp_reg3]0x1f;

#define BLD_INIT_2(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ldda [tmp_reg3] (0x27 | (rand & 0xf)), tmp_reg0;
#define BST_INIT_2(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   stda tmp_reg0, [tmp_reg3] (0x27 | (rand & 0xf));
#define BLD_INIT_E(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   ldda [tmp_reg3] (0xe2 | (rand & 0xb)), tmp_reg0;
#define BST_INIT_E(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0xfff0), tmp_reg3; \
   stda tmp_reg0, [tmp_reg3] (0xe2 | (rand & 0xb));
#define PREFETCHA(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg0, tmp_reg1, tmp_reg2, tmp_reg3) \
   add  VA_reg, (VA_offset & 0x00ff), tmp_reg3; \
   prefetch [%i1], (rand & 0x1f); \
   prefetch [%i1 + ((rand >> 5) & 0x1f)], ((rand >> 5) & 0x1f); \
   prefetcha [%i1]((rand >> 5) & 0x1f), (0x0 | ((rand >> 5) & 0x1f));
#define STBYTE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        add  VA_reg, (VA_offset & 0xff00), tmp_reg1; \
        set rand, tmp_reg2; \
        stb tmp_reg2, [tmp_reg1+(rand & 0x5f)];
#define LDBYTE(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        add  VA_reg, (VA_offset & 0xff00), tmp_reg1; \
        ldub [tmp_reg1+(rand & 0x5f)], tmp_reg2;
#define STBYTE1(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        add  VA_reg, (VA_offset & 0xff00), tmp_reg1;\
		set 5200, tmp_reg2; \
		add tmp_reg2, tmp_reg1, tmp_reg1; \
		set rand, tmp_reg2; \
		stb tmp_reg2, [tmp_reg1+(rand & 0x5f)];
#define STINT(Pid, rand, my_cpu, PA_val, VA_val, VA_reg, VA_offset, tmp_reg1, tmp_reg2, tmp_reg3, tmp_reg4) \
        set rand, tmp_reg1; \
        stha  tmp_reg1,[%g0+%g0](0x73); \
        stda tmp_reg1, [%g0+%g0](0x73);
define(EN_INTERRUPTS,`
nop
')

define(DIS_INTERRUPTS,`
nop
')

define(CHECK_DISPATCH_STATUS,`
nop
')

define(CHECK_RECEIVE_STATUS,`
nop
')

define(WRITE_INTR_DATA_REGS,`
nop
')

define(INTR_SET_DISPATCH_VECTOR,`
add      %g0, $3, $4
sllx     $4, 8,  $5      ! DEST ID
add      %g0, $2, $4      ! VECTOR NUMBER
or       $5, $4, $5
mov      %i0, $4
mov      $5, %i0
ta       0x30
mov      $4, %i0
')

define(DSPCH_INTERRUPT,`
nop
')

#define REGION0_ALIAS3_O 0x0
#define REGION1_ALIAS3_O 0x20000
#define REGION2_ALIAS3_O 0x40000
#define REGION3_ALIAS3_O 0x60000
#define REGION4_ALIAS3_O 0x80000
#define REGION5_ALIAS3_O 0xa0000
#define REGION6_ALIAS3_O 0xc0000
#define REGION7_ALIAS3_O 0xe0000
#define REPLACEMENT0_ALIAS3_O 0x100000
#define REGION0_ALIAS2_O 0x200000
#define REGION1_ALIAS2_O 0x220000
#define REGION2_ALIAS2_O 0x240000
#define REGION3_ALIAS2_O 0x260000
#define REGION4_ALIAS2_O 0x280000
#define REGION5_ALIAS2_O 0x2a0000
#define REGION6_ALIAS2_O 0x2c0000
#define REGION7_ALIAS2_O 0x2e0000
#define REPLACEMENT0_ALIAS2_O 0x300000
#define REGION0_ALIAS1_O 0x400000
#define REGION1_ALIAS1_O 0x420000
#define REGION2_ALIAS1_O 0x440000
#define REGION3_ALIAS1_O 0x460000
#define REGION4_ALIAS1_O 0x480000
#define REGION5_ALIAS1_O 0x4a0000
#define REGION6_ALIAS1_O 0x4c0000
#define REGION7_ALIAS1_O 0x4e0000
#define REPLACEMENT0_ALIAS1_O 0x500000
#define REGION0_ALIAS0_O 0x600000
#define REGION1_ALIAS0_O 0x620000
#define REGION2_ALIAS0_O 0x640000
#define REGION3_ALIAS0_O 0x660000
#define REGION4_ALIAS0_O 0x680000
#define REGION5_ALIAS0_O 0x6a0000
#define REGION6_ALIAS0_O 0x6c0000
#define REGION7_ALIAS0_O 0x6e0000
#define REPLACEMENT0_ALIAS0_O 0x700000


#define USER_PAGE_CUSTOM_MAP
SECTION .MAIN TEXT_VA=0x1000000
attr_text {
	Name = .MAIN,
	VA=0x1000000,
	RA=0x130000000,
	PA=ra2pa(0x130000000,0),
part_0_ctx_nonzero_tsb_config_1,
 TTE_EP=1,
	TTE_G=1,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=0
	}

attr_text {
	Name = .MAIN,
	VA=0x1000000,
	RA=0x130000000,
	PA=ra2pa(0x130000000,0),
part_0_ctx_nonzero_tsb_config_0,
 TTE_EP=1,
	TTE_G=1,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

SECTION tsotool_unshared_data DATA_VA=0x21400000
attr_data {
	Name = tsotool_unshared_data,
	VA=0x21400000,
	RA=0x21400000,
	PA=ra2pa(0x21400000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=1,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region0_alias3_4 DATA_VA=0x6000000
attr_data {
	Name = region0_alias3_4,
	VA=0x6000000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias3_4 DATA_VA=0x6020000
attr_data {
	Name = region1_alias3_4,
	VA=0x6020000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias3_4 DATA_VA=0x6040000
attr_data {
	Name = region2_alias3_4,
	VA=0x6040000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias3_4 DATA_VA=0x6060000
attr_data {
	Name = region3_alias3_4,
	VA=0x6060000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias3_4 DATA_VA=0x6080000
attr_data {
	Name = region4_alias3_4,
	VA=0x6080000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias3_4 DATA_VA=0x60a0000
attr_data {
	Name = region5_alias3_4,
	VA=0x60a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias3_4 DATA_VA=0x60c0000
attr_data {
	Name = region6_alias3_4,
	VA=0x60c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias3_4 DATA_VA=0x60e0000
attr_data {
	Name = region7_alias3_4,
	VA=0x60e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias3_4 DATA_VA=0x6100000
attr_data {
	Name = replacement0_alias3_4,
	VA=0x6100000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias3_4 DATA_VA=0x6120000
attr_data {
	Name = replacement1_alias3_4,
	VA=0x6120000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias3_4 DATA_VA=0x6140000
attr_data {
	Name = replacement2_alias3_4,
	VA=0x6140000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias3_4 DATA_VA=0x6160000
attr_data {
	Name = replacement3_alias3_4,
	VA=0x6160000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias3_4 DATA_VA=0x6180000
attr_data {
	Name = replacement4_alias3_4,
	VA=0x6180000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias3_4 DATA_VA=0x61a0000
attr_data {
	Name = replacement5_alias3_4,
	VA=0x61a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias3_4 DATA_VA=0x61c0000
attr_data {
	Name = replacement6_alias3_4,
	VA=0x61c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias3_4 DATA_VA=0x61e0000
attr_data {
	Name = replacement7_alias3_4,
	VA=0x61e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias2_4 DATA_VA=0x6200000
attr_data {
	Name = region0_alias2_4,
	VA=0x6200000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias2_4 DATA_VA=0x6220000
attr_data {
	Name = region1_alias2_4,
	VA=0x6220000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias2_4 DATA_VA=0x6240000
attr_data {
	Name = region2_alias2_4,
	VA=0x6240000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias2_4 DATA_VA=0x6260000
attr_data {
	Name = region3_alias2_4,
	VA=0x6260000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias2_4 DATA_VA=0x6280000
attr_data {
	Name = region4_alias2_4,
	VA=0x6280000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias2_4 DATA_VA=0x62a0000
attr_data {
	Name = region5_alias2_4,
	VA=0x62a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias2_4 DATA_VA=0x62c0000
attr_data {
	Name = region6_alias2_4,
	VA=0x62c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias2_4 DATA_VA=0x62e0000
attr_data {
	Name = region7_alias2_4,
	VA=0x62e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias2_4 DATA_VA=0x6300000
attr_data {
	Name = replacement0_alias2_4,
	VA=0x6300000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias2_4 DATA_VA=0x6320000
attr_data {
	Name = replacement1_alias2_4,
	VA=0x6320000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias2_4 DATA_VA=0x6340000
attr_data {
	Name = replacement2_alias2_4,
	VA=0x6340000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias2_4 DATA_VA=0x6360000
attr_data {
	Name = replacement3_alias2_4,
	VA=0x6360000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias2_4 DATA_VA=0x6380000
attr_data {
	Name = replacement4_alias2_4,
	VA=0x6380000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias2_4 DATA_VA=0x63a0000
attr_data {
	Name = replacement5_alias2_4,
	VA=0x63a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias2_4 DATA_VA=0x63c0000
attr_data {
	Name = replacement6_alias2_4,
	VA=0x63c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias2_4 DATA_VA=0x63e0000
attr_data {
	Name = replacement7_alias2_4,
	VA=0x63e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias1_4 DATA_VA=0x6400000
attr_data {
	Name = region0_alias1_4,
	VA=0x6400000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias1_4 DATA_VA=0x6420000
attr_data {
	Name = region1_alias1_4,
	VA=0x6420000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias1_4 DATA_VA=0x6440000
attr_data {
	Name = region2_alias1_4,
	VA=0x6440000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias1_4 DATA_VA=0x6460000
attr_data {
	Name = region3_alias1_4,
	VA=0x6460000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias1_4 DATA_VA=0x6480000
attr_data {
	Name = region4_alias1_4,
	VA=0x6480000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias1_4 DATA_VA=0x64a0000
attr_data {
	Name = region5_alias1_4,
	VA=0x64a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias1_4 DATA_VA=0x64c0000
attr_data {
	Name = region6_alias1_4,
	VA=0x64c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias1_4 DATA_VA=0x64e0000
attr_data {
	Name = region7_alias1_4,
	VA=0x64e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias1_4 DATA_VA=0x6500000
attr_data {
	Name = replacement0_alias1_4,
	VA=0x6500000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias1_4 DATA_VA=0x6520000
attr_data {
	Name = replacement1_alias1_4,
	VA=0x6520000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias1_4 DATA_VA=0x6540000
attr_data {
	Name = replacement2_alias1_4,
	VA=0x6540000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias1_4 DATA_VA=0x6560000
attr_data {
	Name = replacement3_alias1_4,
	VA=0x6560000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias1_4 DATA_VA=0x6580000
attr_data {
	Name = replacement4_alias1_4,
	VA=0x6580000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias1_4 DATA_VA=0x65a0000
attr_data {
	Name = replacement5_alias1_4,
	VA=0x65a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias1_4 DATA_VA=0x65c0000
attr_data {
	Name = replacement6_alias1_4,
	VA=0x65c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias1_4 DATA_VA=0x65e0000
attr_data {
	Name = replacement7_alias1_4,
	VA=0x65e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias0 DATA_VA=0x6600000
attr_data {
	Name = region0_alias0,
	VA=0x6600000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region1_alias0 DATA_VA=0x6620000
attr_data {
	Name = region1_alias0,
	VA=0x6620000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region2_alias0 DATA_VA=0x6640000
attr_data {
	Name = region2_alias0,
	VA=0x6640000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region3_alias0 DATA_VA=0x6660000
attr_data {
	Name = region3_alias0,
	VA=0x6660000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region4_alias0 DATA_VA=0x6680000
attr_data {
	Name = region4_alias0,
	VA=0x6680000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region5_alias0 DATA_VA=0x66a0000
attr_data {
	Name = region5_alias0,
	VA=0x66a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region6_alias0 DATA_VA=0x66c0000
attr_data {
	Name = region6_alias0,
	VA=0x66c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION region7_alias0 DATA_VA=0x66e0000
attr_data {
	Name = region7_alias0,
	VA=0x66e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement0_alias0 DATA_VA=0x6700000
attr_data {
	Name = replacement0_alias0,
	VA=0x6700000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement1_alias0 DATA_VA=0x6720000
attr_data {
	Name = replacement1_alias0,
	VA=0x6720000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement2_alias0 DATA_VA=0x6740000
attr_data {
	Name = replacement2_alias0,
	VA=0x6740000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement3_alias0 DATA_VA=0x6760000
attr_data {
	Name = replacement3_alias0,
	VA=0x6760000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement4_alias0 DATA_VA=0x6780000
attr_data {
	Name = replacement4_alias0,
	VA=0x6780000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement5_alias0 DATA_VA=0x67a0000
attr_data {
	Name = replacement5_alias0,
	VA=0x67a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement6_alias0 DATA_VA=0x67c0000
attr_data {
	Name = replacement6_alias0,
	VA=0x67c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION replacement7_alias0 DATA_VA=0x67e0000
attr_data {
	Name = replacement7_alias0,
	VA=0x67e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1
	}

SECTION non_fault_area_4 DATA_VA=0x0
attr_data {
	Name = non_fault_area_4,
	VA=0x0,
	RA=0x47002000,
	PA=ra2pa(0x47002000,0),
	part_0_ctx_nonzero_tsb_config_0,
	TTE_G=0,
	TTE_Context=PCONTEXT,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=1,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=1,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias3_0 DATA_VA=0x6000000
attr_data {
	Name = region0_alias3_0,
	VA=0x6000000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias3_0 DATA_VA=0x6020000
attr_data {
	Name = region1_alias3_0,
	VA=0x6020000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias3_0 DATA_VA=0x6040000
attr_data {
	Name = region2_alias3_0,
	VA=0x6040000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias3_0 DATA_VA=0x6060000
attr_data {
	Name = region3_alias3_0,
	VA=0x6060000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias3_0 DATA_VA=0x6080000
attr_data {
	Name = region4_alias3_0,
	VA=0x6080000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias3_0 DATA_VA=0x60a0000
attr_data {
	Name = region5_alias3_0,
	VA=0x60a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias3_0 DATA_VA=0x60c0000
attr_data {
	Name = region6_alias3_0,
	VA=0x60c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias3_0 DATA_VA=0x60e0000
attr_data {
	Name = region7_alias3_0,
	VA=0x60e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias3_0 DATA_VA=0x6100000
attr_data {
	Name = replacement0_alias3_0,
	VA=0x6100000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias3_0 DATA_VA=0x6120000
attr_data {
	Name = replacement1_alias3_0,
	VA=0x6120000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias3_0 DATA_VA=0x6140000
attr_data {
	Name = replacement2_alias3_0,
	VA=0x6140000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias3_0 DATA_VA=0x6160000
attr_data {
	Name = replacement3_alias3_0,
	VA=0x6160000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias3_0 DATA_VA=0x6180000
attr_data {
	Name = replacement4_alias3_0,
	VA=0x6180000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias3_0 DATA_VA=0x61a0000
attr_data {
	Name = replacement5_alias3_0,
	VA=0x61a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias3_0 DATA_VA=0x61c0000
attr_data {
	Name = replacement6_alias3_0,
	VA=0x61c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias3_0 DATA_VA=0x61e0000
attr_data {
	Name = replacement7_alias3_0,
	VA=0x61e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias2_0 DATA_VA=0x6200000
attr_data {
	Name = region0_alias2_0,
	VA=0x6200000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias2_0 DATA_VA=0x6220000
attr_data {
	Name = region1_alias2_0,
	VA=0x6220000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias2_0 DATA_VA=0x6240000
attr_data {
	Name = region2_alias2_0,
	VA=0x6240000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias2_0 DATA_VA=0x6260000
attr_data {
	Name = region3_alias2_0,
	VA=0x6260000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias2_0 DATA_VA=0x6280000
attr_data {
	Name = region4_alias2_0,
	VA=0x6280000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias2_0 DATA_VA=0x62a0000
attr_data {
	Name = region5_alias2_0,
	VA=0x62a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias2_0 DATA_VA=0x62c0000
attr_data {
	Name = region6_alias2_0,
	VA=0x62c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias2_0 DATA_VA=0x62e0000
attr_data {
	Name = region7_alias2_0,
	VA=0x62e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias2_0 DATA_VA=0x6300000
attr_data {
	Name = replacement0_alias2_0,
	VA=0x6300000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias2_0 DATA_VA=0x6320000
attr_data {
	Name = replacement1_alias2_0,
	VA=0x6320000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias2_0 DATA_VA=0x6340000
attr_data {
	Name = replacement2_alias2_0,
	VA=0x6340000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias2_0 DATA_VA=0x6360000
attr_data {
	Name = replacement3_alias2_0,
	VA=0x6360000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias2_0 DATA_VA=0x6380000
attr_data {
	Name = replacement4_alias2_0,
	VA=0x6380000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias2_0 DATA_VA=0x63a0000
attr_data {
	Name = replacement5_alias2_0,
	VA=0x63a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias2_0 DATA_VA=0x63c0000
attr_data {
	Name = replacement6_alias2_0,
	VA=0x63c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias2_0 DATA_VA=0x63e0000
attr_data {
	Name = replacement7_alias2_0,
	VA=0x63e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias1_0 DATA_VA=0x6400000
attr_data {
	Name = region0_alias1_0,
	VA=0x6400000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias1_0 DATA_VA=0x6420000
attr_data {
	Name = region1_alias1_0,
	VA=0x6420000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias1_0 DATA_VA=0x6440000
attr_data {
	Name = region2_alias1_0,
	VA=0x6440000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias1_0 DATA_VA=0x6460000
attr_data {
	Name = region3_alias1_0,
	VA=0x6460000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias1_0 DATA_VA=0x6480000
attr_data {
	Name = region4_alias1_0,
	VA=0x6480000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias1_0 DATA_VA=0x64a0000
attr_data {
	Name = region5_alias1_0,
	VA=0x64a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias1_0 DATA_VA=0x64c0000
attr_data {
	Name = region6_alias1_0,
	VA=0x64c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias1_0 DATA_VA=0x64e0000
attr_data {
	Name = region7_alias1_0,
	VA=0x64e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias1_0 DATA_VA=0x6500000
attr_data {
	Name = replacement0_alias1_0,
	VA=0x6500000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias1_0 DATA_VA=0x6520000
attr_data {
	Name = replacement1_alias1_0,
	VA=0x6520000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias1_0 DATA_VA=0x6540000
attr_data {
	Name = replacement2_alias1_0,
	VA=0x6540000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias1_0 DATA_VA=0x6560000
attr_data {
	Name = replacement3_alias1_0,
	VA=0x6560000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias1_0 DATA_VA=0x6580000
attr_data {
	Name = replacement4_alias1_0,
	VA=0x6580000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias1_0 DATA_VA=0x65a0000
attr_data {
	Name = replacement5_alias1_0,
	VA=0x65a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias1_0 DATA_VA=0x65c0000
attr_data {
	Name = replacement6_alias1_0,
	VA=0x65c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias1_0 DATA_VA=0x65e0000
attr_data {
	Name = replacement7_alias1_0,
	VA=0x65e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region0_alias0_0 DATA_VA=0x6600000
attr_data {
	Name = region0_alias0_0,
	VA=0x6600000,
	RA=0x43000000,
	PA=ra2pa(0x43000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=0,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region1_alias0_0 DATA_VA=0x6620000
attr_data {
	Name = region1_alias0_0,
	VA=0x6620000,
	RA=0x43800000,
	PA=ra2pa(0x43800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region2_alias0_0 DATA_VA=0x6640000
attr_data {
	Name = region2_alias0_0,
	VA=0x6640000,
	RA=0x44000000,
	PA=ra2pa(0x44000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region3_alias0_0 DATA_VA=0x6660000
attr_data {
	Name = region3_alias0_0,
	VA=0x6660000,
	RA=0x44800000,
	PA=ra2pa(0x44800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region4_alias0_0 DATA_VA=0x6680000
attr_data {
	Name = region4_alias0_0,
	VA=0x6680000,
	RA=0x45000000,
	PA=ra2pa(0x45000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region5_alias0_0 DATA_VA=0x66a0000
attr_data {
	Name = region5_alias0_0,
	VA=0x66a0000,
	RA=0x45800000,
	PA=ra2pa(0x45800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region6_alias0_0 DATA_VA=0x66c0000
attr_data {
	Name = region6_alias0_0,
	VA=0x66c0000,
	RA=0x46000000,
	PA=ra2pa(0x46000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION region7_alias0_0 DATA_VA=0x66e0000
attr_data {
	Name = region7_alias0_0,
	VA=0x66e0000,
	RA=0x46800000,
	PA=ra2pa(0x46800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement0_alias0_0 DATA_VA=0x6700000
attr_data {
	Name = replacement0_alias0_0,
	VA=0x6700000,
	RA=0x47000000,
	PA=ra2pa(0x47000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement1_alias0_0 DATA_VA=0x6720000
attr_data {
	Name = replacement1_alias0_0,
	VA=0x6720000,
	RA=0x47800000,
	PA=ra2pa(0x47800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement2_alias0_0 DATA_VA=0x6740000
attr_data {
	Name = replacement2_alias0_0,
	VA=0x6740000,
	RA=0x48000000,
	PA=ra2pa(0x48000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement3_alias0_0 DATA_VA=0x6760000
attr_data {
	Name = replacement3_alias0_0,
	VA=0x6760000,
	RA=0x48800000,
	PA=ra2pa(0x48800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement4_alias0_0 DATA_VA=0x6780000
attr_data {
	Name = replacement4_alias0_0,
	VA=0x6780000,
	RA=0x49000000,
	PA=ra2pa(0x49000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement5_alias0_0 DATA_VA=0x67a0000
attr_data {
	Name = replacement5_alias0_0,
	VA=0x67a0000,
	RA=0x49800000,
	PA=ra2pa(0x49800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement6_alias0_0 DATA_VA=0x67c0000
attr_data {
	Name = replacement6_alias0_0,
	VA=0x67c0000,
	RA=0x4a000000,
	PA=ra2pa(0x4a000000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024

SECTION replacement7_alias0_0 DATA_VA=0x67e0000
attr_data {
	Name = replacement7_alias0_0,
	VA=0x67e0000,
	RA=0x4a800000,
	PA=ra2pa(0x4a800000,0),
part_0_ctx_zero_tsb_config_2,
	TTE_G=0,
	TTE_Context=0,
	TTE_V=1,
	TTE_Size=0,
	TTE_SIZE_PTR=0,
	TTE_NFO=0,
	TTE_IE=0,
	TTE_Soft2=0,
	TTE_Diag=0,
	TTE_Soft=0,
	TTE_L=0,
	TTE_CP=1,
	TTE_CV=1,
	TTE_E=0,
	TTE_P=0,
	TTE_W=1,
	tsbonly
	}

.data
.skip 1024


!------------------------------------------------------------------------

SECTION tsotool_unshared_data
.global tsotool_unshared_data_start
.global res_buf_fp_p_0
.global res_buf_int_p_0
.global private_data_p0
.global stack_top_p0:
.global res_buf_fp_p_1
.global res_buf_int_p_1
.global private_data_p1
.global stack_top_p1:
.global res_buf_fp_p_2
.global res_buf_int_p_2
.global private_data_p2
.global stack_top_p2:
.global res_buf_fp_p_3
.global res_buf_int_p_3
.global private_data_p3
.global stack_top_p3:
.global res_buf_fp_p_4
.global res_buf_int_p_4
.global private_data_p4
.global stack_top_p4:
.global res_buf_fp_p_5
.global res_buf_int_p_5
.global private_data_p5
.global stack_top_p5:
.global res_buf_fp_p_6
.global res_buf_int_p_6
.global private_data_p6
.global stack_top_p6:
.global res_buf_fp_p_7
.global res_buf_int_p_7
.global private_data_p7
.global stack_top_p7:
.data
ALIGN_PAGE_512K
tsotool_unshared_data_start:
!-- label names of res_buf must match with extract_loads_m64.pl --
.align 64 ! for self bcopy()
res_buf_fp_p_0:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_0:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_1:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_1:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_2:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_2:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_3:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_3:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_4:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_4:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_5:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_5:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_6:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_6:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_fp_p_7:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
.align 64 ! for self bcopy()
res_buf_int_p_7:
	.skip RESULTS_BUF_SIZE_PER_CPU_RTL/2
private_data_p0:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p1:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p2:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p3:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p4:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p5:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p6:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
private_data_p7:
	.skip PRIVATE_DATA_AREA_PER_CPU_RTL
stack_top_p0:
	.skip 2048
stack_top_p1:
	.skip 2048
stack_top_p2:
	.skip 2048
stack_top_p3:
	.skip 2048
stack_top_p4:
	.skip 2048
stack_top_p5:
	.skip 2048
stack_top_p6:
	.skip 2048
stack_top_p7:
	.skip 2048
tsotool_unshared_data_end:
ALIGN_PAGE_512K
! to prevent VAs from running over from this section into shared regions

!------------------------------------------------------------------------

.seg "data"
! 8 shared memory regions, 3 alias(es) each (Alias 0 is normal VA)


SECTION region0_alias0
.global REGION0_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION0_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION0_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region1_alias0
.global REGION1_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION1_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION1_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region2_alias0
.global REGION2_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION2_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION2_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region3_alias0
.global REGION3_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION3_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION3_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region4_alias0
.global REGION4_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION4_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION4_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region5_alias0
.global REGION5_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION5_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION5_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region6_alias0
.global REGION6_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION6_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION6_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION region7_alias0
.global REGION7_ALIAS0_START
.data
ALIGN_PAGE_8K
REGION7_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REGION7_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement0_alias0
.global REPLACEMENT0_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT0_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT0_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement1_alias0
.global REPLACEMENT1_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT1_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT1_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement2_alias0
.global REPLACEMENT2_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT2_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT2_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement3_alias0
.global REPLACEMENT3_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT3_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT3_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement4_alias0
.global REPLACEMENT4_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT4_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT4_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement5_alias0
.global REPLACEMENT5_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT5_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT5_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement6_alias0
.global REPLACEMENT6_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT6_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT6_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL


SECTION replacement7_alias0
.global REPLACEMENT7_ALIAS0_START
.data
ALIGN_PAGE_8K
REPLACEMENT7_ALIAS0_START:
	.skip REGION_MAPPED_SIZE_RTL
REPLACEMENT7_ALIAS0_END:
	.skip REGION_SIZE_RTL-REGION_MAPPED_SIZE_RTL

SECTION .MAIN
.global local_trap_handlers_start
.global local_trap_handlers_end.global extern_interrupt_handler
.text
ALIGN_PAGE_8K
local_trap_handlers_start:

.align 64
extern_interrupt_handler:
stxa  %g0, [%g0]ASI_INTR_RECEIVE
retry

local_trap_handlers_end:

SECTION .MAIN
.global main
.global tsotool_text_start
.global irepl_text_start
.text
ba user_text_start
nop
ALIGN_PAGE_64K
irepl_text_start:
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
	jmpl %g1+8, %g1
	nop
	.skip 24
ALIGN_PAGE_64K
user_text_start:
ba main
nop
user_text_end:

ALIGN_PAGE_64K
tsotool_text_start:
main:
	mov     0, %o0
	mov     0, %o1
	CHECK_PROC_ID
! at this point, g1 should have CPU id (0, 1, 2, ...)
	set     REGION0_ALIAS0_START, %o0	! shared address 0
	set     REGION1_ALIAS0_START, %o1	! shared address 1
	cmp     %g1, 0x7
	be      setup_p7
	nop
	cmp     %g1, 0x6
	be      setup_p6
	nop
	cmp     %g1, 0x5
	be      setup_p5
	nop
	cmp     %g1, 0x4
	be      setup_p4
	nop
	cmp     %g1, 0x3
	be      setup_p3
	nop
	cmp     %g1, 0x2
	be      setup_p2
	nop
	cmp     %g1, 0x1
	be      setup_p1
	nop
	cmp     %g1, 0x0
	be      setup_p0
	nop
	EXIT_BAD   ! Should never reach here
	nop

setup_p0:
	setx    stack_top_p0, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_0, %g1, %o4
	setx    private_data_p0, %g1, %o5
	setx    func0, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p1:
	setx    stack_top_p1, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_1, %g1, %o4
	setx    private_data_p1, %g1, %o5
	setx    func1, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p2:
	setx    stack_top_p2, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_2, %g1, %o4
	setx    private_data_p2, %g1, %o5
	setx    func2, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p3:
	setx    stack_top_p3, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_3, %g1, %o4
	setx    private_data_p3, %g1, %o5
	setx    func3, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p4:
	setx    stack_top_p4, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_4, %g1, %o4
	setx    private_data_p4, %g1, %o5
	setx    func4, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p5:
	setx    stack_top_p5, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_5, %g1, %o4
	setx    private_data_p5, %g1, %o5
	setx    func5, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p6:
	setx    stack_top_p6, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_6, %g1, %o4
	setx    private_data_p6, %g1, %o5
	setx    func6, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop

setup_p7:
	setx    stack_top_p7, %g1, %l1
	add     %l1, 1024, %sp
	setx    res_buf_fp_p_7, %g1, %o4
	setx    private_data_p7, %g1, %o5
	setx    func7, %g1, %l4
	call    %l4
	nop
	EXIT_GOOD
	nop
#define    NO_REAL_CPUS_MINUS_1    7

!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func0:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l6
or    %l6, %lo(0xdeadbee0), %l6
stw   %l6, [%i5]
sethi %hi(0xdeadbee1), %l6
or    %l6, %lo(0xdeadbee1), %l6
stw   %l6, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x00deade1), %l6
or    %l6, %lo(0x00deade1), %l6
stw %l6, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x1), %l4
or    %l4, %lo(0x1), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x3f800001), %l6
or    %l6, %lo(0x3f800001), %l6
stw %l6, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x34000000), %l6
or    %l6, %lo(0x34000000), %l6
stw %l6, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x2bbb^4
sethi %hi(0x2bbb), %l0
or    %l0, %lo(0x2bbb), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES0: ! Test instruction sequence for ISTREAM 0 begins

P1: !_DWLD [6] (Int) (Loop entry) (Branch target of P176)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_0_0:
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
ba P2
nop

TARGET176:
ba RET176
nop


P2: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2
nop
RET2:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3: !_BSTC [4] (maybe <- 0x3f800001) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4: !_MEMBAR (FP)
membar #StoreLoad

P5: !_DWLD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P6: !_DWLD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P7: !_MEMBAR (FP)

P8: !_BST [6] (maybe <- 0x3f800004) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P9: !_MEMBAR (FP)
membar #StoreLoad

P10: !_LD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P11: !_LD [11] (Int)
lduw [%i3 + 12], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P12: !_DWST_BINIT [8] (maybe <- 0x1) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P13: !_MEMBAR (Int)
membar #StoreLoad

P14: !_DWST_BINIT [8] (maybe <- 0x2) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P15: !_MEMBAR (Int)
membar #StoreLoad

P16: !_DWST [17] (maybe <- 0x3) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P17: !_SWAP [20] (maybe <- 0x4) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P18: !_ST [5] (maybe <- 0x5) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P19: !_CAS [8] (maybe <- 0x6) (Int) (Branch target of P129)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%o5], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4
ba P20
nop

TARGET129:
ba RET129
nop


P20: !_MEMBAR (FP)

P21: !_BSTC [8] (maybe <- 0x3f800007) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P22: !_MEMBAR (FP)
membar #StoreLoad

P23: !_BLD [5] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET23
nop
RET23:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P24: !_MEMBAR (FP)

P25: !_BSTC [23] (maybe <- 0x3f80000a) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P26: !_MEMBAR (FP)
membar #StoreLoad

P27: !_PREFETCH [6] (Int)
prefetch [%i2 + 0], 22

P28: !_MEMBAR (FP)

P29: !_BST [23] (maybe <- 0x3f80000d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P30: !_MEMBAR (FP)
membar #StoreLoad

P31: !_LD [8] (Int)
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P32: !_PREFETCH [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 4

P33: !_LDD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P34: !_MEMBAR (FP)
membar #StoreLoad

P35: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P36: !_MEMBAR (FP)

P37: !_DWLD [8] (Int)
ldx [%i2 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P38: !_SWAP [17] (maybe <- 0x7) (Int)
mov %l4, %l3
swap  [%i3 + 12], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P39: !_CASX [18] (maybe <- 0x8) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P40: !_SWAP [23] (maybe <- 0xa) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P41: !_CASX [1] (maybe <- 0xb) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P42: !_CAS [16] (maybe <- 0xd) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P43: !_LDD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P44: !_LD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P45: !_MEMBAR (FP)

P46: !_BST [9] (maybe <- 0x3f800010) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P47: !_MEMBAR (FP)
membar #StoreLoad

P48: !_DWST [8] (maybe <- 0xe) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P49: !_MEMBAR (FP)

P50: !_BST [9] (maybe <- 0x3f800013) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P51: !_MEMBAR (FP)
membar #StoreLoad

P52: !_DWST_BINIT [3] (maybe <- 0xf) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P53: !_MEMBAR (Int)

P54: !_BSTC [2] (maybe <- 0x3f800016) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P55: !_MEMBAR (FP)

P56: !_BSTC [14] (maybe <- 0x3f800019) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P57: !_MEMBAR (FP)
membar #StoreLoad

P58: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P59: !_MEMBAR (FP)

P60: !_PREFETCH [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 3

P61: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P62: !_MEMBAR (FP)

P63: !_BST [12] (maybe <- 0x3f80001c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P64: !_MEMBAR (FP)
membar #StoreLoad

P65: !_DWST_BINIT [23] (maybe <- 0x11) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P66: !_MEMBAR (Int)
membar #StoreLoad

P67: !_CAS [4] (maybe <- 0x12) (Int)
add %i1, 4, %o5
lduw [%o5], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P68: !_ST [3] (maybe <- 0x13) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P69: !_REPLACEMENT [4] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P70: !_MEMBAR (FP)
membar #StoreLoad

P71: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P72: !_MEMBAR (FP)

P73: !_ST [7] (maybe <- 0x14) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i2 + 4] %asi
add   %l4, 1, %l4

P74: !_DWST [0] (maybe <- 0x15) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P75: !_CASX [8] (maybe <- 0x17) (Int)
add %i2, 8, %o5
ldx [%o5], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l7
mov %l4, %o2
casx [%o5], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P76: !_SWAP [11] (maybe <- 0x18) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P77: !_LD [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P78: !_SWAP [1] (maybe <- 0x19) (Int)
mov %l4, %o4
swap  [%i0 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P79: !_DWST [0] (maybe <- 0x1a) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P80: !_CAS [0] (maybe <- 0x1c) (Int)
lduw [%i0], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i0], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P81: !_ST_BINIT [23] (maybe <- 0x1d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P82: !_MEMBAR (Int)
membar #StoreLoad

P83: !_CAS [6] (maybe <- 0x1e) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%i2], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P84: !_CASX [6] (maybe <- 0x1f) (Int)
ldx [%i2], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P85: !_DWLD [7] (Int)
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4

P86: !_MEMBAR (FP)

P87: !_BST [7] (maybe <- 0x3f80001f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P88: !_MEMBAR (FP)
membar #StoreLoad

P89: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P90: !_MEMBAR (FP)

P91: !_BST [21] (maybe <- 0x3f800022) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P92: !_MEMBAR (FP)
membar #StoreLoad

P93: !_LDD [23] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P94: !_LD [23] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i3 + 12] %asi, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P95: !_MEMBAR (FP) (Branch target of P846)
ba P96
nop

TARGET846:
ba RET846
nop


P96: !_BST [4] (maybe <- 0x3f800025) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P97: !_MEMBAR (FP)
membar #StoreLoad

P98: !_ST_BINIT [0] (maybe <- 0x21) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P99: !_MEMBAR (Int)
membar #StoreLoad

P100: !_DWST [15] (maybe <- 0x22) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P101: !_DWST [23] (maybe <- 0x24) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l6
srl %l6, 8, %l6
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3
srl %l3, 16, %l6
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l6, %l3
sllx %l3, 32, %l3 
stxa %l3, [%i2 + 8 ] %asi
add   %l4, 1, %l4

P102: !_ST [16] (maybe <- 0x25) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P103: !_PREFETCH [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 23

P104: !_SWAP [18] (maybe <- 0x26) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 0], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P105: !_ST [2] (maybe <- 0x27) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P106: !_DWST [20] (maybe <- 0x28) (Int)
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P107: !_DWST_BINIT [5] (maybe <- 0x29) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i1 + 8] %asi 
add   %l4, 1, %l4

P108: !_MEMBAR (Int)
membar #StoreLoad

P109: !_ST [5] (maybe <- 0x2a) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P110: !_ST [16] (maybe <- 0x2b) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P111: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+12], %l6
st %l6, [%i2+12]
add %i2, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P112: !_PREFETCH [1] (Int) (CBR)
prefetch [%i0 + 4], 22

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET112
nop
RET112:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P113: !_DWST [22] (maybe <- 0x2c) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P114: !_CAS [2] (maybe <- 0x2e) (Int)
add %i0, 12, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P115: !_ST_BINIT [21] (maybe <- 0x2f) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET115
nop
RET115:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P116: !_MEMBAR (Int)
membar #StoreLoad

P117: !_CAS [13] (maybe <- 0x30) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P118: !_CAS [6] (maybe <- 0x31) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%i3], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P119: !_CAS [1] (maybe <- 0x32) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
wr %g0, 0x88, %asi
add %i0, 4, %o5
lduwa [%o5] %asi, %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l3, %l6
casa [%o5] %asi, %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P120: !_SWAP [21] (maybe <- 0x33) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P121: !_SWAP [2] (maybe <- 0x34) (Int)
mov %l4, %o5
swap  [%i0 + 12], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P122: !_CASX [15] (maybe <- 0x35) (Int) (LE)
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %l6, %l3, %l7
srlx %l7, 8, %l7
sllx %l6, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6 
sethi %hi(0xffff0000), %l3
srlx %l6, 16, %l7
andn %l7, %l3, %l7
andn %l6, %l3, %l6
sllx %l6, 16, %l6
or %l6, %l7, %l6 
srlx %l6, 32, %l7
sllx %l6, 32, %l6
or %l6, %l7, %l7 
wr %g0, 0x88, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldxa [%i3] %asi, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
mov %o5, %l3
mov  %l7, %o5
casxa [%i3] %asi, %l3, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
add  %l4, 1, %l4

P123: !_SWAP [15] (maybe <- 0x37) (Int)
mov %l4, %o3
swap  [%i3 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P124: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P125: !_CASX [14] (maybe <- 0x38) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P126: !_DWLD [1] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P127: !_CAS [18] (maybe <- 0x39) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
wr %g0, 0x88, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduwa [%i2] %asi, %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l3, %o3
casa [%i2] %asi, %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P128: !_CASX [4] (maybe <- 0x3a) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 4 

sethi %hi(0x200000), %l7
sub   %i1, %l7, %i1
ldx [%i1], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P129: !_CASX [3] (maybe <- 0x3c) (Int) (CBR)
ldx [%i1], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET129
nop
RET129:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P130: !_CAS [2] (maybe <- 0x3e) (Int)
add %i0, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P131: !_ST_BINIT [6] (maybe <- 0x3f) (Int) (Branch target of P597)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4
ba P132
nop

TARGET597:
ba RET597
nop


P132: !_MEMBAR (Int) (Branch target of P995)
membar #StoreLoad
ba P133
nop

TARGET995:
ba RET995
nop


P133: !_PREFETCH [23] (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 20

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET133
nop
RET133:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P134: !_MEMBAR (FP)

P135: !_BSTC [8] (maybe <- 0x3f800028) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P136: !_MEMBAR (FP)
membar #StoreLoad

P137: !_LD [21] (Int)
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P138: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET138
nop
RET138:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P139: !_BSTC [22] (maybe <- 0x3f80002b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P140: !_MEMBAR (FP)
membar #StoreLoad

P141: !_ST [6] (maybe <- 0x40) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P142: !_ST [8] (maybe <- 0x41) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 12] %asi
add   %l4, 1, %l4

P143: !_SWAP [18] (maybe <- 0x42) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P144: !_SWAP [2] (maybe <- 0x43) (Int)
mov %l4, %l3
swap  [%i0 + 12], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P145: !_DWLD [3] (Int)
ldx [%i1 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P146: !_PREFETCH [12] (Int) (Branch target of P930)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 22
ba P147
nop

TARGET930:
ba RET930
nop


P147: !_CASX [22] (maybe <- 0x44) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %o5
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P148: !_ST [21] (maybe <- 0x46) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P149: !_MEMBAR (FP)

P150: !_BST [19] (maybe <- 0x3f80002e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P151: !_MEMBAR (FP)
membar #StoreLoad

P152: !_CAS [1] (maybe <- 0x47) (Int)
add %i0, 4, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P153: !_CAS [9] (maybe <- 0x48) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P154: !_ST_BINIT [20] (maybe <- 0x49) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P155: !_MEMBAR (Int)
membar #StoreLoad

P156: !_SWAP [19] (maybe <- 0x4a) (Int)
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P157: !_MEMBAR (FP)

P158: !_BST [18] (maybe <- 0x3f800031) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P159: !_MEMBAR (FP)
membar #StoreLoad

P160: !_DWST [2] (maybe <- 0x4b) (Int)
mov %l4, %l7 
stx %l7, [%i0 + 8]
add   %l4, 1, %l4

P161: !_LDD [20] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P162: !_MEMBAR (FP)
membar #StoreLoad

P163: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P164: !_MEMBAR (FP)

P165: !_ST_BINIT [16] (maybe <- 0x4c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P166: !_MEMBAR (Int)
membar #StoreLoad

P167: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P168: !_MEMBAR (FP)

P169: !_DWST [19] (maybe <- 0x4d) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P170: !_DWST_BINIT [18] (maybe <- 0x4f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P171: !_MEMBAR (Int)
membar #StoreLoad

P172: !_DWST [14] (maybe <- 0x51) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P173: !_LDD [6] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P174: !_DWLD [3] (Int)
ldx [%i1 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P175: !_MEMBAR (FP)
membar #StoreLoad

P176: !_BLD [11] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET176
nop
RET176:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P177: !_MEMBAR (FP)

P178: !_BSTC [18] (maybe <- 0x3f800034) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P179: !_MEMBAR (FP)

P180: !_BSTC [21] (maybe <- 0x3f800037) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P181: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET181
nop
RET181:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P182: !_CAS [9] (maybe <- 0x52) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P183: !_CASX [2] (maybe <- 0x53) (Int) (Branch target of P631)
add %i0, 8, %o5
ldx [%o5], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l7
mov %l4, %o0
casx [%o5], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4
ba P184
nop

TARGET631:
ba RET631
nop


P184: !_DWST [13] (maybe <- 0x54) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P185: !_ST [7] (maybe <- 0x56) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P186: !_DWST_BINIT [4] (maybe <- 0x57) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P187: !_MEMBAR (Int)
membar #StoreLoad

P188: !_ST_BINIT [9] (maybe <- 0x59) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P189: !_MEMBAR (Int)
membar #StoreLoad

P190: !_PREFETCH [3] (Int) (Branch target of P112)
prefetch [%i1 + 0], 22
ba P191
nop

TARGET112:
ba RET112
nop


P191: !_CAS [13] (maybe <- 0x5a) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P192: !_DWST_BINIT [16] (maybe <- 0x5b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P193: !_MEMBAR (Int) (Branch target of P281)
membar #StoreLoad
ba P194
nop

TARGET281:
ba RET281
nop


P194: !_ST_BINIT [14] (maybe <- 0x5d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P195: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET195
nop
RET195:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P196: !_LD [12] (FP)
ld [%i2 + 0], %f8
! 1 addresses covered

P197: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET197
nop
RET197:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P198: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P199: !_MEMBAR (FP)

P200: !_BSTC [1] (maybe <- 0x3f80003a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P201: !_MEMBAR (FP)
membar #StoreLoad

P202: !_LD [2] (Int)
lduw [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P203: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P204: !_DWST [18] (maybe <- 0x5e) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P205: !_ST [17] (maybe <- 0x60) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET205
nop
RET205:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P206: !_MEMBAR (FP)

P207: !_BSTC [11] (maybe <- 0x3f80003d) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P208: !_MEMBAR (FP)
membar #StoreLoad

P209: !_DWST [11] (maybe <- 0x61) (Int)
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P210: !_ST [12] (maybe <- 0x3f800040) (FP)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 0 ]

P211: !_MEMBAR (FP)

P212: !_BSTC [18] (maybe <- 0x3f800041) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P213: !_MEMBAR (FP)
membar #StoreLoad

P214: !_CAS [7] (maybe <- 0x62) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P215: !_CASX [13] (maybe <- 0x63) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P216: !_DWLD [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1

P217: !_ST_BINIT [8] (maybe <- 0x65) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P218: !_MEMBAR (Int)
membar #StoreLoad

P219: !_SWAP [18] (maybe <- 0x66) (Int)
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P220: !_MEMBAR (FP)
membar #StoreLoad

P221: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P222: !_MEMBAR (FP)

P223: !_BSTC [10] (maybe <- 0x3f800044) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P224: !_MEMBAR (FP)
membar #StoreLoad

P225: !_SWAP [23] (maybe <- 0x67) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P226: !_DWST_BINIT [20] (maybe <- 0x68) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P227: !_MEMBAR (Int)
membar #StoreLoad

P228: !_DWST_BINIT [0] (maybe <- 0x69) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P229: !_MEMBAR (Int)
membar #StoreLoad

P230: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P231: !_MEMBAR (FP)

P232: !_CAS [23] (maybe <- 0x6b) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P233: !_CAS [21] (maybe <- 0x6c) (Int)
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%i2], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P234: !_CASX [19] (maybe <- 0x6d) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P235: !_MEMBAR (FP)

P236: !_BST [1] (maybe <- 0x3f800047) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P237: !_MEMBAR (FP)
membar #StoreLoad

P238: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 21

P239: !_CASX [20] (maybe <- 0x6f) (Int)
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P240: !_MEMBAR (FP)
membar #StoreLoad

P241: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P242: !_MEMBAR (FP)

P243: !_CAS [3] (maybe <- 0x70) (Int) (CBR)
lduw [%i1], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%i1], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET243
nop
RET243:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P244: !_DWLD [22] (Int) (LE) (Branch target of P2)
wr %g0, 0x88, %asi
ldxa [%i2 + 0] %asi, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(upper) -> %o0(upper)
or %o5, %g0, %o0
ba P245
nop

TARGET2:
ba RET2
nop


P245: !_ST_BINIT [2] (maybe <- 0x71) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P246: !_MEMBAR (Int)
membar #StoreLoad

P247: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P248: !_MEMBAR (FP)

P249: !_ST_BINIT [16] (maybe <- 0x72) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P250: !_MEMBAR (Int)
membar #StoreLoad

P251: !_ST_BINIT [4] (maybe <- 0x73) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P252: !_MEMBAR (Int)

P253: !_BSTC [17] (maybe <- 0x3f80004a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P254: !_MEMBAR (FP)
membar #StoreLoad

P255: !_SWAP [19] (maybe <- 0x74) (Int) (CBR)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 4], %l7
! move %l7(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET255
nop
RET255:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P256: !_CAS [23] (maybe <- 0x75) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P257: !_MEMBAR (FP)

P258: !_BST [4] (maybe <- 0x3f80004d) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET258
nop
RET258:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P259: !_MEMBAR (FP) (Branch target of P530)
membar #StoreLoad
ba P260
nop

TARGET530:
ba RET530
nop


P260: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 21

P261: !_SWAP [21] (maybe <- 0x76) (Int)
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P262: !_ST_BINIT [19] (maybe <- 0x77) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P263: !_MEMBAR (Int)

P264: !_BSTC [22] (maybe <- 0x3f800050) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P265: !_MEMBAR (FP)
membar #StoreLoad

P266: !_BLD [6] (FP) (Branch target of P609)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10
ba P267
nop

TARGET609:
ba RET609
nop


P267: !_MEMBAR (FP)

P268: !_DWST [12] (maybe <- 0x78) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P269: !_CASX [0] (maybe <- 0x7a) (Int)
ldx [%i0], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i0], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P270: !_LD [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 12], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P271: !_ST_BINIT [11] (maybe <- 0x7c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P272: !_MEMBAR (Int)
membar #StoreLoad

P273: !_PREFETCH [11] (Int)
prefetch [%i3 + 12], 21

P274: !_CAS [2] (maybe <- 0x7d) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
wr %g0, 0x88, %asi
add %i0, 12, %o5
lduwa [%o5] %asi, %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l3, %l6
casa [%o5] %asi, %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P275: !_ST_BINIT [15] (maybe <- 0x7e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P276: !_MEMBAR (Int)
membar #StoreLoad

P277: !_DWST_BINIT [7] (maybe <- 0x7f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P278: !_MEMBAR (Int)
membar #StoreLoad

P279: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P280: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P281: !_LD [22] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET281
nop
RET281:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P282: !_LD [6] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduwa [%i2 + 0] %asi, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P283: !_CASX [10] (maybe <- 0x81) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P284: !_DWLD [4] (Int)
ldx [%i1 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P285: !_CASX [10] (maybe <- 0x83) (Int)
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %o5
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P286: !_MEMBAR (FP)

P287: !_BSTC [0] (maybe <- 0x3f800053) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P288: !_MEMBAR (FP)

P289: !_BSTC [21] (maybe <- 0x3f800056) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P290: !_MEMBAR (FP)
membar #StoreLoad

P291: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P292: !_MEMBAR (FP)

P293: !_BSTC [16] (maybe <- 0x3f800059) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET293
nop
RET293:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P294: !_MEMBAR (FP)
membar #StoreLoad

P295: !_ST [4] (maybe <- 0x85) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P296: !_CAS [10] (maybe <- 0x86) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l6
lduwa [%l6] %asi, %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l7, %o5
casa [%l6] %asi, %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P297: !_ST_BINIT [16] (maybe <- 0x87) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P298: !_MEMBAR (Int) (Branch target of P197)
ba P299
nop

TARGET197:
ba RET197
nop


P299: !_BST [13] (maybe <- 0x3f80005c) (FP) (Branch target of P964)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P300
nop

TARGET964:
ba RET964
nop


P300: !_MEMBAR (FP)
membar #StoreLoad

P301: !_PREFETCH [6] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 20

P302: !_LD [7] (Int)
lduw [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P303: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P304: !_CAS [16] (maybe <- 0x88) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P305: !_CASX [14] (maybe <- 0x89) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P306: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P307: !_DWST_BINIT [6] (maybe <- 0x8a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P308: !_MEMBAR (Int)
membar #StoreLoad

P309: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P310: !_MEMBAR (FP) (Branch target of P195)
ba P311
nop

TARGET195:
ba RET195
nop


P311: !_BST [19] (maybe <- 0x3f80005f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P312: !_MEMBAR (FP)
membar #StoreLoad

P313: !_CASX [14] (maybe <- 0x8c) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %o5
mov %l4, %o4
casx [%l3], %o5, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P314: !_MEMBAR (FP)

P315: !_BST [23] (maybe <- 0x3f800062) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P316: !_MEMBAR (FP)
membar #StoreLoad

P317: !_SWAP [17] (maybe <- 0x8d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P318: !_DWST_BINIT [20] (maybe <- 0x8e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P319: !_MEMBAR (Int)
membar #StoreLoad

P320: !_DWST_BINIT [7] (maybe <- 0x8f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P321: !_MEMBAR (Int)

P322: !_BST [21] (maybe <- 0x3f800065) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P323: !_MEMBAR (FP)
membar #StoreLoad

P324: !_DWLD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P325: !_PREFETCH [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 4

P326: !_ST_BINIT [14] (maybe <- 0x91) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P327: !_MEMBAR (Int)

P328: !_BSTC [7] (maybe <- 0x3f800068) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P329: !_MEMBAR (FP)
membar #StoreLoad

P330: !_SWAP [23] (maybe <- 0x92) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P331: !_DWLD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P332: !_DWLD [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P333: !_LD [2] (Int)
lduw [%i0 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P334: !_SWAP [12] (maybe <- 0x93) (Int)
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P335: !_MEMBAR (FP)

P336: !_BST [20] (maybe <- 0x3f80006b) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P337: !_MEMBAR (FP)
membar #StoreLoad

P338: !_LD [8] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduwa [%i3 + 12] %asi, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P339: !_ST_BINIT [4] (maybe <- 0x94) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P340: !_MEMBAR (Int)
membar #StoreLoad

P341: !_CAS [2] (maybe <- 0x95) (Int)
add %i0, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P342: !_DWST_BINIT [5] (maybe <- 0x96) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i1 + 8] %asi 
add   %l4, 1, %l4

P343: !_MEMBAR (Int)

P344: !_BST [19] (maybe <- 0x3f80006e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P345: !_MEMBAR (FP)
membar #StoreLoad

P346: !_DWST [7] (maybe <- 0x97) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P347: !_CASX [16] (maybe <- 0x99) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P348: !_MEMBAR (FP)
membar #StoreLoad

P349: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P350: !_MEMBAR (FP)

P351: !_ST [10] (maybe <- 0x3f800071) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 4 ]

P352: !_ST [16] (maybe <- 0x9b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P353: !_MEMBAR (FP)

P354: !_BSTC [16] (maybe <- 0x3f800072) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P355: !_MEMBAR (FP)
membar #StoreLoad

P356: !_ST_BINIT [16] (maybe <- 0x9c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P357: !_MEMBAR (Int)

P358: !_BSTC [23] (maybe <- 0x3f800075) (FP) (Branch target of P428)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P359
nop

TARGET428:
ba RET428
nop


P359: !_MEMBAR (FP)
membar #StoreLoad

P360: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P361: !_MEMBAR (FP)

P362: !_CAS [0] (maybe <- 0x9d) (Int)
lduw [%i0], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%i0], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P363: !_DWST_BINIT [0] (maybe <- 0x9e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P364: !_MEMBAR (Int)
membar #StoreLoad

P365: !_DWST [8] (maybe <- 0xa0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P366: !_PREFETCH [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 2

P367: !_CAS [9] (maybe <- 0xa1) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P368: !_MEMBAR (FP)

P369: !_BST [6] (maybe <- 0x3f800078) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P370: !_MEMBAR (FP)
membar #StoreLoad

P371: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P372: !_MEMBAR (FP)

P373: !_SWAP [13] (maybe <- 0xa2) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P374: !_LDD [21] (Int) (Branch target of P762)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
ba P375
nop

TARGET762:
ba RET762
nop


P375: !_DWST_BINIT [10] (maybe <- 0xa3) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P376: !_MEMBAR (Int)
membar #StoreLoad

P377: !_ST_BINIT [17] (maybe <- 0xa5) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P378: !_MEMBAR (Int)
membar #StoreLoad

P379: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P380: !_MEMBAR (FP)

P381: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P382: !_MEMBAR (FP)

P383: !_CAS [13] (maybe <- 0xa6) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P384: !_MEMBAR (FP)
membar #StoreLoad

P385: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P386: !_MEMBAR (FP)

P387: !_BSTC [2] (maybe <- 0x3f80007b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P388: !_MEMBAR (FP)
membar #StoreLoad

P389: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P390: !_MEMBAR (FP)

P391: !_DWST_BINIT [10] (maybe <- 0xa7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P392: !_MEMBAR (Int)
membar #StoreLoad

P393: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P394: !_CASX [18] (maybe <- 0xa9) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i2], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P395: !_DWLD [2] (Int)
ldx [%i0 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P396: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET396
nop
RET396:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P397: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P398: !_MEMBAR (FP)

P399: !_LD [1] (Int)
lduw [%i0 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P400: !_DWST_BINIT [22] (maybe <- 0xab) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P401: !_MEMBAR (Int)
membar #StoreLoad

P402: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P403: !_MEMBAR (FP)

P404: !_SWAP [20] (maybe <- 0xad) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P405: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 17

P406: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P407: !_MEMBAR (FP)

P408: !_BSTC [20] (maybe <- 0x3f80007e) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P409: !_MEMBAR (FP)
membar #StoreLoad

P410: !_LD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P411: !_SWAP [2] (maybe <- 0xae) (Int)
mov %l4, %o5
swap  [%i0 + 12], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P412: !_CAS [17] (maybe <- 0xaf) (Int) (Branch target of P181)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o4
mov %o4, %l3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P413
nop

TARGET181:
ba RET181
nop


P413: !_MEMBAR (FP)

P414: !_BSTC [5] (maybe <- 0x3f800081) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P415: !_MEMBAR (FP)
membar #StoreLoad

P416: !_CASX [20] (maybe <- 0xb0) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %o5
mov %l4, %o1
casx [%l3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P417: !_MEMBAR (FP)

P418: !_BSTC [10] (maybe <- 0x3f800084) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P419: !_MEMBAR (FP)
membar #StoreLoad

P420: !_CAS [19] (maybe <- 0xb1) (Int)
add %i3, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P421: !_CASX [13] (maybe <- 0xb2) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P422: !_LDD [10] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P423: !_CAS [22] (maybe <- 0xb4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P424: !_MEMBAR (FP)
membar #StoreLoad

P425: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P426: !_MEMBAR (FP)

P427: !_CAS [1] (maybe <- 0xb5) (Int)
add %i0, 4, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P428: !_SWAP [15] (maybe <- 0xb6) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET428
nop
RET428:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P429: !_MEMBAR (FP)

P430: !_BSTC [0] (maybe <- 0x3f800087) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P431: !_MEMBAR (FP)
membar #StoreLoad

P432: !_CASX [12] (maybe <- 0xb7) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P433: !_DWST_BINIT [23] (maybe <- 0xb9) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P434: !_MEMBAR (Int)
membar #StoreLoad

P435: !_ST_BINIT [13] (maybe <- 0xba) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P436: !_MEMBAR (Int)
membar #StoreLoad

P437: !_DWST [18] (maybe <- 0xbb) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P438: !_REPLACEMENT [8] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P439: !_DWST [20] (maybe <- 0xbd) (Int)
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P440: !_MEMBAR (FP)
membar #StoreLoad

P441: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P442: !_MEMBAR (FP)

P443: !_LD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P444: !_CASX [12] (maybe <- 0xbe) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P445: !_SWAP [19] (maybe <- 0xc0) (Int)
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P446: !_DWLD [12] (FP)
ldd [%i3 + 0], %f2
! 2 addresses covered

P447: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P448: !_CAS [7] (maybe <- 0xc1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l7], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P449: !_MEMBAR (FP)
membar #StoreLoad

P450: !_BLD [6] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET450
nop
RET450:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P451: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET451
nop
RET451:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P452: !_DWST [10] (maybe <- 0xc2) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P453: !_CAS [11] (maybe <- 0xc4) (Int)
add %i2, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
mov %l4, %o1
cas [%o5], %l7, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P454: !_DWLD [10] (Int)
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l7
or %l7, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2

P455: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P456: !_DWLD [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %o5
or %o5, %o2, %o2

P457: !_DWLD [19] (Int)
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P458: !_DWLD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P459: !_REPLACEMENT [19] (Int) (Branch target of P255)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
ba P460
nop

TARGET255:
ba RET255
nop


P460: !_SWAP [0] (maybe <- 0xc5) (Int)
mov %l4, %l7
swap  [%i0 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P461: !_CASX [23] (maybe <- 0xc6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %o5
mov %l4, %o1
casx [%l3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P462: !_DWLD [20] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldxa [%i2 + 8] %asi, %l3
! move %l3(upper) -> %o2(upper)
or %l3, %g0, %o2

P463: !_LD [18] (Int)
lduw [%i2 + 0], %l7
! move %l7(lower) -> %o2(lower)
srlx %o2, 32, %o2
sllx %o2, 32, %o2
or %l7, %o2, %o2

P464: !_CAS [8] (maybe <- 0xc7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P465: !_ST [9] (maybe <- 0x3f80008a) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 0 ]

P466: !_SWAP [1] (maybe <- 0xc8) (Int)
mov %l4, %o4
swap  [%i0 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P467: !_ST_BINIT [8] (maybe <- 0xc9) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P468: !_MEMBAR (Int)
membar #StoreLoad

P469: !_CASX [23] (maybe <- 0xca) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P470: !_CAS [11] (maybe <- 0xcb) (Int)
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P471: !_MEMBAR (FP)

P472: !_BST [13] (maybe <- 0x3f80008b) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P473: !_MEMBAR (FP)
membar #StoreLoad

P474: !_DWLD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %o5
or %o5, %o2, %o2

P475: !_DWST_BINIT [23] (maybe <- 0xcc) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P476: !_MEMBAR (Int)
membar #StoreLoad

P477: !_DWST_BINIT [12] (maybe <- 0xcd) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P478: !_MEMBAR (Int)
membar #StoreLoad

P479: !_REPLACEMENT [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P480: !_ST_BINIT [18] (maybe <- 0xcf) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P481: !_MEMBAR (Int)
membar #StoreLoad

P482: !_CASX [7] (maybe <- 0xd0) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET482
nop
RET482:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P483: !_MEMBAR (FP)
membar #StoreLoad

P484: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P485: !_MEMBAR (FP)

P486: !_REPLACEMENT [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P487: !_SWAP [9] (maybe <- 0xd2) (Int) (CBR)
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET487
nop
RET487:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P488: !_ST [2] (maybe <- 0xd3) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i0 + 12] %asi
add   %l4, 1, %l4

P489: !_CASX [14] (maybe <- 0xd4) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P490: !_MEMBAR (FP)

P491: !_BST [19] (maybe <- 0x3f80008e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P492: !_MEMBAR (FP)
membar #StoreLoad

P493: !_ST [6] (maybe <- 0x3f800091) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 0 ]

P494: !_MEMBAR (FP) (Branch target of P243)
ba P495
nop

TARGET243:
ba RET243
nop


P495: !_BSTC [6] (maybe <- 0x3f800092) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P496: !_MEMBAR (FP)
membar #StoreLoad

P497: !_LD [4] (Int)
lduw [%i1 + 4], %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P498: !_DWST [4] (maybe <- 0xd5) (Int) (Branch target of P927)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i1 + 0]
add   %l4, 1, %l4
ba P499
nop

TARGET927:
ba RET927
nop


P499: !_PREFETCH [6] (Int)
prefetch [%i3 + 0], 21

P500: !_ST [0] (maybe <- 0xd7) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P501: !_CAS [13] (maybe <- 0xd8) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P502: !_DWLD [4] (Int)
ldx [%i1 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P503: !_DWST [14] (maybe <- 0xd9) (Int)
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P504: !_MEMBAR (FP)

P505: !_BST [5] (maybe <- 0x3f800095) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P506: !_MEMBAR (FP)
membar #StoreLoad

P507: !_CAS [16] (maybe <- 0xda) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P508: !_MEMBAR (FP)
membar #StoreLoad

P509: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P510: !_MEMBAR (FP)

P511: !_PREFETCH [15] (Int)
prefetch [%i3 + 0], 20

P512: !_MEMBAR (FP)

P513: !_BSTC [15] (maybe <- 0x3f800098) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P514: !_MEMBAR (FP)
membar #StoreLoad

P515: !_CAS [22] (maybe <- 0xdb) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P516: !_ST [0] (maybe <- 0xdc) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P517: !_SWAP [6] (maybe <- 0xdd) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %o2, %l3, %l6
srl %l6, 8, %l6
sll %o2, 8, %o2
and %o2, %l3, %o2
or %o2, %l6, %o2
srl %o2, 16, %l6
sll %o2, 16, %o2
srl %o2, 0, %o2
or %o2, %l6, %o2
swapa  [%i2 + 0] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P518: !_SWAP [2] (maybe <- 0xde) (Int)
mov %l4, %l6
swap  [%i0 + 12], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P519: !_DWLD [0] (Int)
ldx [%i0 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P520: !_MEMBAR (FP)

P521: !_BSTC [19] (maybe <- 0x3f80009b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P522: !_MEMBAR (FP)
membar #StoreLoad

P523: !_DWST [18] (maybe <- 0xdf) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P524: !_DWLD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P525: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P526: !_REPLACEMENT [1] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+4], %l3
st %l3, [%i2+4]
add %i2, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P527: !_CASX [15] (maybe <- 0xe1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P528: !_ST_BINIT [0] (maybe <- 0xe3) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P529: !_MEMBAR (Int)
membar #StoreLoad

P530: !_CAS [6] (maybe <- 0xe4) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET530
nop
RET530:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P531: !_DWST [13] (maybe <- 0xe5) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P532: !_DWST [11] (maybe <- 0xe7) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P533: !_CASX [16] (maybe <- 0xe8) (Int) (LE)
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l3, %o5, %l6
srlx %l6, 8, %l6
sllx %l3, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3 
sethi %hi(0xffff0000), %o5
srlx %l3, 16, %l6
andn %l6, %o5, %l6
andn %l3, %o5, %l3
sllx %l3, 16, %l3
or %l3, %l6, %l3 
srlx %l3, 32, %l6
sllx %l3, 32, %l3
or %l3, %l6, %l6 
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldxa [%i3] %asi, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l7, %o5
mov  %l6, %l7
casxa [%i3] %asi, %o5, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
add  %l4, 1, %l4

P534: !_ST [21] (maybe <- 0xea) (Int) (Branch target of P396)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4
ba P535
nop

TARGET396:
ba RET396
nop


P535: !_DWST_BINIT [19] (maybe <- 0xeb) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P536: !_MEMBAR (Int)

P537: !_BST [6] (maybe <- 0x3f80009e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P538: !_MEMBAR (FP)
membar #StoreLoad

P539: !_SWAP [4] (maybe <- 0xed) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o1
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %o1, %l3, %l6
srl %l6, 8, %l6
sll %o1, 8, %o1
and %o1, %l3, %o1
or %o1, %l6, %o1
srl %o1, 16, %l6
sll %o1, 16, %o1
srl %o1, 0, %o1
or %o1, %l6, %o1
swapa  [%i1 + 4] %asi, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P540: !_MEMBAR (FP)

P541: !_BSTC [18] (maybe <- 0x3f8000a1) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P542: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET542
nop
RET542:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P543: !_LDD [3] (Int) (Branch target of P949)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
ba P544
nop

TARGET949:
ba RET949
nop


P544: !_SWAP [16] (maybe <- 0xee) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P545: !_CAS [23] (maybe <- 0xef) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P546: !_LDD [23] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P547: !_REPLACEMENT [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P548: !_LDD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P549: !_MEMBAR (FP)
membar #StoreLoad

P550: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P551: !_MEMBAR (FP)

P552: !_ST_BINIT [7] (maybe <- 0xf0) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P553: !_MEMBAR (Int)
membar #StoreLoad

P554: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P555: !_MEMBAR (FP)

P556: !_DWST_BINIT [18] (maybe <- 0xf1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P557: !_MEMBAR (Int)
membar #StoreLoad

P558: !_DWST_BINIT [2] (maybe <- 0xf3) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i0 + 8] %asi 
add   %l4, 1, %l4

P559: !_MEMBAR (Int)
membar #StoreLoad

P560: !_DWST_BINIT [3] (maybe <- 0xf4) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

P561: !_MEMBAR (Int)
membar #StoreLoad

P562: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P563: !_MEMBAR (FP)

P564: !_BSTC [6] (maybe <- 0x3f8000a4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P565: !_MEMBAR (FP)
membar #StoreLoad

P566: !_ST_BINIT [6] (maybe <- 0xf6) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P567: !_MEMBAR (Int)
membar #StoreLoad

P568: !_SWAP [3] (maybe <- 0xf7) (Int)
mov %l4, %o1
swap  [%i1 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P569: !_DWST [6] (maybe <- 0xf8) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P570: !_MEMBAR (FP) (Branch target of P482)
ba P571
nop

TARGET482:
ba RET482
nop


P571: !_BST [20] (maybe <- 0x3f8000a7) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P572: !_MEMBAR (FP)
membar #StoreLoad

P573: !_LD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P574: !_DWST_BINIT [4] (maybe <- 0xfa) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

P575: !_MEMBAR (Int)
membar #StoreLoad

P576: !_DWST [3] (maybe <- 0xfc) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 3 

sethi %hi(0x200000), %l3
sub   %i1, %l3, %i1
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i1 + 0]
add   %l4, 1, %l4

P577: !_MEMBAR (FP)

P578: !_BSTC [8] (maybe <- 0x3f8000aa) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P579: !_MEMBAR (FP)
membar #StoreLoad

P580: !_SWAP [6] (maybe <- 0xfe) (Int)
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P581: !_MEMBAR (FP)

P582: !_BST [6] (maybe <- 0x3f8000ad) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P583: !_MEMBAR (FP)
membar #StoreLoad

P584: !_LDD [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P585: !_ST_BINIT [9] (maybe <- 0xff) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P586: !_MEMBAR (Int)
membar #StoreLoad

P587: !_DWST_BINIT [2] (maybe <- 0x100) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i0 + 8] %asi 
add   %l4, 1, %l4

P588: !_MEMBAR (Int)
membar #StoreLoad

P589: !_DWST [0] (maybe <- 0x101) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P590: !_ST [2] (maybe <- 0x103) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P591: !_MEMBAR (FP)

P592: !_BST [17] (maybe <- 0x3f8000b0) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P593: !_MEMBAR (FP)
membar #StoreLoad

P594: !_ST_BINIT [21] (maybe <- 0x104) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P595: !_MEMBAR (Int)
membar #StoreLoad

P596: !_DWST [12] (maybe <- 0x105) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P597: !_CASX [3] (maybe <- 0x107) (Int) (CBR)
ldx [%i1], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET597
nop
RET597:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P598: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 18

P599: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1

P600: !_CASX [18] (maybe <- 0x109) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P601: !_SWAP [12] (maybe <- 0x10b) (Int) (Branch target of P660)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4
ba P602
nop

TARGET660:
ba RET660
nop


P602: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P603: !_MEMBAR (FP)
membar #StoreLoad

P604: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P605: !_MEMBAR (FP)

P606: !_SWAP [7] (maybe <- 0x10c) (Int)
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P607: !_ST_BINIT [18] (maybe <- 0x10d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P608: !_MEMBAR (Int)
membar #StoreLoad

P609: !_ST [15] (maybe <- 0x10e) (Int) (CBR) (Branch target of P633)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET609
nop
RET609:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P610
nop

TARGET633:
ba RET633
nop


P610: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 26

P611: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 22

P612: !_ST_BINIT [23] (maybe <- 0x10f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P613: !_MEMBAR (Int)
membar #StoreLoad

P614: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P615: !_MEMBAR (FP)

P616: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P617: !_CASX [5] (maybe <- 0x110) (Int)
add %i1, 8, %l6
ldx [%l6], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l3
mov %l4, %o2
casx [%l6], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P618: !_MEMBAR (FP)

P619: !_BSTC [23] (maybe <- 0x3f8000b3) (FP) (Branch target of P822)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P620
nop

TARGET822:
ba RET822
nop


P620: !_MEMBAR (FP)
membar #StoreLoad

P621: !_ST [20] (maybe <- 0x111) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P622: !_ST_BINIT [15] (maybe <- 0x112) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P623: !_MEMBAR (Int)

P624: !_BSTC [21] (maybe <- 0x3f8000b6) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P625: !_MEMBAR (FP)
membar #StoreLoad

P626: !_DWST_BINIT [0] (maybe <- 0x113) (Int) (LE)
wr %g0, 0xea, %asi
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i0 + 0 ] %asi
add   %l4, 1, %l4

P627: !_MEMBAR (Int) (LE)
membar #StoreLoad

P628: !_DWST_BINIT [11] (maybe <- 0x115) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l6
srl %l6, 8, %l6
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3
srl %l3, 16, %l6
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l6, %l3
sllx %l3, 32, %l3 
stxa %l3, [%i2 + 8 ] %asi
add   %l4, 1, %l4

P629: !_MEMBAR (Int) (LE)

P630: !_BST [15] (maybe <- 0x3f8000b9) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P631: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET631
nop
RET631:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P632: !_CASX [5] (maybe <- 0x116) (Int)
add %i1, 8, %o5
ldx [%o5], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l7
mov %l4, %o4
casx [%o5], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P633: !_ST [15] (maybe <- 0x117) (Int) (CBR)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET633
nop
RET633:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P634: !_SWAP [3] (maybe <- 0x118) (Int)
mov %l4, %o0
swap  [%i1 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P635: !_MEMBAR (FP)

P636: !_BST [22] (maybe <- 0x3f8000bc) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P637: !_MEMBAR (FP)

P638: !_BST [23] (maybe <- 0x3f8000bf) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P639: !_MEMBAR (FP)
membar #StoreLoad

P640: !_ST [16] (maybe <- 0x119) (Int) (Branch target of P1001)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4
ba P641
nop

TARGET1001:
ba RET1001
nop


P641: !_CASX [4] (maybe <- 0x11a) (Int)
ldx [%i1], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P642: !_DWST_BINIT [16] (maybe <- 0x11c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P643: !_MEMBAR (Int)
membar #StoreLoad

P644: !_CASX [1] (maybe <- 0x11e) (Int)
ldx [%i0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i0], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P645: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P646: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 22

P647: !_CASX [23] (maybe <- 0x120) (Int)
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P648: !_MEMBAR (FP)

P649: !_BSTC [4] (maybe <- 0x3f8000c2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P650: !_MEMBAR (FP)
membar #StoreLoad

P651: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P652: !_MEMBAR (FP)

P653: !_BSTC [4] (maybe <- 0x3f8000c5) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P654: !_MEMBAR (FP)

P655: !_BST [11] (maybe <- 0x3f8000c8) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P656: !_MEMBAR (FP)
membar #StoreLoad

P657: !_CASX [19] (maybe <- 0x121) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P658: !_CAS [10] (maybe <- 0x123) (Int)
add %i3, 4, %o5
lduw [%o5], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P659: !_MEMBAR (FP)

P660: !_BSTC [10] (maybe <- 0x3f8000cb) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET660
nop
RET660:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P661: !_MEMBAR (FP)
membar #StoreLoad

P662: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P663: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET663
nop
RET663:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P664: !_ST_BINIT [8] (maybe <- 0x124) (Int) (LE) (Branch target of P451)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4
ba P665
nop

TARGET451:
ba RET451
nop


P665: !_MEMBAR (Int) (LE)
membar #StoreLoad

P666: !_LDD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P667: !_SWAP [2] (maybe <- 0x125) (Int)
mov %l4, %o2
swap  [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P668: !_MEMBAR (FP)

P669: !_BST [15] (maybe <- 0x3f8000ce) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P670: !_MEMBAR (FP)
membar #StoreLoad

P671: !_PREFETCH [0] (Int) (Branch target of P865)
prefetch [%i0 + 0], 20
ba P672
nop

TARGET865:
ba RET865
nop


P672: !_SWAP [22] (maybe <- 0x126) (Int)
mov %l4, %l3
swap  [%i2 + 4], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P673: !_DWST [16] (maybe <- 0x127) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P674: !_LD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P675: !_REPLACEMENT [13] (Int) (Branch target of P988)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+4], %l3
st %l3, [%i3+4]
add %i3, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
ba P676
nop

TARGET988:
ba RET988
nop


P676: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P677: !_DWST_BINIT [19] (maybe <- 0x129) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P678: !_MEMBAR (Int)

P679: !_BST [11] (maybe <- 0x3f8000d1) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P680: !_MEMBAR (FP)
membar #StoreLoad

P681: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P682: !_MEMBAR (FP)

P683: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P684: !_MEMBAR (FP)

P685: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 16

P686: !_MEMBAR (FP)

P687: !_BST [2] (maybe <- 0x3f8000d4) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P688: !_MEMBAR (FP)

P689: !_BST [3] (maybe <- 0x3f8000d7) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET689
nop
RET689:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P690: !_MEMBAR (FP)
membar #StoreLoad

P691: !_DWLD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P692: !_MEMBAR (FP)
membar #StoreLoad

P693: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P694: !_MEMBAR (FP)

P695: !_DWST_BINIT [21] (maybe <- 0x12b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P696: !_MEMBAR (Int)
membar #StoreLoad

P697: !_CAS [14] (maybe <- 0x12d) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P698: !_MEMBAR (FP)

P699: !_BSTC [15] (maybe <- 0x3f8000da) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P700: !_MEMBAR (FP)
membar #StoreLoad

P701: !_DWST [20] (maybe <- 0x12e) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P702: !_DWST [14] (maybe <- 0x12f) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P703: !_MEMBAR (FP)
membar #StoreLoad

P704: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P705: !_MEMBAR (FP)

P706: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 22

P707: !_LD [3] (Int)
lduw [%i1 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P708: !_DWST [12] (maybe <- 0x130) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P709: !_SWAP [5] (maybe <- 0x132) (Int)
mov %l4, %o5
swap  [%i1 + 12], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P710: !_MEMBAR (FP)

P711: !_BST [3] (maybe <- 0x3f8000dd) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P712: !_MEMBAR (FP)
membar #StoreLoad

P713: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P714: !_MEMBAR (FP)

P715: !_BST [23] (maybe <- 0x3f8000e0) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P716: !_MEMBAR (FP)
membar #StoreLoad

P717: !_LD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P718: !_LDD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P719: !_ST_BINIT [22] (maybe <- 0x133) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i2 + 4] %asi
add   %l4, 1, %l4

P720: !_MEMBAR (Int) (LE)
membar #StoreLoad

P721: !_SWAP [13] (maybe <- 0x134) (Int)
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P722: !_LD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P723: !_DWLD [23] (FP)
ldd [%i2 + 8], %f8
! 1 addresses covered
fmovs %f9, %f8

P724: !_MEMBAR (FP)

P725: !_BSTC [4] (maybe <- 0x3f8000e3) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P726: !_MEMBAR (FP)
membar #StoreLoad

P727: !_SWAP [5] (maybe <- 0x135) (Int)
mov %l4, %l6
swap  [%i1 + 12], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P728: !_LDD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P729: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P730: !_ST_BINIT [22] (maybe <- 0x136) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P731: !_MEMBAR (Int)

P732: !_BST [5] (maybe <- 0x3f8000e6) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P733: !_MEMBAR (FP)
membar #StoreLoad

P734: !_ST_BINIT [4] (maybe <- 0x137) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P735: !_MEMBAR (Int)
membar #StoreLoad

P736: !_LDD [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P737: !_MEMBAR (FP)

P738: !_BSTC [0] (maybe <- 0x3f8000e9) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P739: !_MEMBAR (FP)
membar #StoreLoad

P740: !_DWST [7] (maybe <- 0x138) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P741: !_CAS [20] (maybe <- 0x13a) (Int)
add %i2, 12, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P742: !_DWST [8] (maybe <- 0x13b) (Int)
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P743: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P744: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P745: !_DWST [13] (maybe <- 0x13c) (Int) (Branch target of P138)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4
ba P746
nop

TARGET138:
ba RET138
nop


P746: !_DWST [17] (maybe <- 0x13e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P747: !_DWLD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P748: !_SWAP [23] (maybe <- 0x13f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P749: !_LDD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P750: !_DWST_BINIT [15] (maybe <- 0x140) (Int) (Branch target of P293)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4
ba P751
nop

TARGET293:
ba RET293
nop


P751: !_MEMBAR (Int)
membar #StoreLoad

P752: !_CAS [0] (maybe <- 0x142) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
wr %g0, 0x88, %asi
lduwa [%i0] %asi, %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l6, %l7
casa [%i0] %asi, %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P753: !_CASX [13] (maybe <- 0x143) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %o5
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %o5, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P754: !_ST_BINIT [7] (maybe <- 0x145) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P755: !_MEMBAR (Int)
membar #StoreLoad

P756: !_CAS [21] (maybe <- 0x146) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P757: !_LD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P758: !_DWST [15] (maybe <- 0x147) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P759: !_DWLD [1] (Int)
ldx [%i0 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P760: !_PREFETCH [13] (Int)
prefetch [%i3 + 4], 2

P761: !_PREFETCH [16] (Int)
prefetch [%i2 + 4], 1

P762: !_CASX [13] (maybe <- 0x149) (Int) (CBR)
ldx [%i3], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i3], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET762
nop
RET762:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P763: !_SWAP [15] (maybe <- 0x14b) (Int)
mov %l4, %l3
swap  [%i2 + 0], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P764: !_MEMBAR (FP)
membar #StoreLoad

P765: !_BLD [15] (FP) (Branch target of P689)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11
ba P766
nop

TARGET689:
ba RET689
nop


P766: !_MEMBAR (FP)

P767: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P768: !_MEMBAR (FP)

P769: !_ST [6] (maybe <- 0x14c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P770: !_LD [0] (Int)
lduw [%i0 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P771: !_MEMBAR (FP)

P772: !_BST [9] (maybe <- 0x3f8000ec) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P773: !_MEMBAR (FP) (Branch target of P115)
membar #StoreLoad
ba P774
nop

TARGET115:
ba RET115
nop


P774: !_ST [5] (maybe <- 0x14d) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P775: !_ST_BINIT [0] (maybe <- 0x14e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P776: !_MEMBAR (Int)
membar #StoreLoad

P777: !_CASX [15] (maybe <- 0x14f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P778: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P779: !_SWAP [12] (maybe <- 0x151) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P780: !_SWAP [10] (maybe <- 0x152) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P781: !_ST_BINIT [17] (maybe <- 0x153) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P782: !_MEMBAR (Int)
membar #StoreLoad

P783: !_LDD [10] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P784: !_CAS [0] (maybe <- 0x154) (Int)
lduw [%i0], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%i0], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P785: !_DWLD [1] (Int)
ldx [%i0 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P786: !_MEMBAR (FP)

P787: !_BSTC [19] (maybe <- 0x3f8000ef) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P788: !_MEMBAR (FP)
membar #StoreLoad

P789: !_LD [8] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduwa [%i3 + 12] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P790: !_SWAP [4] (maybe <- 0x155) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %l6
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l6, %o5, %l3
srl %l3, 8, %l3
sll %l6, 8, %l6
and %l6, %o5, %l6
or %l6, %l3, %l6
srl %l6, 16, %l3
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l3, %l6
swapa  [%i1 + 4] %asi, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P791: !_SWAP [12] (maybe <- 0x156) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P792: !_LD [7] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i3 + 4] %asi, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P793: !_ST_BINIT [18] (maybe <- 0x157) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P794: !_MEMBAR (Int)
membar #StoreLoad

P795: !_LD [13] (Int)
lduw [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P796: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 21

P797: !_ST_BINIT [19] (maybe <- 0x158) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P798: !_MEMBAR (Int)
membar #StoreLoad

P799: !_CASX [19] (maybe <- 0x159) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P800: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P801: !_LDD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P802: !_SWAP [1] (maybe <- 0x15b) (Int)
mov %l4, %l7
swap  [%i0 + 4], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P803: !_MEMBAR (FP)

P804: !_BST [8] (maybe <- 0x3f8000f2) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P805: !_MEMBAR (FP)
membar #StoreLoad

P806: !_ST_BINIT [7] (maybe <- 0x15c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P807: !_MEMBAR (Int) (Branch target of P859)
membar #StoreLoad
ba P808
nop

TARGET859:
ba RET859
nop


P808: !_REPLACEMENT [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P809: !_LD [16] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 4], %f15
! 1 addresses covered
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P810: !_MEMBAR (FP)

P811: !_BSTC [13] (maybe <- 0x3f8000f5) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P812: !_MEMBAR (FP) (Branch target of P828)
ba P813
nop

TARGET828:
ba RET828
nop


P813: !_BST [9] (maybe <- 0x3f8000f8) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P814: !_MEMBAR (FP)
membar #StoreLoad

P815: !_DWST_BINIT [12] (maybe <- 0x15d) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P816: !_MEMBAR (Int)
membar #StoreLoad

P817: !_DWLD [12] (Int) (CBR) (Branch target of P886)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET817
nop
RET817:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0

ba P818
nop

TARGET886:
ba RET886
nop


P818: !_CASX [8] (maybe <- 0x15f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P819: !_MEMBAR (FP)
membar #StoreLoad

P820: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P821: !_MEMBAR (FP)

P822: !_BST [8] (maybe <- 0x3f8000fb) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET822
nop
RET822:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P823: !_MEMBAR (FP)
membar #StoreLoad

P824: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P825: !_MEMBAR (FP)

P826: !_CAS [17] (maybe <- 0x160) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P827: !_MEMBAR (FP)

P828: !_BSTC [23] (maybe <- 0x3f8000fe) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET828
nop
RET828:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P829: !_MEMBAR (FP)

P830: !_BSTC [12] (maybe <- 0x3f800101) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P831: !_MEMBAR (FP)
membar #StoreLoad

P832: !_DWLD [5] (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #3
!Logical addr: 5 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
ldd [%i1 + 8], %f6
! 1 addresses covered
fmovs %f7, %f6

P833: !_DWST [6] (maybe <- 0x161) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P834: !_LD [0] (Int)
lduw [%i0 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P835: !_DWST [15] (maybe <- 0x163) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P836: !_MEMBAR (FP)

P837: !_BSTC [13] (maybe <- 0x3f800104) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P838: !_MEMBAR (FP)
membar #StoreLoad

P839: !_LD [0] (Int)
lduw [%i0 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P840: !_DWST_BINIT [14] (maybe <- 0x165) (Int) (Branch target of P205)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4
ba P841
nop

TARGET205:
ba RET205
nop


P841: !_MEMBAR (Int)
membar #StoreLoad

P842: !_CASX [22] (maybe <- 0x166) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i3], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P843: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 2

P844: !_CASX [14] (maybe <- 0x168) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l3
mov %l4, %o2
casx [%l6], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P845: !_MEMBAR (FP)

P846: !_BST [7] (maybe <- 0x3f800107) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET846
nop
RET846:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P847: !_MEMBAR (FP)

P848: !_BSTC [1] (maybe <- 0x3f80010a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P849: !_MEMBAR (FP)
membar #StoreLoad

P850: !_SWAP [9] (maybe <- 0x169) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P851: !_MEMBAR (FP)

P852: !_BST [8] (maybe <- 0x3f80010d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P853: !_MEMBAR (FP)
membar #StoreLoad

P854: !_DWST [7] (maybe <- 0x16a) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P855: !_SWAP [9] (maybe <- 0x16c) (Int)
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P856: !_ST [21] (maybe <- 0x16d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P857: !_DWST_BINIT [0] (maybe <- 0x16e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P858: !_MEMBAR (Int) (Branch target of P133)
membar #StoreLoad
ba P859
nop

TARGET133:
ba RET133
nop


P859: !_DWLD [15] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET859
nop
RET859:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P860: !_DWST [9] (maybe <- 0x170) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P861: !_DWST_BINIT [22] (maybe <- 0x172) (Int) (Branch target of P663)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4
ba P862
nop

TARGET663:
ba RET663
nop


P862: !_MEMBAR (Int)
membar #StoreLoad

P863: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P864: !_MEMBAR (FP)

P865: !_BST [19] (maybe <- 0x3f800110) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET865
nop
RET865:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P866: !_MEMBAR (FP)
membar #StoreLoad

P867: !_DWLD [18] (FP)
ldd [%i2 + 0], %f10
! 2 addresses covered

P868: !_CASX [18] (maybe <- 0x174) (Int)
ldx [%i2], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l7
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i2], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P869: !_CASX [3] (maybe <- 0x176) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l7
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P870: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P871: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P872: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 28

P873: !_MEMBAR (FP)

P874: !_BST [3] (maybe <- 0x3f800113) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P875: !_MEMBAR (FP)
membar #StoreLoad

P876: !_CAS [4] (maybe <- 0x178) (Int)
add %i1, 4, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P877: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET877
nop
RET877:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P878: !_BST [0] (maybe <- 0x3f800116) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P879: !_MEMBAR (FP)
membar #StoreLoad

P880: !_DWST [19] (maybe <- 0x179) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P881: !_DWST_BINIT [8] (maybe <- 0x17b) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P882: !_MEMBAR (Int)
membar #StoreLoad

P883: !_DWST_BINIT [18] (maybe <- 0x17c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P884: !_MEMBAR (Int)
membar #StoreLoad

P885: !_ST_BINIT [6] (maybe <- 0x17e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P886: !_MEMBAR (Int) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET886
nop
RET886:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P887: !_BSTC [12] (maybe <- 0x3f800119) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P888: !_MEMBAR (FP)
membar #StoreLoad

P889: !_ST [14] (maybe <- 0x17f) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P890: !_CAS [23] (maybe <- 0x180) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P891: !_DWST [21] (maybe <- 0x181) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P892: !_ST_BINIT [18] (maybe <- 0x183) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P893: !_MEMBAR (Int)
membar #StoreLoad

P894: !_DWST [0] (maybe <- 0x184) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P895: !_MEMBAR (FP)
membar #StoreLoad

P896: !_BLD [3] (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #0
!Logical addr: 3 

sethi %hi(0x600000), %o5
add   %i1, %o5, %i1
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P897: !_MEMBAR (FP) (Branch target of P542)
ba P898
nop

TARGET542:
ba RET542
nop


P898: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 3

P899: !_DWLD [19] (FP)
ldd [%i2 + 0], %f18
! 2 addresses covered
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0

P900: !_MEMBAR (FP)

P901: !_BSTC [1] (maybe <- 0x3f80011c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P902: !_MEMBAR (FP)
membar #StoreLoad

P903: !_CAS [1] (maybe <- 0x186) (Int)
add %i0, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P904: !_MEMBAR (FP)

P905: !_BST [1] (maybe <- 0x3f80011f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P906: !_MEMBAR (FP)
membar #StoreLoad

P907: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P908: !_MEMBAR (FP)

P909: !_SWAP [16] (maybe <- 0x187) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P910: !_LDD [0] (Int) (Branch target of P487)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
ba P911
nop

TARGET487:
ba RET487
nop


P911: !_LD [10] (Int)
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P912: !_SWAP [9] (maybe <- 0x188) (Int)
mov %l4, %o1
swap  [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P913: !_CASX [1] (maybe <- 0x189) (Int)
ldx [%i0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i0], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P914: !_ST [23] (maybe <- 0x18b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P915: !_DWST [11] (maybe <- 0x18c) (Int) (Branch target of P23)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4
ba P916
nop

TARGET23:
ba RET23
nop


P916: !_ST [17] (maybe <- 0x18d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P917: !_CASX [18] (maybe <- 0x18e) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P918: !_ST_BINIT [11] (maybe <- 0x190) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i3 + 12] %asi
add   %l4, 1, %l4

P919: !_MEMBAR (Int) (LE)
membar #StoreLoad

P920: !_CASX [20] (maybe <- 0x191) (Int)
add %i2, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P921: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l6
or %l6, %o2, %o2

P922: !_CAS [16] (maybe <- 0x192) (Int)
add %i2, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P923: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P924: !_LD [7] (Int)
lduw [%i3 + 4], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P925: !_DWLD [0] (Int)
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P926: !_MEMBAR (FP)
membar #StoreLoad

P927: !_BLD [14] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET927
nop
RET927:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P928: !_MEMBAR (FP)

P929: !_CASX [20] (maybe <- 0x193) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %o5
ldx [%o5], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l7
mov %l4, %o2
casx [%o5], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P930: !_ST_BINIT [20] (maybe <- 0x194) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET930
nop
RET930:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P931: !_MEMBAR (Int)
membar #StoreLoad

P932: !_DWLD [5] (Int)
ldx [%i1 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P933: !_ST_BINIT [9] (maybe <- 0x195) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P934: !_MEMBAR (Int)
membar #StoreLoad

P935: !_ST_BINIT [0] (maybe <- 0x196) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P936: !_MEMBAR (Int)
membar #StoreLoad

P937: !_DWST_BINIT [1] (maybe <- 0x197) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P938: !_MEMBAR (Int)
membar #StoreLoad

P939: !_ST_BINIT [21] (maybe <- 0x199) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P940: !_MEMBAR (Int)
membar #StoreLoad

P941: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 20

P942: !_MEMBAR (FP)
membar #StoreLoad

P943: !_BLD [2] (FP) (Branch target of P258)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9
ba P944
nop

TARGET258:
ba RET258
nop


P944: !_MEMBAR (FP) (Branch target of P817)
ba P945
nop

TARGET817:
ba RET817
nop


P945: !_CASX [7] (maybe <- 0x19a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P946: !_ST_BINIT [9] (maybe <- 0x19c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P947: !_MEMBAR (Int)
membar #StoreLoad

P948: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P949: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET949
nop
RET949:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P950: !_ST_BINIT [3] (maybe <- 0x19d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P951: !_MEMBAR (Int)
membar #StoreLoad

P952: !_PREFETCH [18] (Int) (Branch target of P450)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 2
ba P953
nop

TARGET450:
ba RET450
nop


P953: !_DWLD [3] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P954: !_ST_BINIT [15] (maybe <- 0x19e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P955: !_MEMBAR (Int)
membar #StoreLoad

P956: !_DWST_BINIT [15] (maybe <- 0x19f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P957: !_MEMBAR (Int)
membar #StoreLoad

P958: !_ST_BINIT [11] (maybe <- 0x1a1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P959: !_MEMBAR (Int)
membar #StoreLoad

P960: !_DWLD [0] (Int)
ldx [%i0 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P961: !_LD [1] (Int)
lduw [%i0 + 4], %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P962: !_CASX [19] (maybe <- 0x1a2) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %o5
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %o5, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P963: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+12], %l6
st %l6, [%i2+12]
add %i2, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P964: !_DWLD [10] (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET964
nop
RET964:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P965: !_SWAP [9] (maybe <- 0x1a4) (Int)
mov %l4, %o1
swap  [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P966: !_ST [13] (maybe <- 0x1a5) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P967: !_ST [5] (maybe <- 0x1a6) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P968: !_CAS [4] (maybe <- 0x1a7) (Int)
add %i1, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%o5], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P969: !_CAS [20] (maybe <- 0x1a8) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P970: !_REPLACEMENT [5] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P971: !_DWLD [3] (Int)
ldx [%i1 + 0], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %l6
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P972: !_LDD [20] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P973: !_ST [18] (maybe <- 0x3f800122) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 0 ]

P974: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 21

P975: !_SWAP [17] (maybe <- 0x1a9) (Int)
mov %l4, %o0
swap  [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P976: !_PREFETCH [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 20

P977: !_DWLD [12] (Int) (Branch target of P877)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
ba P978
nop

TARGET877:
ba RET877
nop


P978: !_ST [0] (maybe <- 0x1aa) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P979: !_DWLD [2] (Int)
ldx [%i0 + 8], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %o5
or %o5, %o1, %o1

P980: !_LD [1] (Int)
lduw [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P981: !_MEMBAR (FP)

P982: !_BST [7] (maybe <- 0x3f800123) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P983: !_MEMBAR (FP)
membar #StoreLoad

P984: !_DWST_BINIT [16] (maybe <- 0x1ab) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P985: !_MEMBAR (Int)
membar #StoreLoad

P986: !_DWST_BINIT [19] (maybe <- 0x1ad) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P987: !_MEMBAR (Int)
membar #StoreLoad

P988: !_DWLD [9] (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l3
or %l3, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET988
nop
RET988:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P989: !_DWST [19] (maybe <- 0x1af) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P990: !_DWLD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l7
or %l7, %o3, %o3

P991: !_LDD [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P992: !_MEMBAR (FP)

P993: !_BSTC [6] (maybe <- 0x3f800126) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P994: !_MEMBAR (FP)
membar #StoreLoad

P995: !_BLD [11] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET995
nop
RET995:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P996: !_MEMBAR (FP)

P997: !_BSTC [9] (maybe <- 0x3f800129) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P998: !_MEMBAR (FP)
membar #StoreLoad

P999: !_DWLD [11] (Int)
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1000: !_PREFETCH [12] (Int) (Loop exit)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 22
loop_exit_0_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_0_0
nop

P1001: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1001
nop
RET1001:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


END_NODES0: ! Test instruction sequence for CPU 0 ends
sethi %hi(0xdead0e0f), %o5
or    %o5, %lo(0xdead0e0f), %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
sethi %hi(0xdead0e0f), %o5
or    %o5, %lo(0xdead0e0f), %o5
stw %o5, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func1:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l7
or    %l7, %lo(0xdeadbee0), %l7
stw   %l7, [%i5]
sethi %hi(0xdeadbee1), %l7
or    %l7, %lo(0xdeadbee1), %l7
stw   %l7, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x01deade1), %l7
or    %l7, %lo(0x01deade1), %l7
stw %l7, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x800001), %l4
or    %l4, %lo(0x800001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x40000001), %l7
or    %l7, %lo(0x40000001), %l7
stw %l7, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x34800000), %l7
or    %l7, %lo(0x34800000), %l7
stw %l7, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x6f2^4
sethi %hi(0x6f2), %l0
or    %l0, %lo(0x6f2), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES1: ! Test instruction sequence for ISTREAM 1 begins

P1002: !_LD [9] (Int) (Loop entry)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_1_0:
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P1003: !_MEMBAR (FP)
membar #StoreLoad

P1004: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P1005: !_MEMBAR (FP)

P1006: !_CAS [9] (maybe <- 0x800001) (Int) (Branch target of P1673)
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%i3], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4
ba P1007
nop

TARGET1673:
ba RET1673
nop


P1007: !_LDD [10] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P1008: !_MEMBAR (FP)

P1009: !_BST [0] (maybe <- 0x40000001) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1009
nop
RET1009:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1010: !_MEMBAR (FP)
membar #StoreLoad

P1011: !_DWST_BINIT [22] (maybe <- 0x800002) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1012: !_MEMBAR (Int)

P1013: !_BST [17] (maybe <- 0x40000004) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1014: !_MEMBAR (FP)
membar #StoreLoad

P1015: !_ST_BINIT [0] (maybe <- 0x800004) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P1016: !_MEMBAR (Int)
membar #StoreLoad

P1017: !_ST [0] (maybe <- 0x40000007) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P1018: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 22

P1019: !_DWLD [2] (Int)
ldx [%i0 + 8], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l3
or %l3, %o2, %o2

P1020: !_SWAP [13] (maybe <- 0x800005) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %o3, %l7, %o5
srl %o5, 8, %o5
sll %o3, 8, %o3
and %o3, %l7, %o3
or %o3, %o5, %o3
srl %o3, 16, %o5
sll %o3, 16, %o3
srl %o3, 0, %o3
or %o3, %o5, %o3
swapa  [%i2 + 4] %asi, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1021: !_DWST_BINIT [7] (maybe <- 0x800006) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P1022: !_MEMBAR (Int)
membar #StoreLoad

P1023: !_CASX [7] (maybe <- 0x800008) (Int)
ldx [%i3], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P1024: !_CAS [8] (maybe <- 0x80000a) (Int)
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1025: !_MEMBAR (FP)

P1026: !_BSTC [7] (maybe <- 0x40000008) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1027: !_MEMBAR (FP)
membar #StoreLoad

P1028: !_LD [8] (Int) (Branch target of P1763)
lduw [%i3 + 12], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
ba P1029
nop

TARGET1763:
ba RET1763
nop


P1029: !_LD [23] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduwa [%i2 + 12] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1030: !_LDD [23] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1031: !_ST_BINIT [21] (maybe <- 0x80000b) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P1032: !_MEMBAR (Int)
membar #StoreLoad

P1033: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P1034: !_MEMBAR (FP)

P1035: !_BSTC [11] (maybe <- 0x4000000b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1036: !_MEMBAR (FP)
membar #StoreLoad

P1037: !_CASX [5] (maybe <- 0x80000c) (Int)
add %i1, 8, %o5
ldx [%o5], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l7
mov %l4, %o4
casx [%o5], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P1038: !_ST_BINIT [7] (maybe <- 0x80000d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P1039: !_MEMBAR (Int)
membar #StoreLoad

P1040: !_CASX [6] (maybe <- 0x80000e) (Int)
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l6
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1041: !_ST_BINIT [1] (maybe <- 0x800010) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P1042: !_MEMBAR (Int)
membar #StoreLoad

P1043: !_LDD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1044: !_REPLACEMENT [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P1045: !_CASX [4] (maybe <- 0x800011) (Int)
ldx [%i1], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %o5
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i1], %o5, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P1046: !_CASX [6] (maybe <- 0x800013) (Int) (LE)
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l3, %o5, %l6
srlx %l6, 8, %l6
sllx %l3, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3 
sethi %hi(0xffff0000), %o5
srlx %l3, 16, %l6
andn %l6, %o5, %l6
andn %l3, %o5, %l3
sllx %l3, 16, %l3
or %l3, %l6, %l3 
srlx %l3, 32, %l6
sllx %l3, 32, %l3
or %l3, %l6, %l6 
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldxa [%i2] %asi, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
mov %l7, %o5
mov  %l6, %l7
casxa [%i2] %asi, %o5, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
add  %l4, 1, %l4

P1047: !_ST_BINIT [11] (maybe <- 0x800015) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4

P1048: !_MEMBAR (Int) (LE)
membar #StoreLoad

P1049: !_LDD [9] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1050: !_MEMBAR (FP) (Branch target of P1234)
ba P1051
nop

TARGET1234:
ba RET1234
nop


P1051: !_BSTC [6] (maybe <- 0x4000000e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1052: !_MEMBAR (FP)
membar #StoreLoad

P1053: !_PREFETCH [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 3

P1054: !_CAS [7] (maybe <- 0x800016) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P1055: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1056: !_DWST [6] (maybe <- 0x40000011) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P1057: !_PREFETCH [8] (Int)
prefetch [%i3 + 12], 4

P1058: !_CASX [20] (maybe <- 0x800017) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %o5
mov %l4, %o1
casx [%l3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1059: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 2

P1060: !_DWST [2] (maybe <- 0x800018) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P1061: !_SWAP [19] (maybe <- 0x800019) (Int)
mov %l4, %o2
swap  [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1062: !_DWST_BINIT [18] (maybe <- 0x80001a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P1063: !_MEMBAR (Int)
membar #StoreLoad

P1064: !_ST_BINIT [18] (maybe <- 0x80001c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P1065: !_MEMBAR (Int)
membar #StoreLoad

P1066: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P1067: !_MEMBAR (FP)

P1068: !_LD [17] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 12], %f9
! 1 addresses covered

P1069: !_ST_BINIT [6] (maybe <- 0x80001d) (Int) (Branch target of P1652)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P1070
nop

TARGET1652:
ba RET1652
nop


P1070: !_MEMBAR (Int)
membar #StoreLoad

P1071: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P1072: !_SWAP [7] (maybe <- 0x80001e) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %o3, %l6, %l7
srl %l7, 8, %l7
sll %o3, 8, %o3
and %o3, %l6, %o3
or %o3, %l7, %o3
srl %o3, 16, %l7
sll %o3, 16, %o3
srl %o3, 0, %o3
or %o3, %l7, %o3
swapa  [%i2 + 4] %asi, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1073: !_ST [17] (maybe <- 0x80001f) (Int) (Branch target of P1311)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4
ba P1074
nop

TARGET1311:
ba RET1311
nop


P1074: !_ST [20] (maybe <- 0x800020) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4

P1075: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1076: !_MEMBAR (FP)

P1077: !_BSTC [10] (maybe <- 0x40000013) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1078: !_MEMBAR (FP)
membar #StoreLoad

P1079: !_DWST [3] (maybe <- 0x800021) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i1 + 0]
add   %l4, 1, %l4

P1080: !_CAS [16] (maybe <- 0x800023) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1081: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P1082: !_CASX [17] (maybe <- 0x800024) (Int)
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P1083: !_DWST_BINIT [7] (maybe <- 0x800025) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1084: !_MEMBAR (Int)
membar #StoreLoad

P1085: !_CAS [9] (maybe <- 0x800027) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%i3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1086: !_SWAP [19] (maybe <- 0x800028) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P1087: !_MEMBAR (FP)
membar #StoreLoad

P1088: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P1089: !_MEMBAR (FP) (Branch target of P1908)
ba P1090
nop

TARGET1908:
ba RET1908
nop


P1090: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1091: !_LD [19] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1092: !_MEMBAR (FP)
membar #StoreLoad

P1093: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P1094: !_MEMBAR (FP)

P1095: !_DWLD [19] (Int)
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P1096: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1096
nop
RET1096:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1097: !_BST [3] (maybe <- 0x40000016) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1098: !_MEMBAR (FP)
membar #StoreLoad

P1099: !_CASX [23] (maybe <- 0x800029) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l3
mov %l4, %o2
casx [%l6], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P1100: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1101: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 23

P1102: !_LDD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1103: !_CASX [6] (maybe <- 0x80002a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1104: !_DWST_BINIT [8] (maybe <- 0x80002c) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P1105: !_MEMBAR (Int)
membar #StoreLoad

P1106: !_DWLD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P1107: !_CAS [17] (maybe <- 0x80002d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P1108: !_DWST_BINIT [0] (maybe <- 0x80002e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P1109: !_MEMBAR (Int)
membar #StoreLoad

P1110: !_DWLD [9] (FP) (Branch target of P1800)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %f0
! 2 addresses covered
ba P1111
nop

TARGET1800:
ba RET1800
nop


P1111: !_DWST_BINIT [12] (maybe <- 0x800030) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P1112: !_MEMBAR (Int)

P1113: !_BST [18] (maybe <- 0x40000019) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1114: !_MEMBAR (FP)
membar #StoreLoad

P1115: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1116: !_CAS [15] (maybe <- 0x800032) (Int)
lduw [%i3], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i3], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1117: !_CASX [15] (maybe <- 0x800033) (Int)
ldx [%i3], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P1118: !_LD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P1119: !_SWAP [4] (maybe <- 0x800035) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %o3, %l7, %o5
srl %o5, 8, %o5
sll %o3, 8, %o3
and %o3, %l7, %o3
or %o3, %o5, %o3
srl %o3, 16, %o5
sll %o3, 16, %o3
srl %o3, 0, %o3
or %o3, %o5, %o3
swapa  [%i1 + 4] %asi, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1120: !_ST [10] (maybe <- 0x800036) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P1121: !_LD [0] (Int)
lduw [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P1122: !_LDD [10] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1123: !_MEMBAR (FP)

P1124: !_BST [7] (maybe <- 0x4000001c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1125: !_MEMBAR (FP)
membar #StoreLoad

P1126: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P1127: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1128: !_MEMBAR (FP)
membar #StoreLoad

P1129: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P1130: !_MEMBAR (FP)

P1131: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P1132: !_MEMBAR (FP)

P1133: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P1134: !_MEMBAR (FP)

P1135: !_SWAP [11] (maybe <- 0x800037) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1136: !_CASX [10] (maybe <- 0x800038) (Int)
ldx [%i3], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P1137: !_DWST_BINIT [15] (maybe <- 0x80003a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1138: !_MEMBAR (Int)
membar #StoreLoad

P1139: !_DWLD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0

P1140: !_LD [16] (Int)
lduw [%i2 + 4], %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1141: !_DWST_BINIT [13] (maybe <- 0x80003c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P1142: !_MEMBAR (Int)
membar #StoreLoad

P1143: !_DWST [4] (maybe <- 0x80003e) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i1 + 0]
add   %l4, 1, %l4

P1144: !_CASX [10] (maybe <- 0x800040) (Int) (Branch target of P1265)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4
ba P1145
nop

TARGET1265:
ba RET1265
nop


P1145: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P1146: !_LD [4] (Int)
lduw [%i1 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1147: !_DWST [1] (maybe <- 0x4000001f) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i0 + 0]

P1148: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P1149: !_CASX [13] (maybe <- 0x800042) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P1150: !_LDD [12] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1151: !_MEMBAR (FP)

P1152: !_BSTC [9] (maybe <- 0x40000021) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1153: !_MEMBAR (FP)

P1154: !_BSTC [11] (maybe <- 0x40000024) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1155: !_MEMBAR (FP)

P1156: !_BST [18] (maybe <- 0x40000027) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1157: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1157
nop
RET1157:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1158: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1159: !_MEMBAR (FP)

P1160: !_BST [11] (maybe <- 0x4000002a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1161: !_MEMBAR (FP)

P1162: !_BST [14] (maybe <- 0x4000002d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1163: !_MEMBAR (FP)

P1164: !_BST [8] (maybe <- 0x40000030) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1165: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1165
nop
RET1165:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1166: !_DWST_BINIT [18] (maybe <- 0x800044) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P1167: !_MEMBAR (Int)
membar #StoreLoad

P1168: !_DWLD [23] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %f18
! 1 addresses covered
fmovs %f19, %f11

P1169: !_CASX [15] (maybe <- 0x800046) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i3], %l6, %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
add  %l4, 1, %l4

P1170: !_DWST [8] (maybe <- 0x40000033) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 8]

P1171: !_ST [2] (maybe <- 0x800048) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P1172: !_MEMBAR (FP)

P1173: !_BST [6] (maybe <- 0x40000034) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1174: !_MEMBAR (FP) (Branch target of P1278)
membar #StoreLoad
ba P1175
nop

TARGET1278:
ba RET1278
nop


P1175: !_ST_BINIT [10] (maybe <- 0x800049) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P1176: !_MEMBAR (Int)
membar #StoreLoad

P1177: !_SWAP [17] (maybe <- 0x80004a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P1178: !_MEMBAR (FP) (Branch target of P1351)
ba P1179
nop

TARGET1351:
ba RET1351
nop


P1179: !_BSTC [10] (maybe <- 0x40000037) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1180: !_MEMBAR (FP)
membar #StoreLoad

P1181: !_DWST [10] (maybe <- 0x80004b) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P1182: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 0

P1183: !_CASX [11] (maybe <- 0x80004d) (Int)
add %i3, 8, %o5
ldx [%o5], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov  %o2, %l7
mov %l4, %o3
casx [%o5], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P1184: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1185: !_DWST_BINIT [14] (maybe <- 0x80004e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P1186: !_MEMBAR (Int)
membar #StoreLoad

P1187: !_PREFETCH [18] (Int)
prefetch [%i3 + 0], 4

P1188: !_CAS [4] (maybe <- 0x80004f) (Int)
add %i1, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1189: !_MEMBAR (FP)
membar #StoreLoad

P1190: !_BLD [19] (FP) (Branch target of P1215)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14
ba P1191
nop

TARGET1215:
ba RET1215
nop


P1191: !_MEMBAR (FP)

P1192: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P1193: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1193
nop
RET1193:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1194: !_LD [2] (FP)
ld [%i0 + 12], %f2
! 1 addresses covered

P1195: !_REPLACEMENT [13] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P1196: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P1197: !_CAS [20] (maybe <- 0x800050) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P1198: !_SWAP [21] (maybe <- 0x800051) (Int)
mov %l4, %o2
swap  [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1199: !_ST [13] (maybe <- 0x800052) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P1200: !_DWST_BINIT [8] (maybe <- 0x800053) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P1201: !_MEMBAR (Int)
membar #StoreLoad

P1202: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 20

P1203: !_SWAP [23] (maybe <- 0x800054) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P1204: !_SWAP [4] (maybe <- 0x800055) (Int)
mov %l4, %o3
swap  [%i1 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1205: !_CASX [5] (maybe <- 0x800056) (Int)
add %i1, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P1206: !_MEMBAR (FP)

P1207: !_BSTC [10] (maybe <- 0x4000003a) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1208: !_MEMBAR (FP)

P1209: !_BST [15] (maybe <- 0x4000003d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1210: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1210
nop
RET1210:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1211: !_DWST [18] (maybe <- 0x800057) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P1212: !_DWST_BINIT [20] (maybe <- 0x800059) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P1213: !_MEMBAR (Int)
membar #StoreLoad

P1214: !_DWLD [3] (Int)
ldx [%i1 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1

P1215: !_CAS [17] (maybe <- 0x80005a) (Int) (CBR)
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1215
nop
RET1215:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1216: !_DWST_BINIT [10] (maybe <- 0x80005b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P1217: !_MEMBAR (Int) (Branch target of P1738)
ba P1218
nop

TARGET1738:
ba RET1738
nop


P1218: !_BST [23] (maybe <- 0x40000040) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1219: !_MEMBAR (FP)
membar #StoreLoad

P1220: !_DWST [12] (maybe <- 0x80005d) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P1221: !_MEMBAR (FP)

P1222: !_BST [7] (maybe <- 0x40000043) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1223: !_MEMBAR (FP)
membar #StoreLoad

P1224: !_PREFETCH [13] (Int)
prefetch [%i2 + 4], 0

P1225: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P1226: !_ST [6] (maybe <- 0x80005f) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1227: !_SWAP [15] (maybe <- 0x800060) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P1228: !_ST [1] (maybe <- 0x800061) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P1229: !_REPLACEMENT [21] (Int)
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P1230: !_SWAP [20] (maybe <- 0x800062) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1231: !_LD [13] (Int) (LE) (Branch target of P1334)
wr %g0, 0x88, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduwa [%i3 + 4] %asi, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
ba P1232
nop

TARGET1334:
ba RET1334
nop


P1232: !_MEMBAR (FP)

P1233: !_BST [6] (maybe <- 0x40000046) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1234: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1234
nop
RET1234:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1235: !_DWST_BINIT [0] (maybe <- 0x800063) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P1236: !_MEMBAR (Int)
membar #StoreLoad

P1237: !_PREFETCH [22] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetcha [%i3 + 4] %asi, 1

P1238: !_MEMBAR (FP)
membar #StoreLoad

P1239: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P1240: !_MEMBAR (FP)

P1241: !_ST [21] (maybe <- 0x800065) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1242: !_DWST_BINIT [1] (maybe <- 0x800066) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P1243: !_MEMBAR (Int)
membar #StoreLoad

P1244: !_DWST_BINIT [16] (maybe <- 0x800068) (Int) (Branch target of P1942)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P1245
nop

TARGET1942:
ba RET1942
nop


P1245: !_MEMBAR (Int)
membar #StoreLoad

P1246: !_PREFETCH [23] (Int)
prefetch [%i3 + 12], 23

P1247: !_MEMBAR (FP)

P1248: !_BST [3] (maybe <- 0x40000049) (FP) (Branch target of P1982)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi
ba P1249
nop

TARGET1982:
ba RET1982
nop


P1249: !_MEMBAR (FP)
membar #StoreLoad

P1250: !_SWAP [21] (maybe <- 0x80006a) (Int)
mov %l4, %o4
swap  [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1251: !_LD [23] (Int)
lduw [%i3 + 12], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1252: !_ST [23] (maybe <- 0x80006b) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1253: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P1254: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1255: !_ST_BINIT [11] (maybe <- 0x80006c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1256: !_MEMBAR (Int)
membar #StoreLoad

P1257: !_CAS [22] (maybe <- 0x80006d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P1258: !_ST [17] (maybe <- 0x4000004c) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P1259: !_PREFETCH [13] (Int) (CBR)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 21

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1259
nop
RET1259:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1260: !_ST [8] (maybe <- 0x80006e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1261: !_CAS [15] (maybe <- 0x80006f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%i2], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P1262: !_DWLD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P1263: !_DWST [6] (maybe <- 0x800070) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P1264: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1265: !_CASX [13] (maybe <- 0x800072) (Int) (CBR)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1265
nop
RET1265:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1266: !_REPLACEMENT [22] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P1267: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 2

P1268: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P1269: !_SWAP [23] (maybe <- 0x800074) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 12], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P1270: !_SWAP [15] (maybe <- 0x800075) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1271: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P1272: !_SWAP [12] (maybe <- 0x800076) (Int) (Branch target of P1513)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P1273
nop

TARGET1513:
ba RET1513
nop


P1273: !_DWST [4] (maybe <- 0x800077) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i1 + 0]
add   %l4, 1, %l4

P1274: !_DWST [1] (maybe <- 0x800079) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P1275: !_CAS [15] (maybe <- 0x80007b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%i2], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1276: !_LDD [8] (Int) (Branch target of P1780)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
ba P1277
nop

TARGET1780:
ba RET1780
nop


P1277: !_MEMBAR (FP)

P1278: !_BSTC [8] (maybe <- 0x4000004d) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1278
nop
RET1278:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1279: !_MEMBAR (FP)
membar #StoreLoad

P1280: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P1281: !_MEMBAR (FP)

P1282: !_BST [21] (maybe <- 0x40000050) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1283: !_MEMBAR (FP)

P1284: !_BST [23] (maybe <- 0x40000053) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1285: !_MEMBAR (FP)

P1286: !_BSTC [6] (maybe <- 0x40000056) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1287: !_MEMBAR (FP)
membar #StoreLoad

P1288: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P1289: !_MEMBAR (FP)

P1290: !_BSTC [7] (maybe <- 0x40000059) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1290
nop
RET1290:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P1291: !_MEMBAR (FP)
membar #StoreLoad

P1292: !_ST_BINIT [21] (maybe <- 0x80007c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P1293: !_MEMBAR (Int)
membar #StoreLoad

P1294: !_ST_BINIT [23] (maybe <- 0x80007d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1295: !_MEMBAR (Int)

P1296: !_BSTC [10] (maybe <- 0x4000005c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1297: !_MEMBAR (FP)
membar #StoreLoad

P1298: !_LDD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1299: !_CAS [17] (maybe <- 0x80007e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P1300: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1301: !_CASX [22] (maybe <- 0x80007f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l7
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1302: !_MEMBAR (FP)

P1303: !_BSTC [2] (maybe <- 0x4000005f) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1304: !_MEMBAR (FP)
membar #StoreLoad

P1305: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 19

P1306: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1307: !_CAS [16] (maybe <- 0x800081) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P1308: !_DWLD [10] (Int)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1309: !_MEMBAR (FP)
membar #StoreLoad

P1310: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P1311: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1311
nop
RET1311:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P1312: !_ST_BINIT [2] (maybe <- 0x800082) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P1313: !_MEMBAR (Int)
membar #StoreLoad

P1314: !_DWST_BINIT [20] (maybe <- 0x800083) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P1315: !_MEMBAR (Int)
membar #StoreLoad

P1316: !_DWST [14] (maybe <- 0x800084) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P1317: !_LDD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1318: !_MEMBAR (FP)

P1319: !_BSTC [19] (maybe <- 0x40000062) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1320: !_MEMBAR (FP)
membar #StoreLoad

P1321: !_BLD [5] (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 5 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P1322: !_MEMBAR (FP)

P1323: !_BSTC [15] (maybe <- 0x40000065) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1324: !_MEMBAR (FP)
membar #StoreLoad

P1325: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P1326: !_MEMBAR (FP)

P1327: !_ST_BINIT [1] (maybe <- 0x800085) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P1328: !_MEMBAR (Int)
membar #StoreLoad

P1329: !_DWST [14] (maybe <- 0x800086) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P1330: !_CASX [4] (maybe <- 0x800087) (Int)
ldx [%i1], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i1], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P1331: !_ST [21] (maybe <- 0x800089) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1332: !_CAS [21] (maybe <- 0x80008a) (Int)
lduw [%i3], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P1333: !_SWAP [11] (maybe <- 0x80008b) (Int) (Branch target of P1427)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4
ba P1334
nop

TARGET1427:
ba RET1427
nop


P1334: !_DWLD [11] (FP) (CBR)
ldd [%i2 + 8], %f2
! 1 addresses covered
fmovs %f3, %f2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1334
nop
RET1334:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1335: !_LD [3] (Int)
lduw [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1336: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P1337: !_CAS [8] (maybe <- 0x80008c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1338: !_DWST_BINIT [15] (maybe <- 0x80008d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P1339: !_MEMBAR (Int)
membar #StoreLoad

P1340: !_DWST [5] (maybe <- 0x40000068) (FP)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 8]

P1341: !_SWAP [17] (maybe <- 0x80008f) (Int)
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1342: !_DWST_BINIT [22] (maybe <- 0x800090) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P1343: !_MEMBAR (Int)
membar #StoreLoad

P1344: !_LD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 12], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1345: !_MEMBAR (FP)
membar #StoreLoad

P1346: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P1347: !_MEMBAR (FP)

P1348: !_LD [0] (Int)
lduw [%i0 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1349: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1350: !_CAS [2] (maybe <- 0x800092) (Int)
add %i0, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
mov %l4, %o4
cas [%l6], %l3, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1351: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1351
nop
RET1351:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1352: !_BSTC [19] (maybe <- 0x40000069) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1353: !_MEMBAR (FP)
membar #StoreLoad

P1354: !_SWAP [15] (maybe <- 0x800093) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1355: !_SWAP [23] (maybe <- 0x800094) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1356: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l7
or %l7, %o0, %o0

P1357: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 4

P1358: !_MEMBAR (FP)

P1359: !_BST [12] (maybe <- 0x4000006c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1360: !_MEMBAR (FP)
membar #StoreLoad

P1361: !_LDD [22] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1362: !_ST [6] (maybe <- 0x800095) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P1363: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 31

P1364: !_DWST_BINIT [15] (maybe <- 0x800096) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P1365: !_MEMBAR (Int)
membar #StoreLoad

P1366: !_DWLD [4] (Int)
ldx [%i1 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P1367: !_CAS [1] (maybe <- 0x800098) (Int)
add %i0, 4, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P1368: !_DWLD [15] (FP)
ldd [%i3 + 0], %f6
! 2 addresses covered

P1369: !_ST_BINIT [11] (maybe <- 0x800099) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1370: !_MEMBAR (Int)

P1371: !_BST [14] (maybe <- 0x4000006f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1372: !_MEMBAR (FP)
membar #StoreLoad

P1373: !_CAS [6] (maybe <- 0x80009a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1374: !_SWAP [15] (maybe <- 0x80009b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1375: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P1376: !_ST_BINIT [22] (maybe <- 0x80009c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P1377: !_MEMBAR (Int)
membar #StoreLoad

P1378: !_DWST_BINIT [21] (maybe <- 0x80009d) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P1379: !_MEMBAR (Int)
membar #StoreLoad

P1380: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1

P1381: !_ST [0] (maybe <- 0x80009f) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P1382: !_ST_BINIT [22] (maybe <- 0x8000a0) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P1383: !_MEMBAR (Int)
membar #StoreLoad

P1384: !_ST [18] (maybe <- 0x8000a1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1385: !_MEMBAR (FP)

P1386: !_BSTC [0] (maybe <- 0x40000072) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1387: !_MEMBAR (FP)
membar #StoreLoad

P1388: !_ST [12] (maybe <- 0x8000a2) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P1389: !_MEMBAR (FP)

P1390: !_BST [0] (maybe <- 0x40000075) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1391: !_MEMBAR (FP)
membar #StoreLoad

P1392: !_LD [2] (Int)
lduw [%i0 + 12], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P1393: !_CAS [15] (maybe <- 0x8000a3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P1394: !_LD [12] (Int)
lduw [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P1395: !_MEMBAR (FP)
membar #StoreLoad

P1396: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P1397: !_MEMBAR (FP)

P1398: !_LDD [6] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1399: !_MEMBAR (FP)
membar #StoreLoad

P1400: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P1401: !_MEMBAR (FP)

P1402: !_SWAP [10] (maybe <- 0x8000a4) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 4], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1403: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1404: !_CAS [6] (maybe <- 0x8000a5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P1405: !_DWST_BINIT [1] (maybe <- 0x8000a6) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i0 + 0] %asi
add   %l4, 1, %l4

P1406: !_MEMBAR (Int)
membar #StoreLoad

P1407: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 22

P1408: !_ST [16] (maybe <- 0x8000a8) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P1409: !_DWST [3] (maybe <- 0x8000a9) (Int) (CBR)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i1 + 0]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1409
nop
RET1409:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1410: !_MEMBAR (FP)
membar #StoreLoad

P1411: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P1412: !_MEMBAR (FP)

P1413: !_DWST [7] (maybe <- 0x8000ab) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P1414: !_SWAP [18] (maybe <- 0x8000ad) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1415: !_ST [1] (maybe <- 0x8000ae) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P1416: !_ST [12] (maybe <- 0x40000078) (FP)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 0 ]

P1417: !_ST [22] (maybe <- 0x8000af) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P1418: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 21

P1419: !_DWLD [0] (Int)
ldx [%i0 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1420: !_CAS [14] (maybe <- 0x8000b0) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1421: !_MEMBAR (FP)

P1422: !_BSTC [8] (maybe <- 0x40000079) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1423: !_MEMBAR (FP)
membar #StoreLoad

P1424: !_CAS [9] (maybe <- 0x8000b1) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1425: !_MEMBAR (FP)

P1426: !_BST [14] (maybe <- 0x4000007c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1427: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1427
nop
RET1427:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1428: !_ST_BINIT [17] (maybe <- 0x8000b2) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1429: !_MEMBAR (Int)
membar #StoreLoad

P1430: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %l6
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P1431: !_CASX [11] (maybe <- 0x8000b3) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P1432: !_DWLD [9] (FP)
ldd [%i2 + 0], %f18
! 2 addresses covered
fmovs %f18, %f1
fmovs %f19, %f2

P1433: !_MEMBAR (FP)

P1434: !_BST [11] (maybe <- 0x4000007f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1435: !_MEMBAR (FP)
membar #StoreLoad

P1436: !_SWAP [4] (maybe <- 0x8000b4) (Int)
mov %l4, %l3
swap  [%i1 + 4], %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P1437: !_DWLD [1] (Int)
ldx [%i0 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1438: !_ST [17] (maybe <- 0x8000b5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1439: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P1440: !_MEMBAR (FP)
membar #StoreLoad

P1441: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P1442: !_MEMBAR (FP)

P1443: !_BSTC [22] (maybe <- 0x40000082) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1444: !_MEMBAR (FP)

P1445: !_BST [20] (maybe <- 0x40000085) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1446: !_MEMBAR (FP)
membar #StoreLoad

P1447: !_PREFETCH [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 20

P1448: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 0

P1449: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1450: !_DWST_BINIT [4] (maybe <- 0x8000b6) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P1451: !_MEMBAR (Int) (Branch target of P2003)
ba P1452
nop

TARGET2003:
ba RET2003
nop


P1452: !_BST [8] (maybe <- 0x40000088) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1453: !_MEMBAR (FP)
membar #StoreLoad

P1454: !_SWAP [9] (maybe <- 0x8000b8) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1455: !_REPLACEMENT [1] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P1456: !_MEMBAR (FP)

P1457: !_BST [5] (maybe <- 0x4000008b) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1458: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1458
nop
RET1458:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1459: !_BST [1] (maybe <- 0x4000008e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1460: !_MEMBAR (FP)
membar #StoreLoad

P1461: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P1462: !_MEMBAR (FP)

P1463: !_BST [13] (maybe <- 0x40000091) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1464: !_MEMBAR (FP)
membar #StoreLoad

P1465: !_DWST [9] (maybe <- 0x40000094) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P1466: !_MEMBAR (FP)

P1467: !_BST [4] (maybe <- 0x40000096) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1468: !_MEMBAR (FP)
membar #StoreLoad

P1469: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 22

P1470: !_LD [16] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 4], %f6
! 1 addresses covered

P1471: !_SWAP [15] (maybe <- 0x8000b9) (Int)
mov %l4, %o2
swap  [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1472: !_SWAP [18] (maybe <- 0x8000ba) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 0], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P1473: !_CASX [17] (maybe <- 0x8000bb) (Int)
add %i2, 8, %l6
ldx [%l6], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l3
mov %l4, %o4
casx [%l6], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P1474: !_SWAP [14] (maybe <- 0x8000bc) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1475: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P1476: !_DWST [6] (maybe <- 0x8000bd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P1477: !_DWST_BINIT [19] (maybe <- 0x8000bf) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P1478: !_MEMBAR (Int)
membar #StoreLoad

P1479: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P1480: !_MEMBAR (FP)

P1481: !_CASX [17] (maybe <- 0x8000c1) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
sllx %l6, 32, %l6
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldxa [%l3] %asi, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
! move %l7(upper) -> %o2(upper)
or %l7, %g0, %o2
mov  %l7, %o5
mov  %l6, %l7
casxa [%l3] %asi, %o5, %l7
! move %l7(lower) -> %o2(lower)
srlx %o2, 32, %o2
sllx %o2, 32, %o2
srl %l7, 0, %o5
or %o5, %o2, %o2
! move %l7(upper) -> %o3(upper)
or %l7, %g0, %o3
add  %l4, 1, %l4

P1482: !_REPLACEMENT [3] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P1483: !_ST [10] (maybe <- 0x40000099) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 4 ]

P1484: !_MEMBAR (FP)
membar #StoreLoad

P1485: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P1486: !_MEMBAR (FP)

P1487: !_CASX [7] (maybe <- 0x8000c2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l3
! move %l3(upper) -> %o3(lower)
srlx %o3, 32, %o3
sllx %o3, 32, %o3
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i2], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P1488: !_ST_BINIT [6] (maybe <- 0x8000c4) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P1489: !_MEMBAR (Int)
membar #StoreLoad

P1490: !_DWST_BINIT [13] (maybe <- 0x8000c5) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P1491: !_MEMBAR (Int)
membar #StoreLoad

P1492: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P1493: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l7
or %l7, %o0, %o0

P1494: !_MEMBAR (FP)

P1495: !_BSTC [18] (maybe <- 0x4000009a) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1496: !_MEMBAR (FP)
membar #StoreLoad

P1497: !_ST [19] (maybe <- 0x8000c7) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P1498: !_ST [12] (maybe <- 0x8000c8) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1499: !_CASX [5] (maybe <- 0x8000c9) (Int)
add %i1, 8, %l7
ldx [%l7], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l6
mov %l4, %o2
casx [%l7], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P1500: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P1501: !_MEMBAR (FP)

P1502: !_BST [2] (maybe <- 0x4000009d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1503: !_MEMBAR (FP)
membar #StoreLoad

P1504: !_SWAP [3] (maybe <- 0x8000ca) (Int) (Branch target of P1157)
mov %l4, %o3
swap  [%i1 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4
ba P1505
nop

TARGET1157:
ba RET1157
nop


P1505: !_ST_BINIT [10] (maybe <- 0x8000cb) (Int) (Branch target of P1733)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4
ba P1506
nop

TARGET1733:
ba RET1733
nop


P1506: !_MEMBAR (Int)
membar #StoreLoad

P1507: !_LDD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1508: !_DWLD [5] (Int)
ldx [%i1 + 8], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1509: !_DWLD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P1510: !_REPLACEMENT [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P1511: !_ST [15] (maybe <- 0x8000cc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1512: !_LD [3] (Int)
lduw [%i1 + 0], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P1513: !_PREFETCH [3] (Int) (CBR)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 3 

sethi %hi(0x200000), %l3
sub   %i1, %l3, %i1
prefetch [%i1 + 0], 22

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1513
nop
RET1513:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1514: !_MEMBAR (FP)

P1515: !_BSTC [2] (maybe <- 0x400000a0) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1516: !_MEMBAR (FP)

P1517: !_BSTC [12] (maybe <- 0x400000a3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1518: !_MEMBAR (FP)

P1519: !_BSTC [3] (maybe <- 0x400000a6) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1520: !_MEMBAR (FP)
membar #StoreLoad

P1521: !_ST [2] (maybe <- 0x400000a9) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 12 ]

P1522: !_MEMBAR (FP)
membar #StoreLoad

P1523: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P1524: !_MEMBAR (FP) (Branch target of P1096)
ba P1525
nop

TARGET1096:
ba RET1096
nop


P1525: !_ST [21] (maybe <- 0x8000cd) (Int) (Branch target of P1623)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4
ba P1526
nop

TARGET1623:
ba RET1623
nop


P1526: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1527: !_MEMBAR (FP) (Branch target of P1723)
ba P1528
nop

TARGET1723:
ba RET1723
nop


P1528: !_BSTC [3] (maybe <- 0x400000aa) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1529: !_MEMBAR (FP)

P1530: !_BST [12] (maybe <- 0x400000ad) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1531: !_MEMBAR (FP)
membar #StoreLoad

P1532: !_ST [6] (maybe <- 0x8000ce) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P1533: !_MEMBAR (FP)
membar #StoreLoad

P1534: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P1535: !_MEMBAR (FP)

P1536: !_SWAP [5] (maybe <- 0x8000cf) (Int)
mov %l4, %o2
swap  [%i1 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1537: !_CASX [18] (maybe <- 0x8000d0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P1538: !_ST_BINIT [14] (maybe <- 0x8000d2) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1539: !_MEMBAR (Int)
membar #StoreLoad

P1540: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1541: !_CASX [11] (maybe <- 0x8000d3) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l6
mov %l4, %o1
casx [%l7], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1542: !_MEMBAR (FP)

P1543: !_BSTC [8] (maybe <- 0x400000b0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1544: !_MEMBAR (FP)
membar #StoreLoad

P1545: !_DWLD [1] (Int)
ldx [%i0 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P1546: !_REPLACEMENT [4] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+4], %l3
st %l3, [%i2+4]
add %i2, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P1547: !_DWST [10] (maybe <- 0x400000b3) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P1548: !_MEMBAR (FP)

P1549: !_BST [19] (maybe <- 0x400000b5) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1550: !_MEMBAR (FP)
membar #StoreLoad

P1551: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1552: !_MEMBAR (FP)

P1553: !_BSTC [18] (maybe <- 0x400000b8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1554: !_MEMBAR (FP)

P1555: !_BST [3] (maybe <- 0x400000bb) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1556: !_MEMBAR (FP)
membar #StoreLoad

P1557: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1558: !_REPLACEMENT [6] (Int) (Branch target of P1193)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
ba P1559
nop

TARGET1193:
ba RET1193
nop


P1559: !_MEMBAR (FP) (Branch target of P1409)
ba P1560
nop

TARGET1409:
ba RET1409
nop


P1560: !_BSTC [15] (maybe <- 0x400000be) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1561: !_MEMBAR (FP)

P1562: !_BSTC [13] (maybe <- 0x400000c1) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1563: !_MEMBAR (FP)
membar #StoreLoad

P1564: !_CAS [9] (maybe <- 0x8000d4) (Int) (Branch target of P1660)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4
ba P1565
nop

TARGET1660:
ba RET1660
nop


P1565: !_ST [17] (maybe <- 0x8000d5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1566: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P1567: !_LD [19] (Int)
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P1568: !_CASX [1] (maybe <- 0x8000d6) (Int) (CBR)
ldx [%i0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1568
nop
RET1568:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1569: !_ST_BINIT [11] (maybe <- 0x8000d8) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1570: !_MEMBAR (Int)
membar #StoreLoad

P1571: !_SWAP [11] (maybe <- 0x8000d9) (Int)
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P1572: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1573: !_MEMBAR (FP)
membar #StoreLoad

P1574: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P1575: !_MEMBAR (FP)

P1576: !_DWLD [18] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f6
! 2 addresses covered

P1577: !_ST [1] (maybe <- 0x8000da) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P1578: !_CAS [8] (maybe <- 0x8000db) (Int)
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l7], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1579: !_SWAP [16] (maybe <- 0x8000dc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1580: !_ST_BINIT [23] (maybe <- 0x8000dd) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1581: !_MEMBAR (Int) (Branch target of P1458)
membar #StoreLoad
ba P1582
nop

TARGET1458:
ba RET1458
nop


P1582: !_DWLD [1] (Int)
ldx [%i0 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P1583: !_PREFETCH [17] (Int)
prefetch [%i2 + 12], 21

P1584: !_LD [3] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i1 + 0] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1585: !_ST [17] (maybe <- 0x8000de) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P1586: !_CAS [21] (maybe <- 0x8000df) (Int)
lduw [%i3], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%i3], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1587: !_MEMBAR (FP)

P1588: !_BSTC [3] (maybe <- 0x400000c4) (FP) (Branch target of P1929)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi
ba P1589
nop

TARGET1929:
ba RET1929
nop


P1589: !_MEMBAR (FP)
membar #StoreLoad

P1590: !_CAS [15] (maybe <- 0x8000e0) (Int) (CBR)
lduw [%i2], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%i2], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1590
nop
RET1590:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1591: !_ST_BINIT [7] (maybe <- 0x8000e1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P1592: !_MEMBAR (Int)
membar #StoreLoad

P1593: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P1594: !_MEMBAR (FP) (Branch target of P1165)
ba P1595
nop

TARGET1165:
ba RET1165
nop


P1595: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P1596: !_ST [22] (maybe <- 0x8000e2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P1597: !_CAS [7] (maybe <- 0x8000e3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1598: !_CAS [22] (maybe <- 0x8000e4) (Int)
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%l3], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1599: !_LD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P1600: !_DWST_BINIT [1] (maybe <- 0x8000e5) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P1601: !_MEMBAR (Int)
membar #StoreLoad

P1602: !_DWST_BINIT [15] (maybe <- 0x8000e7) (Int) (Branch target of P1840)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P1603
nop

TARGET1840:
ba RET1840
nop


P1603: !_MEMBAR (Int)
membar #StoreLoad

P1604: !_DWST [2] (maybe <- 0x8000e9) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P1605: !_MEMBAR (FP)

P1606: !_BST [19] (maybe <- 0x400000c7) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1607: !_MEMBAR (FP)
membar #StoreLoad

P1608: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1609: !_ST_BINIT [0] (maybe <- 0x8000ea) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P1610: !_MEMBAR (Int)
membar #StoreLoad

P1611: !_LD [19] (FP)
ld [%i3 + 4], %f11
! 1 addresses covered

P1612: !_PREFETCH [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 2

P1613: !_PREFETCH [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 2

P1614: !_SWAP [7] (maybe <- 0x8000eb) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P1615: !_DWST_BINIT [7] (maybe <- 0x8000ec) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P1616: !_MEMBAR (Int)
membar #StoreLoad

P1617: !_DWLD [7] (Int)
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1618: !_LDD [5] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i1 + 8] %asi, %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P1619: !_DWST [4] (maybe <- 0x400000ca) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 0]

P1620: !_DWST_BINIT [17] (maybe <- 0x8000ee) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P1621: !_MEMBAR (Int)
membar #StoreLoad

P1622: !_DWLD [2] (Int)
ldx [%i0 + 8], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l7
or %l7, %o0, %o0

P1623: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1623
nop
RET1623:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1624: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P1625: !_MEMBAR (FP)

P1626: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1627: !_MEMBAR (FP)

P1628: !_BSTC [20] (maybe <- 0x400000cc) (FP) (Branch target of P1568)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P1629
nop

TARGET1568:
ba RET1568
nop


P1629: !_MEMBAR (FP)
membar #StoreLoad

P1630: !_LD [16] (Int)
lduw [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1631: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1631
nop
RET1631:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1632: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P1633: !_MEMBAR (FP) (Branch target of P1841)
ba P1634
nop

TARGET1841:
ba RET1841
nop


P1634: !_CAS [4] (maybe <- 0x8000ef) (Int)
add %i1, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1635: !_ST_BINIT [1] (maybe <- 0x8000f0) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P1636: !_MEMBAR (Int)

P1637: !_BSTC [9] (maybe <- 0x400000cf) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1638: !_MEMBAR (FP)
membar #StoreLoad

P1639: !_CASX [6] (maybe <- 0x8000f1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P1640: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 19

P1641: !_SWAP [1] (maybe <- 0x8000f3) (Int)
mov %l4, %o5
swap  [%i0 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1642: !_MEMBAR (FP)

P1643: !_BST [5] (maybe <- 0x400000d2) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1644: !_MEMBAR (FP)
membar #StoreLoad

P1645: !_ST [18] (maybe <- 0x8000f4) (Int) (Branch target of P1631)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4
ba P1646
nop

TARGET1631:
ba RET1631
nop


P1646: !_PREFETCH [13] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetcha [%i3 + 4] %asi, 20

P1647: !_CASX [18] (maybe <- 0x8000f5) (Int) (LE)
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %o5, %l7, %l3
srlx %l3, 8, %l3
sllx %o5, 8, %o5
and %o5, %l7, %o5
or %o5, %l3, %o5 
sethi %hi(0xffff0000), %l7
srlx %o5, 16, %l3
andn %l3, %l7, %l3
andn %o5, %l7, %o5
sllx %o5, 16, %o5
or %o5, %l3, %o5 
srlx %o5, 32, %l3
sllx %o5, 32, %o5
or %o5, %l3, %l3 
wr %g0, 0x88, %asi
ldxa [%i2] %asi, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
mov %l6, %l7
mov  %l3, %l6
casxa [%i2] %asi, %l7, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
add  %l4, 1, %l4

P1648: !_DWST [0] (maybe <- 0x8000f7) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P1649: !_ST_BINIT [13] (maybe <- 0x8000f9) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P1650: !_MEMBAR (Int)
membar #StoreLoad

P1651: !_CASX [18] (maybe <- 0x8000fa) (Int)
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l3
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P1652: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1652
nop
RET1652:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1653: !_BST [12] (maybe <- 0x400000d5) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1654: !_MEMBAR (FP)
membar #StoreLoad

P1655: !_ST_BINIT [11] (maybe <- 0x8000fc) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1656: !_MEMBAR (Int)
membar #StoreLoad

P1657: !_ST_BINIT [14] (maybe <- 0x8000fd) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1658: !_MEMBAR (Int)
membar #StoreLoad

P1659: !_ST [21] (maybe <- 0x8000fe) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1660: !_REPLACEMENT [12] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1660
nop
RET1660:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1661: !_CAS [1] (maybe <- 0x8000ff) (Int)
add %i0, 4, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1662: !_MEMBAR (FP)

P1663: !_BSTC [4] (maybe <- 0x400000d8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1664: !_MEMBAR (FP)
membar #StoreLoad

P1665: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P1666: !_LD [3] (Int)
lduw [%i1 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1667: !_DWST_BINIT [4] (maybe <- 0x800100) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P1668: !_MEMBAR (Int)
membar #StoreLoad

P1669: !_DWST [3] (maybe <- 0x800102) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i1 + 0]
add   %l4, 1, %l4

P1670: !_DWST [1] (maybe <- 0x800104) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P1671: !_MEMBAR (FP)

P1672: !_BSTC [5] (maybe <- 0x400000db) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P1673: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1673
nop
RET1673:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1674: !_DWLD [3] (Int)
ldx [%i1 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1675: !_DWST_BINIT [2] (maybe <- 0x800106) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i0 + 8] %asi 
add   %l4, 1, %l4

P1676: !_MEMBAR (Int) (Branch target of P1813)
membar #StoreLoad
ba P1677
nop

TARGET1813:
ba RET1813
nop


P1677: !_ST_BINIT [1] (maybe <- 0x800107) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P1678: !_MEMBAR (Int)
membar #StoreLoad

P1679: !_LD [3] (Int)
lduw [%i1 + 0], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1680: !_MEMBAR (FP)
membar #StoreLoad

P1681: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P1682: !_MEMBAR (FP)

P1683: !_DWLD [18] (Int)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1684: !_LD [5] (Int)
lduw [%i1 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P1685: !_LDD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1686: !_ST [15] (maybe <- 0x800108) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P1687: !_PREFETCH [13] (Int)
prefetch [%i3 + 4], 0

P1688: !_ST_BINIT [6] (maybe <- 0x800109) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P1689: !_MEMBAR (Int)
membar #StoreLoad

P1690: !_DWLD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P1691: !_LD [14] (Int)
lduw [%i2 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1692: !_MEMBAR (FP) (Branch target of P2002)
ba P1693
nop

TARGET2002:
ba RET2002
nop


P1693: !_BST [2] (maybe <- 0x400000de) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1694: !_MEMBAR (FP)

P1695: !_BST [6] (maybe <- 0x400000e1) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1696: !_MEMBAR (FP)
membar #StoreLoad

P1697: !_ST [10] (maybe <- 0x80010a) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P1698: !_DWST [5] (maybe <- 0x80010b) (Int)
mov %l4, %o5 
stx %o5, [%i1 + 8]
add   %l4, 1, %l4

P1699: !_DWST [20] (maybe <- 0x80010c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P1700: !_DWST_BINIT [11] (maybe <- 0x80010d) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P1701: !_MEMBAR (Int)

P1702: !_BSTC [8] (maybe <- 0x400000e4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1703: !_MEMBAR (FP)
membar #StoreLoad

P1704: !_CAS [2] (maybe <- 0x80010e) (Int)
add %i0, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1705: !_MEMBAR (FP)

P1706: !_BST [7] (maybe <- 0x400000e7) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1707: !_MEMBAR (FP)
membar #StoreLoad

P1708: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 18

P1709: !_SWAP [23] (maybe <- 0x80010f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P1710: !_ST_BINIT [4] (maybe <- 0x800110) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P1711: !_MEMBAR (Int)
membar #StoreLoad

P1712: !_DWST_BINIT [16] (maybe <- 0x800111) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P1713: !_MEMBAR (Int) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1713
nop
RET1713:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1714: !_BST [7] (maybe <- 0x400000ea) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1715: !_MEMBAR (FP)
membar #StoreLoad

P1716: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1717: !_SWAP [1] (maybe <- 0x800113) (Int)
mov %l4, %o0
swap  [%i0 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1718: !_MEMBAR (FP)
membar #StoreLoad

P1719: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P1720: !_MEMBAR (FP)

P1721: !_ST_BINIT [20] (maybe <- 0x800114) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1722: !_MEMBAR (Int)

P1723: !_BSTC [3] (maybe <- 0x400000ed) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1723
nop
RET1723:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1724: !_MEMBAR (FP)
membar #StoreLoad

P1725: !_SWAP [0] (maybe <- 0x800115) (Int)
mov %l4, %l3
swap  [%i0 + 0], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P1726: !_MEMBAR (FP)

P1727: !_BSTC [8] (maybe <- 0x400000f0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1728: !_MEMBAR (FP)
membar #StoreLoad

P1729: !_REPLACEMENT [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P1730: !_CAS [21] (maybe <- 0x800116) (Int) (Branch target of P1009)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%i3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4
ba P1731
nop

TARGET1009:
ba RET1009
nop


P1731: !_DWLD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P1732: !_DWST [10] (maybe <- 0x800117) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P1733: !_DWST [20] (maybe <- 0x800119) (Int) (CBR)
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1733
nop
RET1733:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1734: !_DWST_BINIT [21] (maybe <- 0x80011a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1735: !_MEMBAR (Int)
membar #StoreLoad

P1736: !_DWST [18] (maybe <- 0x80011c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P1737: !_DWLD [18] (Int)
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l7
or %l7, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3

P1738: !_PREFETCH [15] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1738
nop
RET1738:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1739: !_MEMBAR (FP)

P1740: !_BST [23] (maybe <- 0x400000f3) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1740
nop
RET1740:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1741: !_MEMBAR (FP)
membar #StoreLoad

P1742: !_LDD [16] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1743: !_MEMBAR (FP)

P1744: !_BSTC [9] (maybe <- 0x400000f6) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1745: !_MEMBAR (FP)
membar #StoreLoad

P1746: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P1747: !_MEMBAR (FP)

P1748: !_DWST_BINIT [1] (maybe <- 0x80011e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P1749: !_MEMBAR (Int) (Branch target of P1713)
membar #StoreLoad
ba P1750
nop

TARGET1713:
ba RET1713
nop


P1750: !_DWST [21] (maybe <- 0x800120) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P1751: !_MEMBAR (FP)

P1752: !_BSTC [0] (maybe <- 0x400000f9) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1753: !_MEMBAR (FP)
membar #StoreLoad

P1754: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 4

P1755: !_DWST [16] (maybe <- 0x400000fc) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P1756: !_DWST_BINIT [8] (maybe <- 0x800122) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P1757: !_MEMBAR (Int)
membar #StoreLoad

P1758: !_ST [9] (maybe <- 0x800123) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P1759: !_DWST [6] (maybe <- 0x800124) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P1760: !_LD [18] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 0], %f11
! 1 addresses covered

P1761: !_DWST_BINIT [6] (maybe <- 0x800126) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P1762: !_MEMBAR (Int)
membar #StoreLoad

P1763: !_SWAP [8] (maybe <- 0x800128) (Int) (CBR)
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1763
nop
RET1763:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P1764: !_ST [23] (maybe <- 0x400000fe) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 12 ]

P1765: !_ST [17] (maybe <- 0x800129) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1766: !_SWAP [5] (maybe <- 0x80012a) (Int)
mov %l4, %o0
swap  [%i1 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1767: !_DWST_BINIT [11] (maybe <- 0x80012b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P1768: !_MEMBAR (Int)

P1769: !_BST [23] (maybe <- 0x400000ff) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1770: !_MEMBAR (FP)
membar #StoreLoad

P1771: !_LDD [11] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1772: !_CAS [20] (maybe <- 0x80012c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P1773: !_DWST [0] (maybe <- 0x80012d) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P1774: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P1775: !_MEMBAR (FP)

P1776: !_BST [13] (maybe <- 0x40000102) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1777: !_MEMBAR (FP)
membar #StoreLoad

P1778: !_PREFETCH [2] (Int) (Branch target of P1740)
prefetch [%i0 + 12], 24
ba P1779
nop

TARGET1740:
ba RET1740
nop


P1779: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1780: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1780
nop
RET1780:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1781: !_BST [13] (maybe <- 0x40000105) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1782: !_MEMBAR (FP)
membar #StoreLoad

P1783: !_REPLACEMENT [0] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P1784: !_MEMBAR (FP)

P1785: !_BST [11] (maybe <- 0x40000108) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1786: !_MEMBAR (FP)

P1787: !_BSTC [6] (maybe <- 0x4000010b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1788: !_MEMBAR (FP)
membar #StoreLoad

P1789: !_ST_BINIT [5] (maybe <- 0x80012f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P1790: !_MEMBAR (Int)
membar #StoreLoad

P1791: !_SWAP [6] (maybe <- 0x800130) (Int)
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1792: !_MEMBAR (FP)

P1793: !_BSTC [1] (maybe <- 0x4000010e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1794: !_MEMBAR (FP)
membar #StoreLoad

P1795: !_DWST [11] (maybe <- 0x800131) (Int)
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P1796: !_CAS [7] (maybe <- 0x800132) (Int)
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l7], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1797: !_CAS [23] (maybe <- 0x800133) (Int) (Branch target of P1210)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%l7], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4
ba P1798
nop

TARGET1210:
ba RET1210
nop


P1798: !_MEMBAR (FP)

P1799: !_BST [6] (maybe <- 0x40000111) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1800: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1800
nop
RET1800:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1801: !_REPLACEMENT [18] (Int) (Branch target of P1259)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
ba P1802
nop

TARGET1259:
ba RET1259
nop


P1802: !_MEMBAR (FP)

P1803: !_BST [6] (maybe <- 0x40000114) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1804: !_MEMBAR (FP)
membar #StoreLoad

P1805: !_ST_BINIT [11] (maybe <- 0x800134) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1806: !_MEMBAR (Int)
membar #StoreLoad

P1807: !_ST_BINIT [12] (maybe <- 0x800135) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P1808: !_MEMBAR (Int)
membar #StoreLoad

P1809: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 23

P1810: !_MEMBAR (FP)

P1811: !_BST [19] (maybe <- 0x40000117) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1812: !_MEMBAR (FP)
membar #StoreLoad

P1813: !_ST_BINIT [22] (maybe <- 0x800136) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1813
nop
RET1813:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P1814: !_MEMBAR (Int)

P1815: !_BSTC [0] (maybe <- 0x4000011a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1816: !_MEMBAR (FP)
membar #StoreLoad

P1817: !_CASX [15] (maybe <- 0x800137) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P1818: !_ST [23] (maybe <- 0x800139) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P1819: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1820: !_CASX [4] (maybe <- 0x80013a) (Int)
ldx [%i1], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i1], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P1821: !_MEMBAR (FP)

P1822: !_BST [8] (maybe <- 0x4000011d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1823: !_MEMBAR (FP)
membar #StoreLoad

P1824: !_PREFETCH [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 4

P1825: !_CAS [8] (maybe <- 0x80013c) (Int)
add %i3, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%l3], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1826: !_MEMBAR (FP)

P1827: !_BST [22] (maybe <- 0x40000120) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1828: !_MEMBAR (FP)

P1829: !_BSTC [12] (maybe <- 0x40000123) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1830: !_MEMBAR (FP)
membar #StoreLoad

P1831: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1832: !_ST [0] (maybe <- 0x40000126) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P1833: !_MEMBAR (FP)

P1834: !_BST [13] (maybe <- 0x40000127) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1835: !_MEMBAR (FP)
membar #StoreLoad

P1836: !_PREFETCH [23] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 1

P1837: !_CASX [16] (maybe <- 0x80013d) (Int) (Branch target of P1590)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4
ba P1838
nop

TARGET1590:
ba RET1590
nop


P1838: !_SWAP [10] (maybe <- 0x80013f) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P1839: !_SWAP [12] (maybe <- 0x800140) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1840: !_CAS [12] (maybe <- 0x800141) (Int) (CBR)
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%i3], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1840
nop
RET1840:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1841: !_PREFETCH [19] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 18

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1841
nop
RET1841:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P1842: !_CAS [9] (maybe <- 0x800142) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%i3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1843: !_LDD [1] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i0 + 0] %asi, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P1844: !_DWST_BINIT [19] (maybe <- 0x800143) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1845: !_MEMBAR (Int)
membar #StoreLoad

P1846: !_DWLD [4] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0

P1847: !_SWAP [17] (maybe <- 0x800145) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P1848: !_MEMBAR (FP)

P1849: !_BST [17] (maybe <- 0x4000012a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1850: !_MEMBAR (FP)

P1851: !_BSTC [2] (maybe <- 0x4000012d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1852: !_MEMBAR (FP)
membar #StoreLoad

P1853: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P1854: !_MEMBAR (FP)

P1855: !_DWST_BINIT [0] (maybe <- 0x800146) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P1856: !_MEMBAR (Int)
membar #StoreLoad

P1857: !_ST_BINIT [4] (maybe <- 0x800148) (Int) (Branch target of P1290)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4
ba P1858
nop

TARGET1290:
ba RET1290
nop


P1858: !_MEMBAR (Int)
membar #StoreLoad

P1859: !_CAS [16] (maybe <- 0x800149) (Int)
add %i2, 4, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P1860: !_DWST_BINIT [22] (maybe <- 0x80014a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P1861: !_MEMBAR (Int)
membar #StoreLoad

P1862: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P1863: !_ST [0] (maybe <- 0x80014c) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P1864: !_DWST [15] (maybe <- 0x80014d) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P1865: !_MEMBAR (FP)
membar #StoreLoad

P1866: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P1867: !_MEMBAR (FP)

P1868: !_BSTC [21] (maybe <- 0x40000130) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1869: !_MEMBAR (FP)
membar #StoreLoad

P1870: !_ST [20] (maybe <- 0x80014f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P1871: !_PREFETCH [22] (Int)
prefetch [%i3 + 4], 20

P1872: !_MEMBAR (FP)
membar #StoreLoad

P1873: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P1874: !_MEMBAR (FP)

P1875: !_LDD [19] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P1876: !_CAS [10] (maybe <- 0x800150) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
mov %l4, %o4
cas [%l6], %l3, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1877: !_MEMBAR (FP)

P1878: !_BSTC [12] (maybe <- 0x40000133) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1879: !_MEMBAR (FP)
membar #StoreLoad

P1880: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P1881: !_MEMBAR (FP)

P1882: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1883: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1884: !_MEMBAR (FP)

P1885: !_BSTC [17] (maybe <- 0x40000136) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1886: !_MEMBAR (FP)
membar #StoreLoad

P1887: !_DWLD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P1888: !_CAS [17] (maybe <- 0x800151) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
wr %g0, 0x88, %asi
add %i3, 12, %l7
lduwa [%l7] %asi, %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %o5, %l3
casa [%l7] %asi, %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P1889: !_CASX [18] (maybe <- 0x800152) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P1890: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P1891: !_MEMBAR (FP)
membar #StoreLoad

P1892: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P1893: !_MEMBAR (FP)

P1894: !_ST [17] (maybe <- 0x800154) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P1895: !_CAS [1] (maybe <- 0x800155) (Int)
add %i0, 4, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P1896: !_SWAP [20] (maybe <- 0x800156) (Int)
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1897: !_CAS [22] (maybe <- 0x800157) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P1898: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1899: !_CASX [22] (maybe <- 0x800158) (Int)
ldx [%i3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i3], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P1900: !_LDD [16] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1901: !_MEMBAR (FP)

P1902: !_BST [6] (maybe <- 0x40000139) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1903: !_MEMBAR (FP)

P1904: !_BST [0] (maybe <- 0x4000013c) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1905: !_MEMBAR (FP)
membar #StoreLoad

P1906: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P1907: !_MEMBAR (FP)

P1908: !_LD [13] (Int) (CBR)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET1908
nop
RET1908:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P1909: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 4

P1910: !_MEMBAR (FP)

P1911: !_BST [2] (maybe <- 0x4000013f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1912: !_MEMBAR (FP)
membar #StoreLoad

P1913: !_DWST [0] (maybe <- 0x80015a) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P1914: !_MEMBAR (FP)

P1915: !_BSTC [16] (maybe <- 0x40000142) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1916: !_MEMBAR (FP)

P1917: !_BSTC [18] (maybe <- 0x40000145) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1918: !_MEMBAR (FP)
membar #StoreLoad

P1919: !_CASX [11] (maybe <- 0x80015c) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P1920: !_SWAP [2] (maybe <- 0x80015d) (Int)
mov %l4, %o5
swap  [%i0 + 12], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1921: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P1922: !_MEMBAR (FP)
membar #StoreLoad

P1923: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P1924: !_MEMBAR (FP)

P1925: !_CASX [15] (maybe <- 0x80015e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4

P1926: !_SWAP [18] (maybe <- 0x800160) (Int)
mov %l4, %l3
swap  [%i3 + 0], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P1927: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1928: !_LD [1] (Int)
lduw [%i0 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P1929: !_ST [10] (maybe <- 0x800161) (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1929
nop
RET1929:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1930: !_MEMBAR (FP)

P1931: !_BST [12] (maybe <- 0x40000148) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1932: !_MEMBAR (FP)
membar #StoreLoad

P1933: !_CAS [8] (maybe <- 0x800162) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l7], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P1934: !_ST_BINIT [5] (maybe <- 0x800163) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P1935: !_MEMBAR (Int)
membar #StoreLoad

P1936: !_SWAP [8] (maybe <- 0x800164) (Int)
mov %l4, %l7
swap  [%i2 + 12], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P1937: !_MEMBAR (FP)
membar #StoreLoad

P1938: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P1939: !_MEMBAR (FP)

P1940: !_DWST_BINIT [21] (maybe <- 0x800165) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P1941: !_MEMBAR (Int)
membar #StoreLoad

P1942: !_ST_BINIT [9] (maybe <- 0x800167) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1942
nop
RET1942:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1943: !_MEMBAR (Int)
membar #StoreLoad

P1944: !_CASX [17] (maybe <- 0x800168) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %o5
ldx [%o5], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l7
mov %l4, %o2
casx [%o5], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P1945: !_MEMBAR (FP)
membar #StoreLoad

P1946: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P1947: !_MEMBAR (FP)

P1948: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P1949: !_ST_BINIT [20] (maybe <- 0x800169) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P1950: !_MEMBAR (Int)
membar #StoreLoad

P1951: !_DWLD [12] (Int)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P1952: !_ST_BINIT [0] (maybe <- 0x80016a) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P1953: !_MEMBAR (Int)
membar #StoreLoad

P1954: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P1955: !_MEMBAR (FP)

P1956: !_DWLD [3] (Int)
ldx [%i1 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P1957: !_SWAP [4] (maybe <- 0x80016b) (Int)
mov %l4, %o1
swap  [%i1 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P1958: !_CAS [14] (maybe <- 0x80016c) (Int)
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%l7], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1959: !_ST [4] (maybe <- 0x80016d) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P1960: !_MEMBAR (FP)

P1961: !_BST [16] (maybe <- 0x4000014b) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1962: !_MEMBAR (FP)

P1963: !_BST [22] (maybe <- 0x4000014e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1964: !_MEMBAR (FP)

P1965: !_BSTC [18] (maybe <- 0x40000151) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1966: !_MEMBAR (FP)

P1967: !_BSTC [11] (maybe <- 0x40000154) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P1968: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1968
nop
RET1968:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1969: !_BSTC [1] (maybe <- 0x40000157) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1970: !_MEMBAR (FP)
membar #StoreLoad

P1971: !_CASX [3] (maybe <- 0x80016e) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P1972: !_DWST [15] (maybe <- 0x800170) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P1973: !_SWAP [2] (maybe <- 0x800172) (Int)
mov %l4, %l7
swap  [%i0 + 12], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P1974: !_DWST [7] (maybe <- 0x800173) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P1975: !_CASX [22] (maybe <- 0x800175) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l7
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i2], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P1976: !_MEMBAR (FP)
membar #StoreLoad

P1977: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P1978: !_MEMBAR (FP)

P1979: !_SWAP [16] (maybe <- 0x800177) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P1980: !_REPLACEMENT [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P1981: !_SWAP [21] (maybe <- 0x800178) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P1982: !_DWLD [0] (Int) (CBR)
ldx [%i0 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET1982
nop
RET1982:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P1983: !_MEMBAR (FP)

P1984: !_BSTC [2] (maybe <- 0x4000015a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P1985: !_MEMBAR (FP)

P1986: !_BST [19] (maybe <- 0x4000015d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P1987: !_MEMBAR (FP) (Branch target of P1968)
membar #StoreLoad
ba P1988
nop

TARGET1968:
ba RET1968
nop


P1988: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P1989: !_MEMBAR (FP)

P1990: !_SWAP [18] (maybe <- 0x800179) (Int)
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P1991: !_ST_BINIT [11] (maybe <- 0x80017a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P1992: !_MEMBAR (Int)
membar #StoreLoad

P1993: !_CASX [20] (maybe <- 0x80017b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P1994: !_DWST [17] (maybe <- 0x80017c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P1995: !_LDD [17] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P1996: !_DWLD [19] (Int)
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P1997: !_MEMBAR (FP)
membar #StoreLoad

P1998: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P1999: !_MEMBAR (FP)

P2000: !_LDD [12] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P2001: !_LD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P2002: !_LD [18] (Int) (Loop exit) (CBR)
lduw [%i2 + 0], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2002
nop
RET2002:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovs %f2, %f30
!--

sethi %hi(0x400000), %l6
add   %i1, %l6, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_1_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_1_0
nop

P2003: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2003
nop
RET2003:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


END_NODES1: ! Test instruction sequence for CPU 1 ends
sethi %hi(0xdead0e0f), %o5
or    %o5, %lo(0xdead0e0f), %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
sethi %hi(0xdead0e0f), %o5
or    %o5, %lo(0xdead0e0f), %o5
stw %o5, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func2:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l7
or    %l7, %lo(0xdeadbee0), %l7
stw   %l7, [%i5]
sethi %hi(0xdeadbee1), %l7
or    %l7, %lo(0xdeadbee1), %l7
stw   %l7, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x02deade1), %l7
or    %l7, %lo(0x02deade1), %l7
stw %l7, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x1000001), %l4
or    %l4, %lo(0x1000001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x40800001), %l7
or    %l7, %lo(0x40800001), %l7
stw %l7, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x35000000), %l7
or    %l7, %lo(0x35000000), %l7
stw %l7, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x39d8^4
sethi %hi(0x39d8), %l0
or    %l0, %lo(0x39d8), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES2: ! Test instruction sequence for ISTREAM 2 begins

P2004: !_DWLD [1] (Int) (Loop entry)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_2_0:
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P2005: !_ST_BINIT [10] (maybe <- 0x1000001) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2006: !_MEMBAR (Int)
membar #StoreLoad

P2007: !_SWAP [5] (maybe <- 0x1000002) (Int)
mov %l4, %o1
swap  [%i1 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2008: !_ST_BINIT [6] (maybe <- 0x1000003) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P2009: !_MEMBAR (Int)
membar #StoreLoad

P2010: !_ST_BINIT [18] (maybe <- 0x1000004) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2011: !_MEMBAR (Int)
membar #StoreLoad

P2012: !_ST [7] (maybe <- 0x1000005) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P2013: !_ST_BINIT [4] (maybe <- 0x1000006) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P2014: !_MEMBAR (Int)
membar #StoreLoad

P2015: !_CASX [8] (maybe <- 0x1000007) (Int)
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P2016: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 1

P2017: !_MEMBAR (FP)
membar #StoreLoad

P2018: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P2019: !_MEMBAR (FP)

P2020: !_BSTC [20] (maybe <- 0x40800001) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2021: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2021
nop
RET2021:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2022: !_ST [7] (maybe <- 0x1000008) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P2023: !_LDD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2024: !_LD [3] (Int)
lduw [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2025: !_DWST [1] (maybe <- 0x1000009) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P2026: !_ST [21] (maybe <- 0x100000b) (Int) (Branch target of P2728)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4
ba P2027
nop

TARGET2728:
ba RET2728
nop


P2027: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P2028: !_MEMBAR (FP)

P2029: !_BST [22] (maybe <- 0x40800004) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2030: !_MEMBAR (FP)
membar #StoreLoad

P2031: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P2032: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P2033: !_LDD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P2034: !_MEMBAR (FP)

P2035: !_BSTC [13] (maybe <- 0x40800007) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2036: !_MEMBAR (FP)
membar #StoreLoad

P2037: !_CAS [5] (maybe <- 0x100000c) (Int)
add %i1, 12, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P2038: !_MEMBAR (FP)

P2039: !_BST [15] (maybe <- 0x4080000a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2040: !_MEMBAR (FP)
membar #StoreLoad

P2041: !_REPLACEMENT [7] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+4], %l3
st %l3, [%i2+4]
add %i2, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2041
nop
RET2041:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2042: !_ST_BINIT [13] (maybe <- 0x100000d) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i3 + 4] %asi
add   %l4, 1, %l4

P2043: !_MEMBAR (Int) (LE)
membar #StoreLoad

P2044: !_ST [5] (maybe <- 0x4080000d) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i1 + 12 ]

P2045: !_MEMBAR (FP)

P2046: !_BST [0] (maybe <- 0x4080000e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2047: !_MEMBAR (FP)
membar #StoreLoad

P2048: !_REPLACEMENT [15] (Int)
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P2049: !_CAS [14] (maybe <- 0x100000e) (Int)
add %i3, 12, %o5
lduw [%o5], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P2050: !_MEMBAR (FP)

P2051: !_BSTC [4] (maybe <- 0x40800011) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2052: !_MEMBAR (FP)
membar #StoreLoad

P2053: !_CASX [17] (maybe <- 0x100000f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l6
mov %l4, %o0
casx [%l7], %l6, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P2054: !_ST_BINIT [7] (maybe <- 0x1000010) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2055: !_MEMBAR (Int) (Branch target of P2423)
membar #StoreLoad
ba P2056
nop

TARGET2423:
ba RET2423
nop


P2056: !_SWAP [10] (maybe <- 0x1000011) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2057: !_SWAP [12] (maybe <- 0x1000012) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P2058: !_DWST_BINIT [9] (maybe <- 0x1000013) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P2059: !_MEMBAR (Int)
membar #StoreLoad

P2060: !_SWAP [1] (maybe <- 0x1000015) (Int)
mov %l4, %o2
swap  [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P2061: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 2

P2062: !_ST [23] (maybe <- 0x40800014) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P2063: !_DWST [0] (maybe <- 0x1000016) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P2064: !_DWST [1] (maybe <- 0x1000018) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P2065: !_DWST_BINIT [4] (maybe <- 0x100001a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

P2066: !_MEMBAR (Int)
membar #StoreLoad

P2067: !_CASX [21] (maybe <- 0x100001c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i2], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P2068: !_SWAP [16] (maybe <- 0x100001e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2069: !_DWLD [1] (Int)
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P2070: !_DWLD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P2071: !_CAS [18] (maybe <- 0x100001f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P2072: !_SWAP [1] (maybe <- 0x1000020) (Int)
mov %l4, %o3
swap  [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2073: !_DWST [14] (maybe <- 0x1000021) (Int)
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P2074: !_ST [23] (maybe <- 0x1000022) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P2075: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2075
nop
RET2075:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2076: !_BST [13] (maybe <- 0x40800015) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2077: !_MEMBAR (FP) (Branch target of P2445)
membar #StoreLoad
ba P2078
nop

TARGET2445:
ba RET2445
nop


P2078: !_SWAP [18] (maybe <- 0x1000023) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 0], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P2079: !_ST [4] (maybe <- 0x40800018) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i1 + 4 ]

P2080: !_DWST_BINIT [14] (maybe <- 0x1000024) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P2081: !_MEMBAR (Int)
membar #StoreLoad

P2082: !_CASX [2] (maybe <- 0x1000025) (Int)
add %i0, 8, %o5
ldx [%o5], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l7
mov %l4, %o0
casx [%o5], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P2083: !_MEMBAR (FP)

P2084: !_BSTC [17] (maybe <- 0x40800019) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2085: !_MEMBAR (FP)
membar #StoreLoad

P2086: !_DWLD [11] (Int) (Branch target of P2524)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
ba P2087
nop

TARGET2524:
ba RET2524
nop


P2087: !_ST [23] (maybe <- 0x1000026) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2088: !_MEMBAR (FP)

P2089: !_BSTC [13] (maybe <- 0x4080001c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2090: !_MEMBAR (FP)
membar #StoreLoad

P2091: !_ST [4] (maybe <- 0x1000027) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P2092: !_ST_BINIT [6] (maybe <- 0x1000028) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2093: !_MEMBAR (Int)
membar #StoreLoad

P2094: !_SWAP [7] (maybe <- 0x1000029) (Int)
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P2095: !_DWLD [1] (Int)
ldx [%i0 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P2096: !_MEMBAR (FP)

P2097: !_BSTC [22] (maybe <- 0x4080001f) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2098: !_MEMBAR (FP)
membar #StoreLoad

P2099: !_PREFETCH [22] (Int)
prefetch [%i2 + 4], 23

P2100: !_SWAP [7] (maybe <- 0x100002a) (Int)
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2101: !_CAS [12] (maybe <- 0x100002b) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%i3], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2102: !_MEMBAR (FP)
membar #StoreLoad

P2103: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P2104: !_MEMBAR (FP)

P2105: !_PREFETCH [10] (Int)
prefetch [%i2 + 4], 2

P2106: !_MEMBAR (FP)

P2107: !_BSTC [20] (maybe <- 0x40800022) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2108: !_MEMBAR (FP)
membar #StoreLoad

P2109: !_REPLACEMENT [16] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P2110: !_ST_BINIT [12] (maybe <- 0x100002c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2111: !_MEMBAR (Int)

P2112: !_BST [12] (maybe <- 0x40800025) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2113: !_MEMBAR (FP)
membar #StoreLoad

P2114: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P2115: !_MEMBAR (FP)

P2116: !_CAS [21] (maybe <- 0x100002d) (Int)
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P2117: !_DWST_BINIT [4] (maybe <- 0x100002e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i1 + 0] %asi
add   %l4, 1, %l4

P2118: !_MEMBAR (Int)

P2119: !_BSTC [14] (maybe <- 0x40800028) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2120: !_MEMBAR (FP)

P2121: !_BSTC [10] (maybe <- 0x4080002b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2122: !_MEMBAR (FP)
membar #StoreLoad

P2123: !_LD [4] (Int)
lduw [%i1 + 4], %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P2124: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P2125: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P2126: !_CASX [12] (maybe <- 0x1000030) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i2], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P2127: !_ST_BINIT [1] (maybe <- 0x1000032) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P2128: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2128
nop
RET2128:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2129: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P2130: !_MEMBAR (FP)

P2131: !_DWST [0] (maybe <- 0x1000033) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P2132: !_DWLD [19] (Int)
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2133: !_CASX [4] (maybe <- 0x1000035) (Int)
ldx [%i1], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %o5
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i1], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P2134: !_CAS [21] (maybe <- 0x1000037) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%i3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P2135: !_MEMBAR (FP)

P2136: !_BST [7] (maybe <- 0x4080002e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2137: !_MEMBAR (FP)
membar #StoreLoad

P2138: !_SWAP [0] (maybe <- 0x1000038) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %o3, %l7, %o5
srl %o5, 8, %o5
sll %o3, 8, %o3
and %o3, %l7, %o3
or %o3, %o5, %o3
srl %o3, 16, %o5
sll %o3, 16, %o3
srl %o3, 0, %o3
or %o3, %o5, %o3
swapa  [%i0 + 0] %asi, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2139: !_CASX [23] (maybe <- 0x1000039) (Int)
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P2140: !_CAS [6] (maybe <- 0x100003a) (Int)
lduw [%i2], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%i2], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2141: !_ST [11] (maybe <- 0x100003b) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2142: !_LDD [8] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P2143: !_MEMBAR (FP)
membar #StoreLoad

P2144: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P2145: !_MEMBAR (FP)

P2146: !_CASX [2] (maybe <- 0x100003c) (Int)
add %i0, 8, %l6
ldx [%l6], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov  %o2, %l3
mov %l4, %o3
casx [%l6], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P2147: !_MEMBAR (FP)

P2148: !_BSTC [10] (maybe <- 0x40800031) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2149: !_MEMBAR (FP)
membar #StoreLoad

P2150: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2151: !_DWST_BINIT [13] (maybe <- 0x100003d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P2152: !_MEMBAR (Int)

P2153: !_BST [15] (maybe <- 0x40800034) (FP) (CBR) (Branch target of P2940)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2153
nop
RET2153:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P2154
nop

TARGET2940:
ba RET2940
nop


P2154: !_MEMBAR (FP)

P2155: !_BST [22] (maybe <- 0x40800037) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2156: !_MEMBAR (FP)
membar #StoreLoad

P2157: !_DWST_BINIT [13] (maybe <- 0x100003f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P2158: !_MEMBAR (Int)
membar #StoreLoad

P2159: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P2160: !_DWST_BINIT [23] (maybe <- 0x1000041) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2161: !_MEMBAR (Int)

P2162: !_BSTC [13] (maybe <- 0x4080003a) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2163: !_MEMBAR (FP)
membar #StoreLoad

P2164: !_SWAP [10] (maybe <- 0x1000042) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2165: !_PREFETCH [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 22

P2166: !_MEMBAR (FP)
membar #StoreLoad

P2167: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P2168: !_MEMBAR (FP)

P2169: !_ST [13] (maybe <- 0x4080003d) (FP)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 4 ]

P2170: !_DWST_BINIT [12] (maybe <- 0x1000043) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P2171: !_MEMBAR (Int)
membar #StoreLoad

P2172: !_DWST [13] (maybe <- 0x1000045) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P2173: !_CASX [2] (maybe <- 0x1000047) (Int)
add %i0, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P2174: !_ST_BINIT [13] (maybe <- 0x1000048) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2175: !_MEMBAR (Int)
membar #StoreLoad

P2176: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P2177: !_MEMBAR (FP)

P2178: !_DWST [16] (maybe <- 0x1000049) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P2179: !_CAS [5] (maybe <- 0x100004b) (Int)
add %i1, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
mov %l4, %o4
cas [%l6], %l3, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2180: !_LD [4] (Int)
lduw [%i1 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2181: !_CAS [22] (maybe <- 0x100004c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P2182: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P2183: !_CASX [16] (maybe <- 0x100004d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l3
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P2184: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2185: !_ST_BINIT [19] (maybe <- 0x100004f) (Int) (Branch target of P2766)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4
ba P2186
nop

TARGET2766:
ba RET2766
nop


P2186: !_MEMBAR (Int)
membar #StoreLoad

P2187: !_SWAP [21] (maybe <- 0x1000050) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P2188: !_DWLD [19] (FP) (Branch target of P2075)
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f5
fmovs %f19, %f6
ba P2189
nop

TARGET2075:
ba RET2075
nop


P2189: !_MEMBAR (FP)

P2190: !_BST [2] (maybe <- 0x4080003e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2191: !_MEMBAR (FP)
membar #StoreLoad

P2192: !_LDD [19] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P2193: !_CASX [22] (maybe <- 0x1000051) (Int)
ldx [%i2], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P2194: !_MEMBAR (FP)

P2195: !_BSTC [12] (maybe <- 0x40800041) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2196: !_MEMBAR (FP)
membar #StoreLoad

P2197: !_ST [16] (maybe <- 0x1000053) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i2 + 4] %asi
add   %l4, 1, %l4

P2198: !_LDD [15] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2199: !_CAS [18] (maybe <- 0x1000054) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i3], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P2200: !_LD [1] (FP)
ld [%i0 + 4], %f7
! 1 addresses covered

P2201: !_DWST_BINIT [6] (maybe <- 0x1000055) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P2202: !_MEMBAR (Int)
membar #StoreLoad

P2203: !_DWST_BINIT [14] (maybe <- 0x1000057) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P2204: !_MEMBAR (Int)
membar #StoreLoad

P2205: !_DWST_BINIT [23] (maybe <- 0x1000058) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2206: !_MEMBAR (Int)
membar #StoreLoad

P2207: !_REPLACEMENT [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P2208: !_DWST [13] (maybe <- 0x1000059) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P2209: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P2210: !_MEMBAR (FP)
membar #StoreLoad

P2211: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P2212: !_MEMBAR (FP)

P2213: !_BST [22] (maybe <- 0x40800044) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2214: !_MEMBAR (FP)
membar #StoreLoad

P2215: !_CAS [3] (maybe <- 0x100005b) (Int)
lduw [%i1], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%i1], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P2216: !_DWST_BINIT [6] (maybe <- 0x100005c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P2217: !_MEMBAR (Int)
membar #StoreLoad

P2218: !_ST_BINIT [23] (maybe <- 0x100005e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P2219: !_MEMBAR (Int)
membar #StoreLoad

P2220: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P2221: !_MEMBAR (FP)

P2222: !_CAS [8] (maybe <- 0x100005f) (Int)
add %i3, 12, %l7
lduw [%l7], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P2223: !_MEMBAR (FP)

P2224: !_BST [16] (maybe <- 0x40800047) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2225: !_MEMBAR (FP)

P2226: !_BST [16] (maybe <- 0x4080004a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2227: !_MEMBAR (FP)

P2228: !_BST [0] (maybe <- 0x4080004d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2229: !_MEMBAR (FP)
membar #StoreLoad

P2230: !_ST_BINIT [1] (maybe <- 0x1000060) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P2231: !_MEMBAR (Int)
membar #StoreLoad

P2232: !_DWLD [6] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldxa [%i2 + 0] %asi, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %l6
or %l6, %o3, %o3

P2233: !_ST_BINIT [5] (maybe <- 0x1000061) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P2234: !_MEMBAR (Int)
membar #StoreLoad

P2235: !_ST [16] (maybe <- 0x1000062) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P2236: !_DWLD [2] (FP)
ldd [%i0 + 8], %f14
! 1 addresses covered
fmovs %f15, %f14

P2237: !_ST_BINIT [15] (maybe <- 0x1000063) (Int) (Branch target of P2919)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4
ba P2238
nop

TARGET2919:
ba RET2919
nop


P2238: !_MEMBAR (Int)
membar #StoreLoad

P2239: !_DWST [15] (maybe <- 0x1000064) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P2240: !_ST_BINIT [21] (maybe <- 0x1000066) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2241: !_MEMBAR (Int)
membar #StoreLoad

P2242: !_CASX [13] (maybe <- 0x1000067) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l7
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i2], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P2243: !_MEMBAR (FP)
membar #StoreLoad

P2244: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P2245: !_MEMBAR (FP)

P2246: !_BST [9] (maybe <- 0x40800050) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2247: !_MEMBAR (FP)
membar #StoreLoad

P2248: !_SWAP [23] (maybe <- 0x1000069) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2249: !_PREFETCH [18] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 0] %asi, 2

P2250: !_DWST_BINIT [15] (maybe <- 0x100006a) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P2251: !_MEMBAR (Int) (LE)
membar #StoreLoad

P2252: !_SWAP [4] (maybe <- 0x100006c) (Int)
mov %l4, %l6
swap  [%i1 + 4], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P2253: !_DWST [8] (maybe <- 0x100006d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P2254: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 3

P2255: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P2256: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P2257: !_MEMBAR (FP)
membar #StoreLoad

P2258: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P2259: !_MEMBAR (FP)

P2260: !_SWAP [19] (maybe <- 0x100006e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2261: !_CASX [21] (maybe <- 0x100006f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i3], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P2262: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P2263: !_ST [21] (maybe <- 0x1000071) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P2264: !_PREFETCH [12] (Int)
prefetch [%i2 + 0], 21

P2265: !_MEMBAR (FP)

P2266: !_BSTC [19] (maybe <- 0x40800053) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2267: !_MEMBAR (FP)
membar #StoreLoad

P2268: !_LDD [4] (Int) (CBR)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2268
nop
RET2268:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2269: !_MEMBAR (FP)

P2270: !_BSTC [8] (maybe <- 0x40800056) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2271: !_MEMBAR (FP)
membar #StoreLoad

P2272: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 0

P2273: !_MEMBAR (FP)
membar #StoreLoad

P2274: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P2275: !_MEMBAR (FP) (Branch target of P2565)
ba P2276
nop

TARGET2565:
ba RET2565
nop


P2276: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l3
or %l3, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3

P2277: !_CASX [20] (maybe <- 0x1000072) (Int)
add %i2, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P2278: !_MEMBAR (FP)

P2279: !_BSTC [16] (maybe <- 0x40800059) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2280: !_MEMBAR (FP)
membar #StoreLoad

P2281: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 23

P2282: !_CASX [11] (maybe <- 0x1000073) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P2283: !_ST [3] (maybe <- 0x1000074) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P2284: !_DWLD [20] (Int)
ldx [%i2 + 8], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l3
or %l3, %o2, %o2

P2285: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P2286: !_MEMBAR (FP)

P2287: !_BSTC [5] (maybe <- 0x4080005c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2288: !_MEMBAR (FP)
membar #StoreLoad

P2289: !_LD [1] (FP)
ld [%i0 + 4], %f8
! 1 addresses covered

P2290: !_CAS [1] (maybe <- 0x1000075) (Int)
add %i0, 4, %l3
lduw [%l3], %o4
mov %o4, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2291: !_MEMBAR (FP)

P2292: !_BST [4] (maybe <- 0x4080005f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2293: !_MEMBAR (FP)

P2294: !_BSTC [20] (maybe <- 0x40800062) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2295: !_MEMBAR (FP)
membar #StoreLoad

P2296: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P2297: !_MEMBAR (FP)

P2298: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 28

P2299: !_CAS [8] (maybe <- 0x1000076) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P2300: !_MEMBAR (FP)

P2301: !_BST [13] (maybe <- 0x40800065) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2302: !_MEMBAR (FP)
membar #StoreLoad

P2303: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 23

P2304: !_MEMBAR (FP) (Branch target of P2350)
membar #StoreLoad
ba P2305
nop

TARGET2350:
ba RET2350
nop


P2305: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P2306: !_MEMBAR (FP)

P2307: !_BST [17] (maybe <- 0x40800068) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2308: !_MEMBAR (FP)
membar #StoreLoad

P2309: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P2310: !_MEMBAR (FP)

P2311: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P2312: !_DWST [14] (maybe <- 0x1000077) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P2313: !_CASX [22] (maybe <- 0x1000078) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P2314: !_DWST_BINIT [15] (maybe <- 0x100007a) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2314
nop
RET2314:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2315: !_MEMBAR (Int)
membar #StoreLoad

P2316: !_DWST_BINIT [17] (maybe <- 0x100007c) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2317: !_MEMBAR (Int) (Branch target of P2458)
membar #StoreLoad
ba P2318
nop

TARGET2458:
ba RET2458
nop


P2318: !_ST [19] (maybe <- 0x4080006b) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]

P2319: !_DWST [20] (maybe <- 0x100007d) (Int)
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P2320: !_DWST_BINIT [4] (maybe <- 0x100007e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

P2321: !_MEMBAR (Int)
membar #StoreLoad

P2322: !_SWAP [11] (maybe <- 0x1000080) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 12], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P2323: !_PREFETCH [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 2

P2324: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2324
nop
RET2324:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2325: !_BSTC [10] (maybe <- 0x4080006c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2326: !_MEMBAR (FP)

P2327: !_BST [7] (maybe <- 0x4080006f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2328: !_MEMBAR (FP)
membar #StoreLoad

P2329: !_LDD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2330: !_PREFETCH [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 31

P2331: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P2332: !_DWST [2] (maybe <- 0x1000081) (Int)
mov %l4, %l3 
stx %l3, [%i0 + 8]
add   %l4, 1, %l4

P2333: !_MEMBAR (FP)
membar #StoreLoad

P2334: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P2335: !_MEMBAR (FP)

P2336: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P2337: !_MEMBAR (FP)
membar #StoreLoad

P2338: !_BLD [21] (FP) (Branch target of P2755)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7
ba P2339
nop

TARGET2755:
ba RET2755
nop


P2339: !_MEMBAR (FP)

P2340: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 4

P2341: !_DWLD [3] (Int)
ldx [%i1 + 0], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %l6
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P2342: !_DWST_BINIT [4] (maybe <- 0x1000082) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P2343: !_MEMBAR (Int)
membar #StoreLoad

P2344: !_CAS [7] (maybe <- 0x1000084) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2345: !_MEMBAR (FP) (Branch target of P2538)
ba P2346
nop

TARGET2538:
ba RET2538
nop


P2346: !_BSTC [6] (maybe <- 0x40800072) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2347: !_MEMBAR (FP)

P2348: !_BST [16] (maybe <- 0x40800075) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2349: !_MEMBAR (FP)
membar #StoreLoad

P2350: !_ST [1] (maybe <- 0x40800078) (FP) (CBR)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 4 ]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2350
nop
RET2350:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2351: !_SWAP [5] (maybe <- 0x1000085) (Int)
mov %l4, %l7
swap  [%i1 + 12], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P2352: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2353: !_ST [1] (maybe <- 0x1000086) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P2354: !_ST_BINIT [2] (maybe <- 0x1000087) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P2355: !_MEMBAR (Int)
membar #StoreLoad

P2356: !_DWLD [19] (Int) (Branch target of P2041)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
ba P2357
nop

TARGET2041:
ba RET2041
nop


P2357: !_LDD [1] (Int) (CBR)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2357
nop
RET2357:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2358: !_LDD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P2359: !_ST_BINIT [16] (maybe <- 0x1000088) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2360: !_MEMBAR (Int)
membar #StoreLoad

P2361: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P2362: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2363: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2363
nop
RET2363:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2364: !_BST [3] (maybe <- 0x40800079) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2365: !_MEMBAR (FP)
membar #StoreLoad

P2366: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P2367: !_ST [1] (maybe <- 0x4080007c) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 4 ]

P2368: !_MEMBAR (FP)

P2369: !_BST [19] (maybe <- 0x4080007d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2370: !_MEMBAR (FP)
membar #StoreLoad

P2371: !_SWAP [20] (maybe <- 0x1000089) (Int)
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2372: !_LDD [9] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P2373: !_PREFETCH [9] (Int)
prefetch [%i2 + 0], 1

P2374: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P2375: !_LD [10] (FP)
ld [%i2 + 4], %f8
! 1 addresses covered

P2376: !_CAS [13] (maybe <- 0x100008a) (Int)
add %i3, 4, %o5
lduw [%o5], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P2377: !_MEMBAR (FP)

P2378: !_BST [4] (maybe <- 0x40800080) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2379: !_MEMBAR (FP)
membar #StoreLoad

P2380: !_PREFETCH [13] (Int)
prefetch [%i3 + 4], 1

P2381: !_PREFETCH [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 21

P2382: !_LD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P2383: !_CASX [13] (maybe <- 0x100008b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P2384: !_MEMBAR (FP)
membar #StoreLoad

P2385: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P2386: !_MEMBAR (FP)

P2387: !_BSTC [13] (maybe <- 0x40800083) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2388: !_MEMBAR (FP)

P2389: !_BSTC [12] (maybe <- 0x40800086) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2390: !_MEMBAR (FP)

P2391: !_BSTC [0] (maybe <- 0x40800089) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2392: !_MEMBAR (FP)
membar #StoreLoad

P2393: !_ST [23] (maybe <- 0x100008d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P2394: !_DWST_BINIT [5] (maybe <- 0x100008e) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

P2395: !_MEMBAR (Int) (Branch target of P2021)
membar #StoreLoad
ba P2396
nop

TARGET2021:
ba RET2021
nop


P2396: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P2397: !_MEMBAR (FP)

P2398: !_CASX [7] (maybe <- 0x100008f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P2399: !_MEMBAR (FP)

P2400: !_BST [21] (maybe <- 0x4080008c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2401: !_MEMBAR (FP)

P2402: !_BSTC [16] (maybe <- 0x4080008f) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2403: !_MEMBAR (FP)
membar #StoreLoad

P2404: !_BLD [8] (FP) (CBR) (Branch target of P2577)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2404
nop
RET2404:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0

ba P2405
nop

TARGET2577:
ba RET2577
nop


P2405: !_MEMBAR (FP)

P2406: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P2407: !_MEMBAR (FP)

P2408: !_ST [19] (maybe <- 0x1000091) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P2409: !_MEMBAR (FP)
membar #StoreLoad

P2410: !_BLD [13] (FP) (Branch target of P2731)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7
ba P2411
nop

TARGET2731:
ba RET2731
nop


P2411: !_MEMBAR (FP)

P2412: !_ST_BINIT [6] (maybe <- 0x1000092) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P2413: !_MEMBAR (Int)
membar #StoreLoad

P2414: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 28

P2415: !_DWLD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l3
or %l3, %o3, %o3

P2416: !_SWAP [22] (maybe <- 0x1000093) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2417: !_MEMBAR (FP)

P2418: !_BST [7] (maybe <- 0x40800092) (FP) (Branch target of P2783)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P2419
nop

TARGET2783:
ba RET2783
nop


P2419: !_MEMBAR (FP)
membar #StoreLoad

P2420: !_CASX [5] (maybe <- 0x1000094) (Int)
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P2421: !_MEMBAR (FP)

P2422: !_BST [6] (maybe <- 0x40800095) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2423: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2423
nop
RET2423:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2424: !_SWAP [6] (maybe <- 0x1000095) (Int)
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P2425: !_DWST [16] (maybe <- 0x1000096) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P2426: !_LD [17] (Int)
lduw [%i2 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P2427: !_DWST [11] (maybe <- 0x1000098) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P2428: !_CAS [16] (maybe <- 0x1000099) (Int)
add %i2, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2429: !_CAS [18] (maybe <- 0x100009a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%i2], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2430: !_ST [8] (maybe <- 0x100009b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2431: !_MEMBAR (FP)

P2432: !_BST [19] (maybe <- 0x40800098) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2433: !_MEMBAR (FP)
membar #StoreLoad

P2434: !_CAS [21] (maybe <- 0x100009c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P2435: !_REPLACEMENT [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P2436: !_ST [4] (maybe <- 0x100009d) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P2437: !_CAS [6] (maybe <- 0x100009e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%i2], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2438: !_DWST_BINIT [14] (maybe <- 0x100009f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P2439: !_MEMBAR (Int)
membar #StoreLoad

P2440: !_DWST_BINIT [16] (maybe <- 0x10000a0) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P2441: !_MEMBAR (Int) (Branch target of P2128)
ba P2442
nop

TARGET2128:
ba RET2128
nop


P2442: !_BSTC [0] (maybe <- 0x4080009b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2443: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2443
nop
RET2443:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2444: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P2445: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2445
nop
RET2445:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2446: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P2447: !_DWLD [1] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l3
or %l3, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3

P2448: !_MEMBAR (FP)

P2449: !_BSTC [19] (maybe <- 0x4080009e) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2450: !_MEMBAR (FP)

P2451: !_BST [12] (maybe <- 0x408000a1) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2452: !_MEMBAR (FP)
membar #StoreLoad

P2453: !_ST [12] (maybe <- 0x10000a2) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P2454: !_LDD [19] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2455: !_CASX [16] (maybe <- 0x10000a3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P2456: !_CASX [1] (maybe <- 0x10000a5) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P2457: !_REPLACEMENT [1] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P2458: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2458
nop
RET2458:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2459: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P2460: !_MEMBAR (FP)

P2461: !_DWLD [0] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4

P2462: !_ST_BINIT [6] (maybe <- 0x10000a7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2463: !_MEMBAR (Int)
membar #StoreLoad

P2464: !_DWLD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P2465: !_CAS [16] (maybe <- 0x10000a8) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2466: !_ST [0] (maybe <- 0x408000a4) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P2467: !_CASX [15] (maybe <- 0x10000a9) (Int)
ldx [%i3], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P2468: !_MEMBAR (FP)
membar #StoreLoad

P2469: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P2470: !_MEMBAR (FP)

P2471: !_DWST_BINIT [22] (maybe <- 0x10000ab) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P2472: !_MEMBAR (Int)
membar #StoreLoad

P2473: !_ST_BINIT [3] (maybe <- 0x10000ad) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P2474: !_MEMBAR (Int)

P2475: !_BSTC [17] (maybe <- 0x408000a5) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2476: !_MEMBAR (FP) (Branch target of P2575)
membar #StoreLoad
ba P2477
nop

TARGET2575:
ba RET2575
nop


P2477: !_ST [13] (maybe <- 0x10000ae) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 4] %asi
add   %l4, 1, %l4

P2478: !_MEMBAR (FP)
membar #StoreLoad

P2479: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P2480: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2480
nop
RET2480:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2481: !_ST_BINIT [19] (maybe <- 0x10000af) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2482: !_MEMBAR (Int)
membar #StoreLoad

P2483: !_ST [8] (maybe <- 0x10000b0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2484: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %l6
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2485: !_DWLD [7] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0

P2486: !_MEMBAR (FP)

P2487: !_BSTC [18] (maybe <- 0x408000a8) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2488: !_MEMBAR (FP)
membar #StoreLoad

P2489: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 0

P2490: !_ST_BINIT [22] (maybe <- 0x10000b1) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2491: !_MEMBAR (Int)
membar #StoreLoad

P2492: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 3

P2493: !_ST_BINIT [2] (maybe <- 0x10000b2) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P2494: !_MEMBAR (Int)
membar #StoreLoad

P2495: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 16

P2496: !_ST [21] (maybe <- 0x10000b3) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P2497: !_DWST_BINIT [8] (maybe <- 0x10000b4) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P2498: !_MEMBAR (Int)
membar #StoreLoad

P2499: !_DWLD [4] (Int)
ldx [%i1 + 0], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l3
or %l3, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1

P2500: !_DWLD [9] (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %f4
! 2 addresses covered

P2501: !_DWST_BINIT [5] (maybe <- 0x10000b5) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i1 + 8] %asi 
add   %l4, 1, %l4

P2502: !_MEMBAR (Int)
membar #StoreLoad

P2503: !_ST [4] (maybe <- 0x10000b6) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P2504: !_DWST [0] (maybe <- 0x10000b7) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P2505: !_DWST_BINIT [13] (maybe <- 0x10000b9) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P2506: !_MEMBAR (Int)
membar #StoreLoad

P2507: !_LDD [13] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P2508: !_MEMBAR (FP)

P2509: !_BST [10] (maybe <- 0x408000ab) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2509
nop
RET2509:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2510: !_MEMBAR (FP)
membar #StoreLoad

P2511: !_ST_BINIT [0] (maybe <- 0x10000bb) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P2512: !_MEMBAR (Int)
membar #StoreLoad

P2513: !_CAS [1] (maybe <- 0x10000bc) (Int)
add %i0, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2514: !_MEMBAR (FP)
membar #StoreLoad

P2515: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P2516: !_MEMBAR (FP)

P2517: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 1

P2518: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2519: !_SWAP [14] (maybe <- 0x10000bd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 12], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2520: !_DWST_BINIT [5] (maybe <- 0x10000be) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i1 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2520
nop
RET2520:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2521: !_MEMBAR (Int)
membar #StoreLoad

P2522: !_CAS [5] (maybe <- 0x10000bf) (Int)
add %i1, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P2523: !_MEMBAR (FP)

P2524: !_BSTC [18] (maybe <- 0x408000ae) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2524
nop
RET2524:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2525: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2525
nop
RET2525:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2526: !_ST_BINIT [14] (maybe <- 0x10000c0) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P2527: !_MEMBAR (Int)
membar #StoreLoad

P2528: !_CASX [2] (maybe <- 0x10000c1) (Int)
add %i0, 8, %l3
ldx [%l3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %o5
mov %l4, %o2
casx [%l3], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P2529: !_DWST_BINIT [10] (maybe <- 0x10000c2) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P2530: !_MEMBAR (Int) (Branch target of P2525)
membar #StoreLoad
ba P2531
nop

TARGET2525:
ba RET2525
nop


P2531: !_DWLD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P2532: !_MEMBAR (FP) (Branch target of P2726)
ba P2533
nop

TARGET2726:
ba RET2726
nop


P2533: !_BST [0] (maybe <- 0x408000b1) (FP) (Branch target of P2959)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi
ba P2534
nop

TARGET2959:
ba RET2959
nop


P2534: !_MEMBAR (FP)
membar #StoreLoad

P2535: !_ST_BINIT [17] (maybe <- 0x10000c4) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P2536: !_MEMBAR (Int)

P2537: !_BST [1] (maybe <- 0x408000b4) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2538: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2538
nop
RET2538:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2539: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P2540: !_MEMBAR (FP)

P2541: !_CAS [0] (maybe <- 0x10000c5) (Int)
lduw [%i0], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%i0], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2542: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 2

P2543: !_PREFETCH [13] (Int)
prefetch [%i2 + 4], 4

P2544: !_DWST [16] (maybe <- 0x10000c6) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P2545: !_DWST_BINIT [2] (maybe <- 0x10000c8) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i0 + 8] %asi 
add   %l4, 1, %l4

P2546: !_MEMBAR (Int)
membar #StoreLoad

P2547: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P2548: !_MEMBAR (FP)

P2549: !_ST [21] (maybe <- 0x10000c9) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P2550: !_MEMBAR (FP)
membar #StoreLoad

P2551: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P2552: !_MEMBAR (FP)

P2553: !_CASX [18] (maybe <- 0x10000ca) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P2554: !_DWST_BINIT [1] (maybe <- 0x10000cc) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P2555: !_MEMBAR (Int)
membar #StoreLoad

P2556: !_PREFETCH [20] (Int)
prefetch [%i3 + 12], 1

P2557: !_MEMBAR (FP)
membar #StoreLoad

P2558: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P2559: !_MEMBAR (FP)

P2560: !_DWLD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l7
or %l7, %o1, %o1

P2561: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P2562: !_LD [18] (Int)
lduw [%i2 + 0], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P2563: !_SWAP [7] (maybe <- 0x10000ce) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2564: !_MEMBAR (FP)

P2565: !_BST [7] (maybe <- 0x408000b7) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2565
nop
RET2565:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2566: !_MEMBAR (FP)
membar #StoreLoad

P2567: !_LD [15] (Int) (CBR) (Branch target of P2690)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2567
nop
RET2567:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0

ba P2568
nop

TARGET2690:
ba RET2690
nop


P2568: !_PREFETCH [7] (Int)
prefetch [%i2 + 4], 17

P2569: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 4

P2570: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P2571: !_CAS [14] (maybe <- 0x10000cf) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P2572: !_PREFETCH [21] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 0] %asi, 20

P2573: !_CASX [13] (maybe <- 0x10000d0) (Int)
ldx [%i3], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P2574: !_SWAP [14] (maybe <- 0x10000d2) (Int)
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P2575: !_DWST_BINIT [6] (maybe <- 0x10000d3) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2575
nop
RET2575:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2576: !_MEMBAR (Int)
membar #StoreLoad

P2577: !_DWLD [13] (FP) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %f18
! 2 addresses covered
fmovs %f18, %f5
fmovs %f19, %f6

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2577
nop
RET2577:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2578: !_DWST_BINIT [1] (maybe <- 0x10000d5) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i0 + 0] %asi
add   %l4, 1, %l4

P2579: !_MEMBAR (Int)

P2580: !_BSTC [4] (maybe <- 0x408000ba) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2581: !_MEMBAR (FP)
membar #StoreLoad

P2582: !_CAS [22] (maybe <- 0x10000d7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P2583: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2584: !_CAS [18] (maybe <- 0x10000d8) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2584
nop
RET2584:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2585: !_MEMBAR (FP) (Branch target of P2625)
ba P2586
nop

TARGET2625:
ba RET2625
nop


P2586: !_BST [16] (maybe <- 0x408000bd) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2587: !_MEMBAR (FP)
membar #StoreLoad

P2588: !_DWST_BINIT [11] (maybe <- 0x10000d9) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2589: !_MEMBAR (Int)
membar #StoreLoad

P2590: !_ST [13] (maybe <- 0x10000da) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P2591: !_CAS [18] (maybe <- 0x10000db) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P2592: !_CASX [1] (maybe <- 0x10000dc) (Int)
ldx [%i0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l7
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i0], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P2593: !_DWST_BINIT [17] (maybe <- 0x10000de) (Int) (Branch target of P2567)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4
ba P2594
nop

TARGET2567:
ba RET2567
nop


P2594: !_MEMBAR (Int)

P2595: !_BST [20] (maybe <- 0x408000c0) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2596: !_MEMBAR (FP)

P2597: !_BST [21] (maybe <- 0x408000c3) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2598: !_MEMBAR (FP)
membar #StoreLoad

P2599: !_ST_BINIT [6] (maybe <- 0x10000df) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2600: !_MEMBAR (Int)
membar #StoreLoad

P2601: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P2602: !_DWLD [19] (Int) (LE)
wr %g0, 0x88, %asi
ldxa [%i2 + 0] %asi, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(upper) -> %o0(upper)
or %l6, %g0, %o0

P2603: !_ST [20] (maybe <- 0x408000c6) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 12 ]

P2604: !_CAS [21] (maybe <- 0x10000e0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
or %l6, %o0, %o0
mov %l4, %o1
cas [%i3], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2605: !_LD [23] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i3 + 12] %asi, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P2606: !_DWST_BINIT [22] (maybe <- 0x10000e1) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P2607: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2607
nop
RET2607:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2608: !_SWAP [7] (maybe <- 0x10000e3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P2609: !_LD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P2610: !_CASX [10] (maybe <- 0x10000e4) (Int)
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l3
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P2611: !_ST [14] (maybe <- 0x10000e6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P2612: !_LDD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P2613: !_LDD [13] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P2614: !_CASX [5] (maybe <- 0x10000e7) (Int)
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P2615: !_CASX [14] (maybe <- 0x10000e8) (Int)
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P2616: !_CASX [0] (maybe <- 0x10000e9) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P2617: !_MEMBAR (FP)
membar #StoreLoad

P2618: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P2619: !_MEMBAR (FP)

P2620: !_PREFETCH [18] (Int)
prefetch [%i3 + 0], 1

P2621: !_ST [12] (maybe <- 0x10000eb) (Int) (CBR)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2621
nop
RET2621:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2622: !_ST_BINIT [5] (maybe <- 0x10000ec) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2622
nop
RET2622:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2623: !_MEMBAR (Int)

P2624: !_BST [4] (maybe <- 0x408000c7) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2625: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2625
nop
RET2625:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2626: !_DWST [7] (maybe <- 0x10000ed) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P2627: !_SWAP [23] (maybe <- 0x10000ef) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P2628: !_ST [12] (maybe <- 0x10000f0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P2629: !_LD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P2630: !_MEMBAR (FP)
membar #StoreLoad

P2631: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P2632: !_MEMBAR (FP)

P2633: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P2634: !_MEMBAR (FP)

P2635: !_CAS [21] (maybe <- 0x10000f1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%i2], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2636: !_CASX [14] (maybe <- 0x10000f2) (Int)
add %i3, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P2637: !_LDD [6] (Int) (Branch target of P2621)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
ba P2638
nop

TARGET2621:
ba RET2621
nop


P2638: !_LD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P2639: !_ST [17] (maybe <- 0x10000f3) (Int) (Branch target of P2607)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4
ba P2640
nop

TARGET2607:
ba RET2607
nop


P2640: !_MEMBAR (FP)
membar #StoreLoad

P2641: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P2642: !_MEMBAR (FP)

P2643: !_DWST [15] (maybe <- 0x10000f4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P2644: !_LD [16] (Int)
lduw [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P2645: !_MEMBAR (FP)

P2646: !_BST [22] (maybe <- 0x408000ca) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2647: !_MEMBAR (FP)
membar #StoreLoad

P2648: !_PREFETCH [22] (Int)
prefetch [%i2 + 4], 26

P2649: !_MEMBAR (FP)

P2650: !_BSTC [9] (maybe <- 0x408000cd) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2651: !_MEMBAR (FP)
membar #StoreLoad

P2652: !_CASX [4] (maybe <- 0x10000f6) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P2653: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 1

P2654: !_CASX [8] (maybe <- 0x10000f8) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P2655: !_SWAP [20] (maybe <- 0x10000f9) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %o5, %l6, %l7
srl %l7, 8, %l7
sll %o5, 8, %o5
and %o5, %l6, %o5
or %o5, %l7, %o5
srl %o5, 16, %l7
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l7, %o5
swapa  [%i3 + 12] %asi, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P2656: !_DWLD [8] (Int)
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P2657: !_CASX [7] (maybe <- 0x10000fa) (Int)
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P2658: !_ST [15] (maybe <- 0x10000fc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P2659: !_MEMBAR (FP)
membar #StoreLoad

P2660: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P2661: !_MEMBAR (FP)

P2662: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P2663: !_MEMBAR (FP)

P2664: !_CAS [15] (maybe <- 0x10000fd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%i3], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2665: !_DWST_BINIT [21] (maybe <- 0x10000fe) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P2666: !_MEMBAR (Int)
membar #StoreLoad

P2667: !_DWST [17] (maybe <- 0x1000100) (Int)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P2668: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 20

P2669: !_MEMBAR (FP)

P2670: !_BSTC [20] (maybe <- 0x408000d0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2671: !_MEMBAR (FP)
membar #StoreLoad

P2672: !_SWAP [14] (maybe <- 0x1000101) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 12], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P2673: !_CAS [19] (maybe <- 0x1000102) (Int)
add %i2, 4, %l7
lduw [%l7], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P2674: !_LDD [18] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P2675: !_DWST_BINIT [23] (maybe <- 0x1000103) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2676: !_MEMBAR (Int)
membar #StoreLoad

P2677: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P2678: !_MEMBAR (FP)

P2679: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P2680: !_REPLACEMENT [13] (Int)
sethi %hi(0x20000), %l7
ld [%i2+4], %l3
st %l3, [%i2+4]
add %i2, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P2681: !_REPLACEMENT [20] (Int)
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P2682: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P2683: !_MEMBAR (FP)
membar #StoreLoad

P2684: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P2685: !_MEMBAR (FP)

P2686: !_SWAP [22] (maybe <- 0x1000104) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2687: !_PREFETCH [21] (Int)
prefetch [%i3 + 0], 4

P2688: !_CASX [12] (maybe <- 0x1000105) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P2689: !_ST [23] (maybe <- 0x1000107) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2690: !_CASX [13] (maybe <- 0x1000108) (Int) (CBR) (Branch target of P2520)
ldx [%i2], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2690
nop
RET2690:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P2691
nop

TARGET2520:
ba RET2520
nop


P2691: !_MEMBAR (FP)

P2692: !_BSTC [9] (maybe <- 0x408000d3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2693: !_MEMBAR (FP)

P2694: !_BSTC [11] (maybe <- 0x408000d6) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2695: !_MEMBAR (FP) (Branch target of P2584)
membar #StoreLoad
ba P2696
nop

TARGET2584:
ba RET2584
nop


P2696: !_ST_BINIT [0] (maybe <- 0x100010a) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P2697: !_MEMBAR (Int)
membar #StoreLoad

P2698: !_REPLACEMENT [1] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P2699: !_CASX [21] (maybe <- 0x100010b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P2700: !_LD [1] (Int)
lduw [%i0 + 4], %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P2701: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P2702: !_DWST_BINIT [4] (maybe <- 0x100010d) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P2703: !_MEMBAR (Int)
membar #StoreLoad

P2704: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 2

P2705: !_REPLACEMENT [3] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P2706: !_ST_BINIT [13] (maybe <- 0x100010f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2707: !_MEMBAR (Int)
membar #StoreLoad

P2708: !_CASX [8] (maybe <- 0x1000110) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P2709: !_CASX [4] (maybe <- 0x1000111) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P2710: !_DWST [22] (maybe <- 0x1000113) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P2711: !_LDD [7] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P2712: !_LD [21] (Int)
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P2713: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 16

P2714: !_SWAP [23] (maybe <- 0x1000115) (Int)
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P2715: !_SWAP [5] (maybe <- 0x1000116) (Int)
mov %l4, %o5
swap  [%i1 + 12], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P2716: !_ST_BINIT [2] (maybe <- 0x1000117) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P2717: !_MEMBAR (Int)
membar #StoreLoad

P2718: !_SWAP [12] (maybe <- 0x1000118) (Int)
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2719: !_ST_BINIT [20] (maybe <- 0x1000119) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P2720: !_MEMBAR (Int)
membar #StoreLoad

P2721: !_DWST_BINIT [19] (maybe <- 0x100011a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P2722: !_MEMBAR (Int)
membar #StoreLoad

P2723: !_PREFETCH [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 2

P2724: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 3

P2725: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 0

P2726: !_REPLACEMENT [1] (Int) (CBR)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2726
nop
RET2726:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2727: !_MEMBAR (FP)
membar #StoreLoad

P2728: !_BLD [21] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2728
nop
RET2728:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2729: !_MEMBAR (FP)

P2730: !_ST_BINIT [19] (maybe <- 0x100011c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2731: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2731
nop
RET2731:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2732: !_ST_BINIT [1] (maybe <- 0x100011d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P2733: !_MEMBAR (Int)

P2734: !_BST [8] (maybe <- 0x408000d9) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2735: !_MEMBAR (FP)
membar #StoreLoad

P2736: !_DWST [1] (maybe <- 0x100011e) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P2737: !_ST_BINIT [16] (maybe <- 0x1000120) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2738: !_MEMBAR (Int)
membar #StoreLoad

P2739: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 4

P2740: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 16

P2741: !_DWST_BINIT [6] (maybe <- 0x1000121) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P2742: !_MEMBAR (Int) (Branch target of P2268)
ba P2743
nop

TARGET2268:
ba RET2268
nop


P2743: !_BST [4] (maybe <- 0x408000dc) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2744: !_MEMBAR (FP)
membar #StoreLoad

P2745: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 3

P2746: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P2747: !_MEMBAR (FP)

P2748: !_BSTC [23] (maybe <- 0x408000df) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2749: !_MEMBAR (FP)
membar #StoreLoad

P2750: !_DWLD [3] (Int) (Branch target of P2968)
ldx [%i1 + 0], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
ba P2751
nop

TARGET2968:
ba RET2968
nop


P2751: !_SWAP [15] (maybe <- 0x1000123) (Int) (Branch target of P2324)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 0], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4
ba P2752
nop

TARGET2324:
ba RET2324
nop


P2752: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 0

P2753: !_LD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P2754: !_MEMBAR (FP)
membar #StoreLoad

P2755: !_BLD [4] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2755
nop
RET2755:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2756: !_MEMBAR (FP) (Branch target of P2153)
ba P2757
nop

TARGET2153:
ba RET2153
nop


P2757: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 19

P2758: !_MEMBAR (FP)

P2759: !_BST [17] (maybe <- 0x408000e2) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2760: !_MEMBAR (FP)
membar #StoreLoad

P2761: !_ST_BINIT [5] (maybe <- 0x1000124) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i1 + 12] %asi
add   %l4, 1, %l4

P2762: !_MEMBAR (Int) (LE)
membar #StoreLoad

P2763: !_ST [12] (maybe <- 0x1000125) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P2764: !_MEMBAR (FP)

P2765: !_BST [10] (maybe <- 0x408000e5) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2766: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2766
nop
RET2766:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P2767: !_LDD [9] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P2768: !_ST_BINIT [8] (maybe <- 0x1000126) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P2769: !_MEMBAR (Int)

P2770: !_BSTC [4] (maybe <- 0x408000e8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2771: !_MEMBAR (FP)
membar #StoreLoad

P2772: !_LD [4] (Int)
lduw [%i1 + 4], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P2773: !_ST_BINIT [20] (maybe <- 0x1000127) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P2774: !_MEMBAR (Int)
membar #StoreLoad

P2775: !_ST [0] (maybe <- 0x1000128) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P2776: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 22

P2777: !_DWST [1] (maybe <- 0x1000129) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P2778: !_MEMBAR (FP)

P2779: !_BST [20] (maybe <- 0x408000eb) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2780: !_MEMBAR (FP)
membar #StoreLoad

P2781: !_DWST [7] (maybe <- 0x408000ee) (FP) (Branch target of P2814)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]
ba P2782
nop

TARGET2814:
ba RET2814
nop


P2782: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P2783: !_SWAP [8] (maybe <- 0x100012b) (Int) (CBR)
mov %l4, %o4
swap  [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2783
nop
RET2783:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2784: !_MEMBAR (FP)

P2785: !_BSTC [18] (maybe <- 0x408000f0) (FP) (Branch target of P2622)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P2786
nop

TARGET2622:
ba RET2622
nop


P2786: !_MEMBAR (FP)
membar #StoreLoad

P2787: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 24

P2788: !_LD [2] (Int)
lduw [%i0 + 12], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2789: !_ST_BINIT [3] (maybe <- 0x100012c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P2790: !_MEMBAR (Int)
membar #StoreLoad

P2791: !_PREFETCH [15] (Int)
prefetch [%i2 + 0], 22

P2792: !_REPLACEMENT [1] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P2793: !_CASX [8] (maybe <- 0x100012d) (Int) (Branch target of P2363)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %o5
mov %l4, %o1
casx [%l3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4
ba P2794
nop

TARGET2363:
ba RET2363
nop


P2794: !_ST_BINIT [15] (maybe <- 0x100012e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2795: !_MEMBAR (Int)

P2796: !_BST [2] (maybe <- 0x408000f3) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2797: !_MEMBAR (FP)
membar #StoreLoad

P2798: !_DWST [1] (maybe <- 0x100012f) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i0 + 0]
add   %l4, 1, %l4

P2799: !_DWST [17] (maybe <- 0x1000131) (Int)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P2800: !_CAS [20] (maybe <- 0x1000132) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P2801: !_CAS [18] (maybe <- 0x1000133) (Int) (LE) (CBR)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
wr %g0, 0x88, %asi
lduwa [%i2] %asi, %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l6, %l7
casa [%i2] %asi, %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2801
nop
RET2801:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2802: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2803: !_DWST_BINIT [18] (maybe <- 0x1000134) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P2804: !_MEMBAR (Int)
membar #StoreLoad

P2805: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 1

P2806: !_CASX [6] (maybe <- 0x1000136) (Int)
ldx [%i2], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l6
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i2], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P2807: !_SWAP [17] (maybe <- 0x1000138) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P2808: !_LDD [6] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P2809: !_MEMBAR (FP)
membar #StoreLoad

P2810: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P2811: !_MEMBAR (FP)

P2812: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P2813: !_MEMBAR (FP)

P2814: !_DWLD [14] (Int) (LE) (CBR)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldxa [%i2 + 8] %asi, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2814
nop
RET2814:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2815: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P2816: !_MEMBAR (FP)

P2817: !_BSTC [20] (maybe <- 0x408000f6) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2818: !_MEMBAR (FP)
membar #StoreLoad

P2819: !_ST_BINIT [15] (maybe <- 0x1000139) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2820: !_MEMBAR (Int)
membar #StoreLoad

P2821: !_DWLD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2822: !_MEMBAR (FP)

P2823: !_BSTC [10] (maybe <- 0x408000f9) (FP) (Branch target of P2509)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P2824
nop

TARGET2509:
ba RET2509
nop


P2824: !_MEMBAR (FP)
membar #StoreLoad

P2825: !_DWST_BINIT [18] (maybe <- 0x100013a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P2826: !_MEMBAR (Int)
membar #StoreLoad

P2827: !_ST_BINIT [1] (maybe <- 0x100013c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P2828: !_MEMBAR (Int)
membar #StoreLoad

P2829: !_LD [1] (Int)
lduw [%i0 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P2830: !_ST [21] (maybe <- 0x100013d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P2831: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 1

P2832: !_MEMBAR (FP)
membar #StoreLoad

P2833: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P2834: !_MEMBAR (FP)

P2835: !_CASX [4] (maybe <- 0x100013e) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 4 

sethi %hi(0x200000), %l3
sub   %i1, %l3, %i1
ldx [%i1], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P2836: !_CAS [10] (maybe <- 0x1000140) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2837: !_MEMBAR (FP)

P2838: !_BSTC [21] (maybe <- 0x408000fc) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2839: !_MEMBAR (FP)
membar #StoreLoad

P2840: !_REPLACEMENT [4] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P2841: !_ST_BINIT [19] (maybe <- 0x1000141) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P2842: !_MEMBAR (Int)
membar #StoreLoad

P2843: !_CASX [10] (maybe <- 0x1000142) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P2844: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 22

P2845: !_DWST_BINIT [6] (maybe <- 0x1000144) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P2846: !_MEMBAR (Int)
membar #StoreLoad

P2847: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P2848: !_MEMBAR (FP)

P2849: !_DWST [3] (maybe <- 0x1000146) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i1 + 0]
add   %l4, 1, %l4

P2850: !_DWST_BINIT [15] (maybe <- 0x1000148) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P2851: !_MEMBAR (Int)
membar #StoreLoad

P2852: !_DWLD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P2853: !_MEMBAR (FP)

P2854: !_BSTC [20] (maybe <- 0x408000ff) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2855: !_MEMBAR (FP) (Branch target of P2357)
ba P2856
nop

TARGET2357:
ba RET2357
nop


P2856: !_BST [15] (maybe <- 0x40800102) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2857: !_MEMBAR (FP)
membar #StoreLoad

P2858: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P2859: !_MEMBAR (FP)

P2860: !_ST [14] (maybe <- 0x100014a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2861: !_DWST_BINIT [11] (maybe <- 0x100014b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2862: !_MEMBAR (Int)
membar #StoreLoad

P2863: !_SWAP [16] (maybe <- 0x100014c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P2864: !_MEMBAR (FP)
membar #StoreLoad

P2865: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P2866: !_MEMBAR (FP)

P2867: !_BSTC [6] (maybe <- 0x40800105) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2868: !_MEMBAR (FP)
membar #StoreLoad

P2869: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P2870: !_CAS [3] (maybe <- 0x100014d) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
wr %g0, 0x88, %asi
lduwa [%i1] %asi, %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l3, %l6
casa [%i1] %asi, %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P2871: !_MEMBAR (FP)
membar #StoreLoad

P2872: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P2873: !_MEMBAR (FP)

P2874: !_BSTC [13] (maybe <- 0x40800108) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2875: !_MEMBAR (FP)
membar #StoreLoad

P2876: !_REPLACEMENT [6] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P2877: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 20

P2878: !_MEMBAR (FP)
membar #StoreLoad

P2879: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P2880: !_MEMBAR (FP)

P2881: !_BST [3] (maybe <- 0x4080010b) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2882: !_MEMBAR (FP)
membar #StoreLoad

P2883: !_DWLD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P2884: !_CAS [5] (maybe <- 0x100014e) (Int)
add %i1, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2885: !_MEMBAR (FP)
membar #StoreLoad

P2886: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P2887: !_MEMBAR (FP)

P2888: !_BSTC [21] (maybe <- 0x4080010e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2889: !_MEMBAR (FP)
membar #StoreLoad

P2890: !_ST_BINIT [10] (maybe <- 0x100014f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2891: !_MEMBAR (Int)

P2892: !_BSTC [0] (maybe <- 0x40800111) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2893: !_MEMBAR (FP)
membar #StoreLoad

P2894: !_CASX [14] (maybe <- 0x1000150) (Int) (Branch target of P2908)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %o5
ldx [%o5], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l7
mov %l4, %o1
casx [%o5], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4
ba P2895
nop

TARGET2908:
ba RET2908
nop


P2895: !_MEMBAR (FP)

P2896: !_BST [15] (maybe <- 0x40800114) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2897: !_MEMBAR (FP)

P2898: !_BSTC [20] (maybe <- 0x40800117) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2899: !_MEMBAR (FP)

P2900: !_BST [6] (maybe <- 0x4080011a) (FP) (Branch target of P3003)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P2901
nop

TARGET3003:
ba RET3003
nop


P2901: !_MEMBAR (FP)

P2902: !_BSTC [0] (maybe <- 0x4080011d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2903: !_MEMBAR (FP) (Branch target of P2404)
membar #StoreLoad
ba P2904
nop

TARGET2404:
ba RET2404
nop


P2904: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P2905: !_CAS [10] (maybe <- 0x1000151) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P2906: !_CAS [8] (maybe <- 0x1000152) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%l7], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P2907: !_LD [19] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 4], %f0
! 1 addresses covered

P2908: !_PREFETCH [4] (Int) (CBR)
prefetch [%i1 + 4], 3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2908
nop
RET2908:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2909: !_DWST [10] (maybe <- 0x40800120) (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P2910: !_ST_BINIT [20] (maybe <- 0x1000153) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P2911: !_MEMBAR (Int)
membar #StoreLoad

P2912: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P2913: !_DWST [15] (maybe <- 0x1000154) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %l7
add   %l4, 1, %l4
or %l7, %l4, %o5
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %o5, %l3, %l7
srlx %l7, 8, %l7
sllx %o5, 8, %o5
and %o5, %l3, %o5
or %o5, %l7, %o5 
sethi %hi(0xffff0000), %l3
srlx %o5, 16, %l7
andn %l7, %l3, %l7
andn %o5, %l3, %o5
sllx %o5, 16, %o5
or %o5, %l7, %o5 
srlx %o5, 32, %l7
sllx %o5, 32, %o5
or %o5, %l7, %l7 
stxa %l7, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P2914: !_ST_BINIT [12] (maybe <- 0x1000156) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2915: !_MEMBAR (Int)
membar #StoreLoad

P2916: !_CAS [17] (maybe <- 0x1000157) (Int)
add %i2, 12, %l6
lduw [%l6], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P2917: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P2918: !_MEMBAR (FP)

P2919: !_BSTC [15] (maybe <- 0x40800122) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET2919
nop
RET2919:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P2920: !_MEMBAR (FP)

P2921: !_BST [17] (maybe <- 0x40800125) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2922: !_MEMBAR (FP)
membar #StoreLoad

P2923: !_CASX [15] (maybe <- 0x1000158) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P2924: !_MEMBAR (FP)

P2925: !_BSTC [15] (maybe <- 0x40800128) (FP) (Branch target of P2480)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P2926
nop

TARGET2480:
ba RET2480
nop


P2926: !_MEMBAR (FP)
membar #StoreLoad

P2927: !_LD [2] (Int)
lduw [%i0 + 12], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

P2928: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P2929: !_ST_BINIT [13] (maybe <- 0x100015a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2930: !_MEMBAR (Int) (Branch target of P2314)
membar #StoreLoad
ba P2931
nop

TARGET2314:
ba RET2314
nop


P2931: !_DWST_BINIT [11] (maybe <- 0x100015b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P2932: !_MEMBAR (Int)
membar #StoreLoad

P2933: !_DWST [2] (maybe <- 0x100015c) (Int)
mov %l4, %l3 
stx %l3, [%i0 + 8]
add   %l4, 1, %l4

P2934: !_MEMBAR (FP)
membar #StoreLoad

P2935: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P2936: !_MEMBAR (FP)

P2937: !_SWAP [23] (maybe <- 0x100015d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2938: !_MEMBAR (FP)

P2939: !_BSTC [23] (maybe <- 0x4080012b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2940: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2940
nop
RET2940:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P2941: !_CAS [21] (maybe <- 0x100015e) (Int)
lduw [%i2], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P2942: !_ST [20] (maybe <- 0x100015f) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P2943: !_MEMBAR (FP)

P2944: !_BST [1] (maybe <- 0x4080012e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P2945: !_MEMBAR (FP)
membar #StoreLoad

P2946: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P2947: !_LDD [10] (Int) (Branch target of P2801)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
ba P2948
nop

TARGET2801:
ba RET2801
nop


P2948: !_MEMBAR (FP)

P2949: !_BST [13] (maybe <- 0x40800131) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P2950: !_MEMBAR (FP)
membar #StoreLoad

P2951: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P2952: !_ST_BINIT [16] (maybe <- 0x1000160) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2953: !_MEMBAR (Int)
membar #StoreLoad

P2954: !_ST_BINIT [16] (maybe <- 0x1000161) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P2955: !_MEMBAR (Int)
membar #StoreLoad

P2956: !_ST_BINIT [12] (maybe <- 0x1000162) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P2957: !_MEMBAR (Int)
membar #StoreLoad

P2958: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P2959: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2959
nop
RET2959:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2960: !_LDD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P2961: !_LD [0] (Int)
lduw [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P2962: !_CAS [23] (maybe <- 0x1000163) (Int)
add %i2, 12, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P2963: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P2964: !_MEMBAR (FP)

P2965: !_BST [5] (maybe <- 0x40800134) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P2966: !_MEMBAR (FP)
membar #StoreLoad

P2967: !_DWST_BINIT [11] (maybe <- 0x1000164) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P2968: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET2968
nop
RET2968:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P2969: !_DWST [0] (maybe <- 0x1000165) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P2970: !_DWST [22] (maybe <- 0x1000167) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P2971: !_REPLACEMENT [15] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P2972: !_DWLD [2] (Int)
ldx [%i0 + 8], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l3
or %l3, %o0, %o0

P2973: !_SWAP [3] (maybe <- 0x1000169) (Int)
mov %l4, %o1
swap  [%i1 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P2974: !_ST_BINIT [12] (maybe <- 0x100016a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P2975: !_MEMBAR (Int)
membar #StoreLoad

P2976: !_BLD [20] (FP) (Branch target of P2443)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9
ba P2977
nop

TARGET2443:
ba RET2443
nop


P2977: !_MEMBAR (FP)

P2978: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P2979: !_ST [0] (maybe <- 0x100016b) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P2980: !_DWST_BINIT [13] (maybe <- 0x100016c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P2981: !_MEMBAR (Int)
membar #StoreLoad

P2982: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P2983: !_MEMBAR (FP)

P2984: !_BST [14] (maybe <- 0x40800137) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P2985: !_MEMBAR (FP)
membar #StoreLoad

P2986: !_CAS [7] (maybe <- 0x100016e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P2987: !_DWST [0] (maybe <- 0x100016f) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P2988: !_SWAP [12] (maybe <- 0x1000171) (Int)
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P2989: !_MEMBAR (FP)
membar #StoreLoad

P2990: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P2991: !_MEMBAR (FP)

P2992: !_CASX [23] (maybe <- 0x1000172) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %o5
ldx [%o5], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l7
mov %l4, %o4
casx [%o5], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P2993: !_LDD [16] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P2994: !_ST_BINIT [20] (maybe <- 0x1000173) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P2995: !_MEMBAR (Int)
membar #StoreLoad

P2996: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P2997: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 23

P2998: !_ST_BINIT [3] (maybe <- 0x1000174) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P2999: !_MEMBAR (Int)
membar #StoreLoad

P3000: !_DWST [2] (maybe <- 0x1000175) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P3001: !_DWST_BINIT [23] (maybe <- 0x1000176) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3002: !_MEMBAR (Int)
membar #StoreLoad

P3003: !_ST_BINIT [14] (maybe <- 0x1000177) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3003
nop
RET3003:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3004: !_MEMBAR (Int) (Loop exit)
membar #StoreLoad
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5

sethi %hi(0x200000), %l6
add   %i1, %l6, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_2_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_2_0
nop

P3005: !_MEMBAR (Int)
membar #StoreLoad

END_NODES2: ! Test instruction sequence for CPU 2 ends
sethi %hi(0xdead0e0f), %l7
or    %l7, %lo(0xdead0e0f), %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
sethi %hi(0xdead0e0f), %l7
or    %l7, %lo(0xdead0e0f), %l7
stw %l7, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func3:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l6
or    %l6, %lo(0xdeadbee0), %l6
stw   %l6, [%i5]
sethi %hi(0xdeadbee1), %l6
or    %l6, %lo(0xdeadbee1), %l6
stw   %l6, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x03deade1), %l6
or    %l6, %lo(0x03deade1), %l6
stw %l6, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x1800001), %l4
or    %l4, %lo(0x1800001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x41000001), %l6
or    %l6, %lo(0x41000001), %l6
stw %l6, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x35800000), %l6
or    %l6, %lo(0x35800000), %l6
stw %l6, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0xe08^4
sethi %hi(0xe08), %l0
or    %l0, %lo(0xe08), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES3: ! Test instruction sequence for ISTREAM 3 begins

P3006: !_ST_BINIT [0] (maybe <- 0x1800001) (Int) (Loop entry)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_3_0:
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P3007: !_MEMBAR (Int)
membar #StoreLoad

P3008: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P3009: !_CAS [0] (maybe <- 0x1800002) (Int)
lduw [%i0], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%i0], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P3010: !_CASX [6] (maybe <- 0x1800003) (Int) (LE)
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %l6, %l3, %l7
srlx %l7, 8, %l7
sllx %l6, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6 
sethi %hi(0xffff0000), %l3
srlx %l6, 16, %l7
andn %l7, %l3, %l7
andn %l6, %l3, %l6
sllx %l6, 16, %l6
or %l6, %l7, %l6 
srlx %l6, 32, %l7
sllx %l6, 32, %l6
or %l6, %l7, %l7 
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldxa [%i2] %asi, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
mov %o5, %l3
mov  %l7, %o5
casxa [%i2] %asi, %l3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
add  %l4, 1, %l4

P3011: !_DWST_BINIT [4] (maybe <- 0x1800005) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P3012: !_MEMBAR (Int)
membar #StoreLoad

P3013: !_LDD [12] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3014: !_ST_BINIT [11] (maybe <- 0x1800007) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3015: !_MEMBAR (Int)
membar #StoreLoad

P3016: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P3017: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3018: !_PREFETCH [21] (Int)
prefetch [%i3 + 0], 22

P3019: !_MEMBAR (FP)

P3020: !_BSTC [19] (maybe <- 0x41000001) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3021: !_MEMBAR (FP)
membar #StoreLoad

P3022: !_SWAP [3] (maybe <- 0x1800008) (Int)
mov %l4, %l6
swap  [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P3023: !_DWLD [11] (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %f0
! 1 addresses covered
fmovs %f1, %f0

P3024: !_SWAP [10] (maybe <- 0x1800009) (Int)
mov %l4, %o1
swap  [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3025: !_DWLD [14] (FP) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %f18
! 1 addresses covered
fmovs %f19, %f1

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3025
nop
RET3025:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P3026: !_ST [16] (maybe <- 0x180000a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3027: !_ST [22] (maybe <- 0x180000b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P3028: !_DWST_BINIT [23] (maybe <- 0x180000c) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3029: !_MEMBAR (Int)
membar #StoreLoad

P3030: !_DWST_BINIT [3] (maybe <- 0x180000d) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P3031: !_MEMBAR (Int)
membar #StoreLoad

P3032: !_CASX [5] (maybe <- 0x180000f) (Int)
add %i1, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P3033: !_DWST [19] (maybe <- 0x1800010) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3034: !_DWST [2] (maybe <- 0x1800012) (Int) (Branch target of P3256)
mov %l4, %l6 
stx %l6, [%i0 + 8]
add   %l4, 1, %l4
ba P3035
nop

TARGET3256:
ba RET3256
nop


P3035: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3035
nop
RET3035:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3036: !_BST [20] (maybe <- 0x41000004) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3037: !_MEMBAR (FP)
membar #StoreLoad

P3038: !_DWST_BINIT [22] (maybe <- 0x1800013) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P3039: !_MEMBAR (Int)
membar #StoreLoad

P3040: !_LDD [20] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3041: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 0

P3042: !_MEMBAR (FP)
membar #StoreLoad

P3043: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3044: !_MEMBAR (FP)

P3045: !_ST_BINIT [0] (maybe <- 0x1800015) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P3046: !_MEMBAR (Int)
membar #StoreLoad

P3047: !_DWST_BINIT [12] (maybe <- 0x1800016) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P3048: !_MEMBAR (Int)
membar #StoreLoad

P3049: !_CAS [1] (maybe <- 0x1800018) (Int)
add %i0, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3050: !_SWAP [12] (maybe <- 0x1800019) (Int)
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3051: !_ST [4] (maybe <- 0x180001a) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P3052: !_DWST [7] (maybe <- 0x180001b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P3053: !_DWST_BINIT [7] (maybe <- 0x180001d) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P3054: !_MEMBAR (Int)
membar #StoreLoad

P3055: !_LD [5] (Int)
lduw [%i1 + 12], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P3056: !_ST_BINIT [2] (maybe <- 0x180001f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P3057: !_MEMBAR (Int)
membar #StoreLoad

P3058: !_LD [5] (Int)
lduw [%i1 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P3059: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 3

P3060: !_DWST_BINIT [15] (maybe <- 0x1800020) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P3061: !_MEMBAR (Int)
membar #StoreLoad

P3062: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P3063: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3063
nop
RET3063:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3064: !_LD [20] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduwa [%i2 + 12] %asi, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3065: !_DWST_BINIT [15] (maybe <- 0x1800022) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P3066: !_MEMBAR (Int)
membar #StoreLoad

P3067: !_BLD [6] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3067
nop
RET3067:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P3068: !_MEMBAR (FP)

P3069: !_DWLD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P3070: !_DWST [21] (maybe <- 0x1800024) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3071: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3072: !_CASX [18] (maybe <- 0x1800026) (Int)
ldx [%i2], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i2], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P3073: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P3074: !_MEMBAR (FP) (Branch target of P3932)
membar #StoreLoad
ba P3075
nop

TARGET3932:
ba RET3932
nop


P3075: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P3076: !_MEMBAR (FP)

P3077: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 23

P3078: !_SWAP [9] (maybe <- 0x1800028) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3079: !_ST [15] (maybe <- 0x1800029) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3080: !_LDD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3081: !_CASX [10] (maybe <- 0x180002a) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l3
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P3082: !_MEMBAR (FP)

P3083: !_BSTC [19] (maybe <- 0x41000007) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3084: !_MEMBAR (FP)
membar #StoreLoad

P3085: !_REPLACEMENT [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+12], %l6
st %l6, [%i2+12]
add %i2, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P3086: !_PREFETCH [21] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetcha [%i3 + 0] %asi, 2

P3087: !_CAS [10] (maybe <- 0x180002c) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3088: !_ST_BINIT [15] (maybe <- 0x180002d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3089: !_MEMBAR (Int)
membar #StoreLoad

P3090: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P3091: !_MEMBAR (FP)

P3092: !_ST_BINIT [7] (maybe <- 0x180002e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3093: !_MEMBAR (Int)
membar #StoreLoad

P3094: !_DWST [18] (maybe <- 0x180002f) (Int) (Branch target of P3994)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4
ba P3095
nop

TARGET3994:
ba RET3994
nop


P3095: !_MEMBAR (FP)

P3096: !_BST [3] (maybe <- 0x4100000a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3097: !_MEMBAR (FP)
membar #StoreLoad

P3098: !_DWST [8] (maybe <- 0x1800031) (Int)
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P3099: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3100: !_CASX [17] (maybe <- 0x1800032) (Int)
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P3101: !_CASX [1] (maybe <- 0x1800033) (Int)
ldx [%i0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i0], %o5, %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
add  %l4, 1, %l4

P3102: !_LDD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P3103: !_MEMBAR (FP)
membar #StoreLoad

P3104: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P3105: !_MEMBAR (FP)

P3106: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P3107: !_MEMBAR (FP)

P3108: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P3109: !_MEMBAR (FP)

P3110: !_CASX [8] (maybe <- 0x1800035) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P3111: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3112: !_DWST_BINIT [14] (maybe <- 0x1800036) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3113: !_MEMBAR (Int)
membar #StoreLoad

P3114: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P3115: !_CAS [5] (maybe <- 0x1800037) (Int)
add %i1, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3116: !_CAS [1] (maybe <- 0x1800038) (Int)
add %i0, 4, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P3117: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 4

P3118: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P3119: !_MEMBAR (FP)

P3120: !_BSTC [15] (maybe <- 0x4100000d) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3121: !_MEMBAR (FP)
membar #StoreLoad

P3122: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P3123: !_MEMBAR (FP)

P3124: !_BST [23] (maybe <- 0x41000010) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3124
nop
RET3124:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3125: !_MEMBAR (FP) (Branch target of P3742)
membar #StoreLoad
ba P3126
nop

TARGET3742:
ba RET3742
nop


P3126: !_CASX [23] (maybe <- 0x1800039) (Int)
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P3127: !_MEMBAR (FP)

P3128: !_BST [22] (maybe <- 0x41000013) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3129: !_MEMBAR (FP)
membar #StoreLoad

P3130: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P3131: !_MEMBAR (FP)

P3132: !_DWST_BINIT [4] (maybe <- 0x180003a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P3133: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3133
nop
RET3133:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3134: !_ST_BINIT [7] (maybe <- 0x180003c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3135: !_MEMBAR (Int)

P3136: !_BSTC [18] (maybe <- 0x41000016) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3137: !_MEMBAR (FP) (Branch target of P3160)
membar #StoreLoad
ba P3138
nop

TARGET3160:
ba RET3160
nop


P3138: !_REPLACEMENT [5] (Int) (Branch target of P3918)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+12], %l3
st %l3, [%i3+12]
add %i3, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
ba P3139
nop

TARGET3918:
ba RET3918
nop


P3139: !_REPLACEMENT [10] (Int)
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P3140: !_LD [18] (Int)
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3141: !_DWLD [3] (Int)
ldx [%i1 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P3142: !_CASX [16] (maybe <- 0x180003d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3143: !_SWAP [19] (maybe <- 0x180003f) (Int) (Branch target of P3501)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4
ba P3144
nop

TARGET3501:
ba RET3501
nop


P3144: !_CAS [17] (maybe <- 0x1800040) (Int)
add %i2, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3145: !_PREFETCH [15] (Int)
prefetch [%i2 + 0], 18

P3146: !_CASX [18] (maybe <- 0x1800041) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P3147: !_ST_BINIT [1] (maybe <- 0x1800043) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P3148: !_MEMBAR (Int)
membar #StoreLoad

P3149: !_DWST [19] (maybe <- 0x1800044) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3150: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3151: !_LD [1] (Int)
lduw [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3152: !_MEMBAR (FP)
membar #StoreLoad

P3153: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P3154: !_MEMBAR (FP)

P3155: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P3156: !_MEMBAR (FP)

P3157: !_LDD [20] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P3158: !_LDD [18] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3159: !_MEMBAR (FP)

P3160: !_BSTC [13] (maybe <- 0x41000019) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3160
nop
RET3160:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3161: !_MEMBAR (FP)
membar #StoreLoad

P3162: !_DWST [12] (maybe <- 0x1800046) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P3163: !_ST_BINIT [7] (maybe <- 0x1800048) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3164: !_MEMBAR (Int)
membar #StoreLoad

P3165: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 1

P3166: !_CASX [23] (maybe <- 0x1800049) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l7
mov %l4, %o0
casx [%o5], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P3167: !_CAS [4] (maybe <- 0x180004a) (Int)
add %i1, 4, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P3168: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P3169: !_MEMBAR (FP)
membar #StoreLoad

P3170: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P3171: !_MEMBAR (FP)

P3172: !_BST [5] (maybe <- 0x4100001c) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3173: !_MEMBAR (FP)

P3174: !_BST [1] (maybe <- 0x4100001f) (FP) (Branch target of P3508)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi
ba P3175
nop

TARGET3508:
ba RET3508
nop


P3175: !_MEMBAR (FP)
membar #StoreLoad

P3176: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P3177: !_LD [4] (Int)
lduw [%i1 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P3178: !_MEMBAR (FP)

P3179: !_BSTC [14] (maybe <- 0x41000022) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3180: !_MEMBAR (FP)
membar #StoreLoad

P3181: !_SWAP [2] (maybe <- 0x180004b) (Int) (Branch target of P3909)
mov %l4, %l3
swap  [%i0 + 12], %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4
ba P3182
nop

TARGET3909:
ba RET3909
nop


P3182: !_CAS [5] (maybe <- 0x180004c) (Int) (LE) (Branch target of P3620)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
wr %g0, 0x88, %asi
add %i1, 12, %l7
lduwa [%l7] %asi, %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %o5, %l3
casa [%l7] %asi, %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P3183
nop

TARGET3620:
ba RET3620
nop


P3183: !_MEMBAR (FP)
membar #StoreLoad

P3184: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P3185: !_MEMBAR (FP)

P3186: !_LDD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P3187: !_DWST_BINIT [12] (maybe <- 0x180004d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P3188: !_MEMBAR (Int)
membar #StoreLoad

P3189: !_CAS [22] (maybe <- 0x180004f) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P3190: !_LD [2] (Int)
lduw [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3191: !_MEMBAR (FP)
membar #StoreLoad

P3192: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P3193: !_MEMBAR (FP)

P3194: !_BSTC [10] (maybe <- 0x41000025) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3195: !_MEMBAR (FP)
membar #StoreLoad

P3196: !_LD [1] (Int)
lduw [%i0 + 4], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P3197: !_REPLACEMENT [9] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P3198: !_DWST [0] (maybe <- 0x1800050) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i0 + 0]
add   %l4, 1, %l4

P3199: !_CAS [19] (maybe <- 0x1800052) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P3200: !_DWST_BINIT [2] (maybe <- 0x1800053) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i0 + 8] %asi 
add   %l4, 1, %l4

P3201: !_MEMBAR (Int)
membar #StoreLoad

P3202: !_DWST [6] (maybe <- 0x1800054) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P3203: !_MEMBAR (FP)

P3204: !_BST [15] (maybe <- 0x41000028) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3205: !_MEMBAR (FP)
membar #StoreLoad

P3206: !_ST [16] (maybe <- 0x1800056) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3207: !_CAS [15] (maybe <- 0x1800057) (Int)
lduw [%i3], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3208: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3209: !_CASX [15] (maybe <- 0x1800058) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P3210: !_DWST_BINIT [1] (maybe <- 0x180005a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P3211: !_MEMBAR (Int)
membar #StoreLoad

P3212: !_DWST [21] (maybe <- 0x180005c) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3213: !_DWLD [13] (Int)
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3214: !_SWAP [11] (maybe <- 0x180005e) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P3215: !_MEMBAR (FP)
membar #StoreLoad

P3216: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3217: !_MEMBAR (FP)

P3218: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P3219: !_MEMBAR (FP)

P3220: !_BST [20] (maybe <- 0x4100002b) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3221: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3221
nop
RET3221:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P3222: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 21

P3223: !_MEMBAR (FP)

P3224: !_BSTC [7] (maybe <- 0x4100002e) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3225: !_MEMBAR (FP)
membar #StoreLoad

P3226: !_DWST [0] (maybe <- 0x180005f) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i0 + 0]
add   %l4, 1, %l4

P3227: !_ST [13] (maybe <- 0x1800061) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3228: !_CAS [19] (maybe <- 0x1800062) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %o4
mov %o4, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3229: !_DWLD [0] (Int)
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P3230: !_CASX [16] (maybe <- 0x1800063) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3231: !_CASX [1] (maybe <- 0x1800065) (Int)
ldx [%i0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i0], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P3232: !_LD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3233: !_DWST [21] (maybe <- 0x1800067) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P3234: !_LDD [21] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3235: !_MEMBAR (FP)
membar #StoreLoad

P3236: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3237: !_MEMBAR (FP)

P3238: !_DWLD [1] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P3239: !_LDD [0] (Int) (Branch target of P3025)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
ba P3240
nop

TARGET3025:
ba RET3025
nop


P3240: !_LD [14] (Int) (Branch target of P3063)
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
ba P3241
nop

TARGET3063:
ba RET3063
nop


P3241: !_CAS [22] (maybe <- 0x1800069) (Int)
add %i2, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3242: !_SWAP [1] (maybe <- 0x180006a) (Int)
mov %l4, %o0
swap  [%i0 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3243: !_LD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P3244: !_ST_BINIT [6] (maybe <- 0x180006b) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P3245: !_MEMBAR (Int)
membar #StoreLoad

P3246: !_CAS [4] (maybe <- 0x180006c) (Int)
add %i1, 4, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P3247: !_DWST_BINIT [23] (maybe <- 0x180006d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3248: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3248
nop
RET3248:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P3249: !_LDD [22] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P3250: !_ST [22] (maybe <- 0x180006e) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3251: !_LDD [7] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3252: !_ST [3] (maybe <- 0x180006f) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P3253: !_MEMBAR (FP)

P3254: !_BST [2] (maybe <- 0x41000031) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3255: !_MEMBAR (FP)
membar #StoreLoad

P3256: !_ST_BINIT [2] (maybe <- 0x1800070) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3256
nop
RET3256:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P3257: !_MEMBAR (Int)
membar #StoreLoad

P3258: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3259: !_MEMBAR (FP)

P3260: !_BST [20] (maybe <- 0x41000034) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3261: !_MEMBAR (FP)
membar #StoreLoad

P3262: !_LDD [1] (Int) (CBR)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3262
nop
RET3262:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3263: !_MEMBAR (FP)

P3264: !_BSTC [6] (maybe <- 0x41000037) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3265: !_MEMBAR (FP)

P3266: !_BST [0] (maybe <- 0x4100003a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3267: !_MEMBAR (FP)
membar #StoreLoad

P3268: !_DWST_BINIT [5] (maybe <- 0x1800071) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l6
srl %l6, 8, %l6
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3
srl %l3, 16, %l6
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l6, %l3
sllx %l3, 32, %l3 
stxa %l3, [%i1 + 8 ] %asi
add   %l4, 1, %l4

P3269: !_MEMBAR (Int) (LE)
membar #StoreLoad

P3270: !_DWST [15] (maybe <- 0x1800072) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3271: !_ST [13] (maybe <- 0x1800074) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P3272: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P3273: !_DWST [16] (maybe <- 0x1800075) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P3274: !_REPLACEMENT [1] (Int)
sethi %hi(0x20000), %l7
ld [%i3+4], %l3
st %l3, [%i3+4]
add %i3, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P3275: !_CASX [6] (maybe <- 0x1800077) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i3], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P3276: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3277: !_SWAP [6] (maybe <- 0x1800079) (Int)
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P3278: !_MEMBAR (FP)
membar #StoreLoad

P3279: !_BLD [12] (FP) (CBR) (Branch target of P3279)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3279
nop
RET3279:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P3280
nop

TARGET3279:
ba RET3279
nop


P3280: !_MEMBAR (FP)

P3281: !_ST_BINIT [9] (maybe <- 0x180007a) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3281
nop
RET3281:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P3282: !_MEMBAR (Int)
membar #StoreLoad

P3283: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P3284: !_MEMBAR (FP)

P3285: !_BST [19] (maybe <- 0x4100003d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3286: !_MEMBAR (FP)
membar #StoreLoad

P3287: !_CASX [16] (maybe <- 0x180007b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P3288: !_DWST_BINIT [1] (maybe <- 0x180007d) (Int) (Branch target of P3714)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4
ba P3289
nop

TARGET3714:
ba RET3714
nop


P3289: !_MEMBAR (Int)

P3290: !_BST [10] (maybe <- 0x41000040) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3291: !_MEMBAR (FP)
membar #StoreLoad

P3292: !_ST [18] (maybe <- 0x41000043) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 0 ]

P3293: !_DWST_BINIT [3] (maybe <- 0x180007f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P3294: !_MEMBAR (Int)
membar #StoreLoad

P3295: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3296: !_LD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3297: !_DWST_BINIT [13] (maybe <- 0x1800081) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P3298: !_MEMBAR (Int)
membar #StoreLoad

P3299: !_CAS [20] (maybe <- 0x1800083) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduwa [%l7] %asi, %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %o5, %o3
casa [%l7] %asi, %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P3300: !_ST [22] (maybe <- 0x1800084) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3301: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3301
nop
RET3301:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3302: !_BST [4] (maybe <- 0x41000044) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3303: !_MEMBAR (FP)

P3304: !_BSTC [2] (maybe <- 0x41000047) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3305: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3305
nop
RET3305:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3306: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P3307: !_MEMBAR (FP)

P3308: !_BST [6] (maybe <- 0x4100004a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3309: !_MEMBAR (FP)
membar #StoreLoad

P3310: !_CASX [19] (maybe <- 0x1800085) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P3311: !_CASX [10] (maybe <- 0x1800087) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4

P3312: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3313: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 3

P3314: !_ST_BINIT [10] (maybe <- 0x1800089) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3315: !_MEMBAR (Int)
membar #StoreLoad

P3316: !_DWST [16] (maybe <- 0x180008a) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P3317: !_MEMBAR (FP)
membar #StoreLoad

P3318: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P3319: !_MEMBAR (FP)

P3320: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 0

P3321: !_REPLACEMENT [8] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+12], %l3
st %l3, [%i3+12]
add %i3, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P3322: !_ST [9] (maybe <- 0x180008c) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P3323: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P3324: !_ST_BINIT [19] (maybe <- 0x180008d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3325: !_MEMBAR (Int)
membar #StoreLoad

P3326: !_ST_BINIT [6] (maybe <- 0x180008e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3327: !_MEMBAR (Int)
membar #StoreLoad

P3328: !_CAS [7] (maybe <- 0x180008f) (Int)
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3329: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 0

P3330: !_DWST_BINIT [17] (maybe <- 0x1800090) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3331: !_MEMBAR (Int)
membar #StoreLoad

P3332: !_LDD [13] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P3333: !_MEMBAR (FP)

P3334: !_BST [8] (maybe <- 0x4100004d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3335: !_MEMBAR (FP)
membar #StoreLoad

P3336: !_LD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P3337: !_MEMBAR (FP)
membar #StoreLoad

P3338: !_BLD [8] (FP) (Branch target of P3399)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13
ba P3339
nop

TARGET3399:
ba RET3399
nop


P3339: !_MEMBAR (FP)

P3340: !_SWAP [17] (maybe <- 0x1800091) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3341: !_SWAP [8] (maybe <- 0x1800092) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P3342: !_SWAP [6] (maybe <- 0x1800093) (Int)
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P3343: !_ST_BINIT [21] (maybe <- 0x1800094) (Int) (Branch target of P3753)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P3344
nop

TARGET3753:
ba RET3753
nop


P3344: !_MEMBAR (Int)
membar #StoreLoad

P3345: !_DWLD [8] (FP)
ldd [%i3 + 8], %f14
! 1 addresses covered
fmovs %f15, %f14

P3346: !_DWST [22] (maybe <- 0x1800095) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P3347: !_LD [5] (Int)
lduw [%i1 + 12], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P3348: !_SWAP [1] (maybe <- 0x1800097) (Int)
mov %l4, %o3
swap  [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P3349: !_CAS [7] (maybe <- 0x1800098) (Int)
add %i3, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%l7], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3350: !_MEMBAR (FP)
membar #StoreLoad

P3351: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P3352: !_MEMBAR (FP)

P3353: !_BST [13] (maybe <- 0x41000050) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3354: !_MEMBAR (FP)
membar #StoreLoad

P3355: !_PREFETCH [12] (Int)
prefetch [%i3 + 0], 19

P3356: !_CASX [21] (maybe <- 0x1800099) (Int)
ldx [%i2], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P3357: !_SWAP [6] (maybe <- 0x180009b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P3358: !_PREFETCH [8] (Int) (LE)
wr %g0, 0x88, %asi
prefetcha [%i2 + 12] %asi, 2

P3359: !_DWST [20] (maybe <- 0x180009c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P3360: !_CASX [4] (maybe <- 0x180009d) (Int) (CBR) (Branch target of P3305)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l7
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3360
nop
RET3360:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P3361
nop

TARGET3305:
ba RET3305
nop


P3361: !_LD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3362: !_ST [7] (maybe <- 0x180009f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3363: !_LDD [10] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P3364: !_ST_BINIT [15] (maybe <- 0x18000a0) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P3365: !_MEMBAR (Int)
membar #StoreLoad

P3366: !_CAS [4] (maybe <- 0x18000a1) (Int)
add %i1, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3367: !_MEMBAR (FP)
membar #StoreLoad

P3368: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3369: !_MEMBAR (FP)

P3370: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P3371: !_MEMBAR (FP)

P3372: !_ST_BINIT [14] (maybe <- 0x18000a2) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3373: !_MEMBAR (Int)

P3374: !_BSTC [16] (maybe <- 0x41000053) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3375: !_MEMBAR (FP)

P3376: !_BSTC [21] (maybe <- 0x41000056) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3377: !_MEMBAR (FP)
membar #StoreLoad

P3378: !_CASX [4] (maybe <- 0x18000a3) (Int)
ldx [%i1], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i1], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P3379: !_DWST [21] (maybe <- 0x18000a5) (Int) (Branch target of P3475)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4
ba P3380
nop

TARGET3475:
ba RET3475
nop


P3380: !_CAS [2] (maybe <- 0x18000a7) (Int)
add %i0, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3381: !_SWAP [3] (maybe <- 0x18000a8) (Int)
mov %l4, %l6
swap  [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3382: !_DWLD [22] (Int)
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P3383: !_MEMBAR (FP)

P3384: !_BST [20] (maybe <- 0x41000059) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3385: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3385
nop
RET3385:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3386: !_CAS [3] (maybe <- 0x18000a9) (Int)
lduw [%i1], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%i1], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P3387: !_CAS [8] (maybe <- 0x18000aa) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P3388: !_ST [8] (maybe <- 0x4100005c) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P3389: !_LD [5] (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 5 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
lduw [%i1 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P3390: !_ST_BINIT [12] (maybe <- 0x18000ab) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P3391: !_MEMBAR (Int)
membar #StoreLoad

P3392: !_ST_BINIT [17] (maybe <- 0x18000ac) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3393: !_MEMBAR (Int)
membar #StoreLoad

P3394: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 19

P3395: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 20

P3396: !_MEMBAR (FP)

P3397: !_BST [23] (maybe <- 0x4100005d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3398: !_MEMBAR (FP)
membar #StoreLoad

P3399: !_PREFETCH [19] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3399
nop
RET3399:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3400: !_DWST_BINIT [2] (maybe <- 0x18000ad) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i0 + 8] %asi 
add   %l4, 1, %l4

P3401: !_MEMBAR (Int)
membar #StoreLoad

P3402: !_CASX [7] (maybe <- 0x18000ae) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P3403: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3404: !_CASX [13] (maybe <- 0x18000b0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P3405: !_DWST [7] (maybe <- 0x18000b2) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P3406: !_LD [13] (FP)
ld [%i3 + 4], %f8
! 1 addresses covered

P3407: !_DWLD [13] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P3408: !_MEMBAR (FP)

P3409: !_BSTC [0] (maybe <- 0x41000060) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3410: !_MEMBAR (FP)
membar #StoreLoad

P3411: !_DWST [14] (maybe <- 0x18000b4) (Int)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P3412: !_ST_BINIT [13] (maybe <- 0x18000b5) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3413: !_MEMBAR (Int)
membar #StoreLoad

P3414: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3415: !_MEMBAR (FP)
membar #StoreLoad

P3416: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P3417: !_MEMBAR (FP)

P3418: !_LDD [15] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P3419: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3420: !_CAS [9] (maybe <- 0x18000b6) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P3421: !_DWST_BINIT [19] (maybe <- 0x18000b7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P3422: !_MEMBAR (Int)
membar #StoreLoad

P3423: !_CAS [16] (maybe <- 0x18000b9) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P3424: !_SWAP [9] (maybe <- 0x18000ba) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3425: !_CAS [21] (maybe <- 0x18000bb) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i3], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3426: !_DWST_BINIT [18] (maybe <- 0x18000bc) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P3427: !_MEMBAR (Int)
membar #StoreLoad

P3428: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3429: !_MEMBAR (FP)

P3430: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P3431: !_ST [5] (maybe <- 0x18000be) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P3432: !_ST_BINIT [10] (maybe <- 0x18000bf) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3433: !_MEMBAR (Int) (Branch target of P3626)
membar #StoreLoad
ba P3434
nop

TARGET3626:
ba RET3626
nop


P3434: !_CAS [12] (maybe <- 0x18000c0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
mov %l4, %o1
cas [%i2], %l7, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3435: !_MEMBAR (FP)
membar #StoreLoad

P3436: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P3437: !_MEMBAR (FP)

P3438: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3439: !_MEMBAR (FP)

P3440: !_PREFETCH [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 18

P3441: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P3442: !_DWST [15] (maybe <- 0x18000c1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P3443: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P3444: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P3445: !_MEMBAR (FP)

P3446: !_BSTC [9] (maybe <- 0x41000063) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3447: !_MEMBAR (FP)
membar #StoreLoad

P3448: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P3449: !_MEMBAR (FP)

P3450: !_BST [16] (maybe <- 0x41000066) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3451: !_MEMBAR (FP)
membar #StoreLoad

P3452: !_ST [7] (maybe <- 0x18000c3) (Int) (Branch target of P3281)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4
ba P3453
nop

TARGET3281:
ba RET3281
nop


P3453: !_CASX [8] (maybe <- 0x18000c4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P3454: !_ST_BINIT [15] (maybe <- 0x18000c5) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3455: !_MEMBAR (Int)

P3456: !_BSTC [2] (maybe <- 0x41000069) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3456
nop
RET3456:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3457: !_MEMBAR (FP)
membar #StoreLoad

P3458: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P3459: !_MEMBAR (FP)

P3460: !_LD [17] (Int)
lduw [%i3 + 12], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3461: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P3462: !_DWST_BINIT [17] (maybe <- 0x18000c6) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3463: !_MEMBAR (Int)
membar #StoreLoad

P3464: !_DWST [15] (maybe <- 0x18000c7) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P3465: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P3466: !_ST [2] (maybe <- 0x18000c9) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i0 + 12] %asi
add   %l4, 1, %l4

P3467: !_DWLD [0] (Int) (CBR)
ldx [%i0 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3467
nop
RET3467:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3468: !_CAS [2] (maybe <- 0x18000ca) (Int)
add %i0, 12, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P3469: !_ST [15] (maybe <- 0x18000cb) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P3470: !_ST [14] (maybe <- 0x18000cc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3471: !_MEMBAR (FP)
membar #StoreLoad

P3472: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P3473: !_MEMBAR (FP)

P3474: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 2

P3475: !_LD [11] (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3475
nop
RET3475:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3476: !_SWAP [13] (maybe <- 0x18000cd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P3477: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3478: !_DWST [14] (maybe <- 0x18000ce) (Int)
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P3479: !_MEMBAR (FP)

P3480: !_BST [11] (maybe <- 0x4100006c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3481: !_MEMBAR (FP)
membar #StoreLoad

P3482: !_ST [23] (maybe <- 0x18000cf) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3483: !_DWST_BINIT [10] (maybe <- 0x18000d0) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P3484: !_MEMBAR (Int)
membar #StoreLoad

P3485: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P3486: !_MEMBAR (FP)

P3487: !_CASX [12] (maybe <- 0x18000d2) (Int)
ldx [%i2], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P3488: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3489: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3490: !_MEMBAR (FP)
membar #StoreLoad

P3491: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P3492: !_MEMBAR (FP)

P3493: !_BSTC [12] (maybe <- 0x4100006f) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3494: !_MEMBAR (FP)
membar #StoreLoad

P3495: !_DWLD [1] (Int)
ldx [%i0 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3496: !_MEMBAR (FP)

P3497: !_BST [15] (maybe <- 0x41000072) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3498: !_MEMBAR (FP)
membar #StoreLoad

P3499: !_DWLD [15] (FP)
ldd [%i2 + 0], %f4
! 2 addresses covered

P3500: !_DWLD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P3501: !_ST [17] (maybe <- 0x18000d4) (Int) (CBR)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3501
nop
RET3501:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3502: !_CAS [13] (maybe <- 0x18000d5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3503: !_ST_BINIT [13] (maybe <- 0x18000d6) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3504: !_MEMBAR (Int)
membar #StoreLoad

P3505: !_ST_BINIT [18] (maybe <- 0x18000d7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3506: !_MEMBAR (Int)
membar #StoreLoad

P3507: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P3508: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3508
nop
RET3508:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P3509: !_DWLD [4] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P3510: !_CASX [9] (maybe <- 0x18000d8) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i2], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P3511: !_MEMBAR (FP)
membar #StoreLoad

P3512: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P3513: !_MEMBAR (FP)

P3514: !_ST [17] (maybe <- 0x18000da) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i3 + 12] %asi
add   %l4, 1, %l4

P3515: !_ST_BINIT [13] (maybe <- 0x18000db) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3516: !_MEMBAR (Int)
membar #StoreLoad

P3517: !_ST [10] (maybe <- 0x18000dc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3518: !_ST [12] (maybe <- 0x18000dd) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P3519: !_ST_BINIT [6] (maybe <- 0x18000de) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P3520: !_MEMBAR (Int)
membar #StoreLoad

P3521: !_SWAP [16] (maybe <- 0x18000df) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P3522: !_MEMBAR (FP)

P3523: !_BSTC [19] (maybe <- 0x41000075) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3524: !_MEMBAR (FP)
membar #StoreLoad

P3525: !_SWAP [6] (maybe <- 0x18000e0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3526: !_SWAP [1] (maybe <- 0x18000e1) (Int)
mov %l4, %l3
swap  [%i0 + 4], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3527: !_PREFETCH [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 3

P3528: !_ST [21] (maybe <- 0x18000e2) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3529: !_CASX [17] (maybe <- 0x18000e3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P3530: !_SWAP [22] (maybe <- 0x18000e4) (Int) (Branch target of P3221)
mov %l4, %o2
swap  [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4
ba P3531
nop

TARGET3221:
ba RET3221
nop


P3531: !_MEMBAR (FP)

P3532: !_BST [22] (maybe <- 0x41000078) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3533: !_MEMBAR (FP)
membar #StoreLoad

P3534: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P3535: !_CAS [19] (maybe <- 0x18000e5) (Int)
add %i3, 4, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P3536: !_REPLACEMENT [4] (Int) (Branch target of P3987)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
ba P3537
nop

TARGET3987:
ba RET3987
nop


P3537: !_ST [5] (maybe <- 0x18000e6) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P3538: !_DWLD [17] (Int) (Branch target of P3792)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
ba P3539
nop

TARGET3792:
ba RET3792
nop


P3539: !_LDD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P3540: !_MEMBAR (FP)

P3541: !_BSTC [14] (maybe <- 0x4100007b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3542: !_MEMBAR (FP)

P3543: !_BST [4] (maybe <- 0x4100007e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3544: !_MEMBAR (FP)
membar #StoreLoad

P3545: !_PREFETCH [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 4

P3546: !_MEMBAR (FP)
membar #StoreLoad

P3547: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3548: !_MEMBAR (FP)

P3549: !_ST_BINIT [8] (maybe <- 0x18000e7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3550: !_MEMBAR (Int)
membar #StoreLoad

P3551: !_ST_BINIT [6] (maybe <- 0x18000e8) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3552: !_MEMBAR (Int) (Branch target of P3262)
membar #StoreLoad
ba P3553
nop

TARGET3262:
ba RET3262
nop


P3553: !_ST_BINIT [5] (maybe <- 0x18000e9) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P3554: !_MEMBAR (Int)
membar #StoreLoad

P3555: !_ST_BINIT [0] (maybe <- 0x18000ea) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P3556: !_MEMBAR (Int)
membar #StoreLoad

P3557: !_CAS [1] (maybe <- 0x18000eb) (Int)
add %i0, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
mov %l4, %o1
cas [%o5], %l7, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3558: !_SWAP [13] (maybe <- 0x18000ec) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3
swap  [%i2 + 4], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P3559: !_ST_BINIT [0] (maybe <- 0x18000ed) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P3560: !_MEMBAR (Int)

P3561: !_BST [11] (maybe <- 0x41000081) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3562: !_MEMBAR (FP)
membar #StoreLoad

P3563: !_ST [16] (maybe <- 0x18000ee) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P3564: !_PREFETCH [11] (Int)
prefetch [%i3 + 12], 23

P3565: !_REPLACEMENT [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P3566: !_ST_BINIT [22] (maybe <- 0x18000ef) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3567: !_MEMBAR (Int)
membar #StoreLoad

P3568: !_CAS [15] (maybe <- 0x18000f0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P3569: !_ST [15] (maybe <- 0x18000f1) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3570: !_CAS [4] (maybe <- 0x18000f2) (Int)
add %i1, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P3571: !_DWST_BINIT [14] (maybe <- 0x18000f3) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3572: !_MEMBAR (Int)

P3573: !_BST [16] (maybe <- 0x41000084) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3574: !_MEMBAR (FP)
membar #StoreLoad

P3575: !_CAS [2] (maybe <- 0x18000f4) (Int)
add %i0, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3576: !_ST [1] (maybe <- 0x18000f5) (Int) (Branch target of P3874)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4
ba P3577
nop

TARGET3874:
ba RET3874
nop


P3577: !_MEMBAR (FP)

P3578: !_BST [10] (maybe <- 0x41000087) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3579: !_MEMBAR (FP)
membar #StoreLoad

P3580: !_SWAP [13] (maybe <- 0x18000f6) (Int) (Branch target of P3810)
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4
ba P3581
nop

TARGET3810:
ba RET3810
nop


P3581: !_SWAP [8] (maybe <- 0x18000f7) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P3582: !_DWST [9] (maybe <- 0x18000f8) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P3583: !_ST_BINIT [7] (maybe <- 0x18000fa) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3584: !_MEMBAR (Int)

P3585: !_BST [14] (maybe <- 0x4100008a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3586: !_MEMBAR (FP)
membar #StoreLoad

P3587: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P3588: !_MEMBAR (FP)

P3589: !_DWST [7] (maybe <- 0x18000fb) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P3590: !_DWST [18] (maybe <- 0x18000fd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P3591: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 0

P3592: !_DWST_BINIT [7] (maybe <- 0x18000ff) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P3593: !_MEMBAR (Int) (LE)
membar #StoreLoad

P3594: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P3595: !_MEMBAR (FP)

P3596: !_BSTC [21] (maybe <- 0x4100008d) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3597: !_MEMBAR (FP)
membar #StoreLoad

P3598: !_ST [23] (maybe <- 0x41000090) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P3599: !_MEMBAR (FP)

P3600: !_BSTC [6] (maybe <- 0x41000091) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3601: !_MEMBAR (FP)
membar #StoreLoad

P3602: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3603: !_MEMBAR (FP)

P3604: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P3605: !_MEMBAR (FP)

P3606: !_LD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P3607: !_DWST_BINIT [17] (maybe <- 0x1800101) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3608: !_MEMBAR (Int)
membar #StoreLoad

P3609: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P3610: !_CASX [21] (maybe <- 0x1800102) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %o5
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %o5, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P3611: !_PREFETCH [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 2

P3612: !_CAS [8] (maybe <- 0x1800104) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %o4
mov %o4, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3613: !_MEMBAR (FP)

P3614: !_BST [19] (maybe <- 0x41000094) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3615: !_MEMBAR (FP)
membar #StoreLoad

P3616: !_PREFETCH [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 0

P3617: !_MEMBAR (FP)

P3618: !_BSTC [13] (maybe <- 0x41000097) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3619: !_MEMBAR (FP) (Branch target of P3133)
membar #StoreLoad
ba P3620
nop

TARGET3133:
ba RET3133
nop


P3620: !_DWLD [1] (Int) (CBR)
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3620
nop
RET3620:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3621: !_DWST [17] (maybe <- 0x1800105) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P3622: !_DWLD [13] (FP)
ldd [%i3 + 0], %f8
! 2 addresses covered

P3623: !_LD [0] (Int)
lduw [%i0 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P3624: !_CAS [3] (maybe <- 0x1800106) (Int)
lduw [%i1], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%i1], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P3625: !_MEMBAR (FP)

P3626: !_BSTC [3] (maybe <- 0x4100009a) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3626
nop
RET3626:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3627: !_MEMBAR (FP)
membar #StoreLoad

P3628: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P3629: !_MEMBAR (FP)
membar #StoreLoad

P3630: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P3631: !_MEMBAR (FP)

P3632: !_PREFETCH [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 18

P3633: !_DWLD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P3634: !_DWLD [0] (Int)
ldx [%i0 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3635: !_CASX [6] (maybe <- 0x1800107) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P3636: !_PREFETCH [8] (Int) (Branch target of P3124)
prefetch [%i3 + 12], 1
ba P3637
nop

TARGET3124:
ba RET3124
nop


P3637: !_CASX [7] (maybe <- 0x1800109) (Int) (LE)
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %l6, %l3, %l7
srlx %l7, 8, %l7
sllx %l6, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6 
sethi %hi(0xffff0000), %l3
srlx %l6, 16, %l7
andn %l7, %l3, %l7
andn %l6, %l3, %l6
sllx %l6, 16, %l6
or %l6, %l7, %l6 
srlx %l6, 32, %l7
sllx %l6, 32, %l6
or %l6, %l7, %l7 
wr %g0, 0x88, %asi
ldxa [%i3] %asi, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
mov %o5, %l3
mov  %l7, %o5
casxa [%i3] %asi, %l3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
add  %l4, 1, %l4

P3638: !_MEMBAR (FP)
membar #StoreLoad

P3639: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P3640: !_MEMBAR (FP)

P3641: !_SWAP [13] (maybe <- 0x180010b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3642: !_CASX [5] (maybe <- 0x180010c) (Int)
add %i1, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P3643: !_CAS [22] (maybe <- 0x180010d) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%l3], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P3644: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 25

P3645: !_CASX [5] (maybe <- 0x180010e) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 5 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P3646: !_ST [9] (maybe <- 0x180010f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3647: !_MEMBAR (FP)
membar #StoreLoad

P3648: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P3649: !_MEMBAR (FP)

P3650: !_LDD [23] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3651: !_ST [19] (maybe <- 0x1800110) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P3652: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3653: !_CAS [7] (maybe <- 0x1800111) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%l7], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3654: !_CASX [6] (maybe <- 0x1800112) (Int)
ldx [%i2], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i2], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P3655: !_SWAP [12] (maybe <- 0x1800114) (Int)
mov %l4, %o5
swap  [%i3 + 0], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P3656: !_MEMBAR (FP)

P3657: !_BST [4] (maybe <- 0x4100009d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3658: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3658
nop
RET3658:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3659: !_DWLD [19] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldxa [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3660: !_ST [1] (maybe <- 0x1800115) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P3661: !_ST_BINIT [16] (maybe <- 0x1800116) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3662: !_MEMBAR (Int)
membar #StoreLoad

P3663: !_SWAP [16] (maybe <- 0x1800117) (Int)
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3664: !_MEMBAR (FP)
membar #StoreLoad

P3665: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P3666: !_MEMBAR (FP)

P3667: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P3668: !_MEMBAR (FP)

P3669: !_ST [15] (maybe <- 0x1800118) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P3670: !_MEMBAR (FP)
membar #StoreLoad

P3671: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P3672: !_MEMBAR (FP)

P3673: !_ST [20] (maybe <- 0x1800119) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3674: !_MEMBAR (FP)
membar #StoreLoad

P3675: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3676: !_MEMBAR (FP)

P3677: !_ST [8] (maybe <- 0x180011a) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P3678: !_LD [11] (Int)
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P3679: !_ST [11] (maybe <- 0x180011b) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3680: !_ST [17] (maybe <- 0x180011c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3681: !_CASX [16] (maybe <- 0x180011d) (Int)
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3682: !_DWST_BINIT [23] (maybe <- 0x180011f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3683: !_MEMBAR (Int)

P3684: !_BSTC [19] (maybe <- 0x410000a0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3685: !_MEMBAR (FP)
membar #StoreLoad

P3686: !_CASX [1] (maybe <- 0x1800120) (Int)
ldx [%i0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i0], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P3687: !_PREFETCH [23] (Int)
prefetch [%i2 + 12], 21

P3688: !_LD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3689: !_MEMBAR (FP)

P3690: !_BST [7] (maybe <- 0x410000a3) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3691: !_MEMBAR (FP)
membar #StoreLoad

P3692: !_SWAP [14] (maybe <- 0x1800122) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P3693: !_CASX [10] (maybe <- 0x1800123) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l7
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3694: !_MEMBAR (FP)

P3695: !_BSTC [0] (maybe <- 0x410000a6) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3696: !_MEMBAR (FP)
membar #StoreLoad

P3697: !_LD [11] (Int)
lduw [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P3698: !_LD [11] (Int)
lduw [%i3 + 12], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P3699: !_LD [19] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 4], %f15
! 1 addresses covered
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P3700: !_DWLD [0] (Int)
ldx [%i0 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3701: !_ST [12] (maybe <- 0x1800125) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3702: !_DWST_BINIT [0] (maybe <- 0x1800126) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P3703: !_MEMBAR (Int)
membar #StoreLoad

P3704: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P3705: !_MEMBAR (FP)

P3706: !_DWST_BINIT [6] (maybe <- 0x1800128) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P3707: !_MEMBAR (Int)
membar #StoreLoad

P3708: !_CASX [10] (maybe <- 0x180012a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P3709: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3710: !_MEMBAR (FP)

P3711: !_BSTC [12] (maybe <- 0x410000a9) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3712: !_MEMBAR (FP)
membar #StoreLoad

P3713: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P3714: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3714
nop
RET3714:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P3715: !_ST_BINIT [13] (maybe <- 0x180012c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3716: !_MEMBAR (Int)
membar #StoreLoad

P3717: !_PREFETCH [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 23

P3718: !_CAS [13] (maybe <- 0x180012d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P3719: !_DWST_BINIT [14] (maybe <- 0x180012e) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3720: !_MEMBAR (Int)
membar #StoreLoad

P3721: !_REPLACEMENT [21] (Int) (Branch target of P3067)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
ba P3722
nop

TARGET3067:
ba RET3067
nop


P3722: !_ST_BINIT [13] (maybe <- 0x180012f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P3723: !_MEMBAR (Int)
membar #StoreLoad

P3724: !_LD [3] (Int)
lduw [%i1 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P3725: !_CAS [23] (maybe <- 0x1800130) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P3726: !_MEMBAR (FP)

P3727: !_BSTC [20] (maybe <- 0x410000ac) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3728: !_MEMBAR (FP)
membar #StoreLoad

P3729: !_LD [19] (Int)
lduw [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3730: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 22

P3731: !_CASX [12] (maybe <- 0x1800131) (Int) (Branch target of P3248)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4
ba P3732
nop

TARGET3248:
ba RET3248
nop


P3732: !_DWST_BINIT [15] (maybe <- 0x1800133) (Int) (Branch target of P3658)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P3733
nop

TARGET3658:
ba RET3658
nop


P3733: !_MEMBAR (Int)
membar #StoreLoad

P3734: !_SWAP [15] (maybe <- 0x1800135) (Int)
mov %l4, %o5
swap  [%i2 + 0], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P3735: !_CASX [7] (maybe <- 0x1800136) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l3
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P3736: !_LD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P3737: !_SWAP [3] (maybe <- 0x1800138) (Int)
mov %l4, %l3
swap  [%i1 + 0], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P3738: !_DWST_BINIT [11] (maybe <- 0x1800139) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3739: !_MEMBAR (Int)
membar #StoreLoad

P3740: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P3741: !_MEMBAR (FP)

P3742: !_BLD [0] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3742
nop
RET3742:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3743: !_MEMBAR (FP)

P3744: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P3745: !_DWST_BINIT [14] (maybe <- 0x180013a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P3746: !_MEMBAR (Int)

P3747: !_BSTC [12] (maybe <- 0x410000af) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3748: !_MEMBAR (FP)
membar #StoreLoad

P3749: !_DWLD [20] (Int)
ldx [%i3 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P3750: !_ST_BINIT [7] (maybe <- 0x180013b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3751: !_MEMBAR (Int)
membar #StoreLoad

P3752: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3753: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3753
nop
RET3753:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3754: !_LD [7] (Int)
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P3755: !_PREFETCH [13] (Int)
prefetch [%i2 + 4], 1

P3756: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3757: !_REPLACEMENT [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P3758: !_REPLACEMENT [5] (Int)
sethi %hi(0x20000), %o5
ld [%i3+12], %l6
st %l6, [%i3+12]
add %i3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P3759: !_MEMBAR (FP)
membar #StoreLoad

P3760: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P3761: !_MEMBAR (FP)

P3762: !_DWST [14] (maybe <- 0x180013c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P3763: !_MEMBAR (FP)
membar #StoreLoad

P3764: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P3765: !_MEMBAR (FP)

P3766: !_REPLACEMENT [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P3767: !_DWST [5] (maybe <- 0x180013d) (Int)
mov %l4, %l3 
stx %l3, [%i1 + 8]
add   %l4, 1, %l4

P3768: !_SWAP [1] (maybe <- 0x180013e) (Int)
mov %l4, %l6
swap  [%i0 + 4], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P3769: !_MEMBAR (FP)

P3770: !_BSTC [18] (maybe <- 0x410000b2) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3771: !_MEMBAR (FP)

P3772: !_BSTC [16] (maybe <- 0x410000b5) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3773: !_MEMBAR (FP)
membar #StoreLoad

P3774: !_ST_BINIT [11] (maybe <- 0x180013f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P3775: !_MEMBAR (Int)
membar #StoreLoad

P3776: !_ST_BINIT [7] (maybe <- 0x1800140) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P3777: !_MEMBAR (Int)
membar #StoreLoad

P3778: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P3779: !_MEMBAR (FP)

P3780: !_LDD [6] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3781: !_DWST [5] (maybe <- 0x1800141) (Int)
mov %l4, %l3 
stx %l3, [%i1 + 8]
add   %l4, 1, %l4

P3782: !_MEMBAR (FP)
membar #StoreLoad

P3783: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P3784: !_MEMBAR (FP)

P3785: !_ST_BINIT [4] (maybe <- 0x1800142) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i1 + 4] %asi
add   %l4, 1, %l4

P3786: !_MEMBAR (Int) (LE)
membar #StoreLoad

P3787: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P3788: !_SWAP [17] (maybe <- 0x1800143) (Int)
mov %l4, %o0
swap  [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3789: !_DWLD [7] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %l6
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3790: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P3791: !_LD [12] (Int)
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P3792: !_DWLD [3] (Int) (CBR)
ldx [%i1 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3792
nop
RET3792:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3793: !_DWLD [4] (Int)
ldx [%i1 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3794: !_CAS [17] (maybe <- 0x1800144) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P3795: !_CASX [0] (maybe <- 0x1800145) (Int)
ldx [%i0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %o5
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i0], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3796: !_MEMBAR (FP)

P3797: !_BSTC [18] (maybe <- 0x410000b8) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3798: !_MEMBAR (FP)

P3799: !_BST [5] (maybe <- 0x410000bb) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P3800: !_MEMBAR (FP)
membar #StoreLoad

P3801: !_ST_BINIT [17] (maybe <- 0x1800147) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3802: !_MEMBAR (Int)
membar #StoreLoad

P3803: !_DWST_BINIT [8] (maybe <- 0x1800148) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3804: !_MEMBAR (Int)
membar #StoreLoad

P3805: !_ST_BINIT [6] (maybe <- 0x1800149) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3806: !_MEMBAR (Int)
membar #StoreLoad

P3807: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3808: !_DWST_BINIT [18] (maybe <- 0x180014a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P3809: !_MEMBAR (Int)

P3810: !_BSTC [17] (maybe <- 0x410000be) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3810
nop
RET3810:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P3811: !_MEMBAR (FP)
membar #StoreLoad

P3812: !_ST [20] (maybe <- 0x180014c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P3813: !_MEMBAR (FP)

P3814: !_BSTC [18] (maybe <- 0x410000c1) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3815: !_MEMBAR (FP)
membar #StoreLoad

P3816: !_LD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3817: !_CAS [5] (maybe <- 0x180014d) (Int)
add %i1, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3818: !_CAS [6] (maybe <- 0x180014e) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%i3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3819: !_MEMBAR (FP)

P3820: !_BSTC [20] (maybe <- 0x410000c4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3821: !_MEMBAR (FP)
membar #StoreLoad

P3822: !_DWLD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l7
or %l7, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2

P3823: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P3824: !_MEMBAR (FP)

P3825: !_BST [9] (maybe <- 0x410000c7) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3826: !_MEMBAR (FP)
membar #StoreLoad

P3827: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 18

P3828: !_DWST_BINIT [1] (maybe <- 0x180014f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P3829: !_MEMBAR (Int)

P3830: !_BST [21] (maybe <- 0x410000ca) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3831: !_MEMBAR (FP)
membar #StoreLoad

P3832: !_DWST_BINIT [7] (maybe <- 0x1800151) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P3833: !_MEMBAR (Int)
membar #StoreLoad

P3834: !_CASX [3] (maybe <- 0x1800153) (Int)
ldx [%i1], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i1], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P3835: !_ST_BINIT [3] (maybe <- 0x1800155) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P3836: !_MEMBAR (Int)

P3837: !_BST [23] (maybe <- 0x410000cd) (FP) (Branch target of P3301)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P3838
nop

TARGET3301:
ba RET3301
nop


P3838: !_MEMBAR (FP)
membar #StoreLoad

P3839: !_DWST [3] (maybe <- 0x1800156) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i1 + 0]
add   %l4, 1, %l4

P3840: !_LDD [6] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3841: !_DWST [11] (maybe <- 0x1800158) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P3842: !_MEMBAR (FP) (Branch target of P3035)
ba P3843
nop

TARGET3035:
ba RET3035
nop


P3843: !_BSTC [22] (maybe <- 0x410000d0) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3844: !_MEMBAR (FP)
membar #StoreLoad

P3845: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P3846: !_MEMBAR (FP)

P3847: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P3848: !_MEMBAR (FP)

P3849: !_ST_BINIT [8] (maybe <- 0x1800159) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P3850: !_MEMBAR (Int)
membar #StoreLoad

P3851: !_DWST [19] (maybe <- 0x180015a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P3852: !_CASX [1] (maybe <- 0x180015c) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P3853: !_CASX [17] (maybe <- 0x180015e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P3854: !_REPLACEMENT [6] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P3855: !_MEMBAR (FP)

P3856: !_BSTC [10] (maybe <- 0x410000d3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3857: !_MEMBAR (FP)
membar #StoreLoad

P3858: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l7
or %l7, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1

P3859: !_DWST [22] (maybe <- 0x410000d6) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P3860: !_MEMBAR (FP)

P3861: !_BSTC [15] (maybe <- 0x410000d8) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3862: !_MEMBAR (FP)
membar #StoreLoad

P3863: !_CASX [15] (maybe <- 0x180015f) (Int)
ldx [%i3], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P3864: !_SWAP [1] (maybe <- 0x1800161) (Int)
mov %l4, %l3
swap  [%i0 + 4], %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P3865: !_CASX [19] (maybe <- 0x1800162) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l6
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i2], %l6, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P3866: !_CASX [19] (maybe <- 0x1800164) (Int)
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P3867: !_DWLD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P3868: !_MEMBAR (FP)

P3869: !_BST [13] (maybe <- 0x410000db) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3870: !_MEMBAR (FP)
membar #StoreLoad

P3871: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P3872: !_MEMBAR (FP) (Branch target of P3456)
ba P3873
nop

TARGET3456:
ba RET3456
nop


P3873: !_LD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3874: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3874
nop
RET3874:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3875: !_BSTC [12] (maybe <- 0x410000de) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3876: !_MEMBAR (FP)
membar #StoreLoad

P3877: !_PREFETCH [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 24

P3878: !_MEMBAR (FP)

P3879: !_BSTC [23] (maybe <- 0x410000e1) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3880: !_MEMBAR (FP)
membar #StoreLoad

P3881: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P3882: !_MEMBAR (FP)
membar #StoreLoad

P3883: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P3884: !_MEMBAR (FP)

P3885: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P3886: !_MEMBAR (FP)

P3887: !_CAS [0] (maybe <- 0x1800166) (Int)
lduw [%i0], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%i0], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3888: !_DWLD [0] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P3889: !_MEMBAR (FP)
membar #StoreLoad

P3890: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P3891: !_MEMBAR (FP)

P3892: !_LD [20] (Int) (Branch target of P3467)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
ba P3893
nop

TARGET3467:
ba RET3467
nop


P3893: !_SWAP [15] (maybe <- 0x1800167) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P3894: !_CASX [20] (maybe <- 0x1800168) (Int)
add %i3, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P3895: !_ST [22] (maybe <- 0x1800169) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P3896: !_MEMBAR (FP)

P3897: !_BST [13] (maybe <- 0x410000e4) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3898: !_MEMBAR (FP)
membar #StoreLoad

P3899: !_LD [3] (Int)
lduw [%i1 + 0], %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P3900: !_DWLD [12] (Int)
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P3901: !_ST [9] (maybe <- 0x180016a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3902: !_MEMBAR (FP)

P3903: !_BST [12] (maybe <- 0x410000e7) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3904: !_MEMBAR (FP)
membar #StoreLoad

P3905: !_SWAP [20] (maybe <- 0x180016b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P3906: !_ST_BINIT [12] (maybe <- 0x180016c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P3907: !_MEMBAR (Int)
membar #StoreLoad

P3908: !_CASX [1] (maybe <- 0x180016d) (Int)
ldx [%i0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i0], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P3909: !_DWST_BINIT [2] (maybe <- 0x180016f) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i0 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3909
nop
RET3909:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P3910: !_MEMBAR (Int)
membar #StoreLoad

P3911: !_ST [18] (maybe <- 0x1800170) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P3912: !_MEMBAR (FP)

P3913: !_BSTC [0] (maybe <- 0x410000ea) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3914: !_MEMBAR (FP)
membar #StoreLoad

P3915: !_CAS [13] (maybe <- 0x1800171) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
add %i3, 4, %l6
lduwa [%l6] %asi, %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l7, %o0
casa [%l6] %asi, %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3916: !_SWAP [0] (maybe <- 0x1800172) (Int)
mov %l4, %l7
swap  [%i0 + 0], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P3917: !_MEMBAR (FP)
membar #StoreLoad

P3918: !_BLD [2] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3918
nop
RET3918:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3919: !_MEMBAR (FP)

P3920: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3921: !_SWAP [20] (maybe <- 0x1800173) (Int)
mov %l4, %l7
swap  [%i2 + 12], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P3922: !_MEMBAR (FP)

P3923: !_BSTC [9] (maybe <- 0x410000ed) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3924: !_MEMBAR (FP)

P3925: !_BSTC [21] (maybe <- 0x410000f0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3926: !_MEMBAR (FP)
membar #StoreLoad

P3927: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P3928: !_MEMBAR (FP)

P3929: !_REPLACEMENT [4] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P3930: !_DWST_BINIT [3] (maybe <- 0x1800174) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P3931: !_MEMBAR (Int)
membar #StoreLoad

P3932: !_PREFETCH [23] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 0

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3932
nop
RET3932:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P3933: !_DWLD [6] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P3934: !_CAS [3] (maybe <- 0x1800176) (Int)
lduw [%i1], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%i1], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P3935: !_LD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3936: !_LD [0] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i0 + 0] %asi, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3937: !_ST [1] (maybe <- 0x1800177) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P3938: !_LD [17] (Int) (Branch target of P3385)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
ba P3939
nop

TARGET3385:
ba RET3385
nop


P3939: !_LD [5] (Int)
lduw [%i1 + 12], %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P3940: !_MEMBAR (FP)
membar #StoreLoad

P3941: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P3942: !_MEMBAR (FP)

P3943: !_SWAP [0] (maybe <- 0x1800178) (Int)
mov %l4, %o1
swap  [%i0 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3944: !_MEMBAR (FP)
membar #StoreLoad

P3945: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P3946: !_MEMBAR (FP)

P3947: !_ST_BINIT [11] (maybe <- 0x1800179) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P3948: !_MEMBAR (Int)
membar #StoreLoad

P3949: !_DWST [13] (maybe <- 0x180017a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P3950: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1

P3951: !_ST [12] (maybe <- 0x180017c) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3952: !_MEMBAR (FP)

P3953: !_BSTC [17] (maybe <- 0x410000f3) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P3954: !_MEMBAR (FP)
membar #StoreLoad

P3955: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P3956: !_ST [18] (maybe <- 0x180017d) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P3957: !_DWLD [18] (Int)
ldx [%i3 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P3958: !_MEMBAR (FP)
membar #StoreLoad

P3959: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P3960: !_MEMBAR (FP)

P3961: !_ST_BINIT [20] (maybe <- 0x180017e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P3962: !_MEMBAR (Int)
membar #StoreLoad

P3963: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P3964: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P3965: !_SWAP [16] (maybe <- 0x180017f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3966: !_MEMBAR (FP)

P3967: !_BST [9] (maybe <- 0x410000f6) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3968: !_MEMBAR (FP)
membar #StoreLoad

P3969: !_CAS [20] (maybe <- 0x1800180) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P3970: !_DWLD [2] (Int)
ldx [%i0 + 8], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %o5
or %o5, %o1, %o1

P3971: !_MEMBAR (FP)
membar #StoreLoad

P3972: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P3973: !_MEMBAR (FP)

P3974: !_DWLD [1] (Int)
ldx [%i0 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P3975: !_SWAP [16] (maybe <- 0x1800181) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P3976: !_LDD [8] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P3977: !_SWAP [19] (maybe <- 0x1800182) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P3978: !_CAS [1] (maybe <- 0x1800183) (Int)
add %i0, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P3979: !_ST_BINIT [6] (maybe <- 0x1800184) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P3980: !_MEMBAR (Int)
membar #StoreLoad

P3981: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P3982: !_MEMBAR (FP)

P3983: !_BST [1] (maybe <- 0x410000f9) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P3984: !_MEMBAR (FP)
membar #StoreLoad

P3985: !_DWST_BINIT [11] (maybe <- 0x1800185) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P3986: !_MEMBAR (Int)
membar #StoreLoad

P3987: !_LDD [2] (Int) (CBR)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET3987
nop
RET3987:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3988: !_LDD [10] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P3989: !_ST [23] (maybe <- 0x1800186) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P3990: !_DWST_BINIT [16] (maybe <- 0x1800187) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P3991: !_MEMBAR (Int)

P3992: !_BSTC [22] (maybe <- 0x410000fc) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3993: !_MEMBAR (FP) (Branch target of P3360)
membar #StoreLoad
ba P3994
nop

TARGET3360:
ba RET3360
nop


P3994: !_LDD [12] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET3994
nop
RET3994:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P3995: !_LD [23] (Int)
lduw [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P3996: !_MEMBAR (FP)

P3997: !_BSTC [22] (maybe <- 0x410000ff) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P3998: !_MEMBAR (FP)
membar #StoreLoad

P3999: !_ST_BINIT [1] (maybe <- 0x1800189) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P4000: !_MEMBAR (Int)

P4001: !_BSTC [17] (maybe <- 0x41000102) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4002: !_MEMBAR (FP)
membar #StoreLoad

P4003: !_DWST [9] (maybe <- 0x180018a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P4004: !_REPLACEMENT [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P4005: !_MEMBAR (FP)
membar #StoreLoad

P4006: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P4007: !_MEMBAR (FP)

P4008: !_LD [3] (Int) (Loop exit)
lduw [%i1 + 0], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
!--

sethi %hi(0x400000), %l3
add   %i1, %l3, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_3_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_3_0
nop

P4009: !_MEMBAR (Int)
membar #StoreLoad

END_NODES3: ! Test instruction sequence for CPU 3 ends
sethi %hi(0xdead0e0f), %l6
or    %l6, %lo(0xdead0e0f), %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
sethi %hi(0xdead0e0f), %l6
or    %l6, %lo(0xdead0e0f), %l6
stw %l6, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func4:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l3
or    %l3, %lo(0xdeadbee0), %l3
stw   %l3, [%i5]
sethi %hi(0xdeadbee1), %l3
or    %l3, %lo(0xdeadbee1), %l3
stw   %l3, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x04deade1), %l3
or    %l3, %lo(0x04deade1), %l3
stw %l3, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x2000001), %l4
or    %l4, %lo(0x2000001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x41800001), %l3
or    %l3, %lo(0x41800001), %l3
stw %l3, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x36000000), %l3
or    %l3, %lo(0x36000000), %l3
stw %l3, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x5079^4
sethi %hi(0x5079), %l0
or    %l0, %lo(0x5079), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES4: ! Test instruction sequence for ISTREAM 4 begins

P4010: !_PREFETCH [22] (Int) (Loop entry) (LE)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_4_0:
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 4] %asi, 22

P4011: !_MEMBAR (FP)
membar #StoreLoad

P4012: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P4013: !_MEMBAR (FP)

P4014: !_SWAP [12] (maybe <- 0x2000001) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4015: !_DWLD [10] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldxa [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l3
or %l3, %o0, %o0
! move %l6(upper) -> %o1(upper)
or %l6, %g0, %o1

P4016: !_REPLACEMENT [3] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P4017: !_ST [13] (maybe <- 0x2000002) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4018: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 22

P4019: !_MEMBAR (FP)

P4020: !_BSTC [3] (maybe <- 0x41800001) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4021: !_MEMBAR (FP)
membar #StoreLoad

P4022: !_SWAP [23] (maybe <- 0x2000003) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o1(lower)
srlx %o1, 32, %o1
sllx %o1, 32, %o1
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P4023: !_MEMBAR (FP)
membar #StoreLoad

P4024: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P4025: !_MEMBAR (FP)

P4026: !_BSTC [6] (maybe <- 0x41800004) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4027: !_MEMBAR (FP)
membar #StoreLoad

P4028: !_DWST [12] (maybe <- 0x2000004) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P4029: !_DWST [17] (maybe <- 0x2000006) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P4030: !_CASX [4] (maybe <- 0x2000007) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %o5
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %o5, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P4031: !_ST_BINIT [16] (maybe <- 0x2000009) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P4032: !_MEMBAR (Int)
membar #StoreLoad

P4033: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4034: !_CASX [22] (maybe <- 0x200000a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P4035: !_ST [0] (maybe <- 0x41800007) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P4036: !_ST_BINIT [9] (maybe <- 0x200000c) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P4037: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4038: !_BLD [1] (FP) (Branch target of P4477)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8
ba P4039
nop

TARGET4477:
ba RET4477
nop


P4039: !_MEMBAR (FP)

P4040: !_ST [3] (maybe <- 0x200000d) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P4041: !_MEMBAR (FP) (CBR) (Branch target of P4041)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4041
nop
RET4041:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0

ba P4042
nop

TARGET4041:
ba RET4041
nop


P4042: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P4043: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4043
nop
RET4043:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4044: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 3

P4045: !_LD [15] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i2 + 0] %asi, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P4046: !_CAS [9] (maybe <- 0x200000e) (Int)
lduw [%i3], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P4047: !_MEMBAR (FP)

P4048: !_BST [10] (maybe <- 0x41800008) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4049: !_MEMBAR (FP)
membar #StoreLoad

P4050: !_DWST [20] (maybe <- 0x200000f) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l7
srl %l7, 8, %l7
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6
srl %l6, 16, %l7
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l7, %l6
sllx %l6, 32, %l6 
stxa %l6, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P4051: !_ST_BINIT [16] (maybe <- 0x2000010) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4052: !_MEMBAR (Int)
membar #StoreLoad

P4053: !_DWST [11] (maybe <- 0x2000011) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P4054: !_ST_BINIT [17] (maybe <- 0x2000012) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P4055: !_MEMBAR (Int)
membar #StoreLoad

P4056: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4057: !_ST [6] (maybe <- 0x2000013) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P4058: !_DWST [20] (maybe <- 0x2000014) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P4059: !_MEMBAR (FP)

P4060: !_BSTC [20] (maybe <- 0x4180000b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4061: !_MEMBAR (FP)
membar #StoreLoad

P4062: !_ST_BINIT [5] (maybe <- 0x2000015) (Int) (Branch target of P4766)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4
ba P4063
nop

TARGET4766:
ba RET4766
nop


P4063: !_MEMBAR (Int)
membar #StoreLoad

P4064: !_CASX [1] (maybe <- 0x2000016) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P4065: !_ST [11] (maybe <- 0x2000018) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4065
nop
RET4065:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4066: !_LD [5] (Int) (LE) (Branch target of P4517)
wr %g0, 0x88, %asi
lduwa [%i1 + 12] %asi, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
ba P4067
nop

TARGET4517:
ba RET4517
nop


P4067: !_LD [23] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduwa [%i2 + 12] %asi, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4068: !_LD [23] (Int)
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P4069: !_MEMBAR (FP)

P4070: !_BST [6] (maybe <- 0x4180000e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4071: !_MEMBAR (FP)
membar #StoreLoad

P4072: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P4073: !_MEMBAR (FP)
membar #StoreLoad

P4074: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P4075: !_MEMBAR (FP)

P4076: !_ST [16] (maybe <- 0x2000019) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4077: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 29

P4078: !_DWST [8] (maybe <- 0x200001a) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P4079: !_MEMBAR (FP)
membar #StoreLoad

P4080: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P4081: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4081
nop
RET4081:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4082: !_DWST [6] (maybe <- 0x200001b) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P4083: !_MEMBAR (FP)
membar #StoreLoad

P4084: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P4085: !_MEMBAR (FP) (Branch target of P4276)
ba P4086
nop

TARGET4276:
ba RET4276
nop


P4086: !_CASX [9] (maybe <- 0x200001d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4087: !_CAS [18] (maybe <- 0x200001f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P4088: !_ST_BINIT [3] (maybe <- 0x2000020) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P4089: !_MEMBAR (Int)

P4090: !_BSTC [8] (maybe <- 0x41800011) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4091: !_MEMBAR (FP)
membar #StoreLoad

P4092: !_SWAP [6] (maybe <- 0x2000021) (Int)
mov %l4, %o1
swap  [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4093: !_ST_BINIT [5] (maybe <- 0x2000022) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4093
nop
RET4093:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4094: !_MEMBAR (Int)
membar #StoreLoad

P4095: !_REPLACEMENT [4] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4096: !_LDD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4097: !_CAS [20] (maybe <- 0x2000023) (Int)
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4098: !_CASX [8] (maybe <- 0x2000024) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P4099: !_LDD [18] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P4100: !_MEMBAR (FP)

P4101: !_BSTC [13] (maybe <- 0x41800014) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4101
nop
RET4101:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4102: !_MEMBAR (FP)
membar #StoreLoad

P4103: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P4104: !_CAS [21] (maybe <- 0x2000025) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P4105: !_MEMBAR (FP) (Branch target of P4443)
ba P4106
nop

TARGET4443:
ba RET4443
nop


P4106: !_BST [23] (maybe <- 0x41800017) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4107: !_MEMBAR (FP)
membar #StoreLoad

P4108: !_LD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P4109: !_ST_BINIT [5] (maybe <- 0x2000026) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i1 + 12] %asi
add   %l4, 1, %l4

P4110: !_MEMBAR (Int) (LE)

P4111: !_BST [2] (maybe <- 0x4180001a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4112: !_MEMBAR (FP)
membar #StoreLoad

P4113: !_LD [4] (FP)
ld [%i1 + 4], %f5
! 1 addresses covered

P4114: !_ST_BINIT [11] (maybe <- 0x2000027) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4

P4115: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4116: !_ST [16] (maybe <- 0x2000028) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P4117: !_MEMBAR (FP)

P4118: !_BST [0] (maybe <- 0x4180001d) (FP) (Branch target of P4101)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi
ba P4119
nop

TARGET4101:
ba RET4101
nop


P4119: !_MEMBAR (FP)
membar #StoreLoad

P4120: !_DWLD [23] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %f6
! 1 addresses covered
fmovs %f7, %f6

P4121: !_LD [7] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P4122: !_ST [18] (maybe <- 0x2000029) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P4123: !_LD [17] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 12], %f7
! 1 addresses covered

P4124: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4125: !_CASX [4] (maybe <- 0x200002a) (Int)
ldx [%i1], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i1], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P4126: !_SWAP [4] (maybe <- 0x200002c) (Int)
mov %l4, %l7
swap  [%i1 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P4127: !_MEMBAR (FP) (Branch target of P4904)
ba P4128
nop

TARGET4904:
ba RET4904
nop


P4128: !_BSTC [3] (maybe <- 0x41800020) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4129: !_MEMBAR (FP)
membar #StoreLoad

P4130: !_ST [0] (maybe <- 0x200002d) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P4131: !_LDD [18] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4132: !_LDD [10] (Int) (Branch target of P4601)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
ba P4133
nop

TARGET4601:
ba RET4601
nop


P4133: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 3

P4134: !_ST [19] (maybe <- 0x200002e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4135: !_DWST [1] (maybe <- 0x200002f) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P4136: !_DWST [2] (maybe <- 0x2000031) (Int)
mov %l4, %l7 
stx %l7, [%i0 + 8]
add   %l4, 1, %l4

P4137: !_CAS [21] (maybe <- 0x2000032) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4138: !_DWLD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P4139: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4140: !_ST_BINIT [20] (maybe <- 0x2000033) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P4141: !_MEMBAR (Int)
membar #StoreLoad

P4142: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 22

P4143: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4144: !_DWLD [10] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f8
! 2 addresses covered

P4145: !_CAS [18] (maybe <- 0x2000034) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%i2], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4146: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4147: !_LDD [18] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P4148: !_DWST_BINIT [7] (maybe <- 0x2000035) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P4149: !_MEMBAR (Int)

P4150: !_BST [10] (maybe <- 0x41800023) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4151: !_MEMBAR (FP)
membar #StoreLoad

P4152: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P4153: !_DWST_BINIT [22] (maybe <- 0x2000037) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P4154: !_MEMBAR (Int)
membar #StoreLoad

P4155: !_CASX [4] (maybe <- 0x2000039) (Int)
ldx [%i1], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %o5
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i1], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4156: !_DWST_BINIT [16] (maybe <- 0x200003b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P4157: !_MEMBAR (Int)
membar #StoreLoad

P4158: !_PREFETCH [16] (Int)
prefetch [%i2 + 4], 22

P4159: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 20

P4160: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4161: !_DWST_BINIT [21] (maybe <- 0x200003d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P4162: !_MEMBAR (Int)
membar #StoreLoad

P4163: !_PREFETCH [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 4

P4164: !_ST [19] (maybe <- 0x200003f) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4165: !_DWST [15] (maybe <- 0x2000040) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P4166: !_SWAP [23] (maybe <- 0x2000042) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4167: !_DWST_BINIT [11] (maybe <- 0x2000043) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4168: !_MEMBAR (Int)
membar #StoreLoad

P4169: !_PREFETCH [7] (Int) (Branch target of P4268)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 29
ba P4170
nop

TARGET4268:
ba RET4268
nop


P4170: !_LD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4171: !_MEMBAR (FP)

P4172: !_BST [20] (maybe <- 0x41800026) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4172
nop
RET4172:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4173: !_MEMBAR (FP)
membar #StoreLoad

P4174: !_LD [13] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 4], %f10
! 1 addresses covered

P4175: !_DWLD [2] (Int)
ldx [%i0 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P4176: !_DWST [12] (maybe <- 0x2000044) (Int) (Branch target of P4747)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4
ba P4177
nop

TARGET4747:
ba RET4747
nop


P4177: !_DWST [14] (maybe <- 0x41800029) (FP)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 8]

P4178: !_PREFETCH [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P4179: !_LD [1] (Int) (LE) (Branch target of P4345)
wr %g0, 0x88, %asi
lduwa [%i0 + 4] %asi, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
ba P4180
nop

TARGET4345:
ba RET4345
nop


P4180: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4181: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P4182: !_DWST_BINIT [12] (maybe <- 0x2000046) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P4183: !_MEMBAR (Int)
membar #StoreLoad

P4184: !_CAS [22] (maybe <- 0x2000048) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%l3], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4185: !_SWAP [7] (maybe <- 0x2000049) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4186: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P4187: !_ST [23] (maybe <- 0x200004a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4188: !_CAS [15] (maybe <- 0x200004b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P4189: !_PREFETCH [15] (Int)
prefetch [%i3 + 0], 1

P4190: !_CASX [3] (maybe <- 0x200004c) (Int)
ldx [%i1], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l6
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i1], %l6, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P4191: !_CASX [17] (maybe <- 0x200004e) (Int)
add %i3, 8, %l7
ldx [%l7], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l6
mov %l4, %o2
casx [%l7], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4192: !_MEMBAR (FP)
membar #StoreLoad

P4193: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P4194: !_MEMBAR (FP)

P4195: !_CASX [7] (maybe <- 0x200004f) (Int)
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4196: !_MEMBAR (FP)

P4197: !_BST [16] (maybe <- 0x4180002a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4198: !_MEMBAR (FP)
membar #StoreLoad

P4199: !_CASX [17] (maybe <- 0x2000051) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
sllx %l7, 32, %l7
wr %g0, 0x88, %asi
add %i3, 8, %l6
ldxa [%l6] %asi, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
mov  %o5, %l3
mov  %l7, %o5
casxa [%l6] %asi, %l3, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
add  %l4, 1, %l4

P4200: !_DWST [16] (maybe <- 0x2000052) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P4201: !_ST_BINIT [2] (maybe <- 0x2000054) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P4202: !_MEMBAR (Int)
membar #StoreLoad

P4203: !_CAS [10] (maybe <- 0x2000055) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4204: !_CAS [22] (maybe <- 0x2000056) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduwa [%l3] %asi, %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l6, %l7
casa [%l3] %asi, %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P4205: !_DWLD [23] (FP)
ldd [%i2 + 8], %f14
! 1 addresses covered
fmovs %f15, %f14

P4206: !_ST [14] (maybe <- 0x2000057) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4207: !_PREFETCH [12] (Int)
prefetch [%i3 + 0], 1

P4208: !_DWST_BINIT [15] (maybe <- 0x2000058) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P4209: !_MEMBAR (Int)

P4210: !_BST [8] (maybe <- 0x4180002d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4211: !_MEMBAR (FP)
membar #StoreLoad

P4212: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P4213: !_MEMBAR (FP)

P4214: !_SWAP [5] (maybe <- 0x200005a) (Int)
mov %l4, %o4
swap  [%i1 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4215: !_REPLACEMENT [1] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4216: !_LDD [6] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P4217: !_DWLD [9] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l3
or %l3, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4217
nop
RET4217:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4218: !_CASX [14] (maybe <- 0x200005b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P4219: !_MEMBAR (FP)

P4220: !_BSTC [19] (maybe <- 0x41800030) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4221: !_MEMBAR (FP)
membar #StoreLoad

P4222: !_ST_BINIT [19] (maybe <- 0x200005c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P4223: !_MEMBAR (Int)
membar #StoreLoad

P4224: !_DWST [10] (maybe <- 0x200005d) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4224
nop
RET4224:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4225: !_SWAP [12] (maybe <- 0x200005f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 0], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P4226: !_CASX [7] (maybe <- 0x2000060) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i2], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P4227: !_MEMBAR (FP)

P4228: !_BST [20] (maybe <- 0x41800033) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4229: !_MEMBAR (FP)
membar #StoreLoad

P4230: !_ST [14] (maybe <- 0x2000062) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4231: !_LD [18] (Int)
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4232: !_DWLD [2] (Int)
ldx [%i0 + 8], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l3
or %l3, %o1, %o1

P4233: !_MEMBAR (FP)
membar #StoreLoad

P4234: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P4235: !_MEMBAR (FP)

P4236: !_SWAP [1] (maybe <- 0x2000063) (Int)
mov %l4, %o2
swap  [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4237: !_PREFETCH [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 0

P4238: !_CASX [1] (maybe <- 0x2000064) (Int)
ldx [%i0], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i0], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P4239: !_LDD [22] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P4240: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P4241: !_SWAP [22] (maybe <- 0x2000066) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o1
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %o1, %l7, %o5
srl %o5, 8, %o5
sll %o1, 8, %o1
and %o1, %l7, %o1
or %o1, %o5, %o1
srl %o1, 16, %o5
sll %o1, 16, %o1
srl %o1, 0, %o1
or %o1, %o5, %o1
swapa  [%i2 + 4] %asi, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4242: !_DWST_BINIT [8] (maybe <- 0x2000067) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4243: !_MEMBAR (Int)

P4244: !_BST [3] (maybe <- 0x41800036) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4245: !_MEMBAR (FP)
membar #StoreLoad

P4246: !_ST [8] (maybe <- 0x2000068) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4247: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4247
nop
RET4247:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4248: !_BST [5] (maybe <- 0x41800039) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4249: !_MEMBAR (FP)
membar #StoreLoad

P4250: !_DWST_BINIT [20] (maybe <- 0x2000069) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4251: !_MEMBAR (Int)
membar #StoreLoad

P4252: !_DWST [9] (maybe <- 0x200006a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P4253: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 21

P4254: !_SWAP [13] (maybe <- 0x200006c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P4255: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 21

P4256: !_SWAP [0] (maybe <- 0x200006d) (Int)
mov %l4, %o2
swap  [%i0 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4257: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4258: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4259: !_MEMBAR (FP)
membar #StoreLoad

P4260: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P4261: !_MEMBAR (FP)

P4262: !_SWAP [1] (maybe <- 0x200006e) (Int)
mov %l4, %o4
swap  [%i0 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4263: !_CAS [22] (maybe <- 0x200006f) (Int)
add %i2, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4264: !_MEMBAR (FP)
membar #StoreLoad

P4265: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P4266: !_MEMBAR (FP)

P4267: !_CAS [13] (maybe <- 0x2000070) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4268: !_DWST [11] (maybe <- 0x2000071) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4268
nop
RET4268:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4269: !_MEMBAR (FP)

P4270: !_BSTC [5] (maybe <- 0x4180003c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4271: !_MEMBAR (FP)
membar #StoreLoad

P4272: !_DWLD [5] (Int)
ldx [%i1 + 8], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %o5
or %o5, %o1, %o1

P4273: !_CAS [19] (maybe <- 0x2000072) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P4274: !_CAS [21] (maybe <- 0x2000073) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P4275: !_ST_BINIT [16] (maybe <- 0x2000074) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4276: !_MEMBAR (Int) (CBR) (Branch target of P4678)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4276
nop
RET4276:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P4277
nop

TARGET4678:
ba RET4678
nop


P4277: !_DWST_BINIT [5] (maybe <- 0x2000075) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i1 + 8] %asi 
add   %l4, 1, %l4

P4278: !_MEMBAR (Int)
membar #StoreLoad

P4279: !_DWST [4] (maybe <- 0x4180003f) (FP) (Branch target of P4657)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 0]
ba P4280
nop

TARGET4657:
ba RET4657
nop


P4280: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4281: !_REPLACEMENT [5] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P4282: !_DWST [6] (maybe <- 0x2000076) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P4283: !_ST [11] (maybe <- 0x2000078) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4284: !_MEMBAR (FP)

P4285: !_BST [1] (maybe <- 0x41800041) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4285
nop
RET4285:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4286: !_MEMBAR (FP)
membar #StoreLoad

P4287: !_DWLD [9] (Int)
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P4288: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P4289: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 23

P4290: !_MEMBAR (FP)

P4291: !_BST [13] (maybe <- 0x41800044) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4292: !_MEMBAR (FP)
membar #StoreLoad

P4293: !_DWST [14] (maybe <- 0x2000079) (Int)
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P4294: !_MEMBAR (FP)

P4295: !_BSTC [19] (maybe <- 0x41800047) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4296: !_MEMBAR (FP)
membar #StoreLoad

P4297: !_DWST_BINIT [13] (maybe <- 0x200007a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P4298: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4298
nop
RET4298:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4299: !_DWST [3] (maybe <- 0x4180004a) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 0]

P4300: !_MEMBAR (FP)

P4301: !_BST [23] (maybe <- 0x4180004c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4302: !_MEMBAR (FP)
membar #StoreLoad

P4303: !_DWST_BINIT [0] (maybe <- 0x200007c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P4304: !_MEMBAR (Int)
membar #StoreLoad

P4305: !_CAS [10] (maybe <- 0x200007e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P4306: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4307: !_LDD [8] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4308: !_MEMBAR (FP)

P4309: !_BSTC [2] (maybe <- 0x4180004f) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4310: !_MEMBAR (FP)
membar #StoreLoad

P4311: !_BLD [20] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4311
nop
RET4311:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4312: !_MEMBAR (FP)

P4313: !_DWST [23] (maybe <- 0x41800052) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 8]

P4314: !_CASX [21] (maybe <- 0x200007f) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P4315: !_CAS [6] (maybe <- 0x2000081) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%i2], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4316: !_DWST_BINIT [3] (maybe <- 0x2000082) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P4317: !_MEMBAR (Int)
membar #StoreLoad

P4318: !_ST [18] (maybe <- 0x2000084) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P4319: !_CASX [3] (maybe <- 0x2000085) (Int) (LE) (Branch target of P4285)
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l7, %l6, %o5
srlx %o5, 8, %o5
sllx %l7, 8, %l7
and %l7, %l6, %l7
or %l7, %o5, %l7 
sethi %hi(0xffff0000), %l6
srlx %l7, 16, %o5
andn %o5, %l6, %o5
andn %l7, %l6, %l7
sllx %l7, 16, %l7
or %l7, %o5, %l7 
srlx %l7, 32, %o5
sllx %l7, 32, %l7
or %l7, %o5, %o5 
wr %g0, 0x88, %asi
ldxa [%i1] %asi, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
! move %l3(upper) -> %o3(upper)
or %l3, %g0, %o3
mov %l3, %l6
mov  %o5, %l3
casxa [%i1] %asi, %l6, %l3
! move %l3(lower) -> %o3(lower)
srlx %o3, 32, %o3
sllx %o3, 32, %o3
srl %l3, 0, %l6
or %l6, %o3, %o3
! move %l3(upper) -> %o4(upper)
or %l3, %g0, %o4
add  %l4, 1, %l4
ba P4320
nop

TARGET4285:
ba RET4285
nop


P4320: !_REPLACEMENT [15] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P4321: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 21

P4322: !_CAS [4] (maybe <- 0x2000087) (Int)
add %i1, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
srlx %o4, 32, %o4
sllx %o4, 32, %o4
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4323: !_SWAP [13] (maybe <- 0x2000088) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 4], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P4324: !_ST_BINIT [21] (maybe <- 0x2000089) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4325: !_MEMBAR (Int)
membar #StoreLoad

P4326: !_CASX [6] (maybe <- 0x200008a) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l7
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4327: !_ST_BINIT [0] (maybe <- 0x200008c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P4328: !_MEMBAR (Int)
membar #StoreLoad

P4329: !_PREFETCH [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 30

P4330: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4331: !_DWST_BINIT [14] (maybe <- 0x200008d) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4332: !_MEMBAR (Int)
membar #StoreLoad

P4333: !_CAS [19] (maybe <- 0x200008e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4334: !_MEMBAR (FP)

P4335: !_BSTC [23] (maybe <- 0x41800053) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4336: !_MEMBAR (FP)
membar #StoreLoad

P4337: !_ST [5] (maybe <- 0x200008f) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P4338: !_ST [8] (maybe <- 0x41800056) (FP)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P4339: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4340: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 23

P4341: !_SWAP [6] (maybe <- 0x2000090) (Int)
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4342: !_ST_BINIT [15] (maybe <- 0x2000091) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4343: !_MEMBAR (Int)

P4344: !_BST [14] (maybe <- 0x41800057) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4345: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4345
nop
RET4345:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4346: !_LD [13] (Int)
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P4347: !_PREFETCH [16] (Int) (CBR)
prefetch [%i3 + 4], 23

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4347
nop
RET4347:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4348: !_MEMBAR (FP)

P4349: !_BST [18] (maybe <- 0x4180005a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4350: !_MEMBAR (FP)
membar #StoreLoad

P4351: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 21

P4352: !_DWST [3] (maybe <- 0x2000092) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i1 + 0]
add   %l4, 1, %l4

P4353: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 16

P4354: !_MEMBAR (FP)

P4355: !_BSTC [20] (maybe <- 0x4180005d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4356: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4356
nop
RET4356:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4357: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P4358: !_MEMBAR (FP)

P4359: !_ST [0] (maybe <- 0x2000094) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P4360: !_DWST_BINIT [11] (maybe <- 0x2000095) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4361: !_MEMBAR (Int)
membar #StoreLoad

P4362: !_DWST [12] (maybe <- 0x2000096) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P4363: !_CAS [0] (maybe <- 0x2000098) (Int)
lduw [%i0], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%i0], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P4364: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 20

P4365: !_MEMBAR (FP) (Branch target of P4842)
ba P4366
nop

TARGET4842:
ba RET4842
nop


P4366: !_BSTC [5] (maybe <- 0x41800060) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4367: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4367
nop
RET4367:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4368: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P4369: !_MEMBAR (FP)

P4370: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 21

P4371: !_ST [14] (maybe <- 0x2000099) (Int) (Branch target of P4709)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4
ba P4372
nop

TARGET4709:
ba RET4709
nop


P4372: !_CAS [9] (maybe <- 0x200009a) (Int)
lduw [%i2], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%i2], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P4373: !_LD [3] (Int)
lduw [%i1 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P4374: !_SWAP [15] (maybe <- 0x200009b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P4375: !_CASX [14] (maybe <- 0x200009c) (Int) (Branch target of P4609)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l7
mov %l4, %o0
casx [%o5], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4
ba P4376
nop

TARGET4609:
ba RET4609
nop


P4376: !_MEMBAR (FP)

P4377: !_BST [13] (maybe <- 0x41800063) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4378: !_MEMBAR (FP)
membar #StoreLoad

P4379: !_CASX [6] (maybe <- 0x200009d) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4380: !_DWST [23] (maybe <- 0x200009f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P4381: !_DWST_BINIT [12] (maybe <- 0x20000a0) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P4382: !_MEMBAR (Int)
membar #StoreLoad

P4383: !_ST [2] (maybe <- 0x20000a2) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P4384: !_SWAP [20] (maybe <- 0x20000a3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4385: !_PREFETCH [13] (Int)
prefetch [%i3 + 4], 1

P4386: !_LDD [8] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4387: !_CAS [15] (maybe <- 0x20000a4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o4
mov %o4, %l3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4388: !_MEMBAR (FP)

P4389: !_BSTC [13] (maybe <- 0x41800066) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4390: !_MEMBAR (FP)
membar #StoreLoad

P4391: !_REPLACEMENT [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4392: !_CASX [22] (maybe <- 0x20000a5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l7
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P4393: !_MEMBAR (FP)

P4394: !_BST [6] (maybe <- 0x41800069) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4395: !_MEMBAR (FP)
membar #StoreLoad

P4396: !_LDD [8] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i2 + 8] %asi, %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4397: !_LD [22] (Int)
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P4398: !_ST_BINIT [11] (maybe <- 0x20000a7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P4399: !_MEMBAR (Int)
membar #StoreLoad

P4400: !_DWST_BINIT [10] (maybe <- 0x20000a8) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P4401: !_MEMBAR (Int)
membar #StoreLoad

P4402: !_REPLACEMENT [5] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P4403: !_ST [6] (maybe <- 0x20000aa) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P4404: !_DWST_BINIT [0] (maybe <- 0x20000ab) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P4405: !_MEMBAR (Int)

P4406: !_BSTC [18] (maybe <- 0x4180006c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4407: !_MEMBAR (FP)
membar #StoreLoad

P4408: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P4409: !_MEMBAR (FP)

P4410: !_CASX [22] (maybe <- 0x20000ad) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l3
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4411: !_ST [0] (maybe <- 0x20000af) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P4412: !_SWAP [7] (maybe <- 0x20000b0) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4413: !_LDD [4] (Int) (CBR)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4413
nop
RET4413:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4414: !_MEMBAR (FP)

P4415: !_BST [2] (maybe <- 0x4180006f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4416: !_MEMBAR (FP)
membar #StoreLoad

P4417: !_DWLD [0] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P4418: !_CAS [11] (maybe <- 0x20000b1) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%o5], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4418
nop
RET4418:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4419: !_MEMBAR (FP)

P4420: !_BST [17] (maybe <- 0x41800072) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4421: !_MEMBAR (FP)
membar #StoreLoad

P4422: !_DWST [16] (maybe <- 0x20000b2) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P4423: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4424: !_DWST_BINIT [11] (maybe <- 0x20000b4) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4425: !_MEMBAR (Int)
membar #StoreLoad

P4426: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+12], %l3
st %l3, [%i3+12]
add %i3, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P4427: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4428: !_CAS [22] (maybe <- 0x20000b5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4429: !_ST_BINIT [1] (maybe <- 0x20000b6) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P4430: !_MEMBAR (Int)
membar #StoreLoad

P4431: !_CASX [0] (maybe <- 0x20000b7) (Int)
ldx [%i0], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i0], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P4432: !_MEMBAR (FP)
membar #StoreLoad

P4433: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P4434: !_MEMBAR (FP)

P4435: !_LD [21] (Int) (Branch target of P4671)
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
ba P4436
nop

TARGET4671:
ba RET4671
nop


P4436: !_CASX [14] (maybe <- 0x20000b9) (Int) (Branch target of P4367)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l6
mov %l4, %o4
casx [%l7], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4
ba P4437
nop

TARGET4367:
ba RET4367
nop


P4437: !_DWST_BINIT [1] (maybe <- 0x20000ba) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P4438: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4438
nop
RET4438:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4439: !_CAS [8] (maybe <- 0x20000bc) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P4440: !_CASX [7] (maybe <- 0x20000bd) (Int)
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4441: !_CAS [12] (maybe <- 0x20000bf) (Int)
lduw [%i3], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P4442: !_LD [12] (Int)
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P4443: !_DWLD [23] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4443
nop
RET4443:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4444: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P4445: !_MEMBAR (FP)

P4446: !_BST [1] (maybe <- 0x41800075) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4447: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4447
nop
RET4447:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4448: !_LD [15] (Int)
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P4449: !_LD [19] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduwa [%i3 + 4] %asi, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4450: !_PREFETCH [5] (Int) (CBR)
prefetch [%i1 + 12], 1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4450
nop
RET4450:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4451: !_MEMBAR (FP)

P4452: !_BST [22] (maybe <- 0x41800078) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4453: !_MEMBAR (FP)
membar #StoreLoad

P4454: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P4455: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P4456: !_SWAP [23] (maybe <- 0x20000c0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4457: !_CAS [7] (maybe <- 0x20000c1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4458: !_DWST_BINIT [4] (maybe <- 0x20000c2) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

P4459: !_MEMBAR (Int)
membar #StoreLoad

P4460: !_PREFETCH [22] (Int)
prefetch [%i3 + 4], 2

P4461: !_LDD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4462: !_MEMBAR (FP)
membar #StoreLoad

P4463: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P4464: !_MEMBAR (FP)

P4465: !_DWST [3] (maybe <- 0x20000c4) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i1 + 0]
add   %l4, 1, %l4

P4466: !_LDD [10] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P4467: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4468: !_SWAP [18] (maybe <- 0x20000c6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4469: !_DWST_BINIT [19] (maybe <- 0x20000c7) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P4470: !_MEMBAR (Int)
membar #StoreLoad

P4471: !_LD [21] (Int)
lduw [%i3 + 0], %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1

P4472: !_LD [21] (Int)
lduw [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P4473: !_REPLACEMENT [1] (Int) (Branch target of P4298)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+4], %l3
st %l3, [%i3+4]
add %i3, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
ba P4474
nop

TARGET4298:
ba RET4298
nop


P4474: !_MEMBAR (FP) (Branch target of P4093)
ba P4475
nop

TARGET4093:
ba RET4093
nop


P4475: !_BST [4] (maybe <- 0x4180007b) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4476: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4476
nop
RET4476:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4477: !_PREFETCH [0] (Int) (CBR)
prefetch [%i0 + 0], 19

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4477
nop
RET4477:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4478: !_DWST [18] (maybe <- 0x20000c9) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P4479: !_SWAP [20] (maybe <- 0x20000cb) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %o5
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %o5, %l6, %l7
srl %l7, 8, %l7
sll %o5, 8, %o5
and %o5, %l6, %o5
or %o5, %l7, %o5
srl %o5, 16, %l7
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l7, %o5
swapa  [%i2 + 12] %asi, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P4480: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4481: !_REPLACEMENT [1] (Int)
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P4482: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 22

P4483: !_SWAP [13] (maybe <- 0x20000cc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4484: !_SWAP [21] (maybe <- 0x20000cd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 0], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4485: !_DWST_BINIT [22] (maybe <- 0x20000ce) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P4486: !_MEMBAR (Int)
membar #StoreLoad

P4487: !_SWAP [12] (maybe <- 0x20000d0) (Int)
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4488: !_LDD [13] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P4489: !_MEMBAR (FP)

P4490: !_BST [20] (maybe <- 0x4180007e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4491: !_MEMBAR (FP)
membar #StoreLoad

P4492: !_CASX [4] (maybe <- 0x20000d1) (Int)
ldx [%i1], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P4493: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 23

P4494: !_MEMBAR (FP)

P4495: !_BSTC [11] (maybe <- 0x41800081) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4496: !_MEMBAR (FP)
membar #StoreLoad

P4497: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P4498: !_DWST [9] (maybe <- 0x20000d3) (Int) (Branch target of P4438)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4
ba P4499
nop

TARGET4438:
ba RET4438
nop


P4499: !_MEMBAR (FP)

P4500: !_BST [4] (maybe <- 0x41800084) (FP) (Branch target of P4684)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi
ba P4501
nop

TARGET4684:
ba RET4684
nop


P4501: !_MEMBAR (FP)
membar #StoreLoad

P4502: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4503: !_LDD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P4504: !_SWAP [4] (maybe <- 0x20000d5) (Int)
mov %l4, %l7
swap  [%i1 + 4], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P4505: !_LD [0] (Int)
lduw [%i0 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4506: !_SWAP [14] (maybe <- 0x20000d6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P4507: !_ST [5] (maybe <- 0x20000d7) (Int) (LE) (Branch target of P4847)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i1 + 12] %asi
add   %l4, 1, %l4
ba P4508
nop

TARGET4847:
ba RET4847
nop


P4508: !_DWST [14] (maybe <- 0x41800087) (FP)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 8]

P4509: !_LD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P4510: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P4511: !_DWST_BINIT [9] (maybe <- 0x20000d8) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P4512: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4513: !_ST_BINIT [7] (maybe <- 0x20000da) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4514: !_MEMBAR (Int)
membar #StoreLoad

P4515: !_LDD [9] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4516: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4

P4517: !_CAS [5] (maybe <- 0x20000db) (Int) (CBR)
add %i1, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%o5], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4517
nop
RET4517:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4518: !_DWST [1] (maybe <- 0x20000dc) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P4519: !_LD [18] (Int)
lduw [%i3 + 0], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P4520: !_DWST_BINIT [5] (maybe <- 0x20000de) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

P4521: !_MEMBAR (Int)
membar #StoreLoad

P4522: !_DWST [6] (maybe <- 0x20000df) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P4523: !_MEMBAR (FP)

P4524: !_BSTC [17] (maybe <- 0x41800088) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4525: !_MEMBAR (FP)
membar #StoreLoad

P4526: !_LD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4527: !_MEMBAR (FP)

P4528: !_BST [4] (maybe <- 0x4180008b) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4529: !_MEMBAR (FP)
membar #StoreLoad

P4530: !_LD [0] (Int)
lduw [%i0 + 0], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P4531: !_MEMBAR (FP)
membar #StoreLoad

P4532: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P4533: !_MEMBAR (FP) (Branch target of P4217)
ba P4534
nop

TARGET4217:
ba RET4217
nop


P4534: !_CASX [4] (maybe <- 0x20000e1) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P4535: !_CAS [5] (maybe <- 0x20000e3) (Int)
add %i1, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4536: !_LD [3] (Int)
lduw [%i1 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P4537: !_ST [7] (maybe <- 0x20000e4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P4538: !_LDD [15] (Int) (Branch target of P4476)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
ba P4539
nop

TARGET4476:
ba RET4476
nop


P4539: !_LDD [12] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4540: !_MEMBAR (FP)
membar #StoreLoad

P4541: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P4542: !_MEMBAR (FP)

P4543: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l3
or %l3, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3

P4544: !_CASX [3] (maybe <- 0x20000e5) (Int)
ldx [%i1], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P4545: !_CAS [9] (maybe <- 0x20000e7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
mov %l4, %o1
cas [%i2], %l7, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4546: !_MEMBAR (FP)

P4547: !_BSTC [13] (maybe <- 0x4180008e) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4548: !_MEMBAR (FP)
membar #StoreLoad

P4549: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P4550: !_MEMBAR (FP) (Branch target of P4946)
ba P4551
nop

TARGET4946:
ba RET4946
nop


P4551: !_LDD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4552: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 1

P4553: !_MEMBAR (FP)

P4554: !_BST [8] (maybe <- 0x41800091) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4555: !_MEMBAR (FP)
membar #StoreLoad

P4556: !_LDD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4557: !_DWST_BINIT [14] (maybe <- 0x20000e8) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4558: !_MEMBAR (Int)
membar #StoreLoad

P4559: !_LDD [11] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P4560: !_MEMBAR (FP)
membar #StoreLoad

P4561: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P4562: !_MEMBAR (FP)

P4563: !_SWAP [14] (maybe <- 0x20000e9) (Int)
mov %l4, %o4
swap  [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4564: !_MEMBAR (FP)

P4565: !_BSTC [22] (maybe <- 0x41800094) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4566: !_MEMBAR (FP) (Branch target of P4736)
membar #StoreLoad
ba P4567
nop

TARGET4736:
ba RET4736
nop


P4567: !_CAS [10] (maybe <- 0x20000ea) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%o5], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4568: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P4569: !_ST_BINIT [20] (maybe <- 0x20000eb) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P4570: !_MEMBAR (Int)
membar #StoreLoad

P4571: !_ST_BINIT [19] (maybe <- 0x20000ec) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P4572: !_MEMBAR (Int)
membar #StoreLoad

P4573: !_ST_BINIT [13] (maybe <- 0x20000ed) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4574: !_MEMBAR (Int)
membar #StoreLoad

P4575: !_CAS [15] (maybe <- 0x20000ee) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%i3], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P4576: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 1

P4577: !_LDD [6] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4578: !_ST_BINIT [18] (maybe <- 0x20000ef) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4579: !_MEMBAR (Int)
membar #StoreLoad

P4580: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4581: !_ST_BINIT [18] (maybe <- 0x20000f0) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4582: !_MEMBAR (Int)
membar #StoreLoad

P4583: !_DWST_BINIT [11] (maybe <- 0x20000f1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4584: !_MEMBAR (Int)

P4585: !_BST [4] (maybe <- 0x41800097) (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 4 

sethi %hi(0x200000), %l3
sub   %i1, %l3, %i1
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4586: !_MEMBAR (FP)
membar #StoreLoad

P4587: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 3

P4588: !_CASX [7] (maybe <- 0x20000f2) (Int) (LE)
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %l6, %l3, %l7
srlx %l7, 8, %l7
sllx %l6, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6 
sethi %hi(0xffff0000), %l3
srlx %l6, 16, %l7
andn %l7, %l3, %l7
andn %l6, %l3, %l6
sllx %l6, 16, %l6
or %l6, %l7, %l6 
srlx %l6, 32, %l7
sllx %l6, 32, %l6
or %l6, %l7, %l7 
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldxa [%i2] %asi, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
mov %o5, %l3
mov  %l7, %o5
casxa [%i2] %asi, %l3, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4589: !_SWAP [10] (maybe <- 0x20000f4) (Int)
mov %l4, %o0
swap  [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4590: !_REPLACEMENT [1] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4591: !_ST [9] (maybe <- 0x20000f5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P4592: !_MEMBAR (FP)

P4593: !_BST [11] (maybe <- 0x4180009a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4594: !_MEMBAR (FP)
membar #StoreLoad

P4595: !_DWST [18] (maybe <- 0x20000f6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P4596: !_MEMBAR (FP)

P4597: !_BST [17] (maybe <- 0x4180009d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4598: !_MEMBAR (FP)
membar #StoreLoad

P4599: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P4600: !_MEMBAR (FP)

P4601: !_PREFETCH [13] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 16

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4601
nop
RET4601:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4602: !_ST [6] (maybe <- 0x20000f8) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P4603: !_MEMBAR (FP)

P4604: !_BSTC [6] (maybe <- 0x418000a0) (FP) (Branch target of P4614)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P4605
nop

TARGET4614:
ba RET4614
nop


P4605: !_MEMBAR (FP)

P4606: !_BST [17] (maybe <- 0x418000a3) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4607: !_MEMBAR (FP)

P4608: !_BSTC [0] (maybe <- 0x418000a6) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4609: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4609
nop
RET4609:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4610: !_ST_BINIT [7] (maybe <- 0x20000f9) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4611: !_MEMBAR (Int)
membar #StoreLoad

P4612: !_DWST [20] (maybe <- 0x20000fa) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P4613: !_LDD [7] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P4614: !_CAS [8] (maybe <- 0x20000fb) (Int) (CBR)
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4614
nop
RET4614:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4615: !_CAS [11] (maybe <- 0x20000fc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4616: !_DWLD [2] (Int)
ldx [%i0 + 8], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l6
or %l6, %o3, %o3

P4617: !_DWST [2] (maybe <- 0x20000fd) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P4618: !_LDD [7] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4619: !_ST_BINIT [6] (maybe <- 0x20000fe) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4620: !_MEMBAR (Int)

P4621: !_BSTC [17] (maybe <- 0x418000a9) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4622: !_MEMBAR (FP) (Branch target of P4081)
membar #StoreLoad
ba P4623
nop

TARGET4081:
ba RET4081
nop


P4623: !_SWAP [11] (maybe <- 0x20000ff) (Int)
mov %l4, %o0
swap  [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4624: !_DWST_BINIT [7] (maybe <- 0x2000100) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P4625: !_MEMBAR (Int)
membar #StoreLoad

P4626: !_CASX [19] (maybe <- 0x2000102) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P4627: !_DWST_BINIT [7] (maybe <- 0x2000104) (Int) (CBR)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4627
nop
RET4627:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4628: !_MEMBAR (Int)
membar #StoreLoad

P4629: !_CAS [4] (maybe <- 0x2000106) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
add %i1, 4, %l6
lduwa [%l6] %asi, %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l7, %o3
casa [%l6] %asi, %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4630: !_LD [1] (Int)
lduw [%i0 + 4], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P4631: !_MEMBAR (FP)
membar #StoreLoad

P4632: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P4633: !_MEMBAR (FP)

P4634: !_DWST [13] (maybe <- 0x418000ac) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P4635: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4636: !_DWLD [9] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0

P4637: !_CAS [15] (maybe <- 0x2000107) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduwa [%i2] %asi, %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l7, %o5
casa [%i2] %asi, %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P4638: !_ST_BINIT [9] (maybe <- 0x2000108) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4639: !_MEMBAR (Int)
membar #StoreLoad

P4640: !_ST_BINIT [5] (maybe <- 0x2000109) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P4641: !_MEMBAR (Int)

P4642: !_BSTC [17] (maybe <- 0x418000ae) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4643: !_MEMBAR (FP)
membar #StoreLoad

P4644: !_ST [0] (maybe <- 0x200010a) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P4645: !_DWST_BINIT [1] (maybe <- 0x200010b) (Int) (LE)
wr %g0, 0xea, %asi
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i0 + 0 ] %asi
add   %l4, 1, %l4

P4646: !_MEMBAR (Int) (LE) (Branch target of P4762)
membar #StoreLoad
ba P4647
nop

TARGET4762:
ba RET4762
nop


P4647: !_ST [3] (maybe <- 0x200010d) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P4648: !_SWAP [14] (maybe <- 0x200010e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4649: !_ST_BINIT [0] (maybe <- 0x200010f) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4649
nop
RET4649:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4650: !_MEMBAR (Int)
membar #StoreLoad

P4651: !_PREFETCH [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 20

P4652: !_CAS [23] (maybe <- 0x2000110) (Int)
add %i2, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%o5], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4653: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4654: !_DWST_BINIT [20] (maybe <- 0x2000111) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P4655: !_MEMBAR (Int)
membar #StoreLoad

P4656: !_ST_BINIT [10] (maybe <- 0x2000112) (Int) (Branch target of P4311)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4
ba P4657
nop

TARGET4311:
ba RET4311
nop


P4657: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4657
nop
RET4657:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4658: !_DWLD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P4659: !_DWST_BINIT [10] (maybe <- 0x2000113) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P4660: !_MEMBAR (Int)
membar #StoreLoad

P4661: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P4662: !_MEMBAR (FP)

P4663: !_DWST [17] (maybe <- 0x2000115) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P4664: !_DWST [6] (maybe <- 0x2000116) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P4665: !_CASX [10] (maybe <- 0x2000118) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P4666: !_LD [11] (Int)
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0

P4667: !_CAS [3] (maybe <- 0x200011a) (Int)
lduw [%i1], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%i1], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P4668: !_ST [20] (maybe <- 0x200011b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4669: !_MEMBAR (FP)

P4670: !_BSTC [5] (maybe <- 0x418000b1) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4671: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4671
nop
RET4671:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4672: !_DWST [13] (maybe <- 0x200011c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P4673: !_LD [1] (Int)
lduw [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P4674: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P4675: !_DWLD [14] (Int)
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P4676: !_CAS [23] (maybe <- 0x200011e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
mov %l4, %o4
cas [%l6], %l3, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4677: !_DWST_BINIT [17] (maybe <- 0x200011f) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4678: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4678
nop
RET4678:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4679: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P4680: !_LD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4681: !_DWST [2] (maybe <- 0x2000120) (Int)
mov %l4, %l6 
stx %l6, [%i0 + 8]
add   %l4, 1, %l4

P4682: !_MEMBAR (FP)

P4683: !_BSTC [21] (maybe <- 0x418000b4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4684: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4684
nop
RET4684:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4685: !_SWAP [13] (maybe <- 0x2000121) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4686: !_SWAP [9] (maybe <- 0x2000122) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P4687: !_CAS [12] (maybe <- 0x2000123) (Int) (CBR)
lduw [%i2], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4687
nop
RET4687:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4688: !_MEMBAR (FP)
membar #StoreLoad

P4689: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P4690: !_MEMBAR (FP)

P4691: !_ST_BINIT [21] (maybe <- 0x2000124) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P4692: !_MEMBAR (Int)
membar #StoreLoad

P4693: !_DWST [17] (maybe <- 0x2000125) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P4694: !_DWST [18] (maybe <- 0x2000126) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P4695: !_PREFETCH [11] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 21

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4695
nop
RET4695:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4696: !_MEMBAR (FP)

P4697: !_BSTC [22] (maybe <- 0x418000b7) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4698: !_MEMBAR (FP)
membar #StoreLoad

P4699: !_ST [10] (maybe <- 0x2000128) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 4] %asi
add   %l4, 1, %l4

P4700: !_DWST_BINIT [14] (maybe <- 0x2000129) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4701: !_MEMBAR (Int)
membar #StoreLoad

P4702: !_CASX [16] (maybe <- 0x200012a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l7
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i2], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P4703: !_DWLD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4704: !_DWST [19] (maybe <- 0x200012c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P4705: !_SWAP [12] (maybe <- 0x200012e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4706: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+4], %l3
st %l3, [%i2+4]
add %i2, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P4707: !_DWST [6] (maybe <- 0x200012f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P4708: !_LDD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4709: !_DWLD [16] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4709
nop
RET4709:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4710: !_DWST_BINIT [9] (maybe <- 0x2000131) (Int) (LE)
wr %g0, 0xea, %asi
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P4711: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4712: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4713: !_CAS [22] (maybe <- 0x2000133) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P4714: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P4715: !_MEMBAR (FP)

P4716: !_BST [18] (maybe <- 0x418000ba) (FP) (Branch target of P4418)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P4717
nop

TARGET4418:
ba RET4418
nop


P4717: !_MEMBAR (FP)
membar #StoreLoad

P4718: !_PREFETCH [18] (Int)
prefetch [%i3 + 0], 31

P4719: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 30

P4720: !_DWST_BINIT [8] (maybe <- 0x2000134) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P4721: !_MEMBAR (Int)
membar #StoreLoad

P4722: !_DWLD [6] (Int)
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4723: !_CASX [14] (maybe <- 0x2000135) (Int)
add %i2, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P4724: !_ST [23] (maybe <- 0x2000136) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4725: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P4726: !_MEMBAR (FP) (Branch target of P4894)
membar #StoreLoad
ba P4727
nop

TARGET4894:
ba RET4894
nop


P4727: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P4728: !_MEMBAR (FP)

P4729: !_CAS [5] (maybe <- 0x2000137) (Int)
add %i1, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4730: !_CAS [5] (maybe <- 0x2000138) (Int) (Branch target of P4995)
add %i1, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%l7], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4
ba P4731
nop

TARGET4995:
ba RET4995
nop


P4731: !_MEMBAR (FP)

P4732: !_BST [3] (maybe <- 0x418000bd) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4733: !_MEMBAR (FP)
membar #StoreLoad

P4734: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4735: !_MEMBAR (FP)

P4736: !_BST [2] (maybe <- 0x418000c0) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4736
nop
RET4736:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4737: !_MEMBAR (FP)
membar #StoreLoad

P4738: !_SWAP [6] (maybe <- 0x2000139) (Int) (Branch target of P4934)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4
ba P4739
nop

TARGET4934:
ba RET4934
nop


P4739: !_MEMBAR (FP)
membar #StoreLoad

P4740: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P4741: !_MEMBAR (FP)

P4742: !_DWST [11] (maybe <- 0x200013a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P4743: !_CAS [1] (maybe <- 0x200013b) (Int)
add %i0, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4744: !_MEMBAR (FP)

P4745: !_BSTC [4] (maybe <- 0x418000c3) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4746: !_MEMBAR (FP)
membar #StoreLoad

P4747: !_REPLACEMENT [0] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4747
nop
RET4747:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4748: !_SWAP [8] (maybe <- 0x200013c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P4749: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P4750: !_ST [16] (maybe <- 0x200013d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4751: !_DWST [19] (maybe <- 0x418000c6) (FP) (Branch target of P4065)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]
ba P4752
nop

TARGET4065:
ba RET4065
nop


P4752: !_DWLD [20] (Int)
ldx [%i2 + 8], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l7
or %l7, %o2, %o2

P4753: !_DWLD [18] (Int)
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P4754: !_CAS [19] (maybe <- 0x200013e) (Int)
add %i2, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4755: !_DWST_BINIT [13] (maybe <- 0x200013f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P4756: !_MEMBAR (Int)
membar #StoreLoad

P4757: !_LD [18] (Int)
lduw [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P4758: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4759: !_CAS [5] (maybe <- 0x2000141) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
add %i1, 12, %l6
lduwa [%l6] %asi, %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l7, %o5
casa [%l6] %asi, %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P4760: !_LDD [14] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 8] %asi, %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4761: !_CAS [0] (maybe <- 0x2000142) (Int)
lduw [%i0], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%i0], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4762: !_DWLD [8] (Int) (LE) (CBR)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldxa [%i2 + 8] %asi, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4762
nop
RET4762:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4763: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4764: !_CASX [6] (maybe <- 0x2000143) (Int)
ldx [%i2], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i2], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P4765: !_LDD [8] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4766: !_DWST [13] (maybe <- 0x418000c8) (FP) (CBR)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4766
nop
RET4766:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4767: !_ST_BINIT [1] (maybe <- 0x2000145) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P4768: !_MEMBAR (Int)
membar #StoreLoad

P4769: !_SWAP [3] (maybe <- 0x2000146) (Int)
mov %l4, %l6
swap  [%i1 + 0], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4770: !_ST [21] (maybe <- 0x2000147) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P4771: !_DWST_BINIT [13] (maybe <- 0x2000148) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P4772: !_MEMBAR (Int)
membar #StoreLoad

P4773: !_ST_BINIT [2] (maybe <- 0x200014a) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P4774: !_MEMBAR (Int)
membar #StoreLoad

P4775: !_DWST_BINIT [18] (maybe <- 0x200014b) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P4776: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4777: !_DWST_BINIT [4] (maybe <- 0x200014d) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 4 

sethi %hi(0x200000), %l7
sub   %i1, %l7, %i1
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P4778: !_MEMBAR (Int) (Branch target of P4687)
membar #StoreLoad
ba P4779
nop

TARGET4687:
ba RET4687
nop


P4779: !_SWAP [1] (maybe <- 0x200014f) (Int)
mov %l4, %o3
swap  [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4780: !_CAS [18] (maybe <- 0x2000150) (Int)
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%i3], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P4781: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4782: !_DWST [3] (maybe <- 0x2000151) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i1 + 0]
add   %l4, 1, %l4

P4783: !_MEMBAR (FP)

P4784: !_BST [20] (maybe <- 0x418000ca) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4785: !_MEMBAR (FP)

P4786: !_BSTC [0] (maybe <- 0x418000cd) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4787: !_MEMBAR (FP) (Branch target of P4695)
membar #StoreLoad
ba P4788
nop

TARGET4695:
ba RET4695
nop


P4788: !_CASX [8] (maybe <- 0x2000153) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
sllx %o5, 32, %o5
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldxa [%l7] %asi, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
mov  %l3, %l6
mov  %o5, %l3
casxa [%l7] %asi, %l6, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
add  %l4, 1, %l4

P4789: !_ST [4] (maybe <- 0x418000d0) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i1 + 4 ]

P4790: !_DWST [19] (maybe <- 0x2000154) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P4791: !_REPLACEMENT [18] (Int) (Branch target of P4627)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
ba P4792
nop

TARGET4627:
ba RET4627
nop


P4792: !_DWST_BINIT [16] (maybe <- 0x2000156) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P4793: !_MEMBAR (Int)
membar #StoreLoad

P4794: !_SWAP [8] (maybe <- 0x2000158) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4795: !_ST [23] (maybe <- 0x2000159) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4796: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4797: !_LDD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4798: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 19

P4799: !_SWAP [11] (maybe <- 0x200015a) (Int)
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4800: !_CAS [8] (maybe <- 0x200015b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P4801: !_ST [20] (maybe <- 0x418000d1) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P4802: !_CAS [22] (maybe <- 0x200015c) (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4802
nop
RET4802:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4803: !_ST [10] (maybe <- 0x200015d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P4804: !_DWLD [3] (Int)
ldx [%i1 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P4805: !_CAS [7] (maybe <- 0x200015e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P4806: !_DWST_BINIT [12] (maybe <- 0x200015f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P4807: !_MEMBAR (Int)
membar #StoreLoad

P4808: !_SWAP [18] (maybe <- 0x2000161) (Int) (Branch target of P4447)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4
ba P4809
nop

TARGET4447:
ba RET4447
nop


P4809: !_ST [5] (maybe <- 0x418000d2) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i1 + 12 ]

P4810: !_LD [9] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 0], %f13
! 1 addresses covered

P4811: !_MEMBAR (FP)
membar #StoreLoad

P4812: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P4813: !_MEMBAR (FP)

P4814: !_ST [14] (maybe <- 0x418000d3) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P4815: !_MEMBAR (FP)
membar #StoreLoad

P4816: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P4817: !_MEMBAR (FP)

P4818: !_DWST [6] (maybe <- 0x2000162) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P4819: !_ST [21] (maybe <- 0x418000d4) (FP)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 0 ]

P4820: !_CAS [6] (maybe <- 0x2000164) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i3], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4821: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4822: !_DWLD [8] (Int)
ldx [%i3 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4823: !_ST [8] (maybe <- 0x2000165) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4824: !_LD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P4825: !_CAS [22] (maybe <- 0x2000166) (Int)
add %i3, 4, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4826: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4827: !_DWST [15] (maybe <- 0x2000167) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P4828: !_DWLD [16] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P4829: !_DWST [14] (maybe <- 0x2000169) (Int)
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P4830: !_DWST_BINIT [17] (maybe <- 0x200016a) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l7
srl %l7, 8, %l7
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6
srl %l6, 16, %l7
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l7, %l6
sllx %l6, 32, %l6 
stxa %l6, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P4831: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4832: !_DWST_BINIT [10] (maybe <- 0x200016b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P4833: !_MEMBAR (Int)
membar #StoreLoad

P4834: !_DWST [16] (maybe <- 0x418000d5) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P4835: !_DWST [20] (maybe <- 0x200016d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P4836: !_PREFETCH [20] (Int)
prefetch [%i3 + 12], 0

P4837: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P4838: !_LD [5] (Int)
lduw [%i1 + 12], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4839: !_ST_BINIT [17] (maybe <- 0x200016e) (Int) (Branch target of P4413)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4
ba P4840
nop

TARGET4413:
ba RET4413
nop


P4840: !_MEMBAR (Int)
membar #StoreLoad

P4841: !_DWST [14] (maybe <- 0x200016f) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P4842: !_ST [10] (maybe <- 0x2000170) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4842
nop
RET4842:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4843: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P4844: !_ST [7] (maybe <- 0x418000d7) (FP) (Branch target of P4649)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]
ba P4845
nop

TARGET4649:
ba RET4649
nop


P4845: !_CASX [17] (maybe <- 0x2000171) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l6
mov %l4, %o2
casx [%l7], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P4846: !_SWAP [2] (maybe <- 0x2000172) (Int)
mov %l4, %o3
swap  [%i0 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P4847: !_REPLACEMENT [9] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4847
nop
RET4847:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4848: !_DWST_BINIT [10] (maybe <- 0x2000173) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P4849: !_MEMBAR (Int)
membar #StoreLoad

P4850: !_DWST [20] (maybe <- 0x2000175) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P4851: !_ST [19] (maybe <- 0x418000d8) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]

P4852: !_DWST [4] (maybe <- 0x2000176) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i1 + 0]
add   %l4, 1, %l4

P4853: !_MEMBAR (FP)

P4854: !_BSTC [2] (maybe <- 0x418000d9) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4855: !_MEMBAR (FP)
membar #StoreLoad

P4856: !_DWLD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P4857: !_MEMBAR (FP)
membar #StoreLoad

P4858: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P4859: !_MEMBAR (FP)

P4860: !_ST [17] (maybe <- 0x2000178) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4861: !_CAS [22] (maybe <- 0x2000179) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4862: !_MEMBAR (FP)

P4863: !_BST [22] (maybe <- 0x418000dc) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4864: !_MEMBAR (FP)
membar #StoreLoad

P4865: !_SWAP [12] (maybe <- 0x200017a) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P4866: !_LD [4] (Int) (Branch target of P4867)
lduw [%i1 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
ba P4867
nop

TARGET4867:
ba RET4867
nop


P4867: !_DWST_BINIT [15] (maybe <- 0x200017b) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4867
nop
RET4867:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4868: !_MEMBAR (Int)
membar #StoreLoad

P4869: !_CASX [2] (maybe <- 0x200017d) (Int)
add %i0, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P4870: !_MEMBAR (FP)
membar #StoreLoad

P4871: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P4872: !_MEMBAR (FP)

P4873: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P4874: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4874
nop
RET4874:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P4875: !_PREFETCH [11] (Int)
prefetch [%i3 + 12], 22

P4876: !_LDD [13] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4877: !_MEMBAR (FP)

P4878: !_BST [7] (maybe <- 0x418000df) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4879: !_MEMBAR (FP)
membar #StoreLoad

P4880: !_ST [14] (maybe <- 0x200017e) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P4881: !_CASX [5] (maybe <- 0x200017f) (Int)
add %i1, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P4882: !_SWAP [16] (maybe <- 0x2000180) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3
swap  [%i2 + 4], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P4883: !_DWST_BINIT [6] (maybe <- 0x2000181) (Int) (LE)
wr %g0, 0xea, %asi
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P4884: !_MEMBAR (Int) (LE)

P4885: !_BSTC [8] (maybe <- 0x418000e2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4886: !_MEMBAR (FP)
membar #StoreLoad

P4887: !_CAS [17] (maybe <- 0x2000183) (Int)
add %i2, 12, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4888: !_ST_BINIT [22] (maybe <- 0x2000184) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P4889: !_MEMBAR (Int)
membar #StoreLoad

P4890: !_ST_BINIT [23] (maybe <- 0x2000185) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P4891: !_MEMBAR (Int) (Branch target of P4247)
ba P4892
nop

TARGET4247:
ba RET4247
nop


P4892: !_BSTC [16] (maybe <- 0x418000e5) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4893: !_MEMBAR (FP)
membar #StoreLoad

P4894: !_SWAP [3] (maybe <- 0x2000186) (Int) (CBR)
mov %l4, %o3
swap  [%i1 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4894
nop
RET4894:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4895: !_MEMBAR (FP)

P4896: !_BST [21] (maybe <- 0x418000e8) (FP) (Branch target of P4043)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P4897
nop

TARGET4043:
ba RET4043
nop


P4897: !_MEMBAR (FP)
membar #StoreLoad

P4898: !_DWLD [23] (Int)
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %o5
or %o5, %o3, %o3

P4899: !_MEMBAR (FP)

P4900: !_BST [13] (maybe <- 0x418000eb) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4901: !_MEMBAR (FP)
membar #StoreLoad

P4902: !_DWLD [5] (Int)
ldx [%i1 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P4903: !_SWAP [3] (maybe <- 0x2000187) (Int)
mov %l4, %l3
swap  [%i1 + 0], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4904: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET4904
nop
RET4904:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4905: !_BST [4] (maybe <- 0x418000ee) (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #3
!Logical addr: 4 

sethi %hi(0x200000), %l7
sub   %i1, %l7, %i1
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4906: !_MEMBAR (FP)
membar #StoreLoad

P4907: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P4908: !_CAS [4] (maybe <- 0x2000188) (Int)
add %i1, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P4909: !_DWST [22] (maybe <- 0x2000189) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P4910: !_MEMBAR (FP)

P4911: !_BST [15] (maybe <- 0x418000f1) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4912: !_MEMBAR (FP)
membar #StoreLoad

P4913: !_ST_BINIT [18] (maybe <- 0x200018b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4914: !_MEMBAR (Int)
membar #StoreLoad

P4915: !_REPLACEMENT [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P4916: !_CASX [5] (maybe <- 0x200018c) (Int)
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P4917: !_ST [11] (maybe <- 0x200018d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P4918: !_PREFETCH [11] (Int)
prefetch [%i3 + 12], 19

P4919: !_SWAP [7] (maybe <- 0x200018e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P4920: !_DWST [22] (maybe <- 0x200018f) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P4921: !_LDD [0] (Int) (Branch target of P4450)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
ba P4922
nop

TARGET4450:
ba RET4450
nop


P4922: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4923: !_ST [0] (maybe <- 0x418000f4) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P4924: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4925: !_SWAP [5] (maybe <- 0x2000191) (Int)
mov %l4, %o5
swap  [%i1 + 12], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P4926: !_ST [1] (maybe <- 0x2000192) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P4927: !_LD [10] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 4], %f13
! 1 addresses covered

P4928: !_REPLACEMENT [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P4929: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P4930: !_MEMBAR (FP)

P4931: !_BST [0] (maybe <- 0x418000f5) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P4932: !_MEMBAR (FP)
membar #StoreLoad

P4933: !_ST [0] (maybe <- 0x2000193) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P4934: !_LD [18] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4934
nop
RET4934:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P4935: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P4936: !_ST_BINIT [6] (maybe <- 0x2000194) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P4937: !_MEMBAR (Int) (LE)
membar #StoreLoad

P4938: !_ST [20] (maybe <- 0x2000195) (Int) (Branch target of P4224)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4
ba P4939
nop

TARGET4224:
ba RET4224
nop


P4939: !_PREFETCH [12] (Int) (LE) (Branch target of P4356)
wr %g0, 0x88, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetcha [%i3 + 0] %asi, 22
ba P4940
nop

TARGET4356:
ba RET4356
nop


P4940: !_DWST [3] (maybe <- 0x2000196) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i1 + 0]
add   %l4, 1, %l4

P4941: !_CASX [17] (maybe <- 0x2000198) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l6
mov %l4, %o4
casx [%l7], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4942: !_REPLACEMENT [9] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P4943: !_LDD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P4944: !_ST_BINIT [5] (maybe <- 0x2000199) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P4945: !_MEMBAR (Int)
membar #StoreLoad

P4946: !_BLD [11] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4946
nop
RET4946:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P4947: !_MEMBAR (FP)

P4948: !_DWLD [21] (Int)
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P4949: !_SWAP [8] (maybe <- 0x200019a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4950: !_DWLD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P4951: !_LDD [7] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i2 + 0] %asi, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P4952: !_DWST_BINIT [12] (maybe <- 0x200019b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P4953: !_MEMBAR (Int)
membar #StoreLoad

P4954: !_LDD [5] (Int)
ldd [%i1 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P4955: !_DWST_BINIT [20] (maybe <- 0x200019d) (Int) (Branch target of P4874)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4
ba P4956
nop

TARGET4874:
ba RET4874
nop


P4956: !_MEMBAR (Int) (Branch target of P4802)
membar #StoreLoad
ba P4957
nop

TARGET4802:
ba RET4802
nop


P4957: !_ST_BINIT [7] (maybe <- 0x200019e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P4958: !_MEMBAR (Int)
membar #StoreLoad

P4959: !_DWST [11] (maybe <- 0x200019f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P4960: !_SWAP [14] (maybe <- 0x20001a0) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P4961: !_MEMBAR (FP)
membar #StoreLoad

P4962: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P4963: !_MEMBAR (FP)

P4964: !_LD [2] (Int)
lduw [%i0 + 12], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P4965: !_LD [0] (Int)
lduw [%i0 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P4966: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P4967: !_MEMBAR (FP)

P4968: !_BSTC [11] (maybe <- 0x418000f8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4969: !_MEMBAR (FP)

P4970: !_BST [13] (maybe <- 0x418000fb) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P4971: !_MEMBAR (FP)
membar #StoreLoad

P4972: !_DWST_BINIT [0] (maybe <- 0x20001a1) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P4973: !_MEMBAR (Int)

P4974: !_BSTC [4] (maybe <- 0x418000fe) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P4975: !_MEMBAR (FP)

P4976: !_BSTC [23] (maybe <- 0x41800101) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P4977: !_MEMBAR (FP) (Branch target of P4172)
membar #StoreLoad
ba P4978
nop

TARGET4172:
ba RET4172
nop


P4978: !_LD [12] (Int)
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P4979: !_REPLACEMENT [18] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P4980: !_ST [1] (maybe <- 0x20001a3) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P4981: !_MEMBAR (FP)
membar #StoreLoad

P4982: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P4983: !_MEMBAR (FP)

P4984: !_PREFETCH [9] (Int)
prefetch [%i3 + 0], 20

P4985: !_CASX [6] (maybe <- 0x20001a4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l3
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P4986: !_LD [10] (FP)
ld [%i3 + 4], %f7
! 1 addresses covered

P4987: !_ST_BINIT [12] (maybe <- 0x20001a6) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P4988: !_MEMBAR (Int)
membar #StoreLoad

P4989: !_CAS [14] (maybe <- 0x20001a7) (Int)
add %i3, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P4990: !_LDD [12] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P4991: !_SWAP [2] (maybe <- 0x20001a8) (Int)
mov %l4, %o2
swap  [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P4992: !_SWAP [8] (maybe <- 0x20001a9) (Int)
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P4993: !_CAS [18] (maybe <- 0x20001aa) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P4994: !_CAS [3] (maybe <- 0x20001ab) (Int)
lduw [%i1], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%i1], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P4995: !_ST_BINIT [2] (maybe <- 0x20001ac) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET4995
nop
RET4995:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P4996: !_MEMBAR (Int)
membar #StoreLoad

P4997: !_DWST_BINIT [0] (maybe <- 0x20001ad) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P4998: !_MEMBAR (Int)
membar #StoreLoad

P4999: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 4

P5000: !_CAS [14] (maybe <- 0x20001af) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P5001: !_MEMBAR (FP)
membar #StoreLoad

P5002: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P5003: !_MEMBAR (FP) (Branch target of P4347)
ba P5004
nop

TARGET4347:
ba RET4347
nop


P5004: !_LD [0] (Int)
lduw [%i0 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P5005: !_MEMBAR (FP)
membar #StoreLoad

P5006: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P5007: !_MEMBAR (FP)

P5008: !_DWST [0] (maybe <- 0x20001b0) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P5009: !_MEMBAR (FP)

P5010: !_BST [20] (maybe <- 0x41800104) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5011: !_MEMBAR (FP)
membar #StoreLoad

P5012: !_LD [3] (Int) (Loop exit)
lduw [%i1 + 0], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
!--

sethi %hi(0x600000), %o5
add   %i1, %o5, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_4_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_4_0
nop

P5013: !_MEMBAR (Int)
membar #StoreLoad

END_NODES4: ! Test instruction sequence for CPU 4 ends
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
stw %l3, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func5:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %o5
or    %o5, %lo(0xdeadbee0), %o5
stw   %o5, [%i5]
sethi %hi(0xdeadbee1), %o5
or    %o5, %lo(0xdeadbee1), %o5
stw   %o5, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x05deade1), %o5
or    %o5, %lo(0x05deade1), %o5
stw %o5, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x2800001), %l4
or    %l4, %lo(0x2800001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x42000001), %o5
or    %o5, %lo(0x42000001), %o5
stw %o5, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x36800000), %o5
or    %o5, %lo(0x36800000), %o5
stw %o5, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x23e4^4
sethi %hi(0x23e4), %l0
or    %l0, %lo(0x23e4), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES5: ! Test instruction sequence for ISTREAM 5 begins

P5014: !_ST [7] (maybe <- 0x2800001) (Int) (Loop entry) (CBR) (Branch target of P5201)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_5_0:
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5014
nop
RET5014:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0

ba P5015
nop

TARGET5201:
ba RET5201
nop


P5015: !_REPLACEMENT [5] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P5016: !_SWAP [9] (maybe <- 0x2800002) (Int) (CBR) (Branch target of P5795)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5016
nop
RET5016:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P5017
nop

TARGET5795:
ba RET5795
nop


P5017: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %o5
or %o5, %o0, %o0

P5018: !_MEMBAR (FP)

P5019: !_BST [7] (maybe <- 0x42000001) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5020: !_MEMBAR (FP)
membar #StoreLoad

P5021: !_SWAP [10] (maybe <- 0x2800003) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5022: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+12], %l6
st %l6, [%i3+12]
add %i3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P5023: !_DWST [19] (maybe <- 0x2800004) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5023
nop
RET5023:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5024: !_DWST [10] (maybe <- 0x2800006) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P5025: !_ST_BINIT [0] (maybe <- 0x2800008) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P5026: !_MEMBAR (Int)
membar #StoreLoad

P5027: !_CAS [5] (maybe <- 0x2800009) (Int)
add %i1, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5028: !_DWST [12] (maybe <- 0x280000a) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P5029: !_DWST [2] (maybe <- 0x280000c) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P5030: !_ST_BINIT [18] (maybe <- 0x280000d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5031: !_MEMBAR (Int)
membar #StoreLoad

P5032: !_ST [9] (maybe <- 0x280000e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P5033: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5034: !_ST [3] (maybe <- 0x280000f) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P5035: !_ST [0] (maybe <- 0x42000004) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 0 ]

P5036: !_MEMBAR (FP)

P5037: !_BST [21] (maybe <- 0x42000005) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5038: !_MEMBAR (FP)
membar #StoreLoad

P5039: !_LDD [16] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P5040: !_DWST [9] (maybe <- 0x2800010) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P5041: !_SWAP [7] (maybe <- 0x2800012) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5042: !_LD [6] (Int)
lduw [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P5043: !_DWLD [4] (Int)
ldx [%i1 + 0], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l3
or %l3, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1

P5044: !_MEMBAR (FP)
membar #StoreLoad

P5045: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P5046: !_MEMBAR (FP) (Branch target of P5239)
ba P5047
nop

TARGET5239:
ba RET5239
nop


P5047: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P5048: !_LD [17] (Int)
lduw [%i3 + 12], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P5049: !_MEMBAR (FP)
membar #StoreLoad

P5050: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P5051: !_MEMBAR (FP)

P5052: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 2

P5053: !_LD [5] (Int)
lduw [%i1 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P5054: !_ST_BINIT [1] (maybe <- 0x2800013) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P5055: !_MEMBAR (Int)
membar #StoreLoad

P5056: !_DWST_BINIT [17] (maybe <- 0x2800014) (Int) (Branch target of P5436)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4
ba P5057
nop

TARGET5436:
ba RET5436
nop


P5057: !_MEMBAR (Int)
membar #StoreLoad

P5058: !_DWST [2] (maybe <- 0x2800015) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P5059: !_CAS [18] (maybe <- 0x2800016) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%i2], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5060: !_CASX [15] (maybe <- 0x2800017) (Int)
ldx [%i3], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P5061: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 20

P5062: !_DWST_BINIT [1] (maybe <- 0x2800019) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P5063: !_MEMBAR (Int)
membar #StoreLoad

P5064: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P5065: !_MEMBAR (FP)

P5066: !_LD [18] (Int)
lduw [%i2 + 0], %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P5067: !_LDD [22] (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5067
nop
RET5067:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5068: !_DWST_BINIT [2] (maybe <- 0x280001b) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i0 + 8] %asi 
add   %l4, 1, %l4

P5069: !_MEMBAR (Int)
membar #StoreLoad

P5070: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5071: !_ST_BINIT [15] (maybe <- 0x280001c) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5072: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5073: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P5074: !_ST [15] (maybe <- 0x280001d) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P5075: !_MEMBAR (FP)
membar #StoreLoad

P5076: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P5077: !_MEMBAR (FP)

P5078: !_DWLD [14] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P5079: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5079
nop
RET5079:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5080: !_BST [6] (maybe <- 0x42000008) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5081: !_MEMBAR (FP)
membar #StoreLoad

P5082: !_SWAP [23] (maybe <- 0x280001e) (Int) (Branch target of P5067)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 12], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P5083
nop

TARGET5067:
ba RET5067
nop


P5083: !_CAS [13] (maybe <- 0x280001f) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P5084: !_CAS [22] (maybe <- 0x2800020) (Int)
add %i3, 4, %l7
lduw [%l7], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P5085: !_DWST_BINIT [10] (maybe <- 0x2800021) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P5086: !_MEMBAR (Int) (LE) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5086
nop
RET5086:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5087: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5088: !_ST [10] (maybe <- 0x2800023) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P5089: !_DWLD [23] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5090: !_MEMBAR (FP)

P5091: !_BSTC [22] (maybe <- 0x4200000b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5092: !_MEMBAR (FP)
membar #StoreLoad

P5093: !_CASX [10] (maybe <- 0x2800024) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P5094: !_MEMBAR (FP)

P5095: !_BST [3] (maybe <- 0x4200000e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5096: !_MEMBAR (FP)
membar #StoreLoad

P5097: !_ST [9] (maybe <- 0x2800026) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P5098: !_REPLACEMENT [17] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+12], %l3
st %l3, [%i3+12]
add %i3, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P5099: !_ST [13] (maybe <- 0x2800027) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5100: !_DWST_BINIT [10] (maybe <- 0x2800028) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5101: !_MEMBAR (Int)

P5102: !_BSTC [11] (maybe <- 0x42000011) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5103: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5103
nop
RET5103:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5104: !_BST [0] (maybe <- 0x42000014) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5105: !_MEMBAR (FP)
membar #StoreLoad

P5106: !_PREFETCH [5] (Int) (CBR)
prefetch [%i1 + 12], 22

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5106
nop
RET5106:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5107: !_MEMBAR (FP)

P5108: !_BSTC [17] (maybe <- 0x42000017) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5109: !_MEMBAR (FP)

P5110: !_BSTC [21] (maybe <- 0x4200001a) (FP) (Branch target of P5023)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P5111
nop

TARGET5023:
ba RET5023
nop


P5111: !_MEMBAR (FP) (Branch target of P5612)
membar #StoreLoad
ba P5112
nop

TARGET5612:
ba RET5612
nop


P5112: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P5113: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P5114: !_DWST_BINIT [19] (maybe <- 0x280002a) (Int) (Branch target of P5079)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4
ba P5115
nop

TARGET5079:
ba RET5079
nop


P5115: !_MEMBAR (Int)
membar #StoreLoad

P5116: !_ST [11] (maybe <- 0x280002c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS3_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5117: !_LD [12] (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P5118: !_LD [14] (Int)
lduw [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5119: !_MEMBAR (FP)

P5120: !_BSTC [14] (maybe <- 0x4200001d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5121: !_MEMBAR (FP) (Branch target of P5216)
membar #StoreLoad
ba P5122
nop

TARGET5216:
ba RET5216
nop


P5122: !_DWST_BINIT [17] (maybe <- 0x280002d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P5123: !_MEMBAR (Int)
membar #StoreLoad

P5124: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P5125: !_MEMBAR (FP)

P5126: !_BSTC [7] (maybe <- 0x42000020) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5127: !_MEMBAR (FP)
membar #StoreLoad

P5128: !_LD [0] (Int)
lduw [%i0 + 0], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P5129: !_ST_BINIT [21] (maybe <- 0x280002e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5130: !_MEMBAR (Int)

P5131: !_BST [22] (maybe <- 0x42000023) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5132: !_MEMBAR (FP)
membar #StoreLoad

P5133: !_DWST_BINIT [5] (maybe <- 0x280002f) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i1 + 8] %asi 
add   %l4, 1, %l4

P5134: !_MEMBAR (Int)
membar #StoreLoad

P5135: !_DWST [0] (maybe <- 0x2800030) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P5136: !_LD [19] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 4], %f15
! 1 addresses covered
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P5137: !_LD [5] (Int)
lduw [%i1 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P5138: !_LDD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5139: !_ST_BINIT [21] (maybe <- 0x2800032) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P5140: !_MEMBAR (Int)
membar #StoreLoad

P5141: !_DWST [11] (maybe <- 0x2800033) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l7
srl %l7, 8, %l7
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6
srl %l6, 16, %l7
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l7, %l6
sllx %l6, 32, %l6 
stxa %l6, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P5142: !_ST [10] (maybe <- 0x2800034) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P5143: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 1

P5144: !_DWLD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P5145: !_ST [11] (maybe <- 0x2800035) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5146: !_ST_BINIT [10] (maybe <- 0x2800036) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P5147: !_MEMBAR (Int)

P5148: !_BSTC [18] (maybe <- 0x42000026) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5149: !_MEMBAR (FP)
membar #StoreLoad

P5150: !_SWAP [7] (maybe <- 0x2800037) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5151: !_REPLACEMENT [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P5152: !_DWLD [7] (Int)
ldx [%i2 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P5153: !_MEMBAR (FP)

P5154: !_BSTC [0] (maybe <- 0x42000029) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5155: !_MEMBAR (FP)
membar #StoreLoad

P5156: !_LD [2] (Int)
lduw [%i0 + 12], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P5157: !_CASX [6] (maybe <- 0x2800038) (Int)
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P5158: !_DWST_BINIT [10] (maybe <- 0x280003a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P5159: !_MEMBAR (Int)
membar #StoreLoad

P5160: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P5161: !_MEMBAR (FP)

P5162: !_BSTC [15] (maybe <- 0x4200002c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5163: !_MEMBAR (FP)
membar #StoreLoad

P5164: !_LD [4] (Int)
lduw [%i1 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P5165: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 23

P5166: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P5167: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P5168: !_PREFETCH [7] (Int) (Branch target of P5016)
prefetch [%i2 + 4], 21
ba P5169
nop

TARGET5016:
ba RET5016
nop


P5169: !_CASX [14] (maybe <- 0x280003c) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
add  %l4, 1, %l4

P5170: !_DWST_BINIT [7] (maybe <- 0x280003d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P5171: !_MEMBAR (Int)
membar #StoreLoad

P5172: !_DWST [17] (maybe <- 0x280003f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P5173: !_CASX [3] (maybe <- 0x2800040) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
add  %l4, 1, %l4

P5174: !_DWST_BINIT [10] (maybe <- 0x2800042) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P5175: !_MEMBAR (Int)
membar #StoreLoad

P5176: !_ST_BINIT [22] (maybe <- 0x2800044) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P5177: !_MEMBAR (Int)
membar #StoreLoad

P5178: !_ST [4] (maybe <- 0x2800045) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P5179: !_MEMBAR (FP)

P5180: !_BST [9] (maybe <- 0x4200002f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5181: !_MEMBAR (FP)
membar #StoreLoad

P5182: !_DWST_BINIT [21] (maybe <- 0x2800046) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P5183: !_MEMBAR (Int)
membar #StoreLoad

P5184: !_DWST_BINIT [12] (maybe <- 0x2800048) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5185: !_MEMBAR (Int)
membar #StoreLoad

P5186: !_CASX [22] (maybe <- 0x280004a) (Int)
ldx [%i2], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P5187: !_DWST [10] (maybe <- 0x280004c) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P5188: !_LD [2] (Int)
lduw [%i0 + 12], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

P5189: !_ST_BINIT [18] (maybe <- 0x280004e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5190: !_MEMBAR (Int)
membar #StoreLoad

P5191: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5192: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 21

P5193: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 19

P5194: !_DWST [12] (maybe <- 0x280004f) (Int)
sethi %hi(REGION4_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P5195: !_DWST_BINIT [0] (maybe <- 0x2800051) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i0 + 0] %asi
add   %l4, 1, %l4

P5196: !_MEMBAR (Int)
membar #StoreLoad

P5197: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 2

P5198: !_CASX [15] (maybe <- 0x2800053) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %o5
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P5199: !_MEMBAR (FP)

P5200: !_BSTC [16] (maybe <- 0x42000032) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5201: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5201
nop
RET5201:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5202: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P5203: !_MEMBAR (FP)

P5204: !_DWLD [18] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f3
fmovs %f19, %f4

P5205: !_DWLD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P5206: !_ST_BINIT [12] (maybe <- 0x2800055) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P5207: !_MEMBAR (Int)
membar #StoreLoad

P5208: !_CAS [3] (maybe <- 0x2800056) (Int)
lduw [%i1], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%i1], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P5209: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 22

P5210: !_SWAP [8] (maybe <- 0x2800057) (Int)
mov %l4, %o4
swap  [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5211: !_CASX [15] (maybe <- 0x2800058) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P5212: !_MEMBAR (FP)

P5213: !_BST [1] (maybe <- 0x42000035) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5214: !_MEMBAR (FP)
membar #StoreLoad

P5215: !_LD [1] (Int)
lduw [%i0 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P5216: !_PREFETCH [2] (Int) (CBR)
prefetch [%i0 + 12], 1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5216
nop
RET5216:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5217: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P5218: !_REPLACEMENT [2] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P5219: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 22

P5220: !_ST_BINIT [14] (maybe <- 0x280005a) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4

P5221: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5222: !_ST [3] (maybe <- 0x280005b) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P5223: !_ST_BINIT [3] (maybe <- 0x280005c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P5224: !_MEMBAR (Int)

P5225: !_BST [12] (maybe <- 0x42000038) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5226: !_MEMBAR (FP)
membar #StoreLoad

P5227: !_CAS [10] (maybe <- 0x280005d) (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5227
nop
RET5227:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5228: !_DWST [8] (maybe <- 0x280005e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P5229: !_MEMBAR (FP)
membar #StoreLoad

P5230: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P5231: !_MEMBAR (FP)

P5232: !_ST [2] (maybe <- 0x280005f) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P5233: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P5234: !_MEMBAR (FP)
membar #StoreLoad

P5235: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P5236: !_MEMBAR (FP)

P5237: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 22

P5238: !_DWST [20] (maybe <- 0x4200003b) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 8]

P5239: !_SWAP [9] (maybe <- 0x2800060) (Int) (CBR)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5239
nop
RET5239:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5240: !_MEMBAR (FP)

P5241: !_BSTC [9] (maybe <- 0x4200003c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5242: !_MEMBAR (FP)
membar #StoreLoad

P5243: !_DWST [18] (maybe <- 0x2800061) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P5244: !_ST [20] (maybe <- 0x2800063) (Int) (CBR)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5244
nop
RET5244:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5245: !_ST [18] (maybe <- 0x2800064) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P5246: !_LD [11] (Int)
lduw [%i2 + 12], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5247: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 4

P5248: !_DWST_BINIT [8] (maybe <- 0x2800065) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P5249: !_MEMBAR (Int)

P5250: !_BSTC [9] (maybe <- 0x4200003f) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5251: !_MEMBAR (FP)
membar #StoreLoad

P5252: !_DWST [21] (maybe <- 0x42000042) (FP)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P5253: !_MEMBAR (FP)
membar #StoreLoad

P5254: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P5255: !_MEMBAR (FP)

P5256: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 3

P5257: !_MEMBAR (FP)
membar #StoreLoad

P5258: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P5259: !_MEMBAR (FP)

P5260: !_SWAP [3] (maybe <- 0x2800066) (Int)
mov %l4, %o0
swap  [%i1 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5261: !_DWST_BINIT [17] (maybe <- 0x2800067) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P5262: !_MEMBAR (Int)

P5263: !_BST [14] (maybe <- 0x42000044) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5264: !_MEMBAR (FP)

P5265: !_BST [9] (maybe <- 0x42000047) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5266: !_MEMBAR (FP)
membar #StoreLoad

P5267: !_CAS [14] (maybe <- 0x2800068) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5268: !_ST [21] (maybe <- 0x2800069) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P5269: !_MEMBAR (FP)

P5270: !_BSTC [11] (maybe <- 0x4200004a) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5271: !_MEMBAR (FP)
membar #StoreLoad

P5272: !_REPLACEMENT [1] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P5273: !_DWLD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l7
or %l7, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2

P5274: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 2

P5275: !_MEMBAR (FP)
membar #StoreLoad

P5276: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P5277: !_MEMBAR (FP)

P5278: !_CAS [8] (maybe <- 0x280006a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5279: !_DWLD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4

P5280: !_DWST_BINIT [11] (maybe <- 0x280006b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P5281: !_MEMBAR (Int)
membar #StoreLoad

P5282: !_DWST [16] (maybe <- 0x280006c) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P5283: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 24

P5284: !_ST [4] (maybe <- 0x280006e) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P5285: !_SWAP [7] (maybe <- 0x280006f) (Int)
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5286: !_LD [11] (Int)
lduw [%i3 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P5287: !_CASX [7] (maybe <- 0x2800070) (Int)
ldx [%i2], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P5288: !_MEMBAR (FP)

P5289: !_BSTC [9] (maybe <- 0x4200004d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5290: !_MEMBAR (FP)

P5291: !_BSTC [8] (maybe <- 0x42000050) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5292: !_MEMBAR (FP)

P5293: !_BST [18] (maybe <- 0x42000053) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5294: !_MEMBAR (FP)
membar #StoreLoad

P5295: !_ST [1] (maybe <- 0x2800072) (Int) (CBR)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5295
nop
RET5295:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5296: !_SWAP [17] (maybe <- 0x2800073) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P5297: !_MEMBAR (FP)

P5298: !_BSTC [22] (maybe <- 0x42000056) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5299: !_MEMBAR (FP)
membar #StoreLoad

P5300: !_SWAP [22] (maybe <- 0x2800074) (Int)
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5301: !_DWST [14] (maybe <- 0x2800075) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P5302: !_MEMBAR (FP)

P5303: !_BST [17] (maybe <- 0x42000059) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5304: !_MEMBAR (FP)
membar #StoreLoad

P5305: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P5306: !_MEMBAR (FP)

P5307: !_DWLD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l3
or %l3, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4

P5308: !_LDD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P5309: !_DWST_BINIT [23] (maybe <- 0x2800076) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P5310: !_MEMBAR (Int)

P5311: !_BSTC [3] (maybe <- 0x4200005c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5312: !_MEMBAR (FP)
membar #StoreLoad

P5313: !_DWST [11] (maybe <- 0x2800077) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7 
stx %l7, [%i2 + 8]
add   %l4, 1, %l4

P5314: !_SWAP [19] (maybe <- 0x2800078) (Int) (Branch target of P5873)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4
ba P5315
nop

TARGET5873:
ba RET5873
nop


P5315: !_LDD [19] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P5316: !_CAS [1] (maybe <- 0x2800079) (Int)
add %i0, 4, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P5317: !_DWST_BINIT [9] (maybe <- 0x280007a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P5318: !_MEMBAR (Int)
membar #StoreLoad

P5319: !_DWLD [23] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5320: !_ST [7] (maybe <- 0x280007c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P5321: !_DWLD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l3
or %l3, %o3, %o3

P5322: !_LD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P5323: !_REPLACEMENT [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P5324: !_ST_BINIT [8] (maybe <- 0x280007d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P5325: !_MEMBAR (Int)
membar #StoreLoad

P5326: !_CASX [20] (maybe <- 0x280007e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P5327: !_LDD [7] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P5328: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 2

P5329: !_ST [19] (maybe <- 0x280007f) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i2 + 4] %asi
add   %l4, 1, %l4

P5330: !_ST_BINIT [22] (maybe <- 0x2800080) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5331: !_MEMBAR (Int)
membar #StoreLoad

P5332: !_ST [10] (maybe <- 0x2800081) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5333: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P5334: !_SWAP [10] (maybe <- 0x2800082) (Int)
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5335: !_MEMBAR (FP)

P5336: !_BST [10] (maybe <- 0x4200005f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5337: !_MEMBAR (FP)
membar #StoreLoad

P5338: !_CASX [4] (maybe <- 0x2800083) (Int)
ldx [%i1], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P5339: !_ST_BINIT [2] (maybe <- 0x2800085) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P5340: !_MEMBAR (Int)
membar #StoreLoad

P5341: !_DWST [4] (maybe <- 0x2800086) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i1 + 0]
add   %l4, 1, %l4

P5342: !_LDD [9] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P5343: !_REPLACEMENT [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P5344: !_LDD [0] (Int) (Branch target of P5086)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
ba P5345
nop

TARGET5086:
ba RET5086
nop


P5345: !_MEMBAR (FP)

P5346: !_BSTC [13] (maybe <- 0x42000062) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5347: !_MEMBAR (FP)
membar #StoreLoad

P5348: !_LDD [8] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5348
nop
RET5348:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5349: !_ST [20] (maybe <- 0x2800088) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5350: !_DWST_BINIT [22] (maybe <- 0x2800089) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5350
nop
RET5350:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5351: !_MEMBAR (Int)
membar #StoreLoad

P5352: !_ST_BINIT [22] (maybe <- 0x280008b) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P5353: !_MEMBAR (Int)
membar #StoreLoad

P5354: !_PREFETCH [23] (Int)
prefetch [%i2 + 12], 29

P5355: !_MEMBAR (FP)

P5356: !_BSTC [20] (maybe <- 0x42000065) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5357: !_MEMBAR (FP)
membar #StoreLoad

P5358: !_DWST_BINIT [22] (maybe <- 0x280008c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P5359: !_MEMBAR (Int)
membar #StoreLoad

P5360: !_CAS [2] (maybe <- 0x280008e) (Int)
add %i0, 12, %l7
lduw [%l7], %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P5361: !_MEMBAR (FP)

P5362: !_BST [22] (maybe <- 0x42000068) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5363: !_MEMBAR (FP)
membar #StoreLoad

P5364: !_SWAP [4] (maybe <- 0x280008f) (Int)
mov %l4, %o4
swap  [%i1 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5365: !_ST_BINIT [18] (maybe <- 0x2800090) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5366: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5366
nop
RET5366:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5367: !_REPLACEMENT [23] (Int) (CBR)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+12], %l6
st %l6, [%i3+12]
add %i3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5367
nop
RET5367:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5368: !_REPLACEMENT [7] (Int)
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P5369: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 1

P5370: !_CAS [3] (maybe <- 0x2800091) (Int)
lduw [%i1], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i1], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5371: !_MEMBAR (FP)

P5372: !_BSTC [1] (maybe <- 0x4200006b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5373: !_MEMBAR (FP)
membar #StoreLoad

P5374: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 1

P5375: !_ST_BINIT [22] (maybe <- 0x2800092) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5376: !_MEMBAR (Int)
membar #StoreLoad

P5377: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P5378: !_MEMBAR (FP)

P5379: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P5380: !_MEMBAR (FP)

P5381: !_LD [15] (Int)
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P5382: !_DWLD [13] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f13
fmovs %f19, %f14

P5383: !_CAS [4] (maybe <- 0x2800093) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
wr %g0, 0x88, %asi
add %i1, 4, %o5
lduwa [%o5] %asi, %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l3, %l6
casa [%o5] %asi, %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P5384: !_MEMBAR (FP)
membar #StoreLoad

P5385: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P5386: !_MEMBAR (FP)

P5387: !_ST_BINIT [19] (maybe <- 0x2800094) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P5388: !_MEMBAR (Int)

P5389: !_BSTC [2] (maybe <- 0x4200006e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5390: !_MEMBAR (FP)
membar #StoreLoad

P5391: !_ST_BINIT [14] (maybe <- 0x2800095) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P5392: !_MEMBAR (Int)
membar #StoreLoad

P5393: !_SWAP [4] (maybe <- 0x2800096) (Int)
mov %l4, %o2
swap  [%i1 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5394: !_CASX [6] (maybe <- 0x2800097) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P5395: !_DWST [3] (maybe <- 0x42000071) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 0]

P5396: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 23

P5397: !_LDD [3] (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 3 

sethi %hi(0x200000), %l6
sub   %i1, %l6, %i1
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P5398: !_CASX [13] (maybe <- 0x2800099) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P5399: !_LD [12] (Int)
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P5400: !_ST [21] (maybe <- 0x280009b) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P5401: !_SWAP [1] (maybe <- 0x280009c) (Int)
mov %l4, %o3
swap  [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5402: !_SWAP [19] (maybe <- 0x280009d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P5403: !_ST_BINIT [2] (maybe <- 0x280009e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P5404: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5404
nop
RET5404:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5405: !_CASX [8] (maybe <- 0x280009f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %o5
mov %l4, %o0
casx [%l3], %o5, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P5406: !_ST [8] (maybe <- 0x28000a0) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5407: !_SWAP [17] (maybe <- 0x28000a1) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5408: !_ST_BINIT [5] (maybe <- 0x28000a2) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P5409: !_MEMBAR (Int)
membar #StoreLoad

P5410: !_DWLD [4] (Int)
ldx [%i1 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P5411: !_LD [6] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i2 + 0] %asi, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P5412: !_ST_BINIT [1] (maybe <- 0x28000a3) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P5413: !_MEMBAR (Int)
membar #StoreLoad

P5414: !_DWLD [14] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %f2
! 1 addresses covered
fmovs %f3, %f2

P5415: !_LDD [20] (Int) (Branch target of P5655)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
ba P5416
nop

TARGET5655:
ba RET5655
nop


P5416: !_PREFETCH [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 0

P5417: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P5418: !_MEMBAR (FP) (Branch target of P5348)
membar #StoreLoad
ba P5419
nop

TARGET5348:
ba RET5348
nop


P5419: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P5420: !_MEMBAR (FP)

P5421: !_DWLD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5422: !_SWAP [9] (maybe <- 0x28000a4) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5423: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P5424: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 20

P5425: !_DWST_BINIT [5] (maybe <- 0x28000a5) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

P5426: !_MEMBAR (Int)
membar #StoreLoad

P5427: !_DWST [5] (maybe <- 0x28000a6) (Int)
mov %l4, %o5 
stx %o5, [%i1 + 8]
add   %l4, 1, %l4

P5428: !_CASX [20] (maybe <- 0x28000a7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l7
mov %l4, %o2
casx [%o5], %l7, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P5429: !_MEMBAR (FP)

P5430: !_BSTC [2] (maybe <- 0x42000073) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5431: !_MEMBAR (FP)
membar #StoreLoad

P5432: !_DWST_BINIT [11] (maybe <- 0x28000a8) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P5433: !_MEMBAR (Int)
membar #StoreLoad

P5434: !_LD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5435: !_ST_BINIT [3] (maybe <- 0x28000a9) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P5436: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5436
nop
RET5436:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5437: !_DWST [7] (maybe <- 0x28000aa) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P5438: !_LDD [7] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P5439: !_DWLD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0

P5440: !_LDD [6] (Int) (CBR)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5440
nop
RET5440:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5441: !_CAS [23] (maybe <- 0x28000ac) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%l7], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5442: !_ST_BINIT [2] (maybe <- 0x28000ad) (Int) (Branch target of P5106)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4
ba P5443
nop

TARGET5106:
ba RET5106
nop


P5443: !_MEMBAR (Int)
membar #StoreLoad

P5444: !_ST [8] (maybe <- 0x28000ae) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5445: !_DWST [22] (maybe <- 0x42000076) (FP) (CBR)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5445
nop
RET5445:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5446: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 31

P5447: !_MEMBAR (FP)

P5448: !_BST [12] (maybe <- 0x42000078) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5449: !_MEMBAR (FP)
membar #StoreLoad

P5450: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l7
or %l7, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3

P5451: !_ST_BINIT [21] (maybe <- 0x28000af) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P5452: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5453: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P5454: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 26

P5455: !_DWLD [13] (FP)
ldd [%i3 + 0], %f6
! 2 addresses covered

P5456: !_PREFETCH [14] (Int)
prefetch [%i3 + 12], 30

P5457: !_LDD [20] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5458: !_CAS [19] (maybe <- 0x28000b0) (Int)
add %i2, 4, %l6
lduw [%l6], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P5459: !_DWST [14] (maybe <- 0x28000b1) (Int)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P5460: !_CAS [14] (maybe <- 0x28000b2) (Int)
add %i3, 12, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P5461: !_DWST_BINIT [7] (maybe <- 0x28000b3) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P5462: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5463: !_ST_BINIT [5] (maybe <- 0x28000b5) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P5464: !_MEMBAR (Int)
membar #StoreLoad

P5465: !_LDD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5466: !_CAS [19] (maybe <- 0x28000b6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P5467: !_CAS [13] (maybe <- 0x28000b7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o4
mov %o4, %l3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5468: !_DWST [12] (maybe <- 0x28000b8) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P5469: !_LD [12] (Int)
lduw [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P5470: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 30

P5471: !_CASX [17] (maybe <- 0x28000ba) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P5472: !_SWAP [3] (maybe <- 0x28000bb) (Int)
mov %l4, %o5
swap  [%i1 + 0], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P5473: !_LDD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5474: !_SWAP [12] (maybe <- 0x28000bc) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P5475: !_DWST_BINIT [19] (maybe <- 0x28000bd) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P5476: !_MEMBAR (Int)
membar #StoreLoad

P5477: !_CAS [3] (maybe <- 0x28000bf) (Int)
lduw [%i1], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%i1], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5478: !_ST [20] (maybe <- 0x28000c0) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5479: !_DWST_BINIT [20] (maybe <- 0x28000c1) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P5480: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5480
nop
RET5480:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5481: !_ST_BINIT [22] (maybe <- 0x28000c2) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5482: !_MEMBAR (Int) (Branch target of P5440)
membar #StoreLoad
ba P5483
nop

TARGET5440:
ba RET5440
nop


P5483: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P5484: !_MEMBAR (FP)

P5485: !_CAS [14] (maybe <- 0x28000c3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P5486: !_ST_BINIT [2] (maybe <- 0x28000c4) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P5487: !_MEMBAR (Int)
membar #StoreLoad

P5488: !_LDD [12] (Int) (CBR)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5488
nop
RET5488:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5489: !_REPLACEMENT [20] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P5490: !_ST [3] (maybe <- 0x28000c5) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P5491: !_DWST [2] (maybe <- 0x28000c6) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P5492: !_MEMBAR (FP)
membar #StoreLoad

P5493: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P5494: !_MEMBAR (FP)

P5495: !_SWAP [3] (maybe <- 0x28000c7) (Int)
mov %l4, %o2
swap  [%i1 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5496: !_CASX [5] (maybe <- 0x28000c8) (Int)
add %i1, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P5497: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5498: !_DWST_BINIT [19] (maybe <- 0x28000c9) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P5499: !_MEMBAR (Int)
membar #StoreLoad

P5500: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P5501: !_MEMBAR (FP)

P5502: !_DWST_BINIT [0] (maybe <- 0x28000cb) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P5503: !_MEMBAR (Int)
membar #StoreLoad

P5504: !_PREFETCH [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 22

P5505: !_ST_BINIT [15] (maybe <- 0x28000cd) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5506: !_MEMBAR (Int)
membar #StoreLoad

P5507: !_CASX [2] (maybe <- 0x28000ce) (Int)
add %i0, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P5508: !_MEMBAR (FP)

P5509: !_BST [12] (maybe <- 0x4200007b) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5509
nop
RET5509:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5510: !_MEMBAR (FP)
membar #StoreLoad

P5511: !_SWAP [21] (maybe <- 0x28000cf) (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5511
nop
RET5511:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5512: !_CAS [17] (maybe <- 0x28000d0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5513: !_ST_BINIT [11] (maybe <- 0x28000d1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P5514: !_MEMBAR (Int)
membar #StoreLoad

P5515: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P5516: !_ST [7] (maybe <- 0x28000d2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5517: !_SWAP [19] (maybe <- 0x28000d3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5518: !_MEMBAR (FP) (Branch target of P5892)
ba P5519
nop

TARGET5892:
ba RET5892
nop


P5519: !_BSTC [0] (maybe <- 0x4200007e) (FP) (Branch target of P5350)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi
ba P5520
nop

TARGET5350:
ba RET5350
nop


P5520: !_MEMBAR (FP)
membar #StoreLoad

P5521: !_ST [3] (maybe <- 0x42000081) (FP) (Branch target of P5660)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i1 + 0 ]
ba P5522
nop

TARGET5660:
ba RET5660
nop


P5522: !_MEMBAR (FP)

P5523: !_BST [23] (maybe <- 0x42000082) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5524: !_MEMBAR (FP)

P5525: !_BST [3] (maybe <- 0x42000085) (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 3 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5526: !_MEMBAR (FP)
membar #StoreLoad

P5527: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P5528: !_DWST [17] (maybe <- 0x28000d4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P5529: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P5530: !_CAS [8] (maybe <- 0x28000d5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P5531: !_DWST [13] (maybe <- 0x28000d6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P5532: !_SWAP [6] (maybe <- 0x28000d8) (Int)
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5533: !_DWST_BINIT [5] (maybe <- 0x28000d9) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i1 + 8] %asi 
add   %l4, 1, %l4

P5534: !_MEMBAR (Int)
membar #StoreLoad

P5535: !_SWAP [16] (maybe <- 0x28000da) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P5536: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5537: !_PREFETCH [11] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetcha [%i2 + 12] %asi, 22

P5538: !_ST_BINIT [9] (maybe <- 0x28000db) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P5539: !_MEMBAR (Int)
membar #StoreLoad

P5540: !_PREFETCH [9] (Int)
prefetch [%i2 + 0], 4

P5541: !_SWAP [0] (maybe <- 0x28000dc) (Int)
mov %l4, %o0
swap  [%i0 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5542: !_CASX [10] (maybe <- 0x28000dd) (Int) (Branch target of P5509)
ldx [%i2], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4
ba P5543
nop

TARGET5509:
ba RET5509
nop


P5543: !_CASX [3] (maybe <- 0x28000df) (Int) (Branch target of P5488)
ldx [%i1], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4
ba P5544
nop

TARGET5488:
ba RET5488
nop


P5544: !_MEMBAR (FP)
membar #StoreLoad

P5545: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P5546: !_MEMBAR (FP)

P5547: !_LD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5548: !_DWLD [15] (Int)
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P5549: !_MEMBAR (FP)
membar #StoreLoad

P5550: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P5551: !_MEMBAR (FP)

P5552: !_SWAP [17] (maybe <- 0x28000e1) (Int)
mov %l4, %o1
swap  [%i2 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5553: !_DWST_BINIT [10] (maybe <- 0x28000e2) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P5554: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5555: !_DWST_BINIT [8] (maybe <- 0x28000e4) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5555
nop
RET5555:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5556: !_MEMBAR (Int)
membar #StoreLoad

P5557: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P5558: !_DWLD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P5559: !_DWLD [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5560: !_ST_BINIT [5] (maybe <- 0x28000e5) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P5561: !_MEMBAR (Int)
membar #StoreLoad

P5562: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P5563: !_MEMBAR (FP)

P5564: !_ST_BINIT [2] (maybe <- 0x28000e6) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P5565: !_MEMBAR (Int)
membar #StoreLoad

P5566: !_DWST_BINIT [16] (maybe <- 0x28000e7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5567: !_MEMBAR (Int)
membar #StoreLoad

P5568: !_LD [2] (FP)
ld [%i0 + 12], %f10
! 1 addresses covered

P5569: !_ST_BINIT [22] (maybe <- 0x28000e9) (Int) (Branch target of P5295)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4
ba P5570
nop

TARGET5295:
ba RET5295
nop


P5570: !_MEMBAR (Int)
membar #StoreLoad

P5571: !_SWAP [13] (maybe <- 0x28000ea) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l3, %l7, %o5
srl %o5, 8, %o5
sll %l3, 8, %l3
and %l3, %l7, %l3
or %l3, %o5, %l3
srl %l3, 16, %o5
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %o5, %l3
swapa  [%i3 + 4] %asi, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P5572: !_CAS [13] (maybe <- 0x28000eb) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
wr %g0, 0x88, %asi
add %i3, 4, %l7
lduwa [%l7] %asi, %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %o5, %l3
casa [%l7] %asi, %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5573: !_MEMBAR (FP)

P5574: !_BST [5] (maybe <- 0x42000088) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5575: !_MEMBAR (FP)
membar #StoreLoad

P5576: !_CAS [3] (maybe <- 0x28000ec) (Int) (CBR)
lduw [%i1], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%i1], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5576
nop
RET5576:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5577: !_MEMBAR (FP)

P5578: !_BSTC [18] (maybe <- 0x4200008b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5579: !_MEMBAR (FP)
membar #StoreLoad

P5580: !_DWST_BINIT [5] (maybe <- 0x28000ed) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

P5581: !_MEMBAR (Int)
membar #StoreLoad

P5582: !_ST_BINIT [5] (maybe <- 0x28000ee) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P5583: !_MEMBAR (Int)
membar #StoreLoad

P5584: !_DWLD [13] (Int)
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P5585: !_MEMBAR (FP)

P5586: !_BSTC [0] (maybe <- 0x4200008e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5587: !_MEMBAR (FP)
membar #StoreLoad

P5588: !_PREFETCH [13] (Int)
prefetch [%i3 + 4], 21

P5589: !_MEMBAR (FP)

P5590: !_BST [18] (maybe <- 0x42000091) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5591: !_MEMBAR (FP)
membar #StoreLoad

P5592: !_LD [1] (Int) (CBR)
lduw [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5592
nop
RET5592:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5593: !_ST_BINIT [3] (maybe <- 0x28000ef) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P5594: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5594
nop
RET5594:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5595: !_LDD [10] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5596: !_PREFETCH [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 1

P5597: !_ST [13] (maybe <- 0x42000094) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]

P5598: !_MEMBAR (FP)

P5599: !_BST [15] (maybe <- 0x42000095) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5600: !_MEMBAR (FP)
membar #StoreLoad

P5601: !_REPLACEMENT [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+12], %l3
st %l3, [%i3+12]
add %i3, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P5602: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 22

P5603: !_ST_BINIT [8] (maybe <- 0x28000f0) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P5604: !_MEMBAR (Int)
membar #StoreLoad

P5605: !_CASX [0] (maybe <- 0x28000f1) (Int)
ldx [%i0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i0], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P5606: !_ST [23] (maybe <- 0x28000f3) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5607: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P5608: !_LD [3] (Int)
lduw [%i1 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P5609: !_MEMBAR (FP)
membar #StoreLoad

P5610: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P5611: !_MEMBAR (FP)

P5612: !_DWST [20] (maybe <- 0x28000f4) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5612
nop
RET5612:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5613: !_DWST_BINIT [21] (maybe <- 0x28000f5) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5613
nop
RET5613:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5614: !_MEMBAR (Int)
membar #StoreLoad

P5615: !_DWLD [1] (Int)
ldx [%i0 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P5616: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 18

P5617: !_LDD [1] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5618: !_MEMBAR (FP)
membar #StoreLoad

P5619: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P5620: !_MEMBAR (FP)

P5621: !_DWST_BINIT [4] (maybe <- 0x28000f7) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i1 + 0] %asi
add   %l4, 1, %l4

P5622: !_MEMBAR (Int)

P5623: !_BST [15] (maybe <- 0x42000098) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5624: !_MEMBAR (FP)
membar #StoreLoad

P5625: !_CASX [4] (maybe <- 0x28000f9) (Int)
ldx [%i1], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P5626: !_DWST_BINIT [3] (maybe <- 0x28000fb) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i1 + 0] %asi
add   %l4, 1, %l4

P5627: !_MEMBAR (Int)
membar #StoreLoad

P5628: !_SWAP [0] (maybe <- 0x28000fd) (Int)
mov %l4, %o5
swap  [%i0 + 0], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P5629: !_PREFETCH [8] (Int)
prefetch [%i3 + 12], 0

P5630: !_CASX [6] (maybe <- 0x28000fe) (Int)
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P5631: !_SWAP [22] (maybe <- 0x2800100) (Int) (Branch target of P5480)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4
ba P5632
nop

TARGET5480:
ba RET5480
nop


P5632: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 20

P5633: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P5634: !_MEMBAR (FP) (Branch target of P5445)
ba P5635
nop

TARGET5445:
ba RET5445
nop


P5635: !_BSTC [0] (maybe <- 0x4200009b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5636: !_MEMBAR (FP)
membar #StoreLoad

P5637: !_LD [14] (Int)
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P5638: !_DWLD [4] (Int) (LE)
wr %g0, 0x88, %asi
ldxa [%i1 + 0] %asi, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(upper) -> %o0(upper)
or %o5, %g0, %o0

P5639: !_MEMBAR (FP)
membar #StoreLoad

P5640: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P5641: !_MEMBAR (FP)

P5642: !_ST [13] (maybe <- 0x4200009e) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]

P5643: !_DWST [22] (maybe <- 0x4200009f) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P5644: !_DWST_BINIT [0] (maybe <- 0x2800101) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P5645: !_MEMBAR (Int)
membar #StoreLoad

P5646: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P5647: !_MEMBAR (FP)

P5648: !_DWST [20] (maybe <- 0x2800103) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P5649: !_CAS [11] (maybe <- 0x2800104) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5650: !_DWST_BINIT [17] (maybe <- 0x2800105) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P5651: !_MEMBAR (Int)
membar #StoreLoad

P5652: !_ST [22] (maybe <- 0x2800106) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P5653: !_ST_BINIT [18] (maybe <- 0x2800107) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P5654: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5654
nop
RET5654:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5655: !_REPLACEMENT [4] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5655
nop
RET5655:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5656: !_REPLACEMENT [18] (Int)
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P5657: !_ST_BINIT [3] (maybe <- 0x2800108) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P5658: !_MEMBAR (Int)
membar #StoreLoad

P5659: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P5660: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5660
nop
RET5660:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5661: !_SWAP [11] (maybe <- 0x2800109) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3
swap  [%i2 + 12], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P5662: !_MEMBAR (FP)
membar #StoreLoad

P5663: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P5664: !_MEMBAR (FP)

P5665: !_DWST [6] (maybe <- 0x280010a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P5666: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5667: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P5668: !_LD [7] (FP)
ld [%i2 + 4], %f13
! 1 addresses covered

P5669: !_MEMBAR (FP)
membar #StoreLoad

P5670: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P5671: !_MEMBAR (FP)

P5672: !_DWST_BINIT [7] (maybe <- 0x280010c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P5673: !_MEMBAR (Int)
membar #StoreLoad

P5674: !_DWST_BINIT [22] (maybe <- 0x280010e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P5675: !_MEMBAR (Int)
membar #StoreLoad

P5676: !_CASX [14] (maybe <- 0x2800110) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l6
mov %l4, %o4
casx [%l7], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P5677: !_SWAP [21] (maybe <- 0x2800111) (Int)
mov %l4, %o0
swap  [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5678: !_REPLACEMENT [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P5679: !_LD [21] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduwa [%i3 + 0] %asi, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0

P5680: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P5681: !_CASX [21] (maybe <- 0x2800112) (Int) (LE)
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l3, %o5, %l6
srlx %l6, 8, %l6
sllx %l3, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3 
sethi %hi(0xffff0000), %o5
srlx %l3, 16, %l6
andn %l6, %o5, %l6
andn %l3, %o5, %l3
sllx %l3, 16, %l3
or %l3, %l6, %l3 
srlx %l3, 32, %l6
sllx %l3, 32, %l3
or %l3, %l6, %l6 
wr %g0, 0x88, %asi
ldxa [%i3] %asi, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
mov %l7, %o5
mov  %l6, %l7
casxa [%i3] %asi, %o5, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
add  %l4, 1, %l4

P5682: !_CASX [3] (maybe <- 0x2800114) (Int)
ldx [%i1], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %o5
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i1], %o5, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P5683: !_ST_BINIT [21] (maybe <- 0x2800116) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5684: !_MEMBAR (Int)
membar #StoreLoad

P5685: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P5686: !_MEMBAR (FP)

P5687: !_BST [11] (maybe <- 0x420000a1) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5688: !_MEMBAR (FP)
membar #StoreLoad

P5689: !_LD [13] (Int)
lduw [%i3 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P5690: !_DWST [15] (maybe <- 0x2800117) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P5691: !_MEMBAR (FP)
membar #StoreLoad

P5692: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P5693: !_MEMBAR (FP)

P5694: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P5695: !_MEMBAR (FP)

P5696: !_CAS [6] (maybe <- 0x2800119) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P5697: !_CASX [5] (maybe <- 0x280011a) (Int)
add %i1, 8, %l6
ldx [%l6], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l3
mov %l4, %o4
casx [%l6], %l3, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P5698: !_MEMBAR (FP)

P5699: !_BSTC [18] (maybe <- 0x420000a4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5700: !_MEMBAR (FP)
membar #StoreLoad

P5701: !_LDD [16] (Int) (Branch target of P5367)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
ba P5702
nop

TARGET5367:
ba RET5367
nop


P5702: !_MEMBAR (FP)

P5703: !_BST [14] (maybe <- 0x420000a7) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5704: !_MEMBAR (FP)
membar #StoreLoad

P5705: !_DWST_BINIT [8] (maybe <- 0x280011b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P5706: !_MEMBAR (Int) (Branch target of P5982)
membar #StoreLoad
ba P5707
nop

TARGET5982:
ba RET5982
nop


P5707: !_CAS [23] (maybe <- 0x280011c) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P5708: !_MEMBAR (FP)
membar #StoreLoad

P5709: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P5710: !_MEMBAR (FP)

P5711: !_BST [2] (maybe <- 0x420000aa) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5712: !_MEMBAR (FP)
membar #StoreLoad

P5713: !_CASX [16] (maybe <- 0x280011d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P5714: !_CAS [20] (maybe <- 0x280011f) (Int) (Branch target of P5103)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P5715
nop

TARGET5103:
ba RET5103
nop


P5715: !_LD [4] (Int)
lduw [%i1 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P5716: !_SWAP [7] (maybe <- 0x2800120) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P5717: !_PREFETCH [8] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 3

P5718: !_MEMBAR (FP)

P5719: !_BST [11] (maybe <- 0x420000ad) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5720: !_MEMBAR (FP)
membar #StoreLoad

P5721: !_LDD [2] (Int) (CBR)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5721
nop
RET5721:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5722: !_ST [9] (maybe <- 0x2800121) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P5723: !_REPLACEMENT [2] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P5724: !_DWST [16] (maybe <- 0x2800122) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P5725: !_CASX [5] (maybe <- 0x2800124) (Int)
add %i1, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P5726: !_ST_BINIT [12] (maybe <- 0x2800125) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P5727: !_MEMBAR (Int)
membar #StoreLoad

P5728: !_DWLD [7] (Int) (CBR)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %l6
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5728
nop
RET5728:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5729: !_DWST_BINIT [5] (maybe <- 0x2800126) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5729
nop
RET5729:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5730: !_MEMBAR (Int)
membar #StoreLoad

P5731: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 21

P5732: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+0], %l7
st %l7, [%i2+0]
add %i2, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P5733: !_ST [15] (maybe <- 0x2800127) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P5734: !_MEMBAR (FP)

P5735: !_BST [3] (maybe <- 0x420000b0) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5736: !_MEMBAR (FP)
membar #StoreLoad

P5737: !_CAS [0] (maybe <- 0x2800128) (Int)
lduw [%i0], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i0], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5738: !_ST_BINIT [16] (maybe <- 0x2800129) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5739: !_MEMBAR (Int)
membar #StoreLoad

P5740: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P5741: !_MEMBAR (FP)

P5742: !_ST [9] (maybe <- 0x280012a) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P5743: !_CAS [14] (maybe <- 0x280012b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%l3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5744: !_CAS [11] (maybe <- 0x280012c) (Int)
add %i2, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%l3], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5745: !_CASX [2] (maybe <- 0x280012d) (Int)
add %i0, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
add  %l4, 1, %l4

P5746: !_ST [18] (maybe <- 0x280012e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P5747: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 28

P5748: !_MEMBAR (FP)

P5749: !_BSTC [0] (maybe <- 0x420000b3) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5750: !_MEMBAR (FP)
membar #StoreLoad

P5751: !_DWLD [2] (Int)
ldx [%i0 + 8], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P5752: !_MEMBAR (FP)

P5753: !_BSTC [21] (maybe <- 0x420000b6) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5754: !_MEMBAR (FP)
membar #StoreLoad

P5755: !_CASX [23] (maybe <- 0x280012f) (Int)
add %i3, 8, %o5
ldx [%o5], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l7
mov %l4, %o1
casx [%o5], %l7, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P5756: !_CASX [16] (maybe <- 0x2800130) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l7
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i2], %l7, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P5757: !_ST_BINIT [22] (maybe <- 0x2800132) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5758: !_MEMBAR (Int)
membar #StoreLoad

P5759: !_CASX [7] (maybe <- 0x2800133) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l6
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i3], %l6, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P5760: !_DWLD [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P5761: !_DWLD [1] (Int)
ldx [%i0 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P5762: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5763: !_MEMBAR (FP) (Branch target of P5891)
ba P5764
nop

TARGET5891:
ba RET5891
nop


P5764: !_BST [6] (maybe <- 0x420000b9) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5765: !_MEMBAR (FP)
membar #StoreLoad

P5766: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P5767: !_MEMBAR (FP)

P5768: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

P5769: !_DWST_BINIT [19] (maybe <- 0x2800135) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5770: !_MEMBAR (Int)
membar #StoreLoad

P5771: !_SWAP [16] (maybe <- 0x2800137) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5772: !_SWAP [22] (maybe <- 0x2800138) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 4], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5773: !_ST [16] (maybe <- 0x2800139) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5774: !_DWST_BINIT [19] (maybe <- 0x280013a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P5775: !_MEMBAR (Int)
membar #StoreLoad

P5776: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P5777: !_DWST [2] (maybe <- 0x420000bc) (FP)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i0 + 8]

P5778: !_DWST_BINIT [4] (maybe <- 0x280013c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4

P5779: !_MEMBAR (Int)
membar #StoreLoad

P5780: !_LDD [6] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P5781: !_LD [2] (Int)
lduw [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P5782: !_ST [0] (maybe <- 0x280013e) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P5783: !_MEMBAR (FP)

P5784: !_BSTC [23] (maybe <- 0x420000bd) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5785: !_MEMBAR (FP)
membar #StoreLoad

P5786: !_ST_BINIT [2] (maybe <- 0x280013f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P5787: !_MEMBAR (Int)
membar #StoreLoad

P5788: !_CAS [14] (maybe <- 0x2800140) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5789: !_MEMBAR (FP)
membar #StoreLoad

P5790: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P5791: !_MEMBAR (FP)

P5792: !_DWST [3] (maybe <- 0x2800141) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i1 + 0]
add   %l4, 1, %l4

P5793: !_MEMBAR (FP)

P5794: !_BSTC [1] (maybe <- 0x420000c0) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5795: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5795
nop
RET5795:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5796: !_CASX [11] (maybe <- 0x2800143) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P5797: !_SWAP [15] (maybe <- 0x2800144) (Int)
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P5798: !_ST_BINIT [22] (maybe <- 0x2800145) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5799: !_MEMBAR (Int)
membar #StoreLoad

P5800: !_CAS [7] (maybe <- 0x2800146) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P5801: !_DWST_BINIT [1] (maybe <- 0x2800147) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P5802: !_MEMBAR (Int) (Branch target of P5721)
membar #StoreLoad
ba P5803
nop

TARGET5721:
ba RET5721
nop


P5803: !_CAS [17] (maybe <- 0x2800149) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P5804: !_MEMBAR (FP)

P5805: !_BSTC [13] (maybe <- 0x420000c3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5806: !_MEMBAR (FP) (Branch target of P5819)
membar #StoreLoad
ba P5807
nop

TARGET5819:
ba RET5819
nop


P5807: !_DWST_BINIT [5] (maybe <- 0x280014a) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i1 + 8] %asi 
add   %l4, 1, %l4

P5808: !_MEMBAR (Int) (Branch target of P5913)
membar #StoreLoad
ba P5809
nop

TARGET5913:
ba RET5913
nop


P5809: !_ST_BINIT [21] (maybe <- 0x280014b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5810: !_MEMBAR (Int)
membar #StoreLoad

P5811: !_REPLACEMENT [2] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P5812: !_CAS [8] (maybe <- 0x280014c) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P5813: !_LD [14] (Int) (Branch target of P5404)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
ba P5814
nop

TARGET5404:
ba RET5404
nop


P5814: !_ST [17] (maybe <- 0x280014d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5815: !_MEMBAR (FP)

P5816: !_BST [6] (maybe <- 0x420000c6) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5817: !_MEMBAR (FP)

P5818: !_BST [18] (maybe <- 0x420000c9) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5819: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5819
nop
RET5819:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5820: !_SWAP [9] (maybe <- 0x280014e) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5821: !_CASX [13] (maybe <- 0x280014f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %o5
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P5822: !_ST [7] (maybe <- 0x2800151) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5823: !_REPLACEMENT [3] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P5824: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5825: !_MEMBAR (FP)
membar #StoreLoad

P5826: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P5827: !_MEMBAR (FP)

P5828: !_ST_BINIT [8] (maybe <- 0x2800152) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P5829: !_MEMBAR (Int)
membar #StoreLoad

P5830: !_REPLACEMENT [9] (Int) (Branch target of P5594)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
ba P5831
nop

TARGET5594:
ba RET5594
nop


P5831: !_ST_BINIT [6] (maybe <- 0x2800153) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5832: !_MEMBAR (Int)
membar #StoreLoad

P5833: !_REPLACEMENT [10] (Int)
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P5834: !_SWAP [17] (maybe <- 0x2800154) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5835: !_MEMBAR (FP)

P5836: !_BST [0] (maybe <- 0x420000cc) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5837: !_MEMBAR (FP)
membar #StoreLoad

P5838: !_DWLD [0] (Int) (LE)
wr %g0, 0x88, %asi
ldxa [%i0 + 0] %asi, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l7
or %l7, %o3, %o3
! move %o5(upper) -> %o4(upper)
or %o5, %g0, %o4

P5839: !_ST [8] (maybe <- 0x2800155) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5840: !_ST [17] (maybe <- 0x2800156) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5841: !_CASX [3] (maybe <- 0x2800157) (Int)
ldx [%i1], %l6
! move %l6(upper) -> %o4(lower)
srlx %o4, 32, %o4
sllx %o4, 32, %o4
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P5842: !_CASX [17] (maybe <- 0x2800159) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
sllx %l3, 32, %l3
wr %g0, 0x88, %asi
add %i3, 8, %o5
ldxa [%o5] %asi, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
! move %l6(upper) -> %o2(upper)
or %l6, %g0, %o2
mov  %l6, %l7
mov  %l3, %l6
casxa [%o5] %asi, %l7, %l6
! move %l6(lower) -> %o2(lower)
srlx %o2, 32, %o2
sllx %o2, 32, %o2
srl %l6, 0, %l7
or %l7, %o2, %o2
! move %l6(upper) -> %o3(upper)
or %l6, %g0, %o3
add  %l4, 1, %l4

P5843: !_MEMBAR (FP)

P5844: !_BST [19] (maybe <- 0x420000cf) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5845: !_MEMBAR (FP)
membar #StoreLoad

P5846: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 27

P5847: !_MEMBAR (FP)

P5848: !_BSTC [2] (maybe <- 0x420000d2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5849: !_MEMBAR (FP)
membar #StoreLoad

P5850: !_PREFETCH [18] (Int)
prefetch [%i3 + 0], 22

P5851: !_CAS [21] (maybe <- 0x280015a) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
srlx %o3, 32, %o3
sllx %o3, 32, %o3
or %l6, %o3, %o3
mov %l4, %o4
cas [%i3], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5852: !_ST [7] (maybe <- 0x280015b) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5853: !_MEMBAR (FP)

P5854: !_BSTC [1] (maybe <- 0x420000d5) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5855: !_MEMBAR (FP)
membar #StoreLoad

P5856: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P5857: !_MEMBAR (FP)

P5858: !_CASX [7] (maybe <- 0x280015c) (Int)
ldx [%i2], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P5859: !_LD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P5860: !_LDD [9] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5861: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P5862: !_REPLACEMENT [16] (Int)
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P5863: !_ST [17] (maybe <- 0x280015e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P5864: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 4

P5865: !_SWAP [13] (maybe <- 0x280015f) (Int)
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5866: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 0

P5867: !_DWST [19] (maybe <- 0x2800160) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P5868: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 0

P5869: !_ST_BINIT [0] (maybe <- 0x2800162) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P5870: !_MEMBAR (Int)

P5871: !_BSTC [15] (maybe <- 0x420000d8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5872: !_MEMBAR (FP) (Branch target of P5729)
membar #StoreLoad
ba P5873
nop

TARGET5729:
ba RET5729
nop


P5873: !_DWST [5] (maybe <- 0x2800163) (Int) (CBR)
mov %l4, %l6 
stx %l6, [%i1 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5873
nop
RET5873:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P5874: !_SWAP [1] (maybe <- 0x2800164) (Int)
mov %l4, %o5
swap  [%i0 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P5875: !_ST_BINIT [22] (maybe <- 0x2800165) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P5876: !_MEMBAR (Int)
membar #StoreLoad

P5877: !_ST [5] (maybe <- 0x2800166) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P5878: !_MEMBAR (FP)
membar #StoreLoad

P5879: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P5880: !_MEMBAR (FP)

P5881: !_BSTC [3] (maybe <- 0x420000db) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5882: !_MEMBAR (FP)
membar #StoreLoad

P5883: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P5884: !_MEMBAR (FP)

P5885: !_CAS [13] (maybe <- 0x2800167) (Int) (Branch target of P5919)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4
ba P5886
nop

TARGET5919:
ba RET5919
nop


P5886: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P5887: !_LDD [8] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P5888: !_MEMBAR (FP)

P5889: !_BST [3] (maybe <- 0x420000de) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5890: !_MEMBAR (FP)
membar #StoreLoad

P5891: !_DWST_BINIT [5] (maybe <- 0x2800168) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i1 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5891
nop
RET5891:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5892: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET5892
nop
RET5892:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P5893: !_PREFETCH [15] (Int)
prefetch [%i3 + 0], 27

P5894: !_CAS [21] (maybe <- 0x2800169) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%i3], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5895: !_ST [1] (maybe <- 0x280016a) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i0 + 4] %asi
add   %l4, 1, %l4

P5896: !_MEMBAR (FP)

P5897: !_BST [2] (maybe <- 0x420000e1) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P5898: !_MEMBAR (FP)
membar #StoreLoad

P5899: !_ST [4] (maybe <- 0x280016b) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P5900: !_CAS [17] (maybe <- 0x280016c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5901: !_DWST [17] (maybe <- 0x280016d) (Int)
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P5902: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l3
or %l3, %o3, %o3

P5903: !_LD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P5904: !_SWAP [4] (maybe <- 0x280016e) (Int)
mov %l4, %l7
swap  [%i1 + 4], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5905: !_SWAP [4] (maybe <- 0x280016f) (Int)
mov %l4, %o0
swap  [%i1 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P5906: !_MEMBAR (FP)
membar #StoreLoad

P5907: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P5908: !_MEMBAR (FP)

P5909: !_BST [5] (maybe <- 0x420000e4) (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #3
!Logical addr: 5 

sethi %hi(0x200000), %l7
sub   %i1, %l7, %i1
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5910: !_MEMBAR (FP)
membar #StoreLoad

P5911: !_CASX [22] (maybe <- 0x2800170) (Int)
ldx [%i2], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4

P5912: !_ST [13] (maybe <- 0x2800172) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P5913: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5913
nop
RET5913:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P5914: !_BSTC [3] (maybe <- 0x420000e7) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5915: !_MEMBAR (FP)
membar #StoreLoad

P5916: !_LD [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P5917: !_DWST_BINIT [14] (maybe <- 0x2800173) (Int) (Branch target of P5592)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4
ba P5918
nop

TARGET5592:
ba RET5592
nop


P5918: !_MEMBAR (Int)
membar #StoreLoad

P5919: !_ST [0] (maybe <- 0x2800174) (Int) (CBR) (Branch target of P5014)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5919
nop
RET5919:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0

ba P5920
nop

TARGET5014:
ba RET5014
nop


P5920: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 2

P5921: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 4

P5922: !_CAS [20] (maybe <- 0x2800175) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %o3
mov %o3, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l7
or %l7, %o3, %o3
add   %l4, 1, %l4

P5923: !_SWAP [2] (maybe <- 0x2800176) (Int)
mov %l4, %o4
swap  [%i0 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5924: !_SWAP [15] (maybe <- 0x2800177) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5
swap  [%i3 + 0], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P5925: !_DWST [17] (maybe <- 0x2800178) (Int)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P5926: !_ST [17] (maybe <- 0x420000ea) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 12 ]

P5927: !_MEMBAR (FP)
membar #StoreLoad

P5928: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P5929: !_MEMBAR (FP)

P5930: !_ST_BINIT [21] (maybe <- 0x2800179) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P5931: !_MEMBAR (Int)

P5932: !_BSTC [14] (maybe <- 0x420000eb) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5933: !_MEMBAR (FP)
membar #StoreLoad

P5934: !_CASX [21] (maybe <- 0x280017a) (Int)
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P5935: !_PREFETCH [8] (Int) (Branch target of P5244)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 18
ba P5936
nop

TARGET5244:
ba RET5244
nop


P5936: !_ST_BINIT [10] (maybe <- 0x280017c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P5937: !_MEMBAR (Int)
membar #StoreLoad

P5938: !_ST [20] (maybe <- 0x280017d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P5939: !_DWLD [16] (FP) (Branch target of P5728)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f5
fmovs %f19, %f6
ba P5940
nop

TARGET5728:
ba RET5728
nop


P5940: !_SWAP [13] (maybe <- 0x280017e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P5941: !_ST [10] (maybe <- 0x280017f) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P5942: !_MEMBAR (FP)

P5943: !_BSTC [8] (maybe <- 0x420000ee) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5944: !_MEMBAR (FP)
membar #StoreLoad

P5945: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5946: !_ST_BINIT [17] (maybe <- 0x2800180) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P5947: !_MEMBAR (Int) (Branch target of P5576)
membar #StoreLoad
ba P5948
nop

TARGET5576:
ba RET5576
nop


P5948: !_DWST [5] (maybe <- 0x2800181) (Int)
mov %l4, %o5 
stx %o5, [%i1 + 8]
add   %l4, 1, %l4

P5949: !_DWST [4] (maybe <- 0x2800182) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %l7
add   %l4, 1, %l4
or %l7, %l4, %o5
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %o5, %l3, %l7
srlx %l7, 8, %l7
sllx %o5, 8, %o5
and %o5, %l3, %o5
or %o5, %l7, %o5 
sethi %hi(0xffff0000), %l3
srlx %o5, 16, %l7
andn %l7, %l3, %l7
andn %o5, %l3, %o5
sllx %o5, 16, %o5
or %o5, %l7, %o5 
srlx %o5, 32, %l7
sllx %o5, 32, %o5
or %o5, %l7, %l7 
stxa %l7, [%i1 + 0 ] %asi
add   %l4, 1, %l4

P5950: !_SWAP [14] (maybe <- 0x2800184) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P5951: !_MEMBAR (FP)

P5952: !_BST [21] (maybe <- 0x420000f1) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5953: !_MEMBAR (FP)

P5954: !_BSTC [19] (maybe <- 0x420000f4) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P5955: !_MEMBAR (FP)
membar #StoreLoad

P5956: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 0

P5957: !_CASX [23] (maybe <- 0x2800185) (Int)
add %i3, 8, %o5
ldx [%o5], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l7
mov %l4, %o0
casx [%o5], %l7, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P5958: !_REPLACEMENT [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+4], %l3
st %l3, [%i3+4]
add %i3, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]

P5959: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 4

P5960: !_CASX [14] (maybe <- 0x2800186) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l6
mov %l4, %o2
casx [%l7], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P5961: !_LD [2] (Int)
lduw [%i0 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P5962: !_CASX [8] (maybe <- 0x2800187) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P5963: !_MEMBAR (FP) (Branch target of P5555)
ba P5964
nop

TARGET5555:
ba RET5555
nop


P5964: !_BSTC [21] (maybe <- 0x420000f7) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5965: !_MEMBAR (FP)
membar #StoreLoad

P5966: !_DWST_BINIT [13] (maybe <- 0x2800188) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P5967: !_MEMBAR (Int)
membar #StoreLoad

P5968: !_CAS [3] (maybe <- 0x280018a) (Int)
lduw [%i1], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%i1], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P5969: !_MEMBAR (FP)
membar #StoreLoad

P5970: !_BLD [8] (FP) (Branch target of P5366)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9
ba P5971
nop

TARGET5366:
ba RET5366
nop


P5971: !_MEMBAR (FP)

P5972: !_DWLD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l6
or %l6, %o1, %o1

P5973: !_DWST_BINIT [0] (maybe <- 0x280018b) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i0 + 0] %asi
add   %l4, 1, %l4

P5974: !_MEMBAR (Int)
membar #StoreLoad

P5975: !_DWLD [2] (Int)
ldx [%i0 + 8], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P5976: !_REPLACEMENT [12] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P5977: !_LDD [19] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P5978: !_ST_BINIT [1] (maybe <- 0x280018d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P5979: !_MEMBAR (Int)
membar #StoreLoad

P5980: !_LDD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P5981: !_SWAP [12] (maybe <- 0x280018e) (Int)
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5982: !_ST [23] (maybe <- 0x280018f) (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET5982
nop
RET5982:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P5983: !_CASX [0] (maybe <- 0x2800190) (Int)
ldx [%i0], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i0], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P5984: !_MEMBAR (FP)
membar #StoreLoad

P5985: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P5986: !_MEMBAR (FP)

P5987: !_DWLD [1] (Int) (LE)
wr %g0, 0x88, %asi
ldxa [%i0 + 0] %asi, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %o5
or %o5, %o1, %o1
! move %l3(upper) -> %o2(upper)
or %l3, %g0, %o2

P5988: !_ST_BINIT [7] (maybe <- 0x2800192) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i2 + 4] %asi
add   %l4, 1, %l4

P5989: !_MEMBAR (Int) (LE)
membar #StoreLoad

P5990: !_DWST_BINIT [22] (maybe <- 0x2800193) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P5991: !_MEMBAR (Int)
membar #StoreLoad

P5992: !_CAS [21] (maybe <- 0x2800195) (Int)
lduw [%i3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
srlx %o2, 32, %o2
sllx %o2, 32, %o2
or %o5, %o2, %o2
mov %l4, %o3
cas [%i3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P5993: !_MEMBAR (FP)

P5994: !_BST [16] (maybe <- 0x420000fa) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P5995: !_MEMBAR (FP) (Branch target of P5654)
ba P5996
nop

TARGET5654:
ba RET5654
nop


P5996: !_BST [3] (maybe <- 0x420000fd) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P5997: !_MEMBAR (FP) (Branch target of P5613)
membar #StoreLoad
ba P5998
nop

TARGET5613:
ba RET5613
nop


P5998: !_CAS [14] (maybe <- 0x2800196) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%l7], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P5999: !_LD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6000: !_ST [19] (maybe <- 0x2800197) (Int) (Branch target of P5511)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4
ba P6001
nop

TARGET5511:
ba RET5511
nop


P6001: !_ST_BINIT [14] (maybe <- 0x2800198) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P6002: !_MEMBAR (Int)
membar #StoreLoad

P6003: !_CASX [17] (maybe <- 0x2800199) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l6
mov %l4, %o1
casx [%l7], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P6004: !_DWST_BINIT [3] (maybe <- 0x280019a) (Int) (LE) (Branch target of P5227)
wr %g0, 0xea, %asi
sllx %l4, 32, %l6
add   %l4, 1, %l4
or %l6, %l4, %l7
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l7, %o5, %l6
srlx %l6, 8, %l6
sllx %l7, 8, %l7
and %l7, %o5, %l7
or %l7, %l6, %l7 
sethi %hi(0xffff0000), %o5
srlx %l7, 16, %l6
andn %l6, %o5, %l6
andn %l7, %o5, %l7
sllx %l7, 16, %l7
or %l7, %l6, %l7 
srlx %l7, 32, %l6
sllx %l7, 32, %l7
or %l7, %l6, %l6 
stxa %l6, [%i1 + 0 ] %asi
add   %l4, 1, %l4
ba P6005
nop

TARGET5227:
ba RET5227
nop


P6005: !_MEMBAR (Int) (LE)
membar #StoreLoad

P6006: !_LD [1] (FP)
ld [%i0 + 4], %f13
! 1 addresses covered

P6007: !_PREFETCH [11] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 0

P6008: !_ST_BINIT [20] (maybe <- 0x280019c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P6009: !_MEMBAR (Int)
membar #StoreLoad

P6010: !_DWLD [3] (Int)
ldx [%i1 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P6011: !_MEMBAR (FP)

P6012: !_BST [15] (maybe <- 0x42000100) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6013: !_MEMBAR (FP) (Loop exit)
membar #StoreLoad
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
!--

sethi %hi(0x600000), %l3
add   %i1, %l3, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_5_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_5_0
nop

P6014: !_MEMBAR (Int)
membar #StoreLoad

END_NODES5: ! Test instruction sequence for CPU 5 ends
sethi %hi(0xdead0e0f), %l6
or    %l6, %lo(0xdead0e0f), %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
sethi %hi(0xdead0e0f), %l6
or    %l6, %lo(0xdead0e0f), %l6
stw %l6, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func6:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %l3
or    %l3, %lo(0xdeadbee0), %l3
stw   %l3, [%i5]
sethi %hi(0xdeadbee1), %l3
or    %l3, %lo(0xdeadbee1), %l3
stw   %l3, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x06deade1), %l3
or    %l3, %lo(0x06deade1), %l3
stw %l3, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x3000001), %l4
or    %l4, %lo(0x3000001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x42800001), %l3
or    %l3, %lo(0x42800001), %l3
stw %l3, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x37000000), %l3
or    %l3, %lo(0x37000000), %l3
stw %l3, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0xb2^4
sethi %hi(0xb2), %l0
or    %l0, %lo(0xb2), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES6: ! Test instruction sequence for ISTREAM 6 begins

P6015: !_CAS [6] (maybe <- 0x3000001) (Int) (Loop entry) (Branch target of P6310)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_6_0:
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%i2], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4
ba P6016
nop

TARGET6310:
ba RET6310
nop


P6016: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P6017: !_DWST [17] (maybe <- 0x3000002) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P6018: !_SWAP [10] (maybe <- 0x3000003) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %o2, %o5, %l3
srl %l3, 8, %l3
sll %o2, 8, %o2
and %o2, %o5, %o2
or %o2, %l3, %o2
srl %o2, 16, %l3
sll %o2, 16, %o2
srl %o2, 0, %o2
or %o2, %l3, %o2
swapa  [%i2 + 4] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6019: !_DWST [3] (maybe <- 0x3000004) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i1 + 0]
add   %l4, 1, %l4

P6020: !_CASX [4] (maybe <- 0x3000006) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P6021: !_LD [11] (FP)
ld [%i2 + 12], %f0
! 1 addresses covered

P6022: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 20

P6023: !_DWLD [15] (Int) (LE)
wr %g0, 0x88, %asi
ldxa [%i3 + 0] %asi, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(upper) -> %o0(upper)
or %l7, %g0, %o0

P6024: !_LD [16] (Int)
lduw [%i3 + 4], %l3
! move %l3(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
or %l3, %o0, %o0

P6025: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P6026: !_REPLACEMENT [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P6027: !_LDD [6] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P6028: !_MEMBAR (FP)

P6029: !_BST [8] (maybe <- 0x42800001) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6030: !_MEMBAR (FP)
membar #StoreLoad

P6031: !_ST_BINIT [17] (maybe <- 0x3000008) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P6032: !_MEMBAR (Int)

P6033: !_BST [19] (maybe <- 0x42800004) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6034: !_MEMBAR (FP)
membar #StoreLoad

P6035: !_DWST_BINIT [6] (maybe <- 0x3000009) (Int) (CBR) (Branch target of P6762)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6035
nop
RET6035:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P6036
nop

TARGET6762:
ba RET6762
nop


P6036: !_MEMBAR (Int)
membar #StoreLoad

P6037: !_SWAP [8] (maybe <- 0x300000b) (Int)
mov %l4, %o3
swap  [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6038: !_SWAP [0] (maybe <- 0x300000c) (Int)
mov %l4, %l7
swap  [%i0 + 0], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P6039: !_ST_BINIT [4] (maybe <- 0x300000d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P6040: !_MEMBAR (Int)

P6041: !_BSTC [7] (maybe <- 0x42800007) (FP) (Branch target of P6421)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P6042
nop

TARGET6421:
ba RET6421
nop


P6042: !_MEMBAR (FP)
membar #StoreLoad

P6043: !_ST_BINIT [16] (maybe <- 0x300000e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6044: !_MEMBAR (Int)
membar #StoreLoad

P6045: !_LD [2] (Int)
lduw [%i0 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6046: !_SWAP [3] (maybe <- 0x300000f) (Int) (CBR)
mov %l4, %l3
swap  [%i1 + 0], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6046
nop
RET6046:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6047: !_LDD [8] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6048: !_ST [13] (maybe <- 0x3000010) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6049: !_DWST_BINIT [3] (maybe <- 0x3000011) (Int) (Branch target of P6172)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i1 + 0] %asi
add   %l4, 1, %l4
ba P6050
nop

TARGET6172:
ba RET6172
nop


P6050: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6050
nop
RET6050:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6051: !_SWAP [14] (maybe <- 0x3000013) (Int)
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P6052: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6052
nop
RET6052:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6053: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P6054: !_MEMBAR (FP)

P6055: !_LDD [8] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 8] %asi, %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6056: !_ST [18] (maybe <- 0x3000014) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6057: !_SWAP [12] (maybe <- 0x3000015) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P6058: !_SWAP [19] (maybe <- 0x3000016) (Int) (Branch target of P6183)
mov %l4, %o2
swap  [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4
ba P6059
nop

TARGET6183:
ba RET6183
nop


P6059: !_SWAP [3] (maybe <- 0x3000017) (Int)
mov %l4, %o5
swap  [%i1 + 0], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P6060: !_ST_BINIT [17] (maybe <- 0x3000018) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P6061: !_MEMBAR (Int)
membar #StoreLoad

P6062: !_BLD [2] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6062
nop
RET6062:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6063: !_MEMBAR (FP)

P6064: !_LD [1] (Int) (CBR)
lduw [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6064
nop
RET6064:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6065: !_LDD [14] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P6066: !_DWLD [1] (Int)
ldx [%i0 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6067: !_DWST [2] (maybe <- 0x3000019) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l3
srl %l3, 8, %l3
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l3, %o5
srl %o5, 16, %l3
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l3, %o5
sllx %o5, 32, %o5 
stxa %o5, [%i0 + 8 ] %asi
add   %l4, 1, %l4

P6068: !_MEMBAR (FP)

P6069: !_BSTC [5] (maybe <- 0x4280000a) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6069
nop
RET6069:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6070: !_MEMBAR (FP)
membar #StoreLoad

P6071: !_DWST [14] (maybe <- 0x300001a) (Int)
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P6072: !_DWST [2] (maybe <- 0x300001b) (Int)
mov %l4, %l3 
stx %l3, [%i0 + 8]
add   %l4, 1, %l4

P6073: !_DWST_BINIT [21] (maybe <- 0x300001c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P6074: !_MEMBAR (Int)
membar #StoreLoad

P6075: !_ST_BINIT [22] (maybe <- 0x300001e) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6075
nop
RET6075:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6076: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6076
nop
RET6076:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6077: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 21

P6078: !_MEMBAR (FP)
membar #StoreLoad

P6079: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P6080: !_MEMBAR (FP) (Branch target of P6466)
ba P6081
nop

TARGET6466:
ba RET6466
nop


P6081: !_ST_BINIT [22] (maybe <- 0x300001f) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6082: !_MEMBAR (Int)
membar #StoreLoad

P6083: !_DWLD [13] (Int)
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P6084: !_ST [21] (maybe <- 0x3000020) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P6085: !_MEMBAR (FP) (Branch target of P6222)
membar #StoreLoad
ba P6086
nop

TARGET6222:
ba RET6222
nop


P6086: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P6087: !_MEMBAR (FP)

P6088: !_DWST_BINIT [17] (maybe <- 0x3000021) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

P6089: !_MEMBAR (Int)
membar #StoreLoad

P6090: !_ST [23] (maybe <- 0x4280000d) (FP)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i2 + 12 ]

P6091: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P6092: !_MEMBAR (FP)
membar #StoreLoad

P6093: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P6094: !_MEMBAR (FP)

P6095: !_PREFETCH [21] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 24

P6096: !_SWAP [14] (maybe <- 0x3000022) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6097: !_LD [9] (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ld [%i3 + 0], %f0
! 1 addresses covered

P6098: !_ST_BINIT [8] (maybe <- 0x3000023) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P6099: !_MEMBAR (Int)
membar #StoreLoad

P6100: !_DWST_BINIT [1] (maybe <- 0x3000024) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P6101: !_MEMBAR (Int)
membar #StoreLoad

P6102: !_LD [11] (Int) (CBR)
lduw [%i3 + 12], %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6102
nop
RET6102:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6103: !_LDD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P6104: !_SWAP [12] (maybe <- 0x3000026) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6105: !_DWST [2] (maybe <- 0x3000027) (Int)
mov %l4, %o5 
stx %o5, [%i0 + 8]
add   %l4, 1, %l4

P6106: !_MEMBAR (FP)

P6107: !_BST [7] (maybe <- 0x4280000e) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6108: !_MEMBAR (FP)
membar #StoreLoad

P6109: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P6110: !_MEMBAR (FP)

P6111: !_DWST [19] (maybe <- 0x3000028) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P6112: !_DWST [3] (maybe <- 0x300002a) (Int) (Branch target of P6593)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i1 + 0]
add   %l4, 1, %l4
ba P6113
nop

TARGET6593:
ba RET6593
nop


P6113: !_SWAP [8] (maybe <- 0x300002c) (Int)
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P6114: !_DWST_BINIT [14] (maybe <- 0x300002d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P6115: !_MEMBAR (Int)
membar #StoreLoad

P6116: !_DWST_BINIT [20] (maybe <- 0x300002e) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6116
nop
RET6116:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6117: !_MEMBAR (Int)

P6118: !_BST [6] (maybe <- 0x42800011) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6119: !_MEMBAR (FP)
membar #StoreLoad

P6120: !_DWLD [7] (Int)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6121: !_DWST_BINIT [4] (maybe <- 0x300002f) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i1 + 0] %asi
add   %l4, 1, %l4

P6122: !_MEMBAR (Int)
membar #StoreLoad

P6123: !_ST_BINIT [0] (maybe <- 0x3000031) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P6124: !_MEMBAR (Int)
membar #StoreLoad

P6125: !_LDD [6] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6126: !_MEMBAR (FP)

P6127: !_BSTC [11] (maybe <- 0x42800014) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6128: !_MEMBAR (FP)
membar #StoreLoad

P6129: !_LDD [4] (Int) (CBR) (Branch target of P6116)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6129
nop
RET6129:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P6130
nop

TARGET6116:
ba RET6116
nop


P6130: !_MEMBAR (FP)

P6131: !_BST [22] (maybe <- 0x42800017) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6132: !_MEMBAR (FP)
membar #StoreLoad

P6133: !_CAS [18] (maybe <- 0x3000032) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%i3], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P6134: !_ST_BINIT [2] (maybe <- 0x3000033) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P6135: !_MEMBAR (Int)
membar #StoreLoad

P6136: !_CAS [13] (maybe <- 0x3000034) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P6137: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6138: !_DWST [23] (maybe <- 0x3000035) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l7
srl %l7, 8, %l7
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6
srl %l6, 16, %l7
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l7, %l6
sllx %l6, 32, %l6 
stxa %l6, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P6139: !_DWST [1] (maybe <- 0x3000036) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P6140: !_DWST_BINIT [1] (maybe <- 0x3000038) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P6141: !_MEMBAR (Int)
membar #StoreLoad

P6142: !_BLD [3] (FP)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 3 

sethi %hi(0x200000), %l6
sub   %i1, %l6, %i1
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P6143: !_MEMBAR (FP)

P6144: !_DWST_BINIT [15] (maybe <- 0x300003a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P6145: !_MEMBAR (Int)
membar #StoreLoad

P6146: !_PREFETCH [16] (Int)
prefetch [%i2 + 4], 4

P6147: !_MEMBAR (FP)

P6148: !_BSTC [14] (maybe <- 0x4280001a) (FP) (Branch target of P6460)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P6149
nop

TARGET6460:
ba RET6460
nop


P6149: !_MEMBAR (FP) (Branch target of P6721)
membar #StoreLoad
ba P6150
nop

TARGET6721:
ba RET6721
nop


P6150: !_CASX [11] (maybe <- 0x300003c) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P6151: !_CAS [16] (maybe <- 0x300003d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P6152: !_ST_BINIT [7] (maybe <- 0x300003e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6153: !_MEMBAR (Int)
membar #StoreLoad

P6154: !_LD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P6155: !_DWST [13] (maybe <- 0x300003f) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P6156: !_MEMBAR (FP)

P6157: !_BSTC [7] (maybe <- 0x4280001d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6158: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6158
nop
RET6158:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6159: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6160: !_MEMBAR (FP)

P6161: !_BST [19] (maybe <- 0x42800020) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6162: !_MEMBAR (FP)
membar #StoreLoad

P6163: !_CASX [1] (maybe <- 0x3000041) (Int)
ldx [%i0], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i0], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

P6164: !_DWST_BINIT [10] (maybe <- 0x3000043) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P6165: !_MEMBAR (Int)
membar #StoreLoad

P6166: !_PREFETCH [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 4], 23

P6167: !_MEMBAR (FP)

P6168: !_BST [13] (maybe <- 0x42800023) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6169: !_MEMBAR (FP)
membar #StoreLoad

P6170: !_ST [0] (maybe <- 0x3000045) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P6171: !_MEMBAR (FP)
membar #StoreLoad

P6172: !_BLD [4] (FP) (CBR)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6172
nop
RET6172:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6173: !_MEMBAR (FP)

P6174: !_CAS [16] (maybe <- 0x3000046) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%l7], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6175: !_CASX [8] (maybe <- 0x3000047) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P6176: !_REPLACEMENT [6] (Int) (Branch target of P6722)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
ba P6177
nop

TARGET6722:
ba RET6722
nop


P6177: !_MEMBAR (FP)

P6178: !_BSTC [13] (maybe <- 0x42800026) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6179: !_MEMBAR (FP)
membar #StoreLoad

P6180: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P6181: !_MEMBAR (FP)

P6182: !_DWST_BINIT [15] (maybe <- 0x3000048) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P6183: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6183
nop
RET6183:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6184: !_DWLD [3] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0

P6185: !_PREFETCH [9] (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 24

P6186: !_PREFETCH [10] (Int)
prefetch [%i2 + 4], 21

P6187: !_ST [17] (maybe <- 0x300004a) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P6188: !_MEMBAR (FP)

P6189: !_BST [12] (maybe <- 0x42800029) (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6189
nop
RET6189:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6190: !_MEMBAR (FP)
membar #StoreLoad

P6191: !_SWAP [6] (maybe <- 0x300004b) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P6192: !_SWAP [3] (maybe <- 0x300004c) (Int)
mov %l4, %o1
swap  [%i1 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6193: !_CAS [11] (maybe <- 0x300004d) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%o5], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6194: !_ST_BINIT [7] (maybe <- 0x300004e) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6195: !_MEMBAR (Int)

P6196: !_BSTC [15] (maybe <- 0x4280002c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6197: !_MEMBAR (FP)
membar #StoreLoad

P6198: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P6199: !_CASX [13] (maybe <- 0x300004f) (Int)
ldx [%i3], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i3], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P6200: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P6201: !_ST [7] (maybe <- 0x3000051) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6202: !_ST [9] (maybe <- 0x3000052) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6203: !_PREFETCH [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 21

P6204: !_CAS [1] (maybe <- 0x3000053) (Int)
add %i0, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%l7], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6205: !_ST_BINIT [2] (maybe <- 0x3000054) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P6206: !_MEMBAR (Int)
membar #StoreLoad

P6207: !_ST [4] (maybe <- 0x3000055) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P6208: !_MEMBAR (FP)

P6209: !_BSTC [0] (maybe <- 0x4280002f) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6209
nop
RET6209:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6210: !_MEMBAR (FP)
membar #StoreLoad

P6211: !_SWAP [22] (maybe <- 0x3000056) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P6212: !_MEMBAR (FP)

P6213: !_BSTC [17] (maybe <- 0x42800032) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6214: !_MEMBAR (FP)
membar #StoreLoad

P6215: !_DWST [13] (maybe <- 0x3000057) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P6216: !_MEMBAR (FP)

P6217: !_BST [21] (maybe <- 0x42800035) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6218: !_MEMBAR (FP)
membar #StoreLoad

P6219: !_PREFETCH [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 30

P6220: !_MEMBAR (FP)

P6221: !_BST [3] (maybe <- 0x42800038) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6222: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6222
nop
RET6222:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6223: !_REPLACEMENT [14] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P6224: !_DWST_BINIT [0] (maybe <- 0x3000059) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i0 + 0] %asi
add   %l4, 1, %l4

P6225: !_MEMBAR (Int)
membar #StoreLoad

P6226: !_BLD [14] (FP) (Branch target of P6327)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
ba P6227
nop

TARGET6327:
ba RET6327
nop


P6227: !_MEMBAR (FP)

P6228: !_CAS [22] (maybe <- 0x300005b) (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6228
nop
RET6228:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6229: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 20

P6230: !_MEMBAR (FP)

P6231: !_BSTC [0] (maybe <- 0x4280003b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6232: !_MEMBAR (FP)
membar #StoreLoad

P6233: !_LD [1] (Int)
lduw [%i0 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P6234: !_LDD [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6235: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6236: !_DWLD [16] (Int)
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P6237: !_LD [9] (FP) (Branch target of P6791)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ld [%i2 + 0], %f0
! 1 addresses covered
ba P6238
nop

TARGET6791:
ba RET6791
nop


P6238: !_DWLD [5] (Int)
ldx [%i1 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P6239: !_ST_BINIT [13] (maybe <- 0x300005c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P6240: !_MEMBAR (Int)
membar #StoreLoad

P6241: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P6242: !_MEMBAR (FP)

P6243: !_DWST_BINIT [19] (maybe <- 0x300005d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P6244: !_MEMBAR (Int)
membar #StoreLoad

P6245: !_DWST_BINIT [17] (maybe <- 0x300005f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P6246: !_MEMBAR (Int)
membar #StoreLoad

P6247: !_CAS [0] (maybe <- 0x3000060) (Int)
lduw [%i0], %l7
mov %l7, %o5
! move %o5(lower) -> %o1(lower)
or %o5, %o1, %o1
mov %l4, %o2
cas [%i0], %o5, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6248: !_LD [2] (Int) (Branch target of P6909)
lduw [%i0 + 12], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
ba P6249
nop

TARGET6909:
ba RET6909
nop


P6249: !_CAS [18] (maybe <- 0x3000061) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l7, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
wr %g0, 0x88, %asi
lduwa [%i3] %asi, %o3
mov %o3, %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %o5, %l3
casa [%i3] %asi, %l6, %l3
! move %l3(lower) -> %o3(lower)
srl %l3, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P6250: !_ST [1] (maybe <- 0x4280003e) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i0 + 4 ]

P6251: !_MEMBAR (FP)
membar #StoreLoad

P6252: !_BLD [12] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P6253: !_MEMBAR (FP)

P6254: !_DWST_BINIT [8] (maybe <- 0x3000062) (Int) (Branch target of P6888)
wr %g0, 0xe2, %asi
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4
ba P6255
nop

TARGET6888:
ba RET6888
nop


P6255: !_MEMBAR (Int)
membar #StoreLoad

P6256: !_SWAP [6] (maybe <- 0x3000063) (Int)
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6257: !_MEMBAR (FP)

P6258: !_BSTC [7] (maybe <- 0x4280003f) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6259: !_MEMBAR (FP)
membar #StoreLoad

P6260: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P6261: !_MEMBAR (FP)

P6262: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P6263: !_MEMBAR (FP)

P6264: !_ST_BINIT [20] (maybe <- 0x3000064) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P6265: !_MEMBAR (Int)
membar #StoreLoad

P6266: !_ST_BINIT [0] (maybe <- 0x3000065) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P6267: !_MEMBAR (Int)
membar #StoreLoad

P6268: !_ST_BINIT [10] (maybe <- 0x3000066) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P6269: !_MEMBAR (Int)
membar #StoreLoad

P6270: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6271: !_PREFETCH [11] (Int)
prefetch [%i3 + 12], 0

P6272: !_CAS [7] (maybe <- 0x3000067) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P6273: !_MEMBAR (FP)

P6274: !_BSTC [13] (maybe <- 0x42800042) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6275: !_MEMBAR (FP)
membar #StoreLoad

P6276: !_CAS [4] (maybe <- 0x3000068) (Int)
add %i1, 4, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P6277: !_MEMBAR (FP)

P6278: !_BSTC [12] (maybe <- 0x42800045) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6279: !_MEMBAR (FP)

P6280: !_BST [5] (maybe <- 0x42800048) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6280
nop
RET6280:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6281: !_MEMBAR (FP)
membar #StoreLoad

P6282: !_LDD [13] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P6283: !_MEMBAR (FP)

P6284: !_BSTC [7] (maybe <- 0x4280004b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6285: !_MEMBAR (FP)
membar #StoreLoad

P6286: !_DWLD [7] (Int) (Branch target of P6069)
ldx [%i3 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
ba P6287
nop

TARGET6069:
ba RET6069
nop


P6287: !_DWLD [9] (FP)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %f18
! 2 addresses covered
fmovs %f18, %f13
fmovs %f19, %f14

P6288: !_SWAP [7] (maybe <- 0x3000069) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6289: !_CAS [18] (maybe <- 0x300006a) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
lduwa [%i3] %asi, %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l7, %o0
casa [%i3] %asi, %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P6290: !_DWLD [8] (FP)
ldd [%i2 + 8], %f18
! 1 addresses covered
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P6291: !_PREFETCH [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 21

P6292: !_MEMBAR (FP)

P6293: !_BSTC [13] (maybe <- 0x4280004e) (FP) (Branch target of P6052)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P6294
nop

TARGET6052:
ba RET6052
nop


P6294: !_MEMBAR (FP)
membar #StoreLoad

P6295: !_ST [7] (maybe <- 0x300006b) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6296: !_LDD [8] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6297: !_MEMBAR (FP)

P6298: !_BSTC [5] (maybe <- 0x42800051) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6299: !_MEMBAR (FP)

P6300: !_BSTC [9] (maybe <- 0x42800054) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6301: !_MEMBAR (FP) (Branch target of P6046)
membar #StoreLoad
ba P6302
nop

TARGET6046:
ba RET6046
nop


P6302: !_DWST [16] (maybe <- 0x300006c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P6303: !_DWST_BINIT [15] (maybe <- 0x300006e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P6304: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6304
nop
RET6304:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6305: !_DWST [10] (maybe <- 0x3000070) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P6306: !_SWAP [6] (maybe <- 0x3000072) (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6307: !_DWST_BINIT [2] (maybe <- 0x3000073) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l6
srl %l6, 8, %l6
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3
srl %l3, 16, %l6
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l6, %l3
sllx %l3, 32, %l3 
stxa %l3, [%i0 + 8 ] %asi
add   %l4, 1, %l4

P6308: !_MEMBAR (Int) (LE)
membar #StoreLoad

P6309: !_SWAP [3] (maybe <- 0x3000074) (Int)
mov %l4, %l3
swap  [%i1 + 0], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P6310: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6310
nop
RET6310:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6311: !_BSTC [3] (maybe <- 0x42800057) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6312: !_MEMBAR (FP)
membar #StoreLoad

P6313: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6314: !_DWLD [14] (FP)
ldd [%i3 + 8], %f0
! 1 addresses covered
fmovs %f1, %f0

P6315: !_DWLD [13] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %o5
or %o5, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3

P6316: !_ST [1] (maybe <- 0x3000075) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i0 + 4] %asi
add   %l4, 1, %l4

P6317: !_ST [9] (maybe <- 0x3000076) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6318: !_PREFETCH [9] (Int)
prefetch [%i2 + 0], 4

P6319: !_MEMBAR (FP)

P6320: !_BST [14] (maybe <- 0x4280005a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6321: !_MEMBAR (FP)
membar #StoreLoad

P6322: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P6323: !_MEMBAR (FP)

P6324: !_BST [23] (maybe <- 0x4280005d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6325: !_MEMBAR (FP)
membar #StoreLoad

P6326: !_CAS [0] (maybe <- 0x3000077) (Int)
lduw [%i0], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%i0], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6327: !_CASX [8] (maybe <- 0x3000078) (Int) (CBR)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6327
nop
RET6327:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6328: !_MEMBAR (FP)

P6329: !_BST [11] (maybe <- 0x42800060) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6330: !_MEMBAR (FP)
membar #StoreLoad

P6331: !_DWST_BINIT [13] (maybe <- 0x3000079) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P6332: !_MEMBAR (Int)
membar #StoreLoad

P6333: !_LDD [7] (Int)
sethi %hi(REGION2_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P6334: !_DWLD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %l6
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P6335: !_LDD [16] (Int) (Branch target of P6448)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
ba P6336
nop

TARGET6448:
ba RET6448
nop


P6336: !_MEMBAR (FP)

P6337: !_BSTC [18] (maybe <- 0x42800063) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6338: !_MEMBAR (FP)
membar #StoreLoad

P6339: !_DWST [13] (maybe <- 0x300007b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P6340: !_LD [22] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6341: !_CAS [14] (maybe <- 0x300007d) (Int)
add %i3, 12, %l6
lduw [%l6], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P6342: !_REPLACEMENT [3] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P6343: !_CAS [19] (maybe <- 0x300007e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P6344: !_MEMBAR (FP)

P6345: !_BSTC [10] (maybe <- 0x42800066) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6346: !_MEMBAR (FP)
membar #StoreLoad

P6347: !_ST_BINIT [11] (maybe <- 0x300007f) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i3 + 12] %asi
add   %l4, 1, %l4

P6348: !_MEMBAR (Int) (LE)
membar #StoreLoad

P6349: !_DWST_BINIT [1] (maybe <- 0x3000080) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P6350: !_MEMBAR (Int)
membar #StoreLoad

P6351: !_CAS [16] (maybe <- 0x3000082) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o2
mov %o2, %l3
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P6352: !_DWST_BINIT [7] (maybe <- 0x3000083) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6353: !_MEMBAR (Int)
membar #StoreLoad

P6354: !_DWST [1] (maybe <- 0x3000085) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P6355: !_MEMBAR (FP)
membar #StoreLoad

P6356: !_BLD [22] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P6357: !_MEMBAR (FP)

P6358: !_REPLACEMENT [3] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6358
nop
RET6358:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6359: !_ST [5] (maybe <- 0x3000087) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P6360: !_DWLD [23] (Int)
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P6361: !_MEMBAR (FP)
membar #StoreLoad

P6362: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P6363: !_MEMBAR (FP)

P6364: !_DWST_BINIT [17] (maybe <- 0x3000088) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P6365: !_MEMBAR (Int)
membar #StoreLoad

P6366: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

P6367: !_LD [15] (Int)
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6368: !_CAS [17] (maybe <- 0x3000089) (Int)
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%o5], %l7, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P6369: !_PREFETCH [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 20

P6370: !_MEMBAR (FP)

P6371: !_BSTC [11] (maybe <- 0x42800069) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6372: !_MEMBAR (FP)
membar #StoreLoad

P6373: !_PREFETCH [8] (Int) (Branch target of P6500)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 23
ba P6374
nop

TARGET6500:
ba RET6500
nop


P6374: !_SWAP [23] (maybe <- 0x300008a) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 12], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P6375: !_PREFETCH [22] (Int)
prefetch [%i2 + 4], 0

P6376: !_MEMBAR (FP)
membar #StoreLoad

P6377: !_BLD [11] (FP) (Branch target of P6076)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12
ba P6378
nop

TARGET6076:
ba RET6076
nop


P6378: !_MEMBAR (FP)

P6379: !_BSTC [23] (maybe <- 0x4280006c) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6380: !_MEMBAR (FP)

P6381: !_BST [23] (maybe <- 0x4280006f) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6382: !_MEMBAR (FP)
membar #StoreLoad

P6383: !_DWST_BINIT [7] (maybe <- 0x300008b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P6384: !_MEMBAR (Int)
membar #StoreLoad

P6385: !_CAS [1] (maybe <- 0x300008d) (Int)
add %i0, 4, %l7
lduw [%l7], %o1
mov %o1, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P6386: !_PREFETCH [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 0

P6387: !_CAS [11] (maybe <- 0x300008e) (Int) (Branch target of P6209)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4
ba P6388
nop

TARGET6209:
ba RET6209
nop


P6388: !_DWLD [3] (Int)
ldx [%i1 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P6389: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 20

P6390: !_DWLD [9] (Int)
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6391: !_DWLD [19] (Int)
ldx [%i3 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P6392: !_MEMBAR (FP)

P6393: !_BST [0] (maybe <- 0x42800072) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6394: !_MEMBAR (FP)
membar #StoreLoad

P6395: !_PREFETCH [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 0

P6396: !_CAS [5] (maybe <- 0x300008f) (Int) (CBR)
add %i1, 12, %o5
lduw [%o5], %o1
mov %o1, %l7
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6396
nop
RET6396:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6397: !_MEMBAR (FP)
membar #StoreLoad

P6398: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P6399: !_MEMBAR (FP)

P6400: !_SWAP [11] (maybe <- 0x3000090) (Int)
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6401: !_MEMBAR (FP)

P6402: !_BST [4] (maybe <- 0x42800075) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6403: !_MEMBAR (FP)
membar #StoreLoad

P6404: !_BLD [16] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P6405: !_MEMBAR (FP)

P6406: !_DWST [5] (maybe <- 0x3000091) (Int)
mov %l4, %l7 
stx %l7, [%i1 + 8]
add   %l4, 1, %l4

P6407: !_LDD [15] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P6408: !_LD [23] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P6409: !_MEMBAR (FP)

P6410: !_BST [2] (maybe <- 0x42800078) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6411: !_MEMBAR (FP)
membar #StoreLoad

P6412: !_CAS [0] (maybe <- 0x3000092) (Int)
lduw [%i0], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%i0], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P6413: !_LD [5] (Int)
lduw [%i1 + 12], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P6414: !_ST_BINIT [15] (maybe <- 0x3000093) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P6415: !_MEMBAR (Int)
membar #StoreLoad

P6416: !_DWST [2] (maybe <- 0x4280007b) (FP) (Branch target of P6490)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i0 + 8]
ba P6417
nop

TARGET6490:
ba RET6490
nop


P6417: !_DWLD [8] (Int) (Branch target of P6062)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l6
or %l6, %o0, %o0
ba P6418
nop

TARGET6062:
ba RET6062
nop


P6418: !_MEMBAR (FP)

P6419: !_BSTC [17] (maybe <- 0x4280007c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6420: !_MEMBAR (FP)
membar #StoreLoad

P6421: !_REPLACEMENT [15] (Int) (CBR)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6421
nop
RET6421:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6422: !_DWST_BINIT [12] (maybe <- 0x3000094) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P6423: !_MEMBAR (Int)
membar #StoreLoad

P6424: !_ST [18] (maybe <- 0x3000096) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6425: !_SWAP [23] (maybe <- 0x3000097) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6426: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1

P6427: !_LD [23] (Int)
lduw [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6428: !_CAS [8] (maybe <- 0x3000098) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6429: !_DWST [19] (maybe <- 0x4280007f) (FP)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P6430: !_CASX [16] (maybe <- 0x3000099) (Int) (Branch target of P6867)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4
ba P6431
nop

TARGET6867:
ba RET6867
nop


P6431: !_ST [2] (maybe <- 0x300009b) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P6432: !_LD [5] (Int)
lduw [%i1 + 12], %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6433: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P6434: !_ST_BINIT [22] (maybe <- 0x300009c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6435: !_MEMBAR (Int)
membar #StoreLoad

P6436: !_CAS [8] (maybe <- 0x300009d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P6437: !_DWLD [22] (FP)
ldd [%i2 + 0], %f18
! 2 addresses covered
fmovs %f18, %f3
fmovs %f19, %f4

P6438: !_SWAP [16] (maybe <- 0x300009e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6439: !_LD [5] (Int) (CBR) (Branch target of P6396)
lduw [%i1 + 12], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6439
nop
RET6439:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P6440
nop

TARGET6396:
ba RET6396
nop


P6440: !_LD [6] (Int)
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6441: !_LDD [21] (Int) (Branch target of P6129)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
ba P6442
nop

TARGET6129:
ba RET6129
nop


P6442: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6443: !_DWST [18] (maybe <- 0x300009f) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P6444: !_DWLD [21] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P6445: !_MEMBAR (FP)

P6446: !_BST [11] (maybe <- 0x42800081) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6447: !_MEMBAR (FP)
membar #StoreLoad

P6448: !_BLD [23] (FP) (CBR) (Branch target of P6812)
wr %g0, 0xf0, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6448
nop
RET6448:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P6449
nop

TARGET6812:
ba RET6812
nop


P6449: !_MEMBAR (FP)

P6450: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P6451: !_MEMBAR (FP)

P6452: !_LDD [18] (Int) (Branch target of P6543)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
ba P6453
nop

TARGET6543:
ba RET6543
nop


P6453: !_MEMBAR (FP)
membar #StoreLoad

P6454: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P6455: !_MEMBAR (FP)

P6456: !_BSTC [0] (maybe <- 0x42800084) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6457: !_MEMBAR (FP)

P6458: !_BST [11] (maybe <- 0x42800087) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION3_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6459: !_MEMBAR (FP)
membar #StoreLoad

P6460: !_ST [6] (maybe <- 0x30000a1) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6460
nop
RET6460:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6461: !_CASX [7] (maybe <- 0x30000a2) (Int)
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P6462: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6463: !_SWAP [19] (maybe <- 0x30000a4) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P6464: !_REPLACEMENT [23] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+12], %l6
st %l6, [%i3+12]
add %i3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P6465: !_PREFETCH [19] (Int)
prefetch [%i2 + 4], 2

P6466: !_ST_BINIT [16] (maybe <- 0x30000a5) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6466
nop
RET6466:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6467: !_MEMBAR (Int)
membar #StoreLoad

P6468: !_CAS [10] (maybe <- 0x30000a6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P6469: !_DWST_BINIT [10] (maybe <- 0x30000a7) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P6470: !_MEMBAR (Int)
membar #StoreLoad

P6471: !_DWST [3] (maybe <- 0x30000a9) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i1 + 0]
add   %l4, 1, %l4

P6472: !_PREFETCH [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 23

P6473: !_DWST [15] (maybe <- 0x30000ab) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P6474: !_DWST_BINIT [0] (maybe <- 0x30000ad) (Int) (LE) (Branch target of P6439)
wr %g0, 0xea, %asi
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i0 + 0 ] %asi
add   %l4, 1, %l4
ba P6475
nop

TARGET6439:
ba RET6439
nop


P6475: !_MEMBAR (Int) (LE)
membar #StoreLoad

P6476: !_CASX [2] (maybe <- 0x30000af) (Int)
add %i0, 8, %o5
ldx [%o5], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov  %o3, %l7
mov %l4, %o4
casx [%o5], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P6477: !_DWST [5] (maybe <- 0x4280008a) (FP)
! preparing store val #0, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 8]

P6478: !_CASX [0] (maybe <- 0x30000b0) (Int)
ldx [%i0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l6
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i0], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P6479: !_CASX [3] (maybe <- 0x30000b2) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P6480: !_MEMBAR (FP)

P6481: !_BSTC [14] (maybe <- 0x4280008b) (FP) (Branch target of P6280)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P6482
nop

TARGET6280:
ba RET6280
nop


P6482: !_MEMBAR (FP)
membar #StoreLoad

P6483: !_ST_BINIT [17] (maybe <- 0x30000b4) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P6484: !_MEMBAR (Int)
membar #StoreLoad

P6485: !_LD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6486: !_MEMBAR (FP) (Branch target of P6595)
ba P6487
nop

TARGET6595:
ba RET6595
nop


P6487: !_BSTC [0] (maybe <- 0x4280008e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6488: !_MEMBAR (FP)
membar #StoreLoad

P6489: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6490: !_ST_BINIT [9] (maybe <- 0x30000b5) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6490
nop
RET6490:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6491: !_MEMBAR (Int)
membar #StoreLoad

P6492: !_ST [13] (maybe <- 0x30000b6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6493: !_DWLD [17] (Int) (Branch target of P6495)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
ba P6494
nop

TARGET6495:
ba RET6495
nop


P6494: !_ST_BINIT [17] (maybe <- 0x30000b7) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P6495: !_MEMBAR (Int) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6495
nop
RET6495:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6496: !_BSTC [3] (maybe <- 0x42800091) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6497: !_MEMBAR (FP)
membar #StoreLoad

P6498: !_DWST [13] (maybe <- 0x30000b8) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P6499: !_CAS [20] (maybe <- 0x30000ba) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
mov %l4, %o1
cas [%l7], %l6, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P6500: !_ST_BINIT [5] (maybe <- 0x30000bb) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6500
nop
RET6500:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6501: !_MEMBAR (Int)

P6502: !_BST [1] (maybe <- 0x42800094) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6503: !_MEMBAR (FP)
membar #StoreLoad

P6504: !_LD [23] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduwa [%i2 + 12] %asi, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P6505: !_ST_BINIT [17] (maybe <- 0x30000bc) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS3_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P6506: !_MEMBAR (Int)

P6507: !_BST [8] (maybe <- 0x42800097) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6508: !_MEMBAR (FP)
membar #StoreLoad

P6509: !_ST [19] (maybe <- 0x30000bd) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6510: !_MEMBAR (FP)

P6511: !_BST [9] (maybe <- 0x4280009a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6512: !_MEMBAR (FP)
membar #StoreLoad

P6513: !_LD [1] (Int)
lduw [%i0 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6514: !_LD [3] (Int)
lduw [%i1 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P6515: !_DWST_BINIT [13] (maybe <- 0x30000be) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P6516: !_MEMBAR (Int)
membar #StoreLoad

P6517: !_LDD [11] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P6518: !_CASX [21] (maybe <- 0x30000c0) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P6519: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 23

P6520: !_LD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P6521: !_DWST [12] (maybe <- 0x30000c2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P6522: !_DWST [0] (maybe <- 0x30000c4) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i0 + 0]
add   %l4, 1, %l4

P6523: !_CAS [0] (maybe <- 0x30000c6) (Int)
lduw [%i0], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%i0], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P6524: !_DWST_BINIT [14] (maybe <- 0x30000c7) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i2 + 8] %asi 
add   %l4, 1, %l4

P6525: !_MEMBAR (Int)
membar #StoreLoad

P6526: !_SWAP [16] (maybe <- 0x30000c8) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6527: !_PREFETCH [11] (Int) (LE) (Branch target of P6962)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 12] %asi, 4
ba P6528
nop

TARGET6962:
ba RET6962
nop


P6528: !_CAS [5] (maybe <- 0x30000c9) (Int)
add %i1, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6529: !_CASX [12] (maybe <- 0x30000ca) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P6530: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 1

P6531: !_MEMBAR (FP)
membar #StoreLoad

P6532: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P6533: !_MEMBAR (FP)

P6534: !_LDD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6535: !_MEMBAR (FP)
membar #StoreLoad

P6536: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P6537: !_MEMBAR (FP) (Branch target of P6684)
ba P6538
nop

TARGET6684:
ba RET6684
nop


P6538: !_DWST_BINIT [9] (maybe <- 0x30000cc) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6539: !_MEMBAR (Int)
membar #StoreLoad

P6540: !_ST [19] (maybe <- 0x30000ce) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P6541: !_ST [0] (maybe <- 0x30000cf) (Int)
stw   %l4, [%i0 + 0 ]
add   %l4, 1, %l4

P6542: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 0

P6543: !_PREFETCH [23] (Int) (CBR)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 20

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6543
nop
RET6543:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6544: !_DWST [23] (maybe <- 0x30000d0) (Int)
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P6545: !_MEMBAR (FP)
membar #StoreLoad

P6546: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P6547: !_MEMBAR (FP)

P6548: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P6549: !_MEMBAR (FP)

P6550: !_DWST_BINIT [7] (maybe <- 0x30000d1) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P6551: !_MEMBAR (Int)
membar #StoreLoad

P6552: !_PREFETCH [8] (Int)
prefetch [%i2 + 12], 20

P6553: !_PREFETCH [8] (Int)
prefetch [%i2 + 12], 1

P6554: !_REPLACEMENT [4] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P6555: !_LDD [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P6556: !_ST_BINIT [2] (maybe <- 0x30000d3) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P6557: !_MEMBAR (Int)

P6558: !_BSTC [11] (maybe <- 0x4280009d) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6559: !_MEMBAR (FP)
membar #StoreLoad

P6560: !_LDD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P6561: !_LD [11] (Int)
lduw [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P6562: !_DWST_BINIT [10] (maybe <- 0x30000d4) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P6563: !_MEMBAR (Int)

P6564: !_BSTC [20] (maybe <- 0x428000a0) (FP) (Branch target of P6158)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P6565
nop

TARGET6158:
ba RET6158
nop


P6565: !_MEMBAR (FP)
membar #StoreLoad

P6566: !_ST [15] (maybe <- 0x30000d6) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6567: !_MEMBAR (FP)

P6568: !_BSTC [12] (maybe <- 0x428000a3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6569: !_MEMBAR (FP)
membar #StoreLoad

P6570: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 2

P6571: !_PREFETCH [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 20

P6572: !_CAS [23] (maybe <- 0x30000d7) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%o5], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6573: !_ST [18] (maybe <- 0x30000d8) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6574: !_ST_BINIT [15] (maybe <- 0x30000d9) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P6575: !_MEMBAR (Int)
membar #StoreLoad

P6576: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P6577: !_MEMBAR (FP) (Branch target of P6858)
ba P6578
nop

TARGET6858:
ba RET6858
nop


P6578: !_DWST [22] (maybe <- 0x30000da) (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P6579: !_ST_BINIT [3] (maybe <- 0x30000dc) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P6580: !_MEMBAR (Int)
membar #StoreLoad

P6581: !_CASX [19] (maybe <- 0x30000dd) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P6582: !_MEMBAR (FP) (Branch target of P6618)
ba P6583
nop

TARGET6618:
ba RET6618
nop


P6583: !_BSTC [12] (maybe <- 0x428000a6) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6584: !_MEMBAR (FP)
membar #StoreLoad

P6585: !_PREFETCH [23] (Int)
sethi %hi(REGION7_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 22

P6586: !_DWST_BINIT [23] (maybe <- 0x30000df) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l6 
stxa %l6, [%i3 + 8] %asi 
add   %l4, 1, %l4

P6587: !_MEMBAR (Int)
membar #StoreLoad

P6588: !_REPLACEMENT [22] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P6589: !_CASX [15] (maybe <- 0x30000e0) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P6590: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6591: !_ST [16] (maybe <- 0x30000e2) (Int)
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6592: !_LDD [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6593: !_LD [12] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6593
nop
RET6593:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6594: !_SWAP [11] (maybe <- 0x30000e3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 12], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P6595: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6595
nop
RET6595:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6596: !_BSTC [5] (maybe <- 0x428000a9) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6596
nop
RET6596:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6597: !_MEMBAR (FP)
membar #StoreLoad

P6598: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 1

P6599: !_LDD [8] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6600: !_DWLD [16] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P6601: !_CASX [20] (maybe <- 0x30000e4) (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P6602: !_ST [11] (maybe <- 0x30000e5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P6603: !_DWST_BINIT [0] (maybe <- 0x30000e6) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P6604: !_MEMBAR (Int)
membar #StoreLoad

P6605: !_CAS [4] (maybe <- 0x30000e8) (Int)
add %i1, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P6606: !_CASX [7] (maybe <- 0x30000e9) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P6607: !_REPLACEMENT [11] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P6608: !_CASX [1] (maybe <- 0x30000eb) (Int)
ldx [%i0], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i0], %o5, %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
add  %l4, 1, %l4

P6609: !_DWLD [2] (Int)
ldx [%i0 + 8], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6610: !_CAS [2] (maybe <- 0x30000ed) (Int)
add %i0, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P6611: !_DWST_BINIT [22] (maybe <- 0x30000ee) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P6612: !_MEMBAR (Int)
membar #StoreLoad

P6613: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P6614: !_MEMBAR (FP)

P6615: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P6616: !_DWLD [3] (Int)
ldx [%i1 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P6617: !_DWLD [11] (Int)
ldx [%i2 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P6618: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6618
nop
RET6618:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6619: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P6620: !_MEMBAR (FP) (Branch target of P6358)
ba P6621
nop

TARGET6358:
ba RET6358
nop


P6621: !_ST [8] (maybe <- 0x30000f0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P6622: !_DWST_BINIT [5] (maybe <- 0x30000f1) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i1 + 8] %asi 
add   %l4, 1, %l4

P6623: !_MEMBAR (Int) (Branch target of P6649)
membar #StoreLoad
ba P6624
nop

TARGET6649:
ba RET6649
nop


P6624: !_CAS [14] (maybe <- 0x30000f2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l4, %o4
cas [%l3], %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6625: !_SWAP [12] (maybe <- 0x30000f3) (Int) (LE)
wr %g0, 0x88, %asi
mov %l4, %l6
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l6, %o5, %l3
srl %l3, 8, %l3
sll %l6, 8, %l6
and %l6, %o5, %l6
or %l6, %l3, %l6
srl %l6, 16, %l3
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l3, %l6
swapa  [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P6626: !_ST [22] (maybe <- 0x30000f4) (Int) (Branch target of P6680)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4
ba P6627
nop

TARGET6680:
ba RET6680
nop


P6627: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6628: !_LDD [0] (Int) (LE)
wr %g0, 0x88, %asi
ldda [%i0 + 0] %asi, %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6629: !_MEMBAR (FP)

P6630: !_BSTC [19] (maybe <- 0x428000ac) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6631: !_MEMBAR (FP)

P6632: !_BSTC [21] (maybe <- 0x428000af) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6633: !_MEMBAR (FP)
membar #StoreLoad

P6634: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 3

P6635: !_ST [9] (maybe <- 0x30000f5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6636: !_SWAP [10] (maybe <- 0x30000f6) (Int)
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l6
or %l6, %o1, %o1
add   %l4, 1, %l4

P6637: !_MEMBAR (FP)

P6638: !_BSTC [0] (maybe <- 0x428000b2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6639: !_MEMBAR (FP)
membar #StoreLoad

P6640: !_ST_BINIT [6] (maybe <- 0x30000f7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P6641: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6641
nop
RET6641:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6642: !_LD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6643: !_DWLD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l6
or %l6, %o2, %o2

P6644: !_PREFETCH [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 23

P6645: !_CASX [23] (maybe <- 0x30000f8) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
sllx %l6, 32, %l6
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l3
ldxa [%l3] %asi, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
mov  %l7, %o5
mov  %l6, %l7
casxa [%l3] %asi, %o5, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P6646: !_CAS [23] (maybe <- 0x30000f9) (Int)
add %i3, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P6647: !_PREFETCH [20] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 12], 4

P6648: !_MEMBAR (FP)

P6649: !_BSTC [16] (maybe <- 0x428000b5) (FP) (CBR)
wr %g0, 0xe0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6649
nop
RET6649:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6650: !_MEMBAR (FP)
membar #StoreLoad

P6651: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P6652: !_MEMBAR (FP)

P6653: !_BSTC [17] (maybe <- 0x428000b8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6654: !_MEMBAR (FP)
membar #StoreLoad

P6655: !_ST_BINIT [9] (maybe <- 0x30000fa) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P6656: !_MEMBAR (Int)
membar #StoreLoad

P6657: !_CASX [14] (maybe <- 0x30000fb) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %o5, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
sllx %l3, 32, %l3
wr %g0, 0x88, %asi
add %i2, 8, %o5
ldxa [%o5] %asi, %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
mov  %l6, %l7
mov  %l3, %l6
casxa [%o5] %asi, %l7, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
add  %l4, 1, %l4

P6658: !_PREFETCH [18] (Int)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
prefetch [%i2 + 0], 0

P6659: !_DWST [10] (maybe <- 0x30000fc) (Int) (Branch target of P6064)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4
ba P6660
nop

TARGET6064:
ba RET6064
nop


P6660: !_MEMBAR (FP)

P6661: !_BSTC [20] (maybe <- 0x428000bb) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6662: !_MEMBAR (FP)
membar #StoreLoad

P6663: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P6664: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6664
nop
RET6664:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6665: !_BST [1] (maybe <- 0x428000be) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6666: !_MEMBAR (FP)
membar #StoreLoad

P6667: !_SWAP [19] (maybe <- 0x30000fe) (Int)
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6668: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6669: !_DWST_BINIT [10] (maybe <- 0x30000ff) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6670: !_MEMBAR (Int)
membar #StoreLoad

P6671: !_DWLD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %o5
or %o5, %o0, %o0

P6672: !_DWLD [21] (Int)
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P6673: !_PREFETCH [20] (Int)
prefetch [%i2 + 12], 23

P6674: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6675: !_DWST_BINIT [19] (maybe <- 0x3000101) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P6676: !_MEMBAR (Int)
membar #StoreLoad

P6677: !_SWAP [12] (maybe <- 0x3000103) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P6678: !_SWAP [19] (maybe <- 0x3000104) (Int)
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6679: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P6680: !_DWST_BINIT [8] (maybe <- 0x3000105) (Int) (CBR)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6680
nop
RET6680:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6681: !_MEMBAR (Int)
membar #StoreLoad

P6682: !_CASX [12] (maybe <- 0x3000106) (Int) (LE)
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %l6, %l3, %l7
srlx %l7, 8, %l7
sllx %l6, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6 
sethi %hi(0xffff0000), %l3
srlx %l6, 16, %l7
andn %l7, %l3, %l7
andn %l6, %l3, %l6
sllx %l6, 16, %l6
or %l6, %l7, %l6 
srlx %l6, 32, %l7
sllx %l6, 32, %l6
or %l6, %l7, %l7 
wr %g0, 0x88, %asi
ldxa [%i2] %asi, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(upper) -> %o0(upper)
or %o5, %g0, %o0
mov %o5, %l3
mov  %l7, %o5
casxa [%i2] %asi, %l3, %o5
! move %o5(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
srl %o5, 0, %l3
or %l3, %o0, %o0
! move %o5(upper) -> %o1(upper)
or %o5, %g0, %o1
add  %l4, 1, %l4

P6683: !_ST [13] (maybe <- 0x3000108) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P6684: !_ST_BINIT [6] (maybe <- 0x3000109) (Int) (CBR)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6684
nop
RET6684:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6685: !_MEMBAR (Int)
membar #StoreLoad

P6686: !_ST_BINIT [3] (maybe <- 0x300010a) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 0] %asi
add   %l4, 1, %l4

P6687: !_MEMBAR (Int)
membar #StoreLoad

P6688: !_CASX [15] (maybe <- 0x300010b) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %l6
! move %l6(upper) -> %o1(lower)
srlx %o1, 32, %o1
sllx %o1, 32, %o1
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P6689: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P6690: !_ST_BINIT [4] (maybe <- 0x300010d) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P6691: !_MEMBAR (Int)
membar #StoreLoad

P6692: !_SWAP [6] (maybe <- 0x300010e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6693: !_DWST_BINIT [23] (maybe <- 0x300010f) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P6694: !_MEMBAR (Int)
membar #StoreLoad

P6695: !_PREFETCH [7] (Int)
prefetch [%i2 + 4], 17

P6696: !_LDD [7] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6697: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6698: !_CAS [16] (maybe <- 0x3000110) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6699: !_CAS [8] (maybe <- 0x3000111) (Int)
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6700: !_REPLACEMENT [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+4], %l7
st %l7, [%i2+4]
add %i2, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P6701: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6701
nop
RET6701:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6702: !_BST [8] (maybe <- 0x428000c1) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6703: !_MEMBAR (FP)
membar #StoreLoad

P6704: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P6705: !_MEMBAR (FP)

P6706: !_LD [4] (Int)
lduw [%i1 + 4], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P6707: !_MEMBAR (FP)

P6708: !_BST [9] (maybe <- 0x428000c4) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6709: !_MEMBAR (FP)
membar #StoreLoad

P6710: !_CAS [4] (maybe <- 0x3000112) (Int)
add %i1, 4, %l6
lduw [%l6], %o4
mov %o4, %l3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P6711: !_LD [18] (Int) (CBR)
sethi %hi(REGION6_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6711
nop
RET6711:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6712: !_SWAP [13] (maybe <- 0x3000113) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P6713: !_DWLD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P6714: !_ST [22] (maybe <- 0x3000114) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P6715: !_MEMBAR (FP)

P6716: !_BST [0] (maybe <- 0x428000c7) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6717: !_MEMBAR (FP) (Branch target of P6304)
ba P6718
nop

TARGET6304:
ba RET6304
nop


P6718: !_BST [19] (maybe <- 0x428000ca) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6719: !_MEMBAR (FP)

P6720: !_BST [2] (maybe <- 0x428000cd) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6721: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6721
nop
RET6721:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6722: !_DWST_BINIT [3] (maybe <- 0x3000115) (Int) (CBR)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i1 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6722
nop
RET6722:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6723: !_MEMBAR (Int)
membar #StoreLoad

P6724: !_CAS [15] (maybe <- 0x3000117) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%i2], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6725: !_ST_BINIT [21] (maybe <- 0x3000118) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P6726: !_MEMBAR (Int)
membar #StoreLoad

P6727: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P6728: !_LDD [22] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P6729: !_ST [18] (maybe <- 0x3000119) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6729
nop
RET6729:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6730: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P6731: !_PREFETCH [1] (Int)
prefetch [%i0 + 4], 23

P6732: !_LD [4] (Int)
lduw [%i1 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6733: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6734: !_MEMBAR (FP)

P6735: !_BSTC [8] (maybe <- 0x428000d0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6736: !_MEMBAR (FP)
membar #StoreLoad

P6737: !_SWAP [10] (maybe <- 0x300011a) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6737
nop
RET6737:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6738: !_CAS [23] (maybe <- 0x300011b) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduwa [%l3] %asi, %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l6, %l7
casa [%l3] %asi, %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P6739: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P6740: !_SWAP [15] (maybe <- 0x300011c) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6741: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6742: !_DWST [10] (maybe <- 0x300011d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P6743: !_MEMBAR (FP)

P6744: !_BST [1] (maybe <- 0x428000d3) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P6745: !_MEMBAR (FP)
membar #StoreLoad

P6746: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6747: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6748: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 27

P6749: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P6750: !_PREFETCH [5] (Int) (Branch target of P6729)
prefetch [%i1 + 12], 27
ba P6751
nop

TARGET6729:
ba RET6729
nop


P6751: !_DWST_BINIT [20] (maybe <- 0x300011f) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P6752: !_MEMBAR (Int)
membar #StoreLoad

P6753: !_PREFETCH [19] (Int)
prefetch [%i2 + 4], 1

P6754: !_SWAP [15] (maybe <- 0x3000120) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P6755: !_MEMBAR (FP)

P6756: !_BST [21] (maybe <- 0x428000d6) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6757: !_MEMBAR (FP)
membar #StoreLoad

P6758: !_CAS [0] (maybe <- 0x3000121) (Int)
lduw [%i0], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%i0], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6759: !_LD [0] (Int)
lduw [%i0 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3

P6760: !_PREFETCH [15] (Int)
prefetch [%i3 + 0], 21

P6761: !_MEMBAR (FP)
membar #StoreLoad

P6762: !_BLD [11] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6762
nop
RET6762:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6763: !_MEMBAR (FP)

P6764: !_BSTC [6] (maybe <- 0x428000d9) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6765: !_MEMBAR (FP)
membar #StoreLoad

P6766: !_ST_BINIT [5] (maybe <- 0x3000122) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4

P6767: !_MEMBAR (Int) (Branch target of P6737)
membar #StoreLoad
ba P6768
nop

TARGET6737:
ba RET6737
nop


P6768: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P6769: !_ST_BINIT [19] (maybe <- 0x3000123) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6770: !_MEMBAR (Int)
membar #StoreLoad

P6771: !_LDD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6772: !_MEMBAR (FP)
membar #StoreLoad

P6773: !_BLD [5] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P6774: !_MEMBAR (FP)

P6775: !_CAS [6] (maybe <- 0x3000124) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P6776: !_DWLD [8] (Int)
ldx [%i2 + 8], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l3
or %l3, %o0, %o0

P6777: !_ST [6] (maybe <- 0x3000125) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6778: !_MEMBAR (FP)
membar #StoreLoad

P6779: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P6780: !_MEMBAR (FP)

P6781: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6782: !_MEMBAR (FP)

P6783: !_BSTC [8] (maybe <- 0x428000dc) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6784: !_MEMBAR (FP) (Branch target of P6228)
membar #StoreLoad
ba P6785
nop

TARGET6228:
ba RET6228
nop


P6785: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+12], %l7
st %l7, [%i3+12]
add %i3, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P6786: !_SWAP [17] (maybe <- 0x3000126) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 12], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P6787: !_LD [3] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i1 + 0] %asi, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P6788: !_CAS [17] (maybe <- 0x3000127) (Int)
add %i2, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6789: !_MEMBAR (FP)
membar #StoreLoad

P6790: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P6791: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6791
nop
RET6791:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P6792: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P6793: !_MEMBAR (FP)

P6794: !_BST [7] (maybe <- 0x428000df) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6795: !_MEMBAR (FP)
membar #StoreLoad

P6796: !_LD [8] (Int)
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P6797: !_MEMBAR (FP)

P6798: !_BSTC [18] (maybe <- 0x428000e2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6799: !_MEMBAR (FP)
membar #StoreLoad

P6800: !_DWLD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6801: !_DWLD [13] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %f8
! 2 addresses covered

P6802: !_PREFETCH [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 23

P6803: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 21

P6804: !_DWST_BINIT [18] (maybe <- 0x3000128) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P6805: !_MEMBAR (Int)
membar #StoreLoad

P6806: !_ST_BINIT [17] (maybe <- 0x300012a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P6807: !_MEMBAR (Int)
membar #StoreLoad

P6808: !_DWST [17] (maybe <- 0x300012b) (Int) (Branch target of P6664)
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4
ba P6809
nop

TARGET6664:
ba RET6664
nop


P6809: !_LD [17] (Int)
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6810: !_DWST_BINIT [5] (maybe <- 0x300012c) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i1 + 8] %asi 
add   %l4, 1, %l4

P6811: !_MEMBAR (Int)
membar #StoreLoad

P6812: !_CAS [17] (maybe <- 0x300012d) (Int) (CBR)
add %i2, 12, %l7
lduw [%l7], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6812
nop
RET6812:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6813: !_DWST_BINIT [1] (maybe <- 0x300012e) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P6814: !_MEMBAR (Int)
membar #StoreLoad

P6815: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P6816: !_MEMBAR (FP) (Branch target of P6641)
ba P6817
nop

TARGET6641:
ba RET6641
nop


P6817: !_DWLD [17] (Int)
ldx [%i2 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P6818: !_DWST [11] (maybe <- 0x3000130) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P6819: !_SWAP [21] (maybe <- 0x3000131) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 0], %l3
! move %l3(lower) -> %o1(lower)
srl %l3, 0, %l7
or %l7, %o1, %o1
add   %l4, 1, %l4

P6820: !_DWST [9] (maybe <- 0x3000132) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P6821: !_LDD [11] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P6822: !_CAS [1] (maybe <- 0x3000134) (Int) (Branch target of P6881)
add %i0, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4
ba P6823
nop

TARGET6881:
ba RET6881
nop


P6823: !_SWAP [4] (maybe <- 0x3000135) (Int)
mov %l4, %l7
swap  [%i1 + 4], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P6824: !_LD [22] (Int)
lduw [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P6825: !_CASX [1] (maybe <- 0x3000136) (Int)
ldx [%i0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i0], %l6, %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
add  %l4, 1, %l4

P6826: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l6
or %l6, %o1, %o1

P6827: !_CASX [0] (maybe <- 0x3000138) (Int) (LE)
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l3, %o5, %l6
srlx %l6, 8, %l6
sllx %l3, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3 
sethi %hi(0xffff0000), %o5
srlx %l3, 16, %l6
andn %l6, %o5, %l6
andn %l3, %o5, %l3
sllx %l3, 16, %l3
or %l3, %l6, %l3 
srlx %l3, 32, %l6
sllx %l3, 32, %l3
or %l3, %l6, %l6 
wr %g0, 0x88, %asi
ldxa [%i0] %asi, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
mov %l7, %o5
mov  %l6, %l7
casxa [%i0] %asi, %o5, %l7
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
add  %l4, 1, %l4

P6828: !_SWAP [0] (maybe <- 0x300013a) (Int) (Branch target of P6985)
mov %l4, %o4
swap  [%i0 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4
ba P6829
nop

TARGET6985:
ba RET6985
nop


P6829: !_LDD [15] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P6830: !_LD [0] (Int)
lduw [%i0 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P6831: !_ST [17] (maybe <- 0x300013b) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P6832: !_ST [1] (maybe <- 0x300013c) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P6833: !_DWLD [1] (FP)
ldd [%i0 + 0], %f18
! 2 addresses covered
fmovs %f18, %f13
fmovs %f19, %f14

P6834: !_ST_BINIT [15] (maybe <- 0x300013d) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6835: !_MEMBAR (Int) (LE) (Branch target of P6596)
membar #StoreLoad
ba P6836
nop

TARGET6596:
ba RET6596
nop


P6836: !_CASX [10] (maybe <- 0x300013e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %o5
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P6837: !_MEMBAR (FP)

P6838: !_BSTC [5] (maybe <- 0x428000e5) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6838
nop
RET6838:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6839: !_MEMBAR (FP) (Branch target of P6050)
membar #StoreLoad
ba P6840
nop

TARGET6050:
ba RET6050
nop


P6840: !_LD [8] (Int) (LE) (Branch target of P6960)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduwa [%i3 + 12] %asi, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
ba P6841
nop

TARGET6960:
ba RET6960
nop


P6841: !_MEMBAR (FP)

P6842: !_BSTC [22] (maybe <- 0x428000e8) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6843: !_MEMBAR (FP)
membar #StoreLoad

P6844: !_PREFETCH [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 0

P6845: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l3
or %l3, %o3, %o3

P6846: !_ST [8] (maybe <- 0x3000140) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P6847: !_MEMBAR (FP)

P6848: !_BSTC [2] (maybe <- 0x428000eb) (FP) (CBR)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6848
nop
RET6848:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6849: !_MEMBAR (FP)
membar #StoreLoad

P6850: !_CAS [19] (maybe <- 0x3000141) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %o4
mov %o4, %l7
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P6851: !_DWST_BINIT [1] (maybe <- 0x3000142) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i0 + 0] %asi
add   %l4, 1, %l4

P6852: !_MEMBAR (Int)
membar #StoreLoad

P6853: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 17

P6854: !_PREFETCH [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 0

P6855: !_MEMBAR (FP)

P6856: !_BSTC [14] (maybe <- 0x428000ee) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6857: !_MEMBAR (FP)
membar #StoreLoad

P6858: !_DWST [2] (maybe <- 0x3000144) (Int) (CBR)
mov %l4, %l3 
stx %l3, [%i0 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6858
nop
RET6858:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6859: !_ST [18] (maybe <- 0x3000145) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P6860: !_ST_BINIT [9] (maybe <- 0x3000146) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P6861: !_MEMBAR (Int)
membar #StoreLoad

P6862: !_DWST [21] (maybe <- 0x3000147) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P6863: !_DWST [8] (maybe <- 0x3000149) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

P6864: !_CASX [10] (maybe <- 0x300014a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P6865: !_CASX [11] (maybe <- 0x300014c) (Int)
add %i3, 8, %l6
ldx [%l6], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov  %o2, %l3
mov %l4, %o3
casx [%l6], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P6866: !_SWAP [2] (maybe <- 0x300014d) (Int)
mov %l4, %o4
swap  [%i0 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6867: !_CASX [23] (maybe <- 0x300014e) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6867
nop
RET6867:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6868: !_SWAP [7] (maybe <- 0x300014f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P6869: !_ST [15] (maybe <- 0x3000150) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6870: !_ST [13] (maybe <- 0x428000f1) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
st   %f20, [%i3 + 4 ]

P6871: !_DWST_BINIT [15] (maybe <- 0x3000151) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P6872: !_MEMBAR (Int)
membar #StoreLoad

P6873: !_DWLD [12] (Int)
ldx [%i3 + 0], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)

P6874: !_SWAP [4] (maybe <- 0x3000153) (Int)
mov %l4, %o3
swap  [%i1 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6875: !_CASX [17] (maybe <- 0x3000154) (Int)
add %i2, 8, %l7
ldx [%l7], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov  %l3, %l6
mov %l4, %l3
casx [%l7], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P6876: !_REPLACEMENT [18] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P6877: !_MEMBAR (FP)

P6878: !_BST [19] (maybe <- 0x428000f2) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6879: !_MEMBAR (FP)

P6880: !_BSTC [22] (maybe <- 0x428000f5) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6881: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6881
nop
RET6881:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6882: !_PREFETCH [0] (Int)
prefetch [%i0 + 0], 31

P6883: !_DWST [16] (maybe <- 0x3000155) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P6884: !_ST [12] (maybe <- 0x3000157) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6885: !_REPLACEMENT [10] (Int) (Branch target of P6925)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
ba P6886
nop

TARGET6925:
ba RET6925
nop


P6886: !_MEMBAR (FP)
membar #StoreLoad

P6887: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P6888: !_MEMBAR (FP) (CBR) (Branch target of P6701)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6888
nop
RET6888:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P6889
nop

TARGET6701:
ba RET6701
nop


P6889: !_DWST [21] (maybe <- 0x3000158) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P6890: !_DWLD [1] (Int)
ldx [%i0 + 0], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l3
or %l3, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1

P6891: !_ST [23] (maybe <- 0x300015a) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P6892: !_MEMBAR (FP)

P6893: !_BST [5] (maybe <- 0x428000f8) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6894: !_MEMBAR (FP) (Branch target of P6711)
membar #StoreLoad
ba P6895
nop

TARGET6711:
ba RET6711
nop


P6895: !_CAS [8] (maybe <- 0x300015b) (Int) (Branch target of P6035)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o1(lower)
or %l3, %o1, %o1
mov %l4, %o2
cas [%l6], %l3, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4
ba P6896
nop

TARGET6035:
ba RET6035
nop


P6896: !_DWST_BINIT [6] (maybe <- 0x300015c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6897: !_MEMBAR (Int) (Branch target of P6189)
membar #StoreLoad
ba P6898
nop

TARGET6189:
ba RET6189
nop


P6898: !_DWST_BINIT [13] (maybe <- 0x300015e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P6899: !_MEMBAR (Int)
membar #StoreLoad

P6900: !_CAS [18] (maybe <- 0x3000160) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %l6
mov %l6, %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2
mov %l4, %o3
cas [%i3], %l7, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6901: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 21

P6902: !_CAS [13] (maybe <- 0x3000161) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%o5], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P6903: !_REPLACEMENT [0] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P6904: !_ST_BINIT [12] (maybe <- 0x3000162) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P6905: !_MEMBAR (Int)
membar #StoreLoad

P6906: !_LD [22] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 4], %f2
! 1 addresses covered

P6907: !_CASX [15] (maybe <- 0x3000163) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
add  %l4, 1, %l4

P6908: !_MEMBAR (FP)

P6909: !_BST [16] (maybe <- 0x428000fb) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6909
nop
RET6909:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6910: !_MEMBAR (FP)
membar #StoreLoad

P6911: !_ST [10] (maybe <- 0x3000165) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P6912: !_DWST_BINIT [21] (maybe <- 0x3000166) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P6913: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6913
nop
RET6913:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6914: !_DWST_BINIT [9] (maybe <- 0x3000168) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P6915: !_MEMBAR (Int)

P6916: !_BST [11] (maybe <- 0x428000fe) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6917: !_MEMBAR (FP)
membar #StoreLoad

P6918: !_CASX [9] (maybe <- 0x300016a) (Int)
ldx [%i3], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P6919: !_MEMBAR (FP)

P6920: !_BSTC [8] (maybe <- 0x42800101) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6921: !_MEMBAR (FP)
membar #StoreLoad

P6922: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P6923: !_MEMBAR (FP)

P6924: !_BST [19] (maybe <- 0x42800104) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6925: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6925
nop
RET6925:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6926: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P6927: !_LDD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6928: !_MEMBAR (FP)

P6929: !_BST [5] (maybe <- 0x42800107) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P6930: !_MEMBAR (FP)
membar #StoreLoad

P6931: !_DWLD [22] (Int) (CBR)
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6931
nop
RET6931:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6932: !_ST [23] (maybe <- 0x300016c) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P6933: !_MEMBAR (FP)

P6934: !_BST [13] (maybe <- 0x4280010a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6935: !_MEMBAR (FP)
membar #StoreLoad

P6936: !_ST [9] (maybe <- 0x300016d) (Int)
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6937: !_DWST_BINIT [15] (maybe <- 0x300016e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P6938: !_MEMBAR (Int)
membar #StoreLoad

P6939: !_CAS [8] (maybe <- 0x3000170) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P6940: !_MEMBAR (FP)

P6941: !_BST [8] (maybe <- 0x4280010d) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6942: !_MEMBAR (FP)
membar #StoreLoad

P6943: !_SWAP [20] (maybe <- 0x3000171) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6944: !_ST_BINIT [4] (maybe <- 0x3000172) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P6945: !_MEMBAR (Int) (Branch target of P6838)
membar #StoreLoad
ba P6946
nop

TARGET6838:
ba RET6838
nop


P6946: !_DWST_BINIT [9] (maybe <- 0x3000173) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P6947: !_MEMBAR (Int)
membar #StoreLoad

P6948: !_CASX [4] (maybe <- 0x3000175) (Int)
ldx [%i1], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i1], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P6949: !_LDD [18] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P6950: !_CASX [5] (maybe <- 0x3000177) (Int)
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P6951: !_ST_BINIT [16] (maybe <- 0x3000178) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6952: !_MEMBAR (Int)
membar #StoreLoad

P6953: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P6954: !_MEMBAR (FP)

P6955: !_PREFETCH [2] (Int)
prefetch [%i0 + 12], 23

P6956: !_CASX [6] (maybe <- 0x3000179) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i2], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

P6957: !_LDD [8] (Int)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P6958: !_ST [18] (maybe <- 0x300017b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P6959: !_ST_BINIT [13] (maybe <- 0x300017c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P6960: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6960
nop
RET6960:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P6961: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 1

P6962: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET6962
nop
RET6962:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P6963: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P6964: !_MEMBAR (FP)

P6965: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P6966: !_MEMBAR (FP)
membar #StoreLoad

P6967: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P6968: !_MEMBAR (FP)

P6969: !_DWST_BINIT [12] (maybe <- 0x300017d) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7
add   %l4, 1, %l4
or %l7, %l4, %o5
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
sllx %l3, 32, %l7
or %l3, %l7, %l3 
and %o5, %l3, %l7
srlx %l7, 8, %l7
sllx %o5, 8, %o5
and %o5, %l3, %o5
or %o5, %l7, %o5 
sethi %hi(0xffff0000), %l3
srlx %o5, 16, %l7
andn %l7, %l3, %l7
andn %o5, %l3, %o5
sllx %o5, 16, %o5
or %o5, %l7, %o5 
srlx %o5, 32, %l7
sllx %o5, 32, %o5
or %o5, %l7, %l7 
stxa %l7, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P6970: !_MEMBAR (Int) (LE)
membar #StoreLoad

P6971: !_DWST_BINIT [9] (maybe <- 0x300017f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P6972: !_MEMBAR (Int)

P6973: !_BSTC [18] (maybe <- 0x42800110) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P6974: !_MEMBAR (FP)
membar #StoreLoad

P6975: !_CASX [19] (maybe <- 0x3000181) (Int)
ldx [%i2], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
add  %l4, 1, %l4

P6976: !_MEMBAR (FP)

P6977: !_BST [16] (maybe <- 0x42800113) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P6978: !_MEMBAR (FP)
membar #StoreLoad

P6979: !_ST [21] (maybe <- 0x3000183) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P6980: !_CASX [21] (maybe <- 0x3000184) (Int)
ldx [%i2], %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i2], %l7, %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
add  %l4, 1, %l4

P6981: !_MEMBAR (FP) (Branch target of P6931)
membar #StoreLoad
ba P6982
nop

TARGET6931:
ba RET6931
nop


P6982: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P6983: !_MEMBAR (FP) (Branch target of P6075)
ba P6984
nop

TARGET6075:
ba RET6075
nop


P6984: !_CASX [5] (maybe <- 0x3000186) (Int)
add %i1, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4

P6985: !_REPLACEMENT [6] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET6985
nop
RET6985:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P6986: !_CASX [13] (maybe <- 0x3000187) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o3(lower)
srlx %l6, 32, %l7
or %l7, %o3, %o3
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
add  %l4, 1, %l4

P6987: !_LD [14] (Int) (Branch target of P6848)
lduw [%i3 + 12], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
ba P6988
nop

TARGET6848:
ba RET6848
nop


P6988: !_CASX [16] (maybe <- 0x3000189) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i2], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P6989: !_CASX [8] (maybe <- 0x300018b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov  %o2, %l3
mov %l4, %o3
casx [%l6], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P6990: !_CASX [3] (maybe <- 0x300018c) (Int)
ldx [%i1], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i1], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P6991: !_CASX [16] (maybe <- 0x300018e) (Int)
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P6992: !_DWST_BINIT [22] (maybe <- 0x3000190) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P6993: !_MEMBAR (Int)
membar #StoreLoad

P6994: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 22

P6995: !_SWAP [19] (maybe <- 0x3000192) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P6996: !_MEMBAR (FP) (Branch target of P6102)
membar #StoreLoad
ba P6997
nop

TARGET6102:
ba RET6102
nop


P6997: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P6998: !_MEMBAR (FP)

P6999: !_DWST_BINIT [3] (maybe <- 0x3000193) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i1 + 0] %asi
add   %l4, 1, %l4

P7000: !_MEMBAR (Int)

P7001: !_BST [3] (maybe <- 0x42800116) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7002: !_MEMBAR (FP)
membar #StoreLoad

P7003: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P7004: !_MEMBAR (FP)

P7005: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7006: !_SWAP [12] (maybe <- 0x3000195) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7007: !_ST_BINIT [17] (maybe <- 0x3000196) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P7008: !_MEMBAR (Int) (Branch target of P6913)
membar #StoreLoad
ba P7009
nop

TARGET6913:
ba RET6913
nop


P7009: !_ST_BINIT [2] (maybe <- 0x3000197) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P7010: !_MEMBAR (Int)
membar #StoreLoad

P7011: !_DWST_BINIT [1] (maybe <- 0x3000198) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P7012: !_MEMBAR (Int)

P7013: !_BSTC [11] (maybe <- 0x42800119) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7014: !_MEMBAR (FP) (Loop exit)
membar #StoreLoad
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovs %f4, %f30
!--

sethi %hi(0x200000), %o5
add   %i1, %o5, %i1
!-- End Aliased access: base register for region 1 (%i1) restored
loop_exit_6_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_6_0
nop

P7015: !_MEMBAR (Int)
membar #StoreLoad

END_NODES6: ! Test instruction sequence for CPU 6 ends
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
stw %l3, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
!-----------------

! register usage:
! %i0 %i1 : base registers for first 2 regions
! %i2 %i3 : cache registers for 8 regions
! %i4 fixed pointer to per-cpu results area
! %l1 moving pointer to per-cpu FP results area
! %o7 moving pointer to per-cpu integer results area
! %i5 pointer to per-cpu private area
! %l0 holds lfsr, used as source of random bits 
! %l2 loop count register
! %f16 running counter for unique fp store values
! %f17 holds increment value for fp counter
! %l4 running counter for unique integer store values (increment value is always 1)
! %l5 move-to register for load values (simulation only)
! %f30 move-to register for FP values (simulation only)
! %i4 holds the instructions count which is used for interrupt ordering
! %i4 holds the thread_id (OBP only) 
! %l5 holds the moving pointer for interrupt bonus data (OBP only). Conflicts with RTL/simulation usage
! %l3 %l6 %l7 %o5 : 4 temporary registers
! %o0 %o1 %o2 %o3 %o4 : 5 integer results buffer registers
! %f0-f15 FP results buffer registers
! %f32-f47 FP block load/store registers

func7:
! instruction sequence begins
save   %sp, -192, %sp

! Force %i0-%i3 to be 64-byte aligned
add %i0, 63, %i0
andn %i0, 63, %i0

add %i1, 63, %i1
andn %i1, 63, %i1

add %i2, 63, %i2
andn %i2, 63, %i2

add %i3, 63, %i3
andn %i3, 63, %i3

add %i4, 63, %i4
andn %i4, 63, %i4

add %i5, 63, %i5
andn %i5, 63, %i5


! Initialize pointer to FP load results area
mov   %i4, %l1

! Initialize pointer to integer load results area
sethi %hi(0x80000), %o7
or    %o7, %lo(0x80000), %o7
add  %o7, %l1, %o7 

! Reinitialize i4 to 0. i4 will be used to keep the count of analyzable node info
mov 0x0, %i4

! Initialize %f0-%f62 to 0xdeadbee0deadbee1
sethi %hi(0xdeadbee0), %o5
or    %o5, %lo(0xdeadbee0), %o5
stw   %o5, [%i5]
sethi %hi(0xdeadbee1), %o5
or    %o5, %lo(0xdeadbee1), %o5
stw   %o5, [%i5+4]
ldd [%i5], %f0
fmovd %f0, %f2
fmovd %f0, %f4
fmovd %f0, %f6
fmovd %f0, %f8
fmovd %f0, %f10
fmovd %f0, %f12
fmovd %f0, %f14
fmovd %f0, %f16
fmovd %f0, %f18
fmovd %f0, %f20
fmovd %f0, %f22
fmovd %f0, %f24
fmovd %f0, %f26
fmovd %f0, %f28
fmovd %f0, %f30
fmovd %f0, %f32
fmovd %f0, %f34
fmovd %f0, %f36
fmovd %f0, %f38
fmovd %f0, %f40
fmovd %f0, %f42
fmovd %f0, %f44
fmovd %f0, %f46
fmovd %f0, %f48
fmovd %f0, %f50
fmovd %f0, %f52
fmovd %f0, %f54
fmovd %f0, %f56
fmovd %f0, %f58
fmovd %f0, %f60
fmovd %f0, %f62

! Signature for extract_loads script to start extracting load values for this stream
sethi %hi(0x07deade1), %o5
or    %o5, %lo(0x07deade1), %o5
stw %o5, [%i5] 
ld [%i5], %f16

! Initialize running integer counter in register %l4
sethi %hi(0x3800001), %l4
or    %l4, %lo(0x3800001), %l4

! Initialize running FP counter in register %f16
sethi %hi(0x43000001), %o5
or    %o5, %lo(0x43000001), %o5
stw %o5, [%i5] 
ld [%i5], %f16

! Initialize FP counter increment value in register %f17 (constant)
sethi %hi(0x37800000), %o5
or    %o5, %lo(0x37800000), %o5
stw %o5, [%i5] 
ld [%i5], %f17 

! Initialize LFSR to 0x720b^4
sethi %hi(0x720b), %l0
or    %l0, %lo(0x720b), %l0
mulx  %l0, %l0, %l0
mulx  %l0, %l0, %l0

BEGIN_NODES7: ! Test instruction sequence for ISTREAM 7 begins

P7016: !_CASX [22] (maybe <- 0x3800001) (Int) (Loop entry)
sethi %hi(0x1), %l2
or %l2, %lo(0x1),  %l2
loop_entry_7_0:
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l3
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P7017: !_DWST [5] (maybe <- 0x3800003) (Int)
mov %l4, %l3 
stx %l3, [%i1 + 8]
add   %l4, 1, %l4

P7018: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 1

P7019: !_CASX [4] (maybe <- 0x3800004) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %o5
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %o5, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7020: !_MEMBAR (FP)

P7021: !_BST [13] (maybe <- 0x43000001) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7022: !_MEMBAR (FP)
membar #StoreLoad

P7023: !_SWAP [7] (maybe <- 0x3800006) (Int)
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7024: !_PREFETCH [7] (Int)
prefetch [%i2 + 4], 0

P7025: !_DWLD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7026: !_LD [16] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7027: !_MEMBAR (FP) (Branch target of P7621)
ba P7028
nop

TARGET7621:
ba RET7621
nop


P7028: !_BSTC [14] (maybe <- 0x43000004) (FP) (Branch target of P7764)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P7029
nop

TARGET7764:
ba RET7764
nop


P7029: !_MEMBAR (FP)
membar #StoreLoad

P7030: !_CAS [11] (maybe <- 0x3800007) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7031: !_SWAP [21] (maybe <- 0x3800008) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P7032: !_ST_BINIT [22] (maybe <- 0x3800009) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7033: !_MEMBAR (Int)
membar #StoreLoad

P7034: !_SWAP [15] (maybe <- 0x380000a) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7035: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P7036: !_DWLD [2] (Int)
ldx [%i0 + 8], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P7037: !_ST_BINIT [14] (maybe <- 0x380000b) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P7038: !_MEMBAR (Int)
membar #StoreLoad

P7039: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P7040: !_MEMBAR (FP)

P7041: !_BST [6] (maybe <- 0x43000007) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7042: !_MEMBAR (FP)
membar #StoreLoad

P7043: !_DWLD [23] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %f18
! 1 addresses covered
fmovs %f19, %f3

P7044: !_MEMBAR (FP)

P7045: !_BST [3] (maybe <- 0x4300000a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7046: !_MEMBAR (FP)
membar #StoreLoad

P7047: !_ST_BINIT [5] (maybe <- 0x380000c) (Int) (Branch target of P7387)
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 12] %asi
add   %l4, 1, %l4
ba P7048
nop

TARGET7387:
ba RET7387
nop


P7048: !_MEMBAR (Int)
membar #StoreLoad

P7049: !_DWLD [21] (Int)
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P7050: !_CAS [2] (maybe <- 0x380000d) (Int)
add %i0, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l6], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7051: !_MEMBAR (FP)
membar #StoreLoad

P7052: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P7053: !_MEMBAR (FP)

P7054: !_BST [13] (maybe <- 0x4300000d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7055: !_MEMBAR (FP)
membar #StoreLoad

P7056: !_ST [15] (maybe <- 0x380000e) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P7057: !_DWST_BINIT [6] (maybe <- 0x380000f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P7058: !_MEMBAR (Int)
membar #StoreLoad

P7059: !_ST_BINIT [21] (maybe <- 0x3800011) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7060: !_MEMBAR (Int)
membar #StoreLoad

P7061: !_DWST [7] (maybe <- 0x3800012) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i3 + 0 ] %asi
add   %l4, 1, %l4

P7062: !_CAS [6] (maybe <- 0x3800014) (Int)
lduw [%i3], %l7
mov %l7, %o5
! move %o5(lower) -> %o0(lower)
or %o5, %o0, %o0
mov %l4, %o1
cas [%i3], %o5, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7063: !_SWAP [22] (maybe <- 0x3800015) (Int)
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P7064: !_DWST_BINIT [19] (maybe <- 0x3800016) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P7065: !_MEMBAR (Int) (Branch target of P7859)
membar #StoreLoad
ba P7066
nop

TARGET7859:
ba RET7859
nop


P7066: !_LD [2] (Int) (Branch target of P7713)
lduw [%i0 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
ba P7067
nop

TARGET7713:
ba RET7713
nop


P7067: !_CAS [15] (maybe <- 0x3800018) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%i2], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7068: !_REPLACEMENT [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P7069: !_DWLD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l7
or %l7, %o3, %o3

P7070: !_PREFETCH [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 31

P7071: !_SWAP [7] (maybe <- 0x3800019) (Int)
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7072: !_DWST [19] (maybe <- 0x380001a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P7073: !_ST_BINIT [0] (maybe <- 0x380001c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 0] %asi
add   %l4, 1, %l4

P7074: !_MEMBAR (Int)
membar #StoreLoad

P7075: !_ST [21] (maybe <- 0x380001d) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P7076: !_ST [4] (maybe <- 0x380001e) (Int)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

P7077: !_CAS [18] (maybe <- 0x380001f) (Int)
lduw [%i2], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7078: !_CASX [20] (maybe <- 0x3800020) (Int)
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P7079: !_DWST [3] (maybe <- 0x3800021) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #1
!Logical addr: 3 

sethi %hi(0x200000), %o5
sub   %i1, %o5, %i1
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i1 + 0]
add   %l4, 1, %l4

P7080: !_DWLD [6] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldxa [%i3 + 0] %asi, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %o5
or %o5, %o2, %o2
! move %l3(upper) -> %o3(upper)
or %l3, %g0, %o3

P7081: !_CASX [3] (maybe <- 0x3800023) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o3(lower)
srlx %o3, 32, %o3
sllx %o3, 32, %o3
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
add  %l4, 1, %l4

P7082: !_MEMBAR (FP)

P7083: !_BSTC [3] (maybe <- 0x43000010) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7084: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7084
nop
RET7084:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7085: !_PREFETCH [5] (Int)
prefetch [%i1 + 12], 0

P7086: !_SWAP [13] (maybe <- 0x3800025) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P7087: !_SWAP [2] (maybe <- 0x3800026) (Int)
mov %l4, %o1
swap  [%i0 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7088: !_MEMBAR (FP)
membar #StoreLoad

P7089: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f7
fmovs %f19, %f8
fmovd %f34, %f18
fmovs %f19, %f9

P7090: !_MEMBAR (FP) (Branch target of P7997)
ba P7091
nop

TARGET7997:
ba RET7997
nop


P7091: !_SWAP [18] (maybe <- 0x3800027) (Int) (Branch target of P7657)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4
ba P7092
nop

TARGET7657:
ba RET7657
nop


P7092: !_DWST_BINIT [19] (maybe <- 0x3800028) (Int) (CBR)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7092
nop
RET7092:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7093: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7093
nop
RET7093:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7094: !_PREFETCH [19] (Int)
prefetch [%i3 + 4], 3

P7095: !_PREFETCH [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 20

P7096: !_MEMBAR (FP)
membar #StoreLoad

P7097: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f10
fmovd %f34, %f18
fmovs %f19, %f12

P7098: !_MEMBAR (FP)

P7099: !_ST_BINIT [14] (maybe <- 0x380002a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P7100: !_MEMBAR (Int)
membar #StoreLoad

P7101: !_DWST [16] (maybe <- 0x380002b) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7102: !_CAS [3] (maybe <- 0x380002d) (Int)
lduw [%i1], %o2
mov %o2, %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l4, %l3
cas [%i1], %l6, %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4

P7103: !_MEMBAR (FP)

P7104: !_BST [8] (maybe <- 0x43000013) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7105: !_MEMBAR (FP) (Branch target of P7264)
membar #StoreLoad
ba P7106
nop

TARGET7264:
ba RET7264
nop


P7106: !_SWAP [13] (maybe <- 0x380002e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7107: !_REPLACEMENT [2] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+12], %l6
st %l6, [%i3+12]
add %i3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]
add %l3, %o5, %l3
ld [%l3+12], %l6
st %l6, [%l3+12]

P7108: !_MEMBAR (FP)

P7109: !_BSTC [10] (maybe <- 0x43000016) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7110: !_MEMBAR (FP)
membar #StoreLoad

P7111: !_LDD [21] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7111
nop
RET7111:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7112: !_REPLACEMENT [19] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+4], %o5
st %o5, [%i2+4]
add %i2, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P7113: !_DWST [23] (maybe <- 0x380002f) (Int) (Branch target of P7962)
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4
ba P7114
nop

TARGET7962:
ba RET7962
nop


P7114: !_CASX [13] (maybe <- 0x3800030) (Int) (LE)
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
sllx %o5, 32, %l6
or %o5, %l6, %o5 
and %l3, %o5, %l6
srlx %l6, 8, %l6
sllx %l3, 8, %l3
and %l3, %o5, %l3
or %l3, %l6, %l3 
sethi %hi(0xffff0000), %o5
srlx %l3, 16, %l6
andn %l6, %o5, %l6
andn %l3, %o5, %l3
sllx %l3, 16, %l3
or %l3, %l6, %l3 
srlx %l3, 32, %l6
sllx %l3, 32, %l3
or %l3, %l6, %l6 
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldxa [%i3] %asi, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(upper) -> %o0(upper)
or %l7, %g0, %o0
mov %l7, %o5
mov  %l6, %l7
casxa [%i3] %asi, %o5, %l7
! move %l7(lower) -> %o0(lower)
srlx %o0, 32, %o0
sllx %o0, 32, %o0
srl %l7, 0, %o5
or %o5, %o0, %o0
! move %l7(upper) -> %o1(upper)
or %l7, %g0, %o1
add  %l4, 1, %l4

P7115: !_ST [23] (maybe <- 0x3800032) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P7116: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 0

P7117: !_LD [6] (Int)
lduw [%i3 + 0], %o5
! move %o5(lower) -> %o1(lower)
srlx %o1, 32, %o1
sllx %o1, 32, %o1
or %o5, %o1, %o1

P7118: !_SWAP [20] (maybe <- 0x3800033) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o2
swap  [%i2 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7119: !_MEMBAR (FP)

P7120: !_BSTC [21] (maybe <- 0x43000019) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7121: !_MEMBAR (FP)
membar #StoreLoad

P7122: !_DWST [9] (maybe <- 0x3800034) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7123: !_DWST [5] (maybe <- 0x3800036) (Int)
mov %l4, %l6 
stx %l6, [%i1 + 8]
add   %l4, 1, %l4

P7124: !_REPLACEMENT [13] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P7125: !_MEMBAR (FP)

P7126: !_BST [18] (maybe <- 0x4300001c) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7127: !_MEMBAR (FP)
membar #StoreLoad

P7128: !_PREFETCH [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 12], 22

P7129: !_DWST_BINIT [23] (maybe <- 0x3800037) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P7130: !_MEMBAR (Int)
membar #StoreLoad

P7131: !_ST_BINIT [7] (maybe <- 0x3800038) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P7132: !_MEMBAR (Int)
membar #StoreLoad

P7133: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P7134: !_MEMBAR (FP)

P7135: !_DWST [10] (maybe <- 0x3800039) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P7136: !_CAS [23] (maybe <- 0x380003b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2
mov %l4, %o3
cas [%l3], %o5, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7137: !_DWLD [3] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P7138: !_LD [5] (Int)
lduw [%i1 + 12], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7139: !_CAS [10] (maybe <- 0x380003c) (Int) (Branch target of P7985)
add %i2, 4, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4
ba P7140
nop

TARGET7985:
ba RET7985
nop


P7140: !_CAS [1] (maybe <- 0x380003d) (Int)
add %i0, 4, %l3
lduw [%l3], %o1
mov %o1, %o5
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P7141: !_DWST_BINIT [7] (maybe <- 0x380003e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P7142: !_MEMBAR (Int)
membar #StoreLoad

P7143: !_ST_BINIT [4] (maybe <- 0x3800040) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #2
!Logical addr: 4 

sethi %hi(0x200000), %l7
sub   %i1, %l7, %i1
wr %g0, 0xe2, %asi
stwa   %l4, [%i1 + 4] %asi
add   %l4, 1, %l4

P7144: !_MEMBAR (Int)
membar #StoreLoad

P7145: !_PREFETCH [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 0], 2

P7146: !_ST [10] (maybe <- 0x3800041) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7147: !_SWAP [14] (maybe <- 0x3800042) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7148: !_CASX [15] (maybe <- 0x3800043) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P7149: !_LD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7150: !_MEMBAR (FP)

P7151: !_BSTC [19] (maybe <- 0x4300001f) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7152: !_MEMBAR (FP)
membar #StoreLoad

P7153: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P7154: !_CAS [22] (maybe <- 0x3800045) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l6
lduw [%l6], %o0
mov %o0, %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P7155: !_MEMBAR (FP)
membar #StoreLoad

P7156: !_BLD [6] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P7157: !_MEMBAR (FP)

P7158: !_SWAP [22] (maybe <- 0x3800046) (Int)
mov %l4, %o1
swap  [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7159: !_SWAP [16] (maybe <- 0x3800047) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 4], %l6
! move %l6(lower) -> %o1(lower)
srl %l6, 0, %o5
or %o5, %o1, %o1
add   %l4, 1, %l4

P7160: !_LDD [16] (Int)
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P7161: !_DWLD [3] (Int) (CBR) (Branch target of P7111)
ldx [%i1 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7161
nop
RET7161:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P7162
nop

TARGET7111:
ba RET7111
nop


P7162: !_CAS [5] (maybe <- 0x3800048) (Int)
add %i1, 12, %l3
lduw [%l3], %o4
mov %o4, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7163: !_SWAP [21] (maybe <- 0x3800049) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7164: !_DWST_BINIT [6] (maybe <- 0x380004a) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P7165: !_MEMBAR (Int)

P7166: !_BSTC [14] (maybe <- 0x43000022) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7167: !_MEMBAR (FP)

P7168: !_BSTC [5] (maybe <- 0x43000025) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7169: !_MEMBAR (FP)
membar #StoreLoad

P7170: !_DWLD [2] (Int)
ldx [%i0 + 8], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %o5
or %o5, %o0, %o0

P7171: !_CASX [18] (maybe <- 0x380004c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P7172: !_CASX [12] (maybe <- 0x380004e) (Int)
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l6
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l6, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P7173: !_CAS [18] (maybe <- 0x3800050) (Int)
lduw [%i2], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%i2], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P7174: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7174
nop
RET7174:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7175: !_BST [15] (maybe <- 0x43000028) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7176: !_MEMBAR (FP)
membar #StoreLoad

P7177: !_REPLACEMENT [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P7178: !_MEMBAR (FP)

P7179: !_BST [12] (maybe <- 0x4300002b) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7180: !_MEMBAR (FP)

P7181: !_BST [4] (maybe <- 0x4300002e) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7182: !_MEMBAR (FP) (Branch target of P7093)
ba P7183
nop

TARGET7093:
ba RET7093
nop


P7183: !_BSTC [9] (maybe <- 0x43000031) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7184: !_MEMBAR (FP)
membar #StoreLoad

P7185: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P7186: !_DWST [1] (maybe <- 0x3800051) (Int) (Branch target of P7360)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4
ba P7187
nop

TARGET7360:
ba RET7360
nop


P7187: !_MEMBAR (FP)

P7188: !_BST [12] (maybe <- 0x43000034) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7189: !_MEMBAR (FP)
membar #StoreLoad

P7190: !_ST_BINIT [9] (maybe <- 0x3800053) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P7191: !_MEMBAR (Int)
membar #StoreLoad

P7192: !_LD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 0], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P7193: !_MEMBAR (FP) (Branch target of P7674)
ba P7194
nop

TARGET7674:
ba RET7674
nop


P7194: !_BSTC [3] (maybe <- 0x43000037) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7195: !_MEMBAR (FP)
membar #StoreLoad

P7196: !_LD [4] (Int)
lduw [%i1 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P7197: !_MEMBAR (FP)

P7198: !_BST [20] (maybe <- 0x4300003a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7199: !_MEMBAR (FP)
membar #StoreLoad

P7200: !_LD [3] (Int)
lduw [%i1 + 0], %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2

P7201: !_MEMBAR (FP)

P7202: !_BST [8] (maybe <- 0x4300003d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7203: !_MEMBAR (FP)
membar #StoreLoad

P7204: !_REPLACEMENT [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+0], %l7
st %l7, [%i3+0]
add %i3, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]
add %l6, %l3, %l6
ld [%l6+0], %l7
st %l7, [%l6+0]

P7205: !_DWST [20] (maybe <- 0x3800054) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P7206: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 20

P7207: !_MEMBAR (FP)

P7208: !_BSTC [19] (maybe <- 0x43000040) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7209: !_MEMBAR (FP)
membar #StoreLoad

P7210: !_DWST [19] (maybe <- 0x3800055) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7211: !_MEMBAR (FP)

P7212: !_BST [16] (maybe <- 0x43000043) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7213: !_MEMBAR (FP)
membar #StoreLoad

P7214: !_PREFETCH [8] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 12] %asi, 20

P7215: !_LD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P7216: !_CAS [19] (maybe <- 0x3800057) (Int)
add %i3, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%o5], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7217: !_ST [10] (maybe <- 0x3800058) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7218: !_CAS [7] (maybe <- 0x3800059) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l7], %l6, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7219: !_CASX [6] (maybe <- 0x380005a) (Int)
ldx [%i3], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %l6
or %l6, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i3], %l6, %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
add  %l4, 1, %l4

P7220: !_ST_BINIT [15] (maybe <- 0x380005c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7221: !_MEMBAR (Int)
membar #StoreLoad

P7222: !_SWAP [4] (maybe <- 0x380005d) (Int)
mov %l4, %l7
swap  [%i1 + 4], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P7223: !_CAS [18] (maybe <- 0x380005e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o3
mov %o3, %o5
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov %l4, %l7
cas [%i3], %o5, %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P7224: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7225: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7226: !_SWAP [10] (maybe <- 0x380005f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7227: !_SWAP [13] (maybe <- 0x3800060) (Int)
mov %l4, %o5
swap  [%i3 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P7228: !_MEMBAR (FP)

P7229: !_BST [5] (maybe <- 0x43000046) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7230: !_MEMBAR (FP)
membar #StoreLoad

P7231: !_ST [14] (maybe <- 0x3800061) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l6
srl %l6, 8, %l6
sll %l4, 8, %o5
and %o5, %l3, %o5
or %o5, %l6, %o5
srl %o5, 16, %l6
sll %o5, 16, %o5
srl %o5, 0, %o5
or %o5, %l6, %o5
stwa   %o5, [%i3 + 12] %asi
add   %l4, 1, %l4

P7232: !_MEMBAR (FP)

P7233: !_BSTC [4] (maybe <- 0x43000049) (FP) (Branch target of P7092)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi
ba P7234
nop

TARGET7092:
ba RET7092
nop


P7234: !_MEMBAR (FP)
membar #StoreLoad

P7235: !_ST_BINIT [16] (maybe <- 0x3800062) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stwa   %l4, [%i3 + 4] %asi
add   %l4, 1, %l4

P7236: !_MEMBAR (Int)
membar #StoreLoad

P7237: !_ST [13] (maybe <- 0x3800063) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7238: !_MEMBAR (FP)

P7239: !_BSTC [11] (maybe <- 0x4300004c) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7240: !_MEMBAR (FP)

P7241: !_BST [16] (maybe <- 0x4300004f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7242: !_MEMBAR (FP)
membar #StoreLoad

P7243: !_DWST_BINIT [10] (maybe <- 0x3800064) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P7244: !_MEMBAR (Int)
membar #StoreLoad

P7245: !_CAS [20] (maybe <- 0x3800066) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o1
mov %o1, %l3
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1
mov %l4, %o5
cas [%l6], %l3, %o5
! move %o5(lower) -> %o1(lower)
srl %o5, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P7246: !_PREFETCH [9] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 0

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7246
nop
RET7246:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7247: !_CASX [19] (maybe <- 0x3800067) (Int)
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7248: !_DWST_BINIT [14] (maybe <- 0x3800069) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %o5
srl %o5, 8, %o5
sll %l4, 8, %l7
and %l7, %l6, %l7
or %l7, %o5, %l7
srl %l7, 16, %o5
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %o5, %l7
sllx %l7, 32, %l7 
stxa %l7, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P7249: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7250: !_CASX [13] (maybe <- 0x380006a) (Int)
ldx [%i3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i3], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P7251: !_LD [16] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
lduw [%i2 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7252: !_CAS [22] (maybe <- 0x380006c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%o5], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7253: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P7254: !_ST_BINIT [2] (maybe <- 0x380006d) (Int) (Branch target of P7882)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4
ba P7255
nop

TARGET7882:
ba RET7882
nop


P7255: !_MEMBAR (Int)
membar #StoreLoad

P7256: !_LDD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P7257: !_DWLD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P7258: !_PREFETCH [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P7259: !_ST [2] (maybe <- 0x380006e) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P7260: !_DWST [9] (maybe <- 0x43000052) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P7261: !_MEMBAR (FP)

P7262: !_BSTC [19] (maybe <- 0x43000054) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7263: !_MEMBAR (FP)
membar #StoreLoad

P7264: !_CASX [6] (maybe <- 0x380006f) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %o5
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i3], %o5, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7264
nop
RET7264:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7265: !_DWST [5] (maybe <- 0x3800071) (Int)
mov %l4, %l3 
stx %l3, [%i1 + 8]
add   %l4, 1, %l4

P7266: !_MEMBAR (FP)

P7267: !_BSTC [15] (maybe <- 0x43000057) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7268: !_MEMBAR (FP)
membar #StoreLoad

P7269: !_LD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7270: !_DWLD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l3
or %l3, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2

P7271: !_REPLACEMENT [12] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+0], %l6
st %l6, [%i3+0]
add %i3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

P7272: !_MEMBAR (FP)
membar #StoreLoad

P7273: !_BLD [17] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P7274: !_MEMBAR (FP)

P7275: !_LD [16] (Int) (LE)
wr %g0, 0x88, %asi
lduwa [%i2 + 4] %asi, %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P7276: !_DWST [0] (maybe <- 0x3800072) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i0 + 0]
add   %l4, 1, %l4

P7277: !_DWST_BINIT [5] (maybe <- 0x3800074) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i1 + 8] %asi 
add   %l4, 1, %l4

P7278: !_MEMBAR (Int)
membar #StoreLoad

P7279: !_DWLD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)

P7280: !_DWST_BINIT [7] (maybe <- 0x3800075) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P7281: !_MEMBAR (Int)
membar #StoreLoad

P7282: !_DWST_BINIT [21] (maybe <- 0x3800077) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P7283: !_MEMBAR (Int)
membar #StoreLoad

P7284: !_ST_BINIT [9] (maybe <- 0x3800079) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 0] %asi
add   %l4, 1, %l4

P7285: !_MEMBAR (Int)
membar #StoreLoad

P7286: !_CASX [23] (maybe <- 0x380007a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l7
ldx [%l7], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l6
mov %l4, %o0
casx [%l7], %l6, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P7287: !_CASX [14] (maybe <- 0x380007b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l7
ldx [%l7], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %l6
mov %l4, %o2
casx [%l7], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P7288: !_MEMBAR (FP) (CBR) (Branch target of P7640)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7288
nop
RET7288:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0

ba P7289
nop

TARGET7640:
ba RET7640
nop


P7289: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P7290: !_MEMBAR (FP)

P7291: !_BSTC [0] (maybe <- 0x4300005a) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P7292: !_MEMBAR (FP)
membar #StoreLoad

P7293: !_LDD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7294: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %l3
or %l3, %o3, %o3

P7295: !_DWST [21] (maybe <- 0x380007c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P7296: !_SWAP [22] (maybe <- 0x380007e) (Int)
mov %l4, %o4
swap  [%i3 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7297: !_SWAP [22] (maybe <- 0x380007f) (Int)
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7298: !_CAS [8] (maybe <- 0x3800080) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l3
lduw [%l3], %o0
mov %o0, %o5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P7299: !_CASX [5] (maybe <- 0x3800081) (Int)
add %i1, 8, %l3
ldx [%l3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov  %o1, %o5
mov %l4, %o2
casx [%l3], %o5, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P7300: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7300
nop
RET7300:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7301: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P7302: !_MEMBAR (FP)

P7303: !_DWST_BINIT [20] (maybe <- 0x3800082) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %l7
srl %l7, 8, %l7
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %l7, %l6
srl %l6, 16, %l7
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %l7, %l6
sllx %l6, 32, %l6 
stxa %l6, [%i3 + 8 ] %asi
add   %l4, 1, %l4

P7304: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7305: !_PREFETCH [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 20

P7306: !_ST [13] (maybe <- 0x3800083) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P7307: !_MEMBAR (FP)
membar #StoreLoad

P7308: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P7309: !_MEMBAR (FP)

P7310: !_DWST [7] (maybe <- 0x3800084) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7311: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7312: !_DWLD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7313: !_LDD [19] (Int) (Branch target of P7362)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
ba P7314
nop

TARGET7362:
ba RET7362
nop


P7314: !_LD [19] (Int)
lduw [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7315: !_ST_BINIT [17] (maybe <- 0x3800086) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P7316: !_MEMBAR (Int)
membar #StoreLoad

P7317: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P7318: !_MEMBAR (FP)

P7319: !_REPLACEMENT [14] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+12], %o5
st %o5, [%i3+12]
add %i3, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P7320: !_DWST_BINIT [6] (maybe <- 0x3800087) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i2 + 0] %asi
add   %l4, 1, %l4

P7321: !_MEMBAR (Int)
membar #StoreLoad

P7322: !_ST [5] (maybe <- 0x3800089) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P7323: !_ST [6] (maybe <- 0x380008a) (Int) (LE)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P7324: !_CAS [5] (maybe <- 0x380008b) (Int)
add %i1, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
mov %l4, %o2
cas [%l7], %l6, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7325: !_CAS [14] (maybe <- 0x380008c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
mov %l4, %o3
cas [%l7], %l6, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7326: !_MEMBAR (FP)
membar #StoreLoad

P7327: !_BLD [15] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P7328: !_MEMBAR (FP)

P7329: !_REPLACEMENT [9] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+0], %o5
st %o5, [%i3+0]
add %i3, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P7330: !_MEMBAR (FP) (Branch target of P7918)
membar #StoreLoad
ba P7331
nop

TARGET7918:
ba RET7918
nop


P7331: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P7332: !_MEMBAR (FP)

P7333: !_PREFETCH [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 22

P7334: !_ST [3] (maybe <- 0x380008d) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P7335: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P7336: !_CAS [6] (maybe <- 0x380008e) (Int) (LE)
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l3
or %l3, %lo(0xff00ff00), %l3
and %l4, %l3, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l3, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduwa [%i3] %asi, %l7
mov %l7, %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3
mov %l6, %o4
casa [%i3] %asi, %o5, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7337: !_ST_BINIT [21] (maybe <- 0x380008f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7338: !_MEMBAR (Int)
membar #StoreLoad

P7339: !_ST [15] (maybe <- 0x3800090) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P7340: !_MEMBAR (FP)
membar #StoreLoad

P7341: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P7342: !_MEMBAR (FP)

P7343: !_BLD [7] (FP) (CBR)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7343
nop
RET7343:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7344: !_MEMBAR (FP)

P7345: !_DWST [22] (maybe <- 0x3800091) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i3 + 0]
add   %l4, 1, %l4

P7346: !_ST [15] (maybe <- 0x3800093) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P7347: !_MEMBAR (FP)

P7348: !_BSTC [21] (maybe <- 0x4300005d) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7349: !_MEMBAR (FP)
membar #StoreLoad

P7350: !_PREFETCH [8] (Int) (Branch target of P7644)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 22
ba P7351
nop

TARGET7644:
ba RET7644
nop


P7351: !_PREFETCH [7] (Int)
prefetch [%i3 + 4], 22

P7352: !_DWST_BINIT [9] (maybe <- 0x3800094) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P7353: !_MEMBAR (Int)
membar #StoreLoad

P7354: !_LD [9] (Int)
lduw [%i2 + 0], %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7355: !_LD [0] (Int)
lduw [%i0 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7356: !_DWST [20] (maybe <- 0x3800096) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stx %l7, [%i3 + 8]
add   %l4, 1, %l4

P7357: !_SWAP [7] (maybe <- 0x3800097) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 4], %o5
! move %o5(lower) -> %o0(lower)
srl %o5, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P7358: !_MEMBAR (FP)

P7359: !_BST [1] (maybe <- 0x43000060) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P7360: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7360
nop
RET7360:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7361: !_BSTC [3] (maybe <- 0x43000063) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7362: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7362
nop
RET7362:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7363: !_PREFETCH [18] (Int)
prefetch [%i3 + 0], 20

P7364: !_LD [17] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7365: !_LDD [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P7366: !_MEMBAR (FP)
membar #StoreLoad

P7367: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P7368: !_MEMBAR (FP)

P7369: !_SWAP [19] (maybe <- 0x3800098) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %l3
or %l3, %o2, %o2
add   %l4, 1, %l4

P7370: !_SWAP [15] (maybe <- 0x3800099) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7371: !_ST [16] (maybe <- 0x380009a) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7372: !_ST [3] (maybe <- 0x380009b) (Int)
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P7373: !_ST_BINIT [1] (maybe <- 0x380009c) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 4] %asi
add   %l4, 1, %l4

P7374: !_MEMBAR (Int)

P7375: !_BSTC [23] (maybe <- 0x43000066) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7376: !_MEMBAR (FP)
membar #StoreLoad

P7377: !_CAS [10] (maybe <- 0x380009d) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
mov %l4, %o4
cas [%o5], %l7, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7378: !_MEMBAR (FP)

P7379: !_BST [23] (maybe <- 0x43000069) (FP) (Branch target of P7343)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi
ba P7380
nop

TARGET7343:
ba RET7343
nop


P7380: !_MEMBAR (FP)
membar #StoreLoad

P7381: !_SWAP [21] (maybe <- 0x380009e) (Int)
mov %l4, %o5
swap  [%i3 + 0], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7382: !_MEMBAR (FP)
membar #StoreLoad

P7383: !_BLD [10] (FP)
wr %g0, 0xf0, %asi
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P7384: !_MEMBAR (FP)

P7385: !_BSTC [9] (maybe <- 0x4300006c) (FP) (Branch target of P7471)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi
ba P7386
nop

TARGET7471:
ba RET7471
nop


P7386: !_MEMBAR (FP)
membar #StoreLoad

P7387: !_DWST [8] (maybe <- 0x380009f) (Int) (CBR) (Branch target of P7161)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7387
nop
RET7387:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0

ba P7388
nop

TARGET7161:
ba RET7161
nop


P7388: !_MEMBAR (FP)

P7389: !_BST [13] (maybe <- 0x4300006f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7390: !_MEMBAR (FP)
membar #StoreLoad

P7391: !_DWLD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7392: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P7393: !_ST [5] (maybe <- 0x38000a0) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P7394: !_DWLD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P7395: !_LD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l7
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P7396: !_ST_BINIT [23] (maybe <- 0x38000a1) (Int) (Branch target of P7989)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4
ba P7397
nop

TARGET7989:
ba RET7989
nop


P7397: !_MEMBAR (Int)
membar #StoreLoad

P7398: !_ST [6] (maybe <- 0x38000a2) (Int)
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P7399: !_CASX [9] (maybe <- 0x38000a3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %l7
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i3], %l7, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P7400: !_DWST [19] (maybe <- 0x38000a5) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7401: !_CAS [0] (maybe <- 0x38000a7) (Int)
lduw [%i0], %o0
mov %o0, %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov %l4, %l3
cas [%i0], %l6, %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l6
or %l6, %o0, %o0
add   %l4, 1, %l4

P7402: !_CASX [15] (maybe <- 0x38000a8) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldx [%i3], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i3], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P7403: !_ST_BINIT [6] (maybe <- 0x38000aa) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7404: !_MEMBAR (Int)
membar #StoreLoad

P7405: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7406: !_ST_BINIT [11] (maybe <- 0x38000ab) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

P7407: !_MEMBAR (Int)

P7408: !_BST [4] (maybe <- 0x43000072) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7409: !_MEMBAR (FP)

P7410: !_BST [2] (maybe <- 0x43000075) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P7411: !_MEMBAR (FP)
membar #StoreLoad

P7412: !_DWST [16] (maybe <- 0x38000ac) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i2 + 0]
add   %l4, 1, %l4

P7413: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 16

P7414: !_PREFETCH [10] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetcha [%i2 + 4] %asi, 31

P7415: !_CAS [20] (maybe <- 0x38000ae) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
mov %l4, %o4
cas [%l6], %l3, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7416: !_LD [20] (Int)
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7417: !_MEMBAR (FP)
membar #StoreLoad

P7418: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P7419: !_MEMBAR (FP)

P7420: !_DWLD [0] (Int)
ldx [%i0 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P7421: !_DWLD [5] (FP)
ldd [%i1 + 8], %f18
! 1 addresses covered
fmovs %f19, %f7

P7422: !_DWLD [1] (Int)
ldx [%i0 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P7423: !_DWST_BINIT [13] (maybe <- 0x38000af) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P7424: !_MEMBAR (Int)
membar #StoreLoad

P7425: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

P7426: !_LDD [3] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7427: !_SWAP [18] (maybe <- 0x38000b1) (Int)
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7428: !_SWAP [7] (maybe <- 0x38000b2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7429: !_MEMBAR (FP)
membar #StoreLoad

P7430: !_BLD [3] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P7431: !_MEMBAR (FP)

P7432: !_BSTC [8] (maybe <- 0x43000078) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7433: !_MEMBAR (FP)
membar #StoreLoad

P7434: !_LD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7435: !_SWAP [9] (maybe <- 0x38000b3) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6
swap  [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %o5
or %o5, %o0, %o0
add   %l4, 1, %l4

P7436: !_MEMBAR (FP) (Branch target of P7880)
ba P7437
nop

TARGET7880:
ba RET7880
nop


P7437: !_BSTC [19] (maybe <- 0x4300007b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7438: !_MEMBAR (FP)
membar #StoreLoad

P7439: !_LDD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P7440: !_LDD [23] (Int)
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P7441: !_CASX [20] (maybe <- 0x38000b4) (Int)
add %i2, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P7442: !_MEMBAR (FP)

P7443: !_BSTC [16] (maybe <- 0x4300007e) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7444: !_MEMBAR (FP)
membar #StoreLoad

P7445: !_PREFETCH [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 30

P7446: !_MEMBAR (FP)

P7447: !_BST [5] (maybe <- 0x43000081) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7448: !_MEMBAR (FP)
membar #StoreLoad

P7449: !_ST [1] (maybe <- 0x38000b5) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P7450: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7451: !_CAS [21] (maybe <- 0x38000b6) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%i2], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7452: !_SWAP [17] (maybe <- 0x38000b7) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P7453: !_DWST [6] (maybe <- 0x38000b8) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P7454: !_LD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 4], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P7455: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P7456: !_PREFETCH [16] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
prefetch [%i3 + 4], 23

P7457: !_CASX [20] (maybe <- 0x38000ba) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
add  %l4, 1, %l4

P7458: !_MEMBAR (FP)

P7459: !_BST [10] (maybe <- 0x43000084) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7460: !_MEMBAR (FP)
membar #StoreLoad

P7461: !_LDD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7462: !_CASX [5] (maybe <- 0x38000bb) (Int)
add %i1, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P7463: !_ST [3] (maybe <- 0x38000bc) (Int)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #3
!Logical addr: 3 

sethi %hi(0x200000), %l3
sub   %i1, %l3, %i1
stw   %l4, [%i1 + 0 ]
add   %l4, 1, %l4

P7464: !_LD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P7465: !_LDD [9] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7466: !_CASX [1] (maybe <- 0x38000bd) (Int)
ldx [%i0], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %o4, %l3
sllx %l4, 32, %o0
add  %l4, 1, %l4
or   %l4, %o0, %o0
casx [%i0], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P7467: !_MEMBAR (FP)

P7468: !_BSTC [3] (maybe <- 0x43000087) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7469: !_MEMBAR (FP)
membar #StoreLoad

P7470: !_LDD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P7471: !_LDD [4] (Int) (CBR)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
! move %l7(lower) -> %o2(lower)
or %l7, %o2, %o2

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7471
nop
RET7471:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7472: !_LDD [16] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7473: !_SWAP [11] (maybe <- 0x38000bf) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o4
swap  [%i3 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7474: !_LD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7475: !_REPLACEMENT [16] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+4], %o5
st %o5, [%i3+4]
add %i3, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]
add %l7, %l6, %l7
ld [%l7+4], %o5
st %o5, [%l7+4]

P7476: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P7477: !_ST_BINIT [0] (maybe <- 0x38000c0) (Int) (LE)
wr %g0, 0xea, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
and %l4, %l6, %l7
srl %l7, 8, %l7
sll %l4, 8, %l3
and %l3, %l6, %l3
or %l3, %l7, %l3
srl %l3, 16, %l7
sll %l3, 16, %l3
srl %l3, 0, %l3
or %l3, %l7, %l3
stwa   %l3, [%i0 + 0] %asi
add   %l4, 1, %l4

P7478: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7479: !_ST_BINIT [2] (maybe <- 0x38000c1) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P7480: !_MEMBAR (Int)
membar #StoreLoad

P7481: !_PREFETCH [18] (Int)
prefetch [%i2 + 0], 22

P7482: !_SWAP [22] (maybe <- 0x38000c2) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o1
swap  [%i3 + 4], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7483: !_DWST [23] (maybe <- 0x38000c3) (Int)
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P7484: !_LD [5] (Int)
lduw [%i1 + 12], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1

P7485: !_REPLACEMENT [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

P7486: !_CASX [22] (maybe <- 0x38000c4) (Int)
ldx [%i3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i3], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7487: !_DWLD [5] (Int)
ldx [%i1 + 8], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P7488: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7489: !_LD [1] (Int)
lduw [%i0 + 4], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0

P7490: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P7491: !_DWST [12] (maybe <- 0x4300008a) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P7492: !_MEMBAR (FP)

P7493: !_BST [13] (maybe <- 0x4300008c) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7494: !_MEMBAR (FP)
membar #StoreLoad

P7495: !_DWST [6] (maybe <- 0x38000c6) (Int)
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stx %l7, [%i2 + 0]
add   %l4, 1, %l4

P7496: !_REPLACEMENT [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+0], %o5
st %o5, [%i2+0]
add %i2, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]
add %l7, %l6, %l7
ld [%l7+0], %o5
st %o5, [%l7+0]

P7497: !_DWST_BINIT [2] (maybe <- 0x38000c8) (Int) (Branch target of P7883)
wr %g0, 0xe2, %asi
mov %l4, %l3 
stxa %l3, [%i0 + 8] %asi 
add   %l4, 1, %l4
ba P7498
nop

TARGET7883:
ba RET7883
nop


P7498: !_MEMBAR (Int)
membar #StoreLoad

P7499: !_LD [15] (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
lduw [%i3 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2

P7500: !_SWAP [21] (maybe <- 0x38000c9) (Int) (Branch target of P7835)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5
swap  [%i2 + 0], %o5
! move %o5(lower) -> %o2(lower)
srl %o5, 0, %l6
or %l6, %o2, %o2
add   %l4, 1, %l4
ba P7501
nop

TARGET7835:
ba RET7835
nop


P7501: !_PREFETCH [22] (Int)
prefetch [%i2 + 4], 19

P7502: !_LDD [15] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7503: !_PREFETCH [21] (Int)
prefetch [%i2 + 0], 3

P7504: !_SWAP [5] (maybe <- 0x38000ca) (Int)
mov %l4, %o4
swap  [%i1 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7505: !_MEMBAR (FP)

P7506: !_BST [19] (maybe <- 0x4300008f) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7507: !_MEMBAR (FP)
membar #StoreLoad

P7508: !_DWST_BINIT [15] (maybe <- 0x38000cb) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P7509: !_MEMBAR (Int)
membar #StoreLoad

P7510: !_DWLD [4] (FP)
ldd [%i1 + 0], %f18
! 2 addresses covered
fmovs %f18, %f11
fmovs %f19, %f12

P7511: !_DWST [7] (maybe <- 0x38000cd) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P7512: !_DWST [7] (maybe <- 0x38000cf) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P7513: !_DWST [22] (maybe <- 0x38000d1) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P7514: !_MEMBAR (FP)
membar #StoreLoad

P7515: !_BLD [0] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f13
fmovs %f19, %f14
fmovd %f34, %f18
fmovs %f19, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P7516: !_MEMBAR (FP)

P7517: !_DWST_BINIT [16] (maybe <- 0x38000d3) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P7518: !_MEMBAR (Int)
membar #StoreLoad

P7519: !_DWST [15] (maybe <- 0x38000d5) (Int)
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stx %l6, [%i3 + 0]
add   %l4, 1, %l4

P7520: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 20

P7521: !_MEMBAR (FP)

P7522: !_BST [12] (maybe <- 0x43000092) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7523: !_MEMBAR (FP)
membar #StoreLoad

P7524: !_ST [11] (maybe <- 0x38000d7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P7525: !_MEMBAR (FP)

P7526: !_BSTC [13] (maybe <- 0x43000095) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7527: !_MEMBAR (FP)
membar #StoreLoad

P7528: !_DWLD [23] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7528
nop
RET7528:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7529: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 8], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7530: !_CASX [3] (maybe <- 0x38000d8) (Int)
ldx [%i1], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P7531: !_LD [20] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ld [%i3 + 12], %f0
! 1 addresses covered

P7532: !_DWLD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %o5
or %o5, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3

P7533: !_CAS [1] (maybe <- 0x38000da) (Int)
add %i0, 4, %l7
lduw [%l7], %l3
mov %l3, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
mov %l4, %o4
cas [%l7], %l6, %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7534: !_REPLACEMENT [5] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+12], %o5
st %o5, [%i3+12]
add %i3, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P7535: !_SWAP [21] (maybe <- 0x38000db) (Int)
mov %l4, %l7
swap  [%i2 + 0], %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7536: !_DWST_BINIT [11] (maybe <- 0x38000dc) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stxa %o5, [%i2 + 8] %asi 
add   %l4, 1, %l4

P7537: !_MEMBAR (Int)
membar #StoreLoad

P7538: !_CAS [18] (maybe <- 0x38000dd) (Int) (Branch target of P7646)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%i3], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4
ba P7539
nop

TARGET7646:
ba RET7646
nop


P7539: !_MEMBAR (FP)

P7540: !_BSTC [22] (maybe <- 0x43000098) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7541: !_MEMBAR (FP) (Branch target of P7288)
membar #StoreLoad
ba P7542
nop

TARGET7288:
ba RET7288
nop


P7542: !_DWLD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)

P7543: !_CASX [11] (maybe <- 0x38000de) (Int) (CBR)
add %i3, 8, %l3
ldx [%l3], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov  %o2, %o5
mov %l4, %o3
casx [%l3], %o5, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7543
nop
RET7543:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7544: !_MEMBAR (FP)

P7545: !_BSTC [5] (maybe <- 0x4300009b) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7546: !_MEMBAR (FP)
membar #StoreLoad

P7547: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 4], 25

P7548: !_DWST_BINIT [14] (maybe <- 0x38000df) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P7549: !_MEMBAR (Int)
membar #StoreLoad

P7550: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+0], %l3
st %l3, [%i2+0]
add %i2, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P7551: !_DWLD [17] (FP)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
ldd [%i3 + 8], %f18
! 1 addresses covered
fmovs %f19, %f1

P7552: !_CAS [23] (maybe <- 0x38000e0) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %l7
lduw [%l7], %o4
mov %o4, %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
mov %l4, %l3
cas [%l7], %l6, %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7553: !_PREFETCH [15] (Int)
prefetch [%i3 + 0], 28

P7554: !_PREFETCH [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 0

P7555: !_DWLD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)

P7556: !_MEMBAR (FP)
membar #StoreLoad

P7557: !_BLD [13] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4

P7558: !_MEMBAR (FP)

P7559: !_ST [14] (maybe <- 0x38000e1) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P7560: !_DWST [6] (maybe <- 0x4300009e) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P7561: !_SWAP [8] (maybe <- 0x38000e2) (Int)
mov %l4, %o1
swap  [%i2 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7562: !_SWAP [15] (maybe <- 0x38000e3) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P7563: !_CASX [3] (maybe <- 0x38000e4) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %o5
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %o5, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7564: !_SWAP [2] (maybe <- 0x38000e6) (Int)
mov %l4, %o4
swap  [%i0 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7565: !_MEMBAR (FP)

P7566: !_BST [4] (maybe <- 0x430000a0) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7567: !_MEMBAR (FP)
membar #StoreLoad

P7568: !_DWLD [13] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7569: !_MEMBAR (FP)
membar #StoreLoad

P7570: !_BLD [19] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P7571: !_MEMBAR (FP)

P7572: !_DWST_BINIT [22] (maybe <- 0x38000e7) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P7573: !_MEMBAR (Int)

P7574: !_BST [16] (maybe <- 0x430000a3) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7575: !_MEMBAR (FP)
membar #StoreLoad

P7576: !_ST [1] (maybe <- 0x38000e9) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P7577: !_CAS [1] (maybe <- 0x38000ea) (Int)
add %i0, 4, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o0(lower)
or %l3, %o0, %o0
mov %l4, %o1
cas [%l6], %l3, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7578: !_LDD [4] (Int)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o1(lower)
or %l6, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2

P7579: !_LDD [4] (Int) (Branch target of P7602)
ldd [%i1 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
ba P7580
nop

TARGET7602:
ba RET7602
nop


P7580: !_LD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

P7581: !_DWST_BINIT [21] (maybe <- 0x38000eb) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i3 + 0] %asi
add   %l4, 1, %l4

P7582: !_MEMBAR (Int)
membar #StoreLoad

P7583: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P7584: !_LDD [2] (Int)
ldd [%i0 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7585: !_REPLACEMENT [23] (Int)
sethi %hi(0x20000), %l3
ld [%i2+12], %l7
st %l7, [%i2+12]
add %i2, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]
add %l6, %l3, %l6
ld [%l6+12], %l7
st %l7, [%l6+12]

P7586: !_DWST [8] (maybe <- 0x38000ed) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %o5 
stx %o5, [%i3 + 8]
add   %l4, 1, %l4

P7587: !_ST_BINIT [13] (maybe <- 0x38000ee) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7588: !_MEMBAR (Int)
membar #StoreLoad

P7589: !_PREFETCH [14] (Int)
prefetch [%i2 + 12], 0

P7590: !_ST [16] (maybe <- 0x38000ef) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P7591: !_DWST_BINIT [4] (maybe <- 0x38000f0) (Int) (CBR)
!-- Aliased access: Adjusting base register for region 1 (%i1) to use alias #0
!Logical addr: 4 

sethi %hi(0x600000), %l3
add   %i1, %l3, %i1
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i1 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7591
nop
RET7591:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7592: !_MEMBAR (Int)
membar #StoreLoad

P7593: !_DWLD [19] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7594: !_ST_BINIT [2] (maybe <- 0x38000f2) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i0 + 12] %asi
add   %l4, 1, %l4

P7595: !_MEMBAR (Int)
membar #StoreLoad

P7596: !_CAS [17] (maybe <- 0x38000f3) (Int)
add %i3, 12, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
mov %l4, %o1
cas [%o5], %l7, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7597: !_DWLD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l7
or %l7, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2

P7598: !_LD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2

P7599: !_REPLACEMENT [0] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS2_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P7600: !_ST [10] (maybe <- 0x38000f4) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7601: !_LD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 12], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P7602: !_DWST_BINIT [10] (maybe <- 0x38000f5) (Int) (CBR)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7602
nop
RET7602:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7603: !_MEMBAR (Int)
membar #StoreLoad

P7604: !_LDD [13] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7605: !_PREFETCH [12] (Int)
prefetch [%i2 + 0], 2

P7606: !_PREFETCH [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 1

P7607: !_MEMBAR (FP)

P7608: !_BSTC [6] (maybe <- 0x430000a6) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7609: !_MEMBAR (FP)
membar #StoreLoad

P7610: !_SWAP [21] (maybe <- 0x38000f7) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o4(lower)
srl %l6, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7611: !_PREFETCH [22] (Int)
prefetch [%i2 + 4], 19

P7612: !_SWAP [6] (maybe <- 0x38000f8) (Int)
mov %l4, %o0
swap  [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7613: !_MEMBAR (FP)

P7614: !_BSTC [21] (maybe <- 0x430000a9) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7615: !_MEMBAR (FP)
membar #StoreLoad

P7616: !_DWST [13] (maybe <- 0x38000f9) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P7617: !_MEMBAR (FP)
membar #StoreLoad

P7618: !_BLD [9] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P7619: !_MEMBAR (FP)

P7620: !_CASX [17] (maybe <- 0x38000fb) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
add  %l4, 1, %l4

P7621: !_DWST [11] (maybe <- 0x38000fc) (Int) (CBR)
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7621
nop
RET7621:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7622: !_ST [17] (maybe <- 0x38000fd) (Int)
stw   %l4, [%i3 + 12 ]
add   %l4, 1, %l4

P7623: !_MEMBAR (FP)

P7624: !_BSTC [3] (maybe <- 0x430000ac) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7625: !_MEMBAR (FP)
membar #StoreLoad

P7626: !_CASX [9] (maybe <- 0x38000fe) (Int)
ldx [%i2], %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i2], %l6, %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %l6
or %l6, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4
add  %l4, 1, %l4

P7627: !_MEMBAR (FP)

P7628: !_BSTC [11] (maybe <- 0x430000af) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7629: !_MEMBAR (FP)
membar #StoreLoad

P7630: !_LD [16] (Int)
lduw [%i3 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7631: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7631
nop
RET7631:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7632: !_BLD [7] (FP) (Branch target of P7956)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13
ba P7633
nop

TARGET7956:
ba RET7956
nop


P7633: !_MEMBAR (FP)

P7634: !_SWAP [1] (maybe <- 0x3800100) (Int)
mov %l4, %o0
swap  [%i0 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7635: !_MEMBAR (FP)

P7636: !_BSTC [1] (maybe <- 0x430000b2) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P7637: !_MEMBAR (FP)
membar #StoreLoad

P7638: !_DWLD [6] (Int)
ldx [%i2 + 0], %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %l6
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P7639: !_CASX [15] (maybe <- 0x3800101) (Int)
ldx [%i3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P7640: !_CASX [3] (maybe <- 0x3800103) (Int) (CBR)
ldx [%i1], %l7
! move %l7(upper) -> %o3(lower)
srlx %l7, 32, %o5
or %o5, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4
mov %l7, %o5
sllx %l4, 32, %l7
add  %l4, 1, %l4
or   %l4, %l7, %l7
casx [%i1], %o5, %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7640
nop
RET7640:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7641: !_LDD [8] (Int) (Branch target of P7631)
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0
ba P7642
nop

TARGET7631:
ba RET7631
nop


P7642: !_DWLD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7643: !_CAS [7] (maybe <- 0x3800105) (Int)
add %i2, 4, %o5
lduw [%o5], %l6
mov %l6, %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1
mov %l4, %o2
cas [%o5], %l7, %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7644: !_SWAP [12] (maybe <- 0x3800106) (Int) (CBR)
mov %l4, %l3
swap  [%i3 + 0], %l3
! move %l3(lower) -> %o2(lower)
srl %l3, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7644
nop
RET7644:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7645: !_REPLACEMENT [11] (Int) (CBR)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
sethi %hi(0x20000), %l7
ld [%i2+12], %l3
st %l3, [%i2+12]
add %i2, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]
add %o5, %l7, %o5
ld [%o5+12], %l3
st %l3, [%o5+12]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7645
nop
RET7645:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7646: !_SWAP [19] (maybe <- 0x3800107) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o3
swap  [%i3 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7646
nop
RET7646:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7647: !_LDD [8] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P7648: !_ST [15] (maybe <- 0x3800108) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P7649: !_DWLD [22] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %f14
! 2 addresses covered
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--

P7650: !_PREFETCH [21] (Int) (CBR)
prefetch [%i2 + 0], 30

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7650
nop
RET7650:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7651: !_DWST [8] (maybe <- 0x3800109) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P7652: !_PREFETCH [21] (Int)
prefetch [%i2 + 0], 22

P7653: !_MEMBAR (FP)

P7654: !_BSTC [16] (maybe <- 0x430000b5) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7655: !_MEMBAR (FP)
membar #StoreLoad

P7656: !_REPLACEMENT [16] (Int) (Branch target of P7811)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %o5
ld [%i3+4], %l6
st %l6, [%i3+4]
add %i3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
ba P7657
nop

TARGET7811:
ba RET7811
nop


P7657: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7657
nop
RET7657:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7658: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f0
membar #Sync
! 3 addresses covered
fmovs %f3, %f2

P7659: !_MEMBAR (FP)

P7660: !_BSTC [15] (maybe <- 0x430000b8) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7661: !_MEMBAR (FP)
membar #StoreLoad

P7662: !_SWAP [6] (maybe <- 0x380010a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7663: !_SWAP [5] (maybe <- 0x380010b) (Int)
mov %l4, %o5
swap  [%i1 + 12], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7664: !_DWST [7] (maybe <- 0x380010c) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i2 + 0]
add   %l4, 1, %l4

P7665: !_DWST_BINIT [17] (maybe <- 0x380010e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P7666: !_MEMBAR (Int)
membar #StoreLoad

P7667: !_CAS [23] (maybe <- 0x380010f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 12, %o5
lduw [%o5], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P7668: !_REPLACEMENT [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+0], %l3
st %l3, [%i3+0]
add %i3, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]
add %o5, %l7, %o5
ld [%o5+0], %l3
st %l3, [%o5+0]

P7669: !_DWST_BINIT [6] (maybe <- 0x3800110) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P7670: !_MEMBAR (Int)
membar #StoreLoad

P7671: !_BLD [1] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f3
fmovs %f19, %f4
fmovd %f34, %f18
fmovs %f19, %f5

P7672: !_MEMBAR (FP)

P7673: !_DWST_BINIT [23] (maybe <- 0x3800112) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stxa %l3, [%i3 + 8] %asi 
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7673
nop
RET7673:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7674: !_MEMBAR (Int) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7674
nop
RET7674:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7675: !_LD [21] (Int)
lduw [%i3 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7676: !_DWLD [1] (Int)
ldx [%i0 + 0], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %o5
or %o5, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2

P7677: !_ST [17] (maybe <- 0x3800113) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P7678: !_CAS [23] (maybe <- 0x3800114) (Int)
add %i3, 12, %l6
lduw [%l6], %o5
mov %o5, %l3
! move %l3(lower) -> %o2(lower)
or %l3, %o2, %o2
mov %l4, %o3
cas [%l6], %l3, %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7679: !_PREFETCH [21] (Int)
prefetch [%i3 + 0], 21

P7680: !_DWST [21] (maybe <- 0x3800115) (Int)
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P7681: !_LDD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7682: !_MEMBAR (FP)

P7683: !_BSTC [1] (maybe <- 0x430000bb) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i0 + 0 ] %asi

P7684: !_MEMBAR (FP)
membar #StoreLoad

P7685: !_DWST [9] (maybe <- 0x3800117) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P7686: !_PREFETCH [19] (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetcha [%i3 + 4] %asi, 0

P7687: !_SWAP [3] (maybe <- 0x3800119) (Int)
mov %l4, %l3
swap  [%i1 + 0], %l3
! move %l3(lower) -> %o4(lower)
srl %l3, 0, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7688: !_PREFETCH [20] (Int)
prefetch [%i3 + 12], 31

P7689: !_DWST_BINIT [0] (maybe <- 0x380011a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i0 + 0] %asi
add   %l4, 1, %l4

P7690: !_MEMBAR (Int)
membar #StoreLoad

P7691: !_ST_BINIT [7] (maybe <- 0x380011c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7692: !_MEMBAR (Int)
membar #StoreLoad

P7693: !_DWST_BINIT [15] (maybe <- 0x380011d) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i3 + 0] %asi
add   %l4, 1, %l4

P7694: !_MEMBAR (Int)
membar #StoreLoad

P7695: !_DWST_BINIT [13] (maybe <- 0x380011f) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l7 
add   %l4, 1, %l4
or %l7, %l4, %l7
stxa %l7, [%i2 + 0] %asi
add   %l4, 1, %l4

P7696: !_MEMBAR (Int)
membar #StoreLoad

P7697: !_CASX [21] (maybe <- 0x3800121) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %l6
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %l6, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P7698: !_ST_BINIT [18] (maybe <- 0x3800123) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7699: !_MEMBAR (Int)
membar #StoreLoad

P7700: !_DWST [15] (maybe <- 0x3800124) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P7701: !_ST [19] (maybe <- 0x3800126) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7702: !_CAS [1] (maybe <- 0x3800127) (Int)
add %i0, 4, %o5
lduw [%o5], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%o5], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4

P7703: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7703
nop
RET7703:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7704: !_BSTC [7] (maybe <- 0x430000be) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7705: !_MEMBAR (FP)
membar #StoreLoad

P7706: !_SWAP [6] (maybe <- 0x3800128) (Int)
mov %l4, %o3
swap  [%i2 + 0], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7707: !_ST [10] (maybe <- 0x3800129) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P7708: !_MEMBAR (FP)

P7709: !_BSTC [9] (maybe <- 0x430000c1) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7710: !_MEMBAR (FP)
membar #StoreLoad

P7711: !_DWLD [10] (Int)
ldx [%i3 + 0], %l3
! move %l3(upper) -> %o3(lower)
srlx %l3, 32, %o5
or %o5, %o3, %o3
! move %l3(lower) -> %o4(upper)
sllx %l3, 32, %o4

P7712: !_MEMBAR (FP)

P7713: !_BST [9] (maybe <- 0x430000c4) (FP) (CBR)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7713
nop
RET7713:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7714: !_MEMBAR (FP)
membar #StoreLoad

P7715: !_BLD [23] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f6
fmovd %f34, %f18
fmovs %f19, %f8

P7716: !_MEMBAR (FP)

P7717: !_SWAP [11] (maybe <- 0x380012a) (Int)
mov %l4, %o5
swap  [%i3 + 12], %o5
! move %o5(lower) -> %o4(lower)
srl %o5, 0, %l6
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

P7718: !_ST_BINIT [22] (maybe <- 0x380012b) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7719: !_MEMBAR (Int)
membar #StoreLoad

P7720: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P7721: !_MEMBAR (FP)

P7722: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f12
fmovd %f34, %f18
fmovs %f19, %f14

P7723: !_MEMBAR (FP)

P7724: !_DWST [19] (maybe <- 0x380012c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P7725: !_DWST_BINIT [12] (maybe <- 0x380012e) (Int) (LE)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i2 + 0 ] %asi
add   %l4, 1, %l4

P7726: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7727: !_LDD [21] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
! move %l7(lower) -> %o0(lower)
or %l7, %o0, %o0

P7728: !_CASX [12] (maybe <- 0x3800130) (Int)
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l3
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l3, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P7729: !_MEMBAR (FP)

P7730: !_BSTC [22] (maybe <- 0x430000c7) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7731: !_MEMBAR (FP)
membar #StoreLoad

P7732: !_CASX [10] (maybe <- 0x3800132) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
mov %o3, %o5
sllx %l4, 32, %o4
add  %l4, 1, %l4
or   %l4, %o4, %o4
casx [%i2], %o5, %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add  %l4, 1, %l4

P7733: !_CASX [21] (maybe <- 0x3800134) (Int)
ldx [%i3], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov %o0, %o5
sllx %l4, 32, %o1
add  %l4, 1, %l4
or   %l4, %o1, %o1
casx [%i3], %o5, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P7734: !_SWAP [0] (maybe <- 0x3800136) (Int)
mov %l4, %o2
swap  [%i0 + 0], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7735: !_MEMBAR (FP) (Branch target of P7703)
ba P7736
nop

TARGET7703:
ba RET7703
nop


P7736: !_BST [21] (maybe <- 0x430000ca) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7737: !_MEMBAR (FP)
membar #StoreLoad

P7738: !_ST [1] (maybe <- 0x3800137) (Int)
stw   %l4, [%i0 + 4 ]
add   %l4, 1, %l4

P7739: !_LDD [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7740: !_DWST [17] (maybe <- 0x3800138) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
mov %l4, %l3 
stx %l3, [%i2 + 8]
add   %l4, 1, %l4

P7741: !_MEMBAR (FP)

P7742: !_BST [10] (maybe <- 0x430000cd) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7743: !_MEMBAR (FP)
membar #StoreLoad

P7744: !_LD [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %o5
! move %o5(lower) -> %o3(lower)
or %o5, %o3, %o3

P7745: !_SWAP [13] (maybe <- 0x3800139) (Int)
mov %l4, %o4
swap  [%i2 + 4], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7746: !_CAS [7] (maybe <- 0x380013a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 4, %l3
lduw [%l3], %l7
mov %l7, %o5
! move %o5(lower) -> %o4(lower)
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%l3], %o5, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7747: !_DWST [20] (maybe <- 0x380013b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o5 
stx %o5, [%i2 + 8]
add   %l4, 1, %l4

P7748: !_CASX [7] (maybe <- 0x380013c) (Int)
ldx [%i3], %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
add  %l4, 1, %l4

P7749: !_PREFETCH [3] (Int)
prefetch [%i1 + 0], 1

P7750: !_DWST_BINIT [23] (maybe <- 0x380013e) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P7751: !_MEMBAR (Int)

P7752: !_BSTC [11] (maybe <- 0x430000d0) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7753: !_MEMBAR (FP)
membar #StoreLoad

P7754: !_CASX [20] (maybe <- 0x380013f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l6
ldx [%l6], %o5
! move %o5(upper) -> %o2(lower)
srlx %o5, 32, %l3
or %l3, %o2, %o2
! move %o5(lower) -> %o3(upper)
sllx %o5, 32, %o3
mov  %o5, %l3
mov %l4, %o5
casx [%l6], %l3, %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
add  %l4, 1, %l4

P7755: !_CAS [12] (maybe <- 0x3800140) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
lduw [%i2], %o5
mov %o5, %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov %l4, %o0
cas [%i2], %l3, %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P7756: !_SWAP [17] (maybe <- 0x3800141) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 12], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P7757: !_MEMBAR (FP)
membar #StoreLoad

P7758: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f15
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovs %f19, %f0
fmovd %f34, %f18
fmovs %f19, %f1

P7759: !_MEMBAR (FP)

P7760: !_LD [12] (Int)
lduw [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1

P7761: !_DWLD [5] (Int)
ldx [%i1 + 8], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l6
or %l6, %o1, %o1

P7762: !_ST [9] (maybe <- 0x3800142) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
stw   %l4, [%i2 + 0 ]
add   %l4, 1, %l4

P7763: !_ST [13] (maybe <- 0x3800143) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 4 ]
add   %l4, 1, %l4

P7764: !_DWST [8] (maybe <- 0x3800144) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stx %l6, [%i2 + 8]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7764
nop
RET7764:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7765: !_REPLACEMENT [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS1_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l6
ld [%i3+12], %o5
st %o5, [%i3+12]
add %i3, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P7766: !_PREFETCH [12] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 17

P7767: !_CASX [4] (maybe <- 0x3800145) (Int)
ldx [%i1], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l3
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i1], %l3, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7768: !_MEMBAR (FP)

P7769: !_BSTC [11] (maybe <- 0x430000d3) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7770: !_MEMBAR (FP)
membar #StoreLoad

P7771: !_ST_BINIT [6] (maybe <- 0x3800147) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 0] %asi
add   %l4, 1, %l4

P7772: !_MEMBAR (Int)
membar #StoreLoad

P7773: !_LD [9] (Int)
lduw [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P7774: !_LD [4] (Int)
lduw [%i1 + 4], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7775: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 12], 3

P7776: !_CAS [6] (maybe <- 0x3800148) (Int)
lduw [%i2], %o0
mov %o0, %l7
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o0(lower)
srl %l6, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P7777: !_MEMBAR (FP)

P7778: !_BST [5] (maybe <- 0x430000d6) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7779: !_MEMBAR (FP)
membar #StoreLoad

P7780: !_LDD [21] (Int) (CBR) (Branch target of P7591)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7780
nop
RET7780:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P7781
nop

TARGET7591:
ba RET7591
nop


P7781: !_MEMBAR (FP)
membar #StoreLoad

P7782: !_BLD [1] (FP) (Branch target of P7543)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f2
fmovd %f34, %f18
fmovs %f19, %f4
ba P7783
nop

TARGET7543:
ba RET7543
nop


P7783: !_MEMBAR (FP)

P7784: !_CAS [21] (maybe <- 0x3800149) (Int) (Branch target of P7806)
lduw [%i2], %o2
mov %o2, %l7
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov %l4, %l6
cas [%i2], %l7, %l6
! move %l6(lower) -> %o2(lower)
srl %l6, 0, %l7
or %l7, %o2, %o2
add   %l4, 1, %l4
ba P7785
nop

TARGET7806:
ba RET7806
nop


P7785: !_DWST_BINIT [5] (maybe <- 0x380014a) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i1 + 8] %asi 
add   %l4, 1, %l4

P7786: !_MEMBAR (Int)
membar #StoreLoad

P7787: !_LD [22] (Int)
lduw [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P7788: !_SWAP [21] (maybe <- 0x380014b) (Int)
mov %l4, %l6
swap  [%i2 + 0], %l6
! move %l6(lower) -> %o3(lower)
srl %l6, 0, %o5
or %o5, %o3, %o3
add   %l4, 1, %l4

P7789: !_MEMBAR (FP)

P7790: !_BST [10] (maybe <- 0x430000d9) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7791: !_MEMBAR (FP)
membar #StoreLoad

P7792: !_DWST_BINIT [9] (maybe <- 0x380014c) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P7793: !_MEMBAR (Int)
membar #StoreLoad

P7794: !_CASX [14] (maybe <- 0x380014e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l6
ldx [%l6], %o4
! move %o4(upper) -> %o4(upper)
! move %o4(lower) -> %o4(lower)
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
mov  %o4, %l3
mov %l4, %o0
casx [%l6], %l3, %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
add  %l4, 1, %l4

P7795: !_MEMBAR (FP)
membar #StoreLoad

P7796: !_BLD [21] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f5
fmovs %f19, %f6
fmovd %f34, %f18
fmovs %f19, %f7

P7797: !_MEMBAR (FP)

P7798: !_PREFETCH [22] (Int)
prefetch [%i3 + 4], 29

P7799: !_MEMBAR (FP)

P7800: !_BSTC [21] (maybe <- 0x430000dc) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7801: !_MEMBAR (FP)
membar #StoreLoad

P7802: !_PREFETCH [4] (Int)
prefetch [%i1 + 4], 1

P7803: !_MEMBAR (FP)

P7804: !_BSTC [3] (maybe <- 0x430000df) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7805: !_MEMBAR (FP)
membar #StoreLoad

P7806: !_ST_BINIT [19] (maybe <- 0x380014f) (Int) (LE) (CBR)
wr %g0, 0xea, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %o5
or %o5, %lo(0xff00ff00), %o5
and %l4, %o5, %l3
srl %l3, 8, %l3
sll %l4, 8, %l7
and %l7, %o5, %l7
or %l7, %l3, %l7
srl %l7, 16, %l3
sll %l7, 16, %l7
srl %l7, 0, %l7
or %l7, %l3, %l7
stwa   %l7, [%i2 + 4] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7806
nop
RET7806:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7807: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7808: !_SWAP [5] (maybe <- 0x3800150) (Int)
mov %l4, %o1
swap  [%i1 + 12], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7809: !_MEMBAR (FP)

P7810: !_BST [21] (maybe <- 0x430000e2) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7811: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7811
nop
RET7811:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7812: !_LD [22] (Int)
lduw [%i3 + 4], %l7
! move %l7(lower) -> %o1(lower)
or %l7, %o1, %o1

P7813: !_SWAP [14] (maybe <- 0x3800151) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o2
swap  [%i3 + 12], %o2
! move %o2(lower) -> %o2(upper)
sllx %o2, 32, %o2
add   %l4, 1, %l4

P7814: !_MEMBAR (FP)

P7815: !_BST [23] (maybe <- 0x430000e5) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7816: !_MEMBAR (FP)
membar #StoreLoad

P7817: !_LDD [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7818: !_CASX [15] (maybe <- 0x3800152) (Int)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l3
or %l3, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0
add  %l4, 1, %l4

P7819: !_MEMBAR (FP)

P7820: !_BST [6] (maybe <- 0x430000e8) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7821: !_MEMBAR (FP)
membar #StoreLoad

P7822: !_REPLACEMENT [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+4], %l6
st %l6, [%i2+4]
add %i2, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]
add %l3, %o5, %l3
ld [%l3+4], %l6
st %l6, [%l3+4]

P7823: !_SWAP [10] (maybe <- 0x3800154) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3
swap  [%i3 + 4], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %l7
or %l7, %o0, %o0
add   %l4, 1, %l4

P7824: !_MEMBAR (FP)

P7825: !_BSTC [7] (maybe <- 0x430000eb) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7826: !_MEMBAR (FP)

P7827: !_BST [20] (maybe <- 0x430000ee) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7828: !_MEMBAR (FP)
membar #StoreLoad

P7829: !_DWST_BINIT [9] (maybe <- 0x3800155) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P7830: !_MEMBAR (Int)
membar #StoreLoad

P7831: !_SWAP [13] (maybe <- 0x3800157) (Int) (LE)
wr %g0, 0x88, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %o1
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %o1, %l7, %o5
srl %o5, 8, %o5
sll %o1, 8, %o1
and %o1, %l7, %o1
or %o1, %o5, %o1
srl %o1, 16, %o5
sll %o1, 16, %o1
srl %o1, 0, %o1
or %o1, %o5, %o1
swapa  [%i3 + 4] %asi, %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7832: !_CASX [4] (maybe <- 0x3800158) (Int)
ldx [%i1], %l3
! move %l3(upper) -> %o1(lower)
srlx %l3, 32, %l6
or %l6, %o1, %o1
! move %l3(lower) -> %o2(upper)
sllx %l3, 32, %o2
mov %l3, %l6
sllx %l4, 32, %l3
add  %l4, 1, %l4
or   %l4, %l3, %l3
casx [%i1], %l6, %l3
! move %l3(upper) -> %o2(lower)
srlx %l3, 32, %l6
or %l6, %o2, %o2
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
add  %l4, 1, %l4

P7833: !_DWLD [17] (FP)
sethi %hi(REGION5_ALIAS0_O-REGION0_ALIAS0_O), %i2
add %i0, %i2, %i2
ldd [%i2 + 8], %f8
! 1 addresses covered
fmovs %f9, %f8

P7834: !_PREFETCH [10] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 4], 23

P7835: !_PREFETCH [5] (Int) (LE) (CBR)
wr %g0, 0x88, %asi
prefetcha [%i1 + 12] %asi, 4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7835
nop
RET7835:

! lfsr step begin
srlx %l0, 1, %l6
xnor %l6, %l0, %l6
sllx %l6, 63, %l6
or  %l6, %l0, %l0
srlx %l0, 1, %l0


P7836: !_DWLD [2] (Int)
ldx [%i0 + 8], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l7
or %l7, %o3, %o3

P7837: !_MEMBAR (FP)

P7838: !_BSTC [19] (maybe <- 0x430000f1) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7839: !_MEMBAR (FP) (Branch target of P7892)
membar #StoreLoad
ba P7840
nop

TARGET7892:
ba RET7892
nop


P7840: !_DWST [19] (maybe <- 0x430000f4) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i2 + 0]

P7841: !_DWST_BINIT [20] (maybe <- 0x380015a) (Int)
wr %g0, 0xe2, %asi
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P7842: !_MEMBAR (Int)
membar #StoreLoad

P7843: !_DWST_BINIT [18] (maybe <- 0x380015b) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P7844: !_MEMBAR (Int) (Branch target of P7650)
membar #StoreLoad
ba P7845
nop

TARGET7650:
ba RET7650
nop


P7845: !_SWAP [9] (maybe <- 0x380015d) (Int)
mov %l4, %o4
swap  [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7846: !_MEMBAR (FP)

P7847: !_BST [15] (maybe <- 0x430000f6) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7848: !_MEMBAR (FP)
membar #StoreLoad

P7849: !_LD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 12], %l3
! move %l3(lower) -> %o4(lower)
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7850: !_MEMBAR (FP)

P7851: !_BST [10] (maybe <- 0x430000f9) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7852: !_MEMBAR (FP)
membar #StoreLoad

P7853: !_CASX [2] (maybe <- 0x380015e) (Int)
add %i0, 8, %l6
ldx [%l6], %o0
! move %o0(upper) -> %o0(upper)
! move %o0(lower) -> %o0(lower)
mov  %o0, %l3
mov %l4, %o1
casx [%l6], %l3, %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
add  %l4, 1, %l4

P7854: !_PREFETCH [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
prefetch [%i3 + 0], 29

P7855: !_PREFETCH [7] (Int)
prefetch [%i3 + 4], 20

P7856: !_MEMBAR (FP)

P7857: !_BSTC [7] (maybe <- 0x430000fc) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7858: !_MEMBAR (FP)
membar #StoreLoad

P7859: !_CAS [5] (maybe <- 0x380015f) (Int) (CBR)
add %i1, 12, %l3
lduw [%l3], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7859
nop
RET7859:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7860: !_CAS [9] (maybe <- 0x3800160) (Int)
lduw [%i2], %o3
mov %o3, %l3
! move %l3(lower) -> %o3(upper)
sllx %l3, 32, %o3
mov %l4, %o5
cas [%i2], %l3, %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P7861: !_SWAP [18] (maybe <- 0x3800161) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o4
swap  [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7862: !_DWLD [0] (Int)
ldx [%i0 + 0], %l3
! move %l3(upper) -> %o4(lower)
srlx %l3, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0

P7863: !_ST [5] (maybe <- 0x3800162) (Int)
stw   %l4, [%i1 + 12 ]
add   %l4, 1, %l4

P7864: !_DWST_BINIT [15] (maybe <- 0x3800163) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

P7865: !_MEMBAR (Int)
membar #StoreLoad

P7866: !_DWLD [4] (Int)
ldx [%i1 + 0], %l3
! move %l3(upper) -> %o0(lower)
srlx %l3, 32, %o5
or %o5, %o0, %o0
! move %l3(lower) -> %o1(upper)
sllx %l3, 32, %o1

P7867: !_MEMBAR (FP)

P7868: !_BST [22] (maybe <- 0x430000ff) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7869: !_MEMBAR (FP)
membar #StoreLoad

P7870: !_DWST [11] (maybe <- 0x3800165) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
mov %l4, %l3 
stx %l3, [%i3 + 8]
add   %l4, 1, %l4

P7871: !_CASX [14] (maybe <- 0x3800166) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

P7872: !_LD [21] (Int) (Branch target of P7246)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l3
! move %l3(lower) -> %o3(lower)
or %l3, %o3, %o3
ba P7873
nop

TARGET7246:
ba RET7246
nop


P7873: !_DWST_BINIT [7] (maybe <- 0x3800167) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i2 + 0] %asi
add   %l4, 1, %l4

P7874: !_MEMBAR (Int)

P7875: !_BST [5] (maybe <- 0x43000102) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7876: !_MEMBAR (FP)
membar #StoreLoad

P7877: !_ST_BINIT [7] (maybe <- 0x3800169) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7878: !_MEMBAR (Int)
membar #StoreLoad

P7879: !_LDD [20] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 8], %l6
! move %l7(lower) -> %o4(upper)
sllx %l7, 32, %o4

P7880: !_DWST_BINIT [19] (maybe <- 0x380016a) (Int) (CBR)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stxa %l3, [%i3 + 0] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7880
nop
RET7880:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7881: !_MEMBAR (Int)
membar #StoreLoad

P7882: !_DWLD [4] (Int) (CBR)
ldx [%i1 + 0], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l3
or %l3, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7882
nop
RET7882:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7883: !_REPLACEMENT [9] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %o5
ld [%i2+0], %l6
st %l6, [%i2+0]
add %i2, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]
add %l3, %o5, %l3
ld [%l3+0], %l6
st %l6, [%l3+0]

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7883
nop
RET7883:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7884: !_LDD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1

P7885: !_PREFETCH [18] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 0], 2

P7886: !_SWAP [22] (maybe <- 0x380016c) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l3
or %l3, %o1, %o1
add   %l4, 1, %l4

P7887: !_DWST [0] (maybe <- 0x380016d) (Int)
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i0 + 0]
add   %l4, 1, %l4

P7888: !_DWST [3] (maybe <- 0x43000105) (FP)
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i1 + 0]

P7889: !_CASX [6] (maybe <- 0x380016f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
mov %o2, %l6
sllx %l4, 32, %o3
add  %l4, 1, %l4
or   %l4, %o3, %o3
casx [%i2], %l6, %o3
! move %o3(upper) -> %o3(upper)
! move %o3(lower) -> %o3(lower)
add  %l4, 1, %l4

P7890: !_MEMBAR (FP)

P7891: !_BST [4] (maybe <- 0x43000107) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7892: !_MEMBAR (FP) (CBR)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7892
nop
RET7892:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7893: !_ST [4] (maybe <- 0x3800171) (Int) (LE) (Branch target of P7909)
wr %g0, 0x88, %asi
! Change single-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
and %l4, %l7, %o5
srl %o5, 8, %o5
sll %l4, 8, %l6
and %l6, %l7, %l6
or %l6, %o5, %l6
srl %l6, 16, %o5
sll %l6, 16, %l6
srl %l6, 0, %l6
or %l6, %o5, %l6
stwa   %l6, [%i1 + 4] %asi
add   %l4, 1, %l4
ba P7894
nop

TARGET7909:
ba RET7909
nop


P7894: !_ST [15] (maybe <- 0x3800172) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
stw   %l4, [%i3 + 0 ]
add   %l4, 1, %l4

P7895: !_MEMBAR (FP)
membar #StoreLoad

P7896: !_BLD [4] (FP)
wr %g0, 0xf0, %asi
ldda [%i1 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f9
fmovs %f19, %f10
fmovd %f34, %f18
fmovs %f19, %f11

P7897: !_MEMBAR (FP)

P7898: !_DWST [19] (maybe <- 0x3800173) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i2 + 0]
add   %l4, 1, %l4

P7899: !_REPLACEMENT [16] (Int) (Branch target of P7673)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i3
sub %i0, %i3, %i3
sethi %hi(0x20000), %l7
ld [%i3+4], %l3
st %l3, [%i3+4]
add %i3, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
add %o5, %l7, %o5
ld [%o5+4], %l3
st %l3, [%o5+4]
ba P7900
nop

TARGET7673:
ba RET7673
nop


P7900: !_ST_BINIT [19] (maybe <- 0x3800175) (Int)
wr %g0, 0xe2, %asi
stwa   %l4, [%i2 + 4] %asi
add   %l4, 1, %l4

P7901: !_MEMBAR (Int)
membar #StoreLoad

P7902: !_LD [18] (Int)
lduw [%i2 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4

P7903: !_CASX [8] (maybe <- 0x3800176) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 8, %o5
ldx [%o5], %l6
! move %l6(upper) -> %o4(lower)
srlx %l6, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l6(lower) -> %o0(upper)
sllx %l6, 32, %o0
mov  %l6, %l7
mov %l4, %l6
casx [%o5], %l7, %l6
! move %l6(upper) -> %o0(lower)
srlx %l6, 32, %l7
or %l7, %o0, %o0
! move %l6(lower) -> %o1(upper)
sllx %l6, 32, %o1
add  %l4, 1, %l4

P7904: !_CASX [19] (maybe <- 0x3800177) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3], %l6
! move %l6(upper) -> %o1(lower)
srlx %l6, 32, %l7
or %l7, %o1, %o1
! move %l6(lower) -> %o2(upper)
sllx %l6, 32, %o2
mov %l6, %l7
sllx %l4, 32, %l6
add  %l4, 1, %l4
or   %l4, %l6, %l6
casx [%i3], %l7, %l6
! move %l6(upper) -> %o2(lower)
srlx %l6, 32, %l7
or %l7, %o2, %o2
! move %l6(lower) -> %o3(upper)
sllx %l6, 32, %o3
add  %l4, 1, %l4

P7905: !_DWLD [22] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o3(lower)
srlx %o5, 32, %l7
or %l7, %o3, %o3
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4

P7906: !_LDD [6] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(lower)
or %l6, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0

P7907: !_LDD [15] (Int) (Branch target of P7780)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 0], %l6
! move %l6(lower) -> %o0(lower)
or %l6, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
ba P7908
nop

TARGET7780:
ba RET7780
nop


P7908: !_REPLACEMENT [16] (Int)
sethi %hi(REPLACEMENT0_ALIAS0_O-REGION0_ALIAS0_O), %i3
add %i0, %i3, %i3
sethi %hi(0x20000), %l3
ld [%i3+4], %l7
st %l7, [%i3+4]
add %i3, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]
add %l6, %l3, %l6
ld [%l6+4], %l7
st %l7, [%l6+4]

P7909: !_CASX [2] (maybe <- 0x3800179) (Int) (CBR)
add %i0, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o1(lower)
srlx %l7, 32, %o5
or %o5, %o1, %o1
! move %l7(lower) -> %o2(upper)
sllx %l7, 32, %o2
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o2(lower)
srlx %l7, 32, %o5
or %o5, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3
add  %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7909
nop
RET7909:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7910: !_ST [2] (maybe <- 0x380017a) (Int)
stw   %l4, [%i0 + 12 ]
add   %l4, 1, %l4

P7911: !_MEMBAR (FP)

P7912: !_BST [8] (maybe <- 0x4300010a) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7913: !_MEMBAR (FP)

P7914: !_BST [12] (maybe <- 0x4300010d) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7915: !_MEMBAR (FP)
membar #StoreLoad

P7916: !_ST [7] (maybe <- 0x380017b) (Int)
stw   %l4, [%i2 + 4 ]
add   %l4, 1, %l4

P7917: !_DWST_BINIT [17] (maybe <- 0x380017c) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l6 
stxa %l6, [%i2 + 8] %asi 
add   %l4, 1, %l4

P7918: !_MEMBAR (Int) (CBR) (Branch target of P7174)
membar #StoreLoad

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7918
nop
RET7918:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0

ba P7919
nop

TARGET7174:
ba RET7174
nop


P7919: !_DWLD [16] (FP)
ldd [%i2 + 0], %f12
! 2 addresses covered

P7920: !_SWAP [1] (maybe <- 0x380017d) (Int)
mov %l4, %o5
swap  [%i0 + 4], %o5
! move %o5(lower) -> %o3(lower)
srl %o5, 0, %l6
or %l6, %o3, %o3
add   %l4, 1, %l4

P7921: !_MEMBAR (FP)
membar #StoreLoad

P7922: !_BLD [7] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P7923: !_MEMBAR (FP)

P7924: !_LD [17] (Int) (Branch target of P7996)
lduw [%i2 + 12], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
ba P7925
nop

TARGET7996:
ba RET7996
nop


P7925: !_DWLD [16] (Int)
ldx [%i2 + 0], %o5
! move %o5(upper) -> %o4(lower)
srlx %o5, 32, %l7
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %o5(lower) -> %o0(upper)
sllx %o5, 32, %o0

P7926: !_CASX [21] (maybe <- 0x380017e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o5
! move %o5(upper) -> %o0(lower)
srlx %o5, 32, %l3
or %l3, %o0, %o0
! move %o5(lower) -> %o1(upper)
sllx %o5, 32, %o1
mov %o5, %l3
sllx %l4, 32, %o5
add  %l4, 1, %l4
or   %l4, %o5, %o5
casx [%i2], %l3, %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l3
or %l3, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
add  %l4, 1, %l4

P7927: !_LDD [0] (Int)
ldd [%i0 + 0], %l6
! move %l6(lower) -> %o2(lower)
or %l6, %o2, %o2
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7928: !_DWST [16] (maybe <- 0x43000110) (FP)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f20 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f21 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
std %f20, [%i3 + 0]

P7929: !_LDD [20] (Int) (Branch target of P7528)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3
ba P7930
nop

TARGET7528:
ba RET7528
nop


P7930: !_ST [20] (maybe <- 0x3800180) (Int)
stw   %l4, [%i2 + 12 ]
add   %l4, 1, %l4

P7931: !_DWST_BINIT [19] (maybe <- 0x3800181) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stxa %o5, [%i2 + 0] %asi
add   %l4, 1, %l4

P7932: !_MEMBAR (Int)
membar #StoreLoad

P7933: !_DWST_BINIT [14] (maybe <- 0x3800183) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7 
stxa %l7, [%i3 + 8] %asi 
add   %l4, 1, %l4

P7934: !_MEMBAR (Int)
membar #StoreLoad

P7935: !_REPLACEMENT [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REPLACEMENT0_ALIAS3_O), %i2
sub %i0, %i2, %i2
sethi %hi(0x20000), %l6
ld [%i2+12], %o5
st %o5, [%i2+12]
add %i2, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]
add %l7, %l6, %l7
ld [%l7+12], %o5
st %o5, [%l7+12]

P7936: !_SWAP [0] (maybe <- 0x3800184) (Int)
mov %l4, %o4
swap  [%i0 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P7937: !_CASX [11] (maybe <- 0x3800185) (Int) (Branch target of P7300)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
add %i3, 8, %l3
ldx [%l3], %l7
! move %l7(upper) -> %o4(lower)
srlx %l7, 32, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
! move %l7(lower) -> %o0(upper)
sllx %l7, 32, %o0
mov  %l7, %o5
mov %l4, %l7
casx [%l3], %o5, %l7
! move %l7(upper) -> %o0(lower)
srlx %l7, 32, %o5
or %o5, %o0, %o0
! move %l7(lower) -> %o1(upper)
sllx %l7, 32, %o1
add  %l4, 1, %l4
ba P7938
nop

TARGET7300:
ba RET7300
nop


P7938: !_ST_BINIT [8] (maybe <- 0x3800186) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
stwa   %l4, [%i2 + 12] %asi
add   %l4, 1, %l4

P7939: !_MEMBAR (Int)

P7940: !_BST [5] (maybe <- 0x43000112) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7941: !_MEMBAR (FP)
membar #StoreLoad

P7942: !_DWLD [17] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l7
! move %l7(lower) -> %o1(lower)
srl %l7, 0, %l6
or %l6, %o1, %o1

P7943: !_CAS [3] (maybe <- 0x3800187) (Int)
lduw [%i1], %o2
mov %o2, %o5
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2
mov %l4, %l7
cas [%i1], %o5, %l7
! move %l7(lower) -> %o2(lower)
srl %l7, 0, %o5
or %o5, %o2, %o2
add   %l4, 1, %l4

P7944: !_SWAP [4] (maybe <- 0x3800188) (Int)
mov %l4, %o3
swap  [%i1 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3
add   %l4, 1, %l4

P7945: !_DWST_BINIT [14] (maybe <- 0x3800189) (Int)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %l7 
stxa %l7, [%i2 + 8] %asi 
add   %l4, 1, %l4

P7946: !_MEMBAR (Int)
membar #StoreLoad

P7947: !_BLD [18] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P7948: !_MEMBAR (FP)

P7949: !_DWST_BINIT [18] (maybe <- 0x380018a) (Int)
wr %g0, 0xe2, %asi
sllx %l4, 32, %l6 
add   %l4, 1, %l4
or %l6, %l4, %l6
stxa %l6, [%i3 + 0] %asi
add   %l4, 1, %l4

P7950: !_MEMBAR (Int)
membar #StoreLoad

P7951: !_SWAP [18] (maybe <- 0x380018c) (Int)
mov %l4, %l7
swap  [%i3 + 0], %l7
! move %l7(lower) -> %o3(lower)
srl %l7, 0, %l3
or %l3, %o3, %o3
add   %l4, 1, %l4

P7952: !_LDD [18] (Int)
ldd [%i3 + 0], %l6
! move %l6(lower) -> %o4(upper)
sllx %l6, 32, %o4
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5

P7953: !_MEMBAR (FP)

P7954: !_BSTC [21] (maybe <- 0x43000115) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7955: !_MEMBAR (FP)
membar #StoreLoad

P7956: !_ST [4] (maybe <- 0x380018d) (Int) (CBR)
stw   %l4, [%i1 + 4 ]
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7956
nop
RET7956:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7957: !_LD [15] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0

P7958: !_MEMBAR (FP)
membar #StoreLoad

P7959: !_BLD [20] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f4
fmovd %f34, %f18
fmovs %f19, %f6

P7960: !_MEMBAR (FP)

P7961: !_BSTC [7] (maybe <- 0x43000118) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7962: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7962
nop
RET7962:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7963: !_BSTC [13] (maybe <- 0x4300011b) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7964: !_MEMBAR (FP)
membar #StoreLoad

P7965: !_SWAP [22] (maybe <- 0x380018e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l7
swap  [%i3 + 4], %l7
! move %l7(lower) -> %o0(lower)
srl %l7, 0, %l3
or %l3, %o0, %o0
add   %l4, 1, %l4

P7966: !_SWAP [18] (maybe <- 0x380018f) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o1
swap  [%i2 + 0], %o1
! move %o1(lower) -> %o1(upper)
sllx %o1, 32, %o1
add   %l4, 1, %l4

P7967: !_MEMBAR (FP) (Branch target of P7084)
ba P7968
nop

TARGET7084:
ba RET7084
nop


P7968: !_BSTC [21] (maybe <- 0x4300011e) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7969: !_MEMBAR (FP)
membar #StoreLoad

P7970: !_DWST [17] (maybe <- 0x3800190) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P7971: !_LD [11] (FP)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i2
sub %i0, %i2, %i2
ld [%i2 + 12], %f7
! 1 addresses covered

P7972: !_DWST_BINIT [0] (maybe <- 0x3800191) (Int) (LE)
wr %g0, 0xea, %asi
sllx %l4, 32, %l3
add   %l4, 1, %l4
or %l3, %l4, %l6
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l7
or %l7, %lo(0xff00ff00), %l7
sllx %l7, 32, %l3
or %l7, %l3, %l7 
and %l6, %l7, %l3
srlx %l3, 8, %l3
sllx %l6, 8, %l6
and %l6, %l7, %l6
or %l6, %l3, %l6 
sethi %hi(0xffff0000), %l7
srlx %l6, 16, %l3
andn %l3, %l7, %l3
andn %l6, %l7, %l6
sllx %l6, 16, %l6
or %l6, %l3, %l6 
srlx %l6, 32, %l3
sllx %l6, 32, %l6
or %l6, %l3, %l3 
stxa %l3, [%i0 + 0 ] %asi
add   %l4, 1, %l4

P7973: !_MEMBAR (Int) (LE)
membar #StoreLoad

P7974: !_DWST [4] (maybe <- 0x3800193) (Int) (LE)
wr %g0, 0x88, %asi
sllx %l4, 32, %o5
add   %l4, 1, %l4
or %o5, %l4, %l3
! Change double-word-level endianess (big endian <-> little endian) 
sethi %hi(0xff00ff00), %l6
or %l6, %lo(0xff00ff00), %l6
sllx %l6, 32, %o5
or %l6, %o5, %l6 
and %l3, %l6, %o5
srlx %o5, 8, %o5
sllx %l3, 8, %l3
and %l3, %l6, %l3
or %l3, %o5, %l3 
sethi %hi(0xffff0000), %l6
srlx %l3, 16, %o5
andn %o5, %l6, %o5
andn %l3, %l6, %l3
sllx %l3, 16, %l3
or %l3, %o5, %l3 
srlx %l3, 32, %o5
sllx %l3, 32, %l3
or %l3, %o5, %o5 
stxa %o5, [%i1 + 0 ] %asi
add   %l4, 1, %l4

P7975: !_DWST [18] (maybe <- 0x3800195) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %o5 
add   %l4, 1, %l4
or %o5, %l4, %o5
stx %o5, [%i3 + 0]
add   %l4, 1, %l4

P7976: !_DWLD [0] (Int)
ldx [%i0 + 0], %o5
! move %o5(upper) -> %o1(lower)
srlx %o5, 32, %l7
or %l7, %o1, %o1
! move %o5(lower) -> %o2(upper)
sllx %o5, 32, %o2

P7977: !_MEMBAR (FP)
membar #StoreLoad

P7978: !_BLD [8] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
ldda [%i2 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f8
fmovd %f34, %f18
fmovs %f19, %f10

P7979: !_MEMBAR (FP)

P7980: !_BST [16] (maybe <- 0x43000121) (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7981: !_MEMBAR (FP)
membar #StoreLoad

P7982: !_DWST_BINIT [17] (maybe <- 0x3800197) (Int)
wr %g0, 0xe2, %asi
mov %l4, %o5 
stxa %o5, [%i3 + 8] %asi 
add   %l4, 1, %l4

P7983: !_MEMBAR (Int)
membar #StoreLoad

P7984: !_LD [6] (Int)
lduw [%i2 + 0], %o5
! move %o5(lower) -> %o2(lower)
or %o5, %o2, %o2

P7985: !_MEMBAR (FP) (CBR)

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7985
nop
RET7985:

! lfsr step begin
srlx %l0, 1, %l3
xnor %l3, %l0, %l3
sllx %l3, 63, %l3
or  %l3, %l0, %l0
srlx %l0, 1, %l0


P7986: !_BSTC [8] (maybe <- 0x43000124) (FP)
wr %g0, 0xe0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i2 + 0 ] %asi

P7987: !_MEMBAR (FP)
membar #StoreLoad

P7988: !_PREFETCH [14] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i2
sub %i0, %i2, %i2
prefetch [%i2 + 12], 23

P7989: !_ST_BINIT [20] (maybe <- 0x3800198) (Int) (CBR)
wr %g0, 0xe2, %asi
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i3
sub %i0, %i3, %i3
stwa   %l4, [%i3 + 12] %asi
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pn  %xcc, TARGET7989
nop
RET7989:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7990: !_MEMBAR (Int)

P7991: !_BST [18] (maybe <- 0x43000127) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P7992: !_MEMBAR (FP)

P7993: !_BST [5] (maybe <- 0x4300012a) (FP)
wr %g0, 0xf0, %asi
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i1 + 0 ] %asi

P7994: !_MEMBAR (FP)
membar #StoreLoad

P7995: !_LDD [23] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldd [%i2 + 8], %l6
! move %l7(lower) -> %o3(upper)
sllx %l7, 32, %o3

P7996: !_LD [9] (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
lduw [%i3 + 0], %l6
! move %l6(lower) -> %o3(lower)
or %l6, %o3, %o3

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7996
nop
RET7996:

! lfsr step begin
srlx %l0, 1, %l7
xnor %l7, %l0, %l7
sllx %l7, 63, %l7
or  %l7, %l0, %l0
srlx %l0, 1, %l0


P7997: !_CAS [19] (maybe <- 0x3800199) (Int) (CBR)
sethi %hi(REGION0_ALIAS0_O-REGION6_ALIAS2_O), %i2
sub %i0, %i2, %i2
add %i2, 4, %l3
lduw [%l3], %o4
mov %o4, %o5
! move %o5(lower) -> %o4(upper)
sllx %o5, 32, %o4
mov %l4, %l7
cas [%l3], %o5, %l7
! move %l7(lower) -> %o4(lower)
srl %l7, 0, %o5
or %o5, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
add   %l4, 1, %l4

! cbranch
andcc %l0, 1, %g0
be,pt  %xcc, TARGET7997
nop
RET7997:

! lfsr step begin
srlx %l0, 1, %o5
xnor %o5, %l0, %o5
sllx %o5, 63, %o5
or  %o5, %l0, %l0
srlx %l0, 1, %l0


P7998: !_MEMBAR (FP)
membar #StoreLoad

P7999: !_BLD [14] (FP)
wr %g0, 0xf0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION4_ALIAS1_O), %i3
sub %i0, %i3, %i3
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f11
fmovs %f19, %f12
fmovd %f34, %f18
fmovs %f19, %f13

P8000: !_MEMBAR (FP)

P8001: !_BLD [2] (FP)
wr %g0, 0xf0, %asi
ldda [%i0 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f14
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
fmovd %f4, %f30
fmovd %f6, %f30
fmovd %f8, %f30
fmovd %f10, %f30
fmovd %f12, %f30
fmovd %f14, %f30
!--
fmovd %f34, %f18
fmovs %f19, %f0

P8002: !_MEMBAR (FP) (Branch target of P7645)
ba P8003
nop

TARGET7645:
ba RET7645
nop


P8003: !_SWAP [16] (maybe <- 0x380019a) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i2
sub %i0, %i2, %i2
mov %l4, %o0
swap  [%i2 + 4], %o0
! move %o0(lower) -> %o0(upper)
sllx %o0, 32, %o0
add   %l4, 1, %l4

P8004: !_DWLD [11] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION3_ALIAS2_O), %i3
sub %i0, %i3, %i3
ldx [%i3 + 8], %l3
! move %l3(lower) -> %o0(lower)
srl %l3, 0, %o5
or %o5, %o0, %o0

P8005: !_CASX [21] (maybe <- 0x380019b) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i2
sub %i0, %i2, %i2
ldx [%i2], %o1
! move %o1(upper) -> %o1(upper)
! move %o1(lower) -> %o1(lower)
mov %o1, %l6
sllx %l4, 32, %o2
add  %l4, 1, %l4
or   %l4, %o2, %o2
casx [%i2], %l6, %o2
! move %o2(upper) -> %o2(upper)
! move %o2(lower) -> %o2(lower)
add  %l4, 1, %l4

P8006: !_DWST [11] (maybe <- 0x380019d) (Int)
mov %l4, %l6 
stx %l6, [%i3 + 8]
add   %l4, 1, %l4

P8007: !_MEMBAR (FP)
membar #StoreLoad

P8008: !_BLD [11] (FP)
wr %g0, 0xf0, %asi
ldda [%i3 + 0] %asi, %f32
membar #Sync
! 3 addresses covered
fmovd %f32, %f18
fmovs %f18, %f1
fmovs %f19, %f2
fmovd %f34, %f18
fmovs %f19, %f3

P8009: !_MEMBAR (FP)

P8010: !_DWST [15] (maybe <- 0x380019e) (Int)
sethi %hi(REGION0_ALIAS0_O-REGION5_ALIAS1_O), %i3
sub %i0, %i3, %i3
sllx %l4, 32, %l3 
add   %l4, 1, %l4
or %l3, %l4, %l3
stx %l3, [%i3 + 0]
add   %l4, 1, %l4

P8011: !_LD [7] (Int)
sethi %hi(REGION0_ALIAS0_O-REGION2_ALIAS2_O), %i2
sub %i0, %i2, %i2
lduw [%i2 + 4], %o3
! move %o3(lower) -> %o3(upper)
sllx %o3, 32, %o3

P8012: !_LD [2] (Int)
lduw [%i0 + 12], %l7
! move %l7(lower) -> %o3(lower)
or %l7, %o3, %o3

P8013: !_SWAP [15] (maybe <- 0x38001a0) (Int)
mov %l4, %o4
swap  [%i3 + 0], %o4
! move %o4(lower) -> %o4(upper)
sllx %o4, 32, %o4
add   %l4, 1, %l4

P8014: !_MEMBAR (FP)

P8015: !_BSTC [23] (maybe <- 0x4300012d) (FP)
wr %g0, 0xe0, %asi
sethi %hi(REGION0_ALIAS0_O-REGION7_ALIAS1_O), %i3
sub %i0, %i3, %i3
! preparing store val #0, next val will be in f32 
fmovs  %f16, %f20
fadds  %f16, %f17, %f16
! preparing store val #1, next val will be in f33 
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
! preparing store val #2, next val will be in f35 
fmovd %f20, %f32
fmovs  %f16, %f21
fadds  %f16, %f17, %f16
fmovd %f20, %f34
membar #Sync
stda %f32, [%i3 + 0 ] %asi

P8016: !_MEMBAR (FP)
membar #StoreLoad

P8017: !_LD [3] (Int) (Loop exit)
lduw [%i1 + 0], %l7
! move %l7(lower) -> %o4(lower)
or %l7, %o4, %o4
!---- flushing int results buffer----
mov %o0, %l5
mov %o1, %l5
mov %o2, %l5
mov %o3, %l5
mov %o4, %l5
!---- flushing fp results buffer to %f30 ----
fmovd %f0, %f30
fmovd %f2, %f30
!--
loop_exit_7_0:
sub %l2, 1, %l2
cmp %l2, 0
bg loop_entry_7_0
nop

P8018: !_MEMBAR (Int)
membar #StoreLoad

END_NODES7: ! Test instruction sequence for CPU 7 ends
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
! move %l3(lower) -> %o0(upper)
sllx %l3, 32, %o0
sethi %hi(0xdead0e0f), %l3
or    %l3, %lo(0xdead0e0f), %l3
stw %l3, [%i5] 
ld [%i5], %f0
!---- flushing int results buffer----
mov %o0, %l5
!---- flushing fp results buffer to %f30 ----
fmovs %f0, %f30
!--

restore
retl
nop
tsotool_text_end:


!#0 N1 P1 DWLD 6 -1 Int BE Pri Loop_entry
!#0 N2 P1 DWLD 7 -1 Int BE Pri Loop_entry
!#A N1 N2
!#0 N3 P2 MEMBAR
!#0 N4 P3 BSTC 3 0x3f800001 FP BE Pri
!#0 N5 P3 BSTC 4 0x3f800002 FP BE Pri
!#A N4 N5
!#0 N6 P3 BSTC 5 0x3f800003 FP BE Pri
!#0 N7 P4 MEMBAR
!#0 N8 P5 DWLD 12 -1 Int BE Pri
!#0 N9 P5 DWLD 13 -1 Int BE Pri
!#A N8 N9
!#0 N10 P6 DWLD 18 -1 Int BE Pri
!#0 N11 P6 DWLD 19 -1 Int BE Pri
!#A N10 N11
!#0 N12 P7 MEMBAR
!#0 N13 P8 BST 6 0x3f800004 FP BE Pri
!#0 N14 P8 BST 7 0x3f800005 FP BE Pri
!#A N13 N14
!#0 N15 P8 BST 8 0x3f800006 FP BE Pri
!#0 N16 P9 MEMBAR
!#0 N17 P10 LD 10 -1 Int BE Pri
!#0 N18 P11 LD 11 -1 Int BE Pri
!#0 N19 P12 DWST_BINIT 8 0x1 Int BE Pri
!#0 N20 P13 MEMBAR
!#0 N21 P14 DWST_BINIT 8 0x2 Int BE Pri
!#0 N22 P15 MEMBAR
!#0 N23 P16 DWST 17 0x3 Int BE Pri
!#0 N24 P17 SWAP 20 0xffffffff 0x4 Int BE Pri
!#0 N25 P18 ST 5 0x5 Int BE Pri
!#0 N26 P19 LD 8 -1 Int BE Pri
!#0 N27 P19 CAS 8 -1 N26 0x6 Int BE Pri
!#0 N28 P20 MEMBAR
!#0 N29 P21 BSTC 6 0x3f800007 FP BE Pri
!#0 N30 P21 BSTC 7 0x3f800008 FP BE Pri
!#A N29 N30
!#0 N31 P21 BSTC 8 0x3f800009 FP BE Pri
!#0 N32 P22 MEMBAR
!#0 N33 P23 BLD 3 -1 FP BE Pri
!#0 N34 P23 BLD 4 -1 FP BE Pri
!#A N33 N34
!#0 N35 P23 BLD 5 -1 FP BE Pri
!#0 N36 P24 MEMBAR
!#0 N37 P25 BSTC 21 0x3f80000a FP BE Pri
!#0 N38 P25 BSTC 22 0x3f80000b FP BE Pri
!#A N37 N38
!#0 N39 P25 BSTC 23 0x3f80000c FP BE Pri
!#0 N40 P26 MEMBAR
!#0 N41 P27 PREFETCH 6 Int BE Pri
!#0 N42 P28 MEMBAR
!#0 N43 P29 BST 21 0x3f80000d FP BE Pri
!#0 N44 P29 BST 22 0x3f80000e FP BE Pri
!#A N43 N44
!#0 N45 P29 BST 23 0x3f80000f FP BE Pri
!#0 N46 P30 MEMBAR
!#0 N47 P31 LD 8 -1 Int BE Pri
!#0 N48 P32 PREFETCH 14 Int BE Pri
!#0 N49 P33 LDD 15 -1 Int BE Pri
!#0 N50 P33 LDD 16 -1 Int BE Pri
!#A N49 N50
!#0 N51 P34 MEMBAR
!#0 N52 P35 BLD 6 -1 FP BE Pri
!#0 N53 P35 BLD 7 -1 FP BE Pri
!#A N52 N53
!#0 N54 P35 BLD 8 -1 FP BE Pri
!#0 N55 P36 MEMBAR
!#0 N56 P37 DWLD 8 -1 Int BE Pri
!#0 N57 P38 SWAP 17 0xffffffff 0x7 Int BE Pri
!#0 N58 P39 DWLD 18 -1 Int BE Pri
!#0 N59 P39 DWLD 19 -1 Int BE Pri
!#A N58 N59
!#0 N60 P39 CASX 18 -1 N58 0x8 Int BE Pri
!#0 N61 P39 CASX 19 -1 N59 0x9 Int BE Pri
!#A N60 N61
!#0 N62 P40 SWAP 23 0xffffffff 0xa Int BE Pri
!#0 N63 P41 DWLD 0 -1 Int BE Pri
!#0 N64 P41 DWLD 1 -1 Int BE Pri
!#A N63 N64
!#0 N65 P41 CASX 0 -1 N63 0xb Int BE Pri
!#0 N66 P41 CASX 1 -1 N64 0xc Int BE Pri
!#A N65 N66
!#0 N67 P42 LD 16 -1 Int BE Pri
!#0 N68 P42 CAS 16 -1 N67 0xd Int BE Pri
!#0 N69 P43 LDD 18 -1 Int BE Pri
!#0 N70 P43 LDD 19 -1 Int BE Pri
!#A N69 N70
!#0 N71 P44 LD 13 -1 Int BE Pri
!#0 N72 P45 MEMBAR
!#0 N73 P46 BST 9 0x3f800010 FP BE Pri
!#0 N74 P46 BST 10 0x3f800011 FP BE Pri
!#A N73 N74
!#0 N75 P46 BST 11 0x3f800012 FP BE Pri
!#0 N76 P47 MEMBAR
!#0 N77 P48 DWST 8 0xe Int BE Pri
!#0 N78 P49 MEMBAR
!#0 N79 P50 BST 9 0x3f800013 FP BE Pri
!#0 N80 P50 BST 10 0x3f800014 FP BE Pri
!#A N79 N80
!#0 N81 P50 BST 11 0x3f800015 FP BE Pri
!#0 N82 P51 MEMBAR
!#0 N83 P52 DWST_BINIT 3 0xf Int BE Pri
!#0 N84 P52 DWST_BINIT 4 0x10 Int BE Pri
!#A N83 N84
!#0 N85 P53 MEMBAR
!#0 N86 P54 BSTC 0 0x3f800016 FP BE Pri
!#0 N87 P54 BSTC 1 0x3f800017 FP BE Pri
!#A N86 N87
!#0 N88 P54 BSTC 2 0x3f800018 FP BE Pri
!#0 N89 P55 MEMBAR
!#0 N90 P56 BSTC 12 0x3f800019 FP BE Pri
!#0 N91 P56 BSTC 13 0x3f80001a FP BE Pri
!#A N90 N91
!#0 N92 P56 BSTC 14 0x3f80001b FP BE Pri
!#0 N93 P57 MEMBAR
!#0 N94 P58 BLD 6 -1 FP BE Pri
!#0 N95 P58 BLD 7 -1 FP BE Pri
!#A N94 N95
!#0 N96 P58 BLD 8 -1 FP BE Pri
!#0 N97 P59 MEMBAR
!#0 N98 P60 PREFETCH 18 Int BE Pri
!#0 N99 P61 REPLACEMENT 20 Int BE Pri
!#0 N100 P62 MEMBAR
!#0 N101 P63 BST 12 0x3f80001c FP BE Pri
!#0 N102 P63 BST 13 0x3f80001d FP BE Pri
!#A N101 N102
!#0 N103 P63 BST 14 0x3f80001e FP BE Pri
!#0 N104 P64 MEMBAR
!#0 N105 P65 DWST_BINIT 23 0x11 Int BE Pri
!#0 N106 P66 MEMBAR
!#0 N107 P67 LD 4 -1 Int BE Pri
!#0 N108 P67 CAS 4 -1 N107 0x12 Int BE Pri
!#0 N109 P68 ST 3 0x13 Int BE Pri
!#0 N110 P69 REPLACEMENT 4 Int BE Pri
!#0 N111 P70 MEMBAR
!#0 N112 P71 BLD 3 -1 FP BE Pri
!#0 N113 P71 BLD 4 -1 FP BE Pri
!#A N112 N113
!#0 N114 P71 BLD 5 -1 FP BE Pri
!#0 N115 P72 MEMBAR
!#0 N116 P73 ST 7 0x14 Int LE Pri
!#0 N117 P74 DWST 0 0x15 Int BE Pri
!#0 N118 P74 DWST 1 0x16 Int BE Pri
!#A N117 N118
!#0 N119 P75 DWLD 8 -1,0x0 Int BE Pri
!#0 N120 P75 CASX 8 -1,0x0 N119 0x17 Int BE Pri
!#0 N121 P76 SWAP 11 0xffffffff 0x18 Int BE Pri
!#0 N122 P77 LD 19 -1 Int BE Pri
!#0 N123 P78 SWAP 1 0xffffffff 0x19 Int BE Pri
!#0 N124 P79 DWST 0 0x1a Int BE Pri
!#0 N125 P79 DWST 1 0x1b Int BE Pri
!#A N124 N125
!#0 N126 P80 LD 0 -1 Int BE Pri
!#0 N127 P80 CAS 0 -1 N126 0x1c Int BE Pri
!#0 N128 P81 ST_BINIT 23 0x1d Int BE Pri
!#0 N129 P82 MEMBAR
!#0 N130 P83 LD 6 -1 Int BE Pri
!#0 N131 P83 CAS 6 -1 N130 0x1e Int BE Pri
!#0 N132 P84 DWLD 6 -1 Int BE Pri
!#0 N133 P84 DWLD 7 -1 Int BE Pri
!#A N132 N133
!#0 N134 P84 CASX 6 -1 N132 0x1f Int BE Pri
!#0 N135 P84 CASX 7 -1 N133 0x20 Int BE Pri
!#A N134 N135
!#0 N136 P85 DWLD 6 -1 Int BE Pri
!#0 N137 P85 DWLD 7 -1 Int BE Pri
!#A N136 N137
!#0 N138 P86 MEMBAR
!#0 N139 P87 BST 6 0x3f80001f FP BE Pri
!#0 N140 P87 BST 7 0x3f800020 FP BE Pri
!#A N139 N140
!#0 N141 P87 BST 8 0x3f800021 FP BE Pri
!#0 N142 P88 MEMBAR
!#0 N143 P89 BLD 6 -1 FP BE Pri
!#0 N144 P89 BLD 7 -1 FP BE Pri
!#A N143 N144
!#0 N145 P89 BLD 8 -1 FP BE Pri
!#0 N146 P90 MEMBAR
!#0 N147 P91 BST 21 0x3f800022 FP BE Pri
!#0 N148 P91 BST 22 0x3f800023 FP BE Pri
!#A N147 N148
!#0 N149 P91 BST 23 0x3f800024 FP BE Pri
!#0 N150 P92 MEMBAR
!#0 N151 P93 LDD 23 -1 Int BE Pri
!#0 N152 P94 LD 23 -1 Int LE Pri
!#0 N153 P95 MEMBAR
!#0 N154 P96 BST 3 0x3f800025 FP BE Pri
!#0 N155 P96 BST 4 0x3f800026 FP BE Pri
!#A N154 N155
!#0 N156 P96 BST 5 0x3f800027 FP BE Pri
!#0 N157 P97 MEMBAR
!#0 N158 P98 ST_BINIT 0 0x21 Int BE Pri
!#0 N159 P99 MEMBAR
!#0 N160 P100 DWST 15 0x22 Int BE Pri
!#0 N161 P100 DWST 16 0x23 Int BE Pri
!#A N160 N161
!#0 N162 P101 DWST 23 0x24 Int LE Pri
!#0 N163 P102 ST 16 0x25 Int BE Pri
!#0 N164 P103 PREFETCH 13 Int BE Pri
!#0 N165 P104 SWAP 18 0xffffffff 0x26 Int BE Pri
!#0 N166 P105 ST 2 0x27 Int BE Pri
!#0 N167 P106 DWST 20 0x28 Int BE Pri
!#0 N168 P107 DWST_BINIT 5 0x29 Int BE Pri
!#0 N169 P108 MEMBAR
!#0 N170 P109 ST 5 0x2a Int BE Pri
!#0 N171 P110 ST 16 0x2b Int BE Pri
!#0 N172 P111 REPLACEMENT 11 Int BE Pri
!#0 N173 P112 PREFETCH 1 Int BE Pri
!#0 N174 P113 DWST 21 0x2c Int BE Pri
!#0 N175 P113 DWST 22 0x2d Int BE Pri
!#A N174 N175
!#0 N176 P114 LD 2 -1 Int BE Pri
!#0 N177 P114 CAS 2 -1 N176 0x2e Int BE Pri
!#0 N178 P115 ST_BINIT 21 0x2f Int BE Pri
!#0 N179 P116 MEMBAR
!#0 N180 P117 LD 13 -1 Int BE Pri
!#0 N181 P117 CAS 13 -1 N180 0x30 Int BE Pri
!#0 N182 P118 LD 6 -1 Int BE Pri
!#0 N183 P118 CAS 6 -1 N182 0x31 Int BE Pri
!#0 N184 P119 LD 1 -1 Int LE Pri
!#0 N185 P119 CAS 1 -1 N184 0x32 Int LE Pri
!#0 N186 P120 SWAP 21 0xffffffff 0x33 Int BE Pri
!#0 N187 P121 SWAP 2 0xffffffff 0x34 Int BE Pri
!#0 N188 P122 DWLD 15 -1 Int LE Pri
!#0 N189 P122 DWLD 16 -1 Int LE Pri
!#A N188 N189
!#0 N190 P122 CASX 15 -1 N188 0x35 Int LE Pri
!#0 N191 P122 CASX 16 -1 N189 0x36 Int LE Pri
!#A N190 N191
!#0 N192 P123 SWAP 15 0xffffffff 0x37 Int BE Pri
!#0 N193 P124 LDD 9 -1 Int BE Pri
!#0 N194 P124 LDD 10 -1 Int BE Pri
!#A N193 N194
!#0 N195 P125 DWLD 14 -1,0x0 Int BE Pri
!#0 N196 P125 CASX 14 -1,0x0 N195 0x38 Int BE Pri
!#0 N197 P126 DWLD 0 -1 Int BE Pri
!#0 N198 P126 DWLD 1 -1 Int BE Pri
!#A N197 N198
!#0 N199 P127 LD 18 -1 Int LE Pri
!#0 N200 P127 CAS 18 -1 N199 0x39 Int LE Pri
!#0 N201 P128 DWLD 3 -1 Int BE Pri
!#0 N202 P128 DWLD 4 -1 Int BE Pri
!#A N201 N202
!#0 N203 P128 CASX 3 -1 N201 0x3a Int BE Pri
!#0 N204 P128 CASX 4 -1 N202 0x3b Int BE Pri
!#A N203 N204
!#0 N205 P129 DWLD 3 -1 Int BE Pri
!#0 N206 P129 DWLD 4 -1 Int BE Pri
!#A N205 N206
!#0 N207 P129 CASX 3 -1 N205 0x3c Int BE Pri
!#0 N208 P129 CASX 4 -1 N206 0x3d Int BE Pri
!#A N207 N208
!#0 N209 P130 LD 2 -1 Int BE Pri
!#0 N210 P130 CAS 2 -1 N209 0x3e Int BE Pri
!#0 N211 P131 ST_BINIT 6 0x3f Int BE Pri
!#0 N212 P132 MEMBAR
!#0 N213 P133 PREFETCH 23 Int BE Pri
!#0 N214 P134 MEMBAR
!#0 N215 P135 BSTC 6 0x3f800028 FP BE Pri
!#0 N216 P135 BSTC 7 0x3f800029 FP BE Pri
!#A N215 N216
!#0 N217 P135 BSTC 8 0x3f80002a FP BE Pri
!#0 N218 P136 MEMBAR
!#0 N219 P137 LD 21 -1 Int BE Pri
!#0 N220 P138 MEMBAR
!#0 N221 P139 BSTC 21 0x3f80002b FP BE Pri
!#0 N222 P139 BSTC 22 0x3f80002c FP BE Pri
!#A N221 N222
!#0 N223 P139 BSTC 23 0x3f80002d FP BE Pri
!#0 N224 P140 MEMBAR
!#0 N225 P141 ST 6 0x40 Int BE Pri
!#0 N226 P142 ST 8 0x41 Int LE Pri
!#0 N227 P143 SWAP 18 0xffffffff 0x42 Int BE Pri
!#0 N228 P144 SWAP 2 0xffffffff 0x43 Int BE Pri
!#0 N229 P145 DWLD 3 -1 Int BE Pri
!#0 N230 P145 DWLD 4 -1 Int BE Pri
!#A N229 N230
!#0 N231 P146 PREFETCH 12 Int BE Pri
!#0 N232 P147 DWLD 21 -1 Int BE Pri
!#0 N233 P147 DWLD 22 -1 Int BE Pri
!#A N232 N233
!#0 N234 P147 CASX 21 -1 N232 0x44 Int BE Pri
!#0 N235 P147 CASX 22 -1 N233 0x45 Int BE Pri
!#A N234 N235
!#0 N236 P148 ST 21 0x46 Int LE Pri
!#0 N237 P149 MEMBAR
!#0 N238 P150 BST 18 0x3f80002e FP BE Pri
!#0 N239 P150 BST 19 0x3f80002f FP BE Pri
!#A N238 N239
!#0 N240 P150 BST 20 0x3f800030 FP BE Pri
!#0 N241 P151 MEMBAR
!#0 N242 P152 LD 1 -1 Int BE Pri
!#0 N243 P152 CAS 1 -1 N242 0x47 Int BE Pri
!#0 N244 P153 LD 9 -1 Int BE Pri
!#0 N245 P153 CAS 9 -1 N244 0x48 Int BE Pri
!#0 N246 P154 ST_BINIT 20 0x49 Int BE Pri
!#0 N247 P155 MEMBAR
!#0 N248 P156 SWAP 19 0xffffffff 0x4a Int BE Pri
!#0 N249 P157 MEMBAR
!#0 N250 P158 BST 18 0x3f800031 FP BE Pri
!#0 N251 P158 BST 19 0x3f800032 FP BE Pri
!#A N250 N251
!#0 N252 P158 BST 20 0x3f800033 FP BE Pri
!#0 N253 P159 MEMBAR
!#0 N254 P160 DWST 2 0x4b Int BE Pri
!#0 N255 P161 LDD 20 -1 Int BE Pri
!#0 N256 P162 MEMBAR
!#0 N257 P163 BLD 15 -1 FP BE Pri
!#0 N258 P163 BLD 16 -1 FP BE Pri
!#A N257 N258
!#0 N259 P163 BLD 17 -1 FP BE Pri
!#0 N260 P164 MEMBAR
!#0 N261 P165 ST_BINIT 16 0x4c Int BE Pri
!#0 N262 P166 MEMBAR
!#0 N263 P167 BLD 6 -1 FP BE Pri
!#0 N264 P167 BLD 7 -1 FP BE Pri
!#A N263 N264
!#0 N265 P167 BLD 8 -1 FP BE Pri
!#0 N266 P168 MEMBAR
!#0 N267 P169 DWST 18 0x4d Int BE Pri
!#0 N268 P169 DWST 19 0x4e Int BE Pri
!#A N267 N268
!#0 N269 P170 DWST_BINIT 18 0x4f Int BE Pri
!#0 N270 P170 DWST_BINIT 19 0x50 Int BE Pri
!#A N269 N270
!#0 N271 P171 MEMBAR
!#0 N272 P172 DWST 14 0x51 Int BE Pri
!#0 N273 P173 LDD 6 -1 Int BE Pri
!#0 N274 P173 LDD 7 -1 Int BE Pri
!#A N273 N274
!#0 N275 P174 DWLD 3 -1 Int BE Pri
!#0 N276 P174 DWLD 4 -1 Int BE Pri
!#A N275 N276
!#0 N277 P175 MEMBAR
!#0 N278 P176 BLD 9 -1 FP BE Pri
!#0 N279 P176 BLD 10 -1 FP BE Pri
!#A N278 N279
!#0 N280 P176 BLD 11 -1 FP BE Pri
!#0 N281 P177 MEMBAR
!#0 N282 P178 BSTC 18 0x3f800034 FP BE Pri
!#0 N283 P178 BSTC 19 0x3f800035 FP BE Pri
!#A N282 N283
!#0 N284 P178 BSTC 20 0x3f800036 FP BE Pri
!#0 N285 P179 MEMBAR
!#0 N286 P180 BSTC 21 0x3f800037 FP BE Pri
!#0 N287 P180 BSTC 22 0x3f800038 FP BE Pri
!#A N286 N287
!#0 N288 P180 BSTC 23 0x3f800039 FP BE Pri
!#0 N289 P181 MEMBAR
!#0 N290 P182 LD 9 -1 Int BE Pri
!#0 N291 P182 CAS 9 -1 N290 0x52 Int BE Pri
!#0 N292 P183 DWLD 2 -1,0x0 Int BE Pri
!#0 N293 P183 CASX 2 -1,0x0 N292 0x53 Int BE Pri
!#0 N294 P184 DWST 12 0x54 Int BE Pri
!#0 N295 P184 DWST 13 0x55 Int BE Pri
!#A N294 N295
!#0 N296 P185 ST 7 0x56 Int BE Pri
!#0 N297 P186 DWST_BINIT 3 0x57 Int BE Pri
!#0 N298 P186 DWST_BINIT 4 0x58 Int BE Pri
!#A N297 N298
!#0 N299 P187 MEMBAR
!#0 N300 P188 ST_BINIT 9 0x59 Int BE Pri
!#0 N301 P189 MEMBAR
!#0 N302 P190 PREFETCH 3 Int BE Pri
!#0 N303 P191 LD 13 -1 Int BE Pri
!#0 N304 P191 CAS 13 -1 N303 0x5a Int BE Pri
!#0 N305 P192 DWST_BINIT 15 0x5b Int BE Pri
!#0 N306 P192 DWST_BINIT 16 0x5c Int BE Pri
!#A N305 N306
!#0 N307 P193 MEMBAR
!#0 N308 P194 ST_BINIT 14 0x5d Int BE Pri
!#0 N309 P195 MEMBAR
!#0 N310 P196 LD 12 -1 FP BE Pri
!#0 N311 P197 MEMBAR
!#0 N312 P198 BLD 3 -1 FP BE Pri
!#0 N313 P198 BLD 4 -1 FP BE Pri
!#A N312 N313
!#0 N314 P198 BLD 5 -1 FP BE Pri
!#0 N315 P199 MEMBAR
!#0 N316 P200 BSTC 0 0x3f80003a FP BE Pri
!#0 N317 P200 BSTC 1 0x3f80003b FP BE Pri
!#A N316 N317
!#0 N318 P200 BSTC 2 0x3f80003c FP BE Pri
!#0 N319 P201 MEMBAR
!#0 N320 P202 LD 2 -1 Int BE Pri
!#0 N321 P203 REPLACEMENT 15 Int BE Pri
!#0 N322 P204 DWST 18 0x5e Int BE Pri
!#0 N323 P204 DWST 19 0x5f Int BE Pri
!#A N322 N323
!#0 N324 P205 ST 17 0x60 Int BE Pri
!#0 N325 P206 MEMBAR
!#0 N326 P207 BSTC 9 0x3f80003d FP BE Pri
!#0 N327 P207 BSTC 10 0x3f80003e FP BE Pri
!#A N326 N327
!#0 N328 P207 BSTC 11 0x3f80003f FP BE Pri
!#0 N329 P208 MEMBAR
!#0 N330 P209 DWST 11 0x61 Int BE Pri
!#0 N331 P210 ST 12 0x3f800040 FP BE Pri
!#0 N332 P211 MEMBAR
!#0 N333 P212 BSTC 18 0x3f800041 FP BE Pri
!#0 N334 P212 BSTC 19 0x3f800042 FP BE Pri
!#A N333 N334
!#0 N335 P212 BSTC 20 0x3f800043 FP BE Pri
!#0 N336 P213 MEMBAR
!#0 N337 P214 LD 7 -1 Int BE Pri
!#0 N338 P214 CAS 7 -1 N337 0x62 Int BE Pri
!#0 N339 P215 DWLD 12 -1 Int BE Pri
!#0 N340 P215 DWLD 13 -1 Int BE Pri
!#A N339 N340
!#0 N341 P215 CASX 12 -1 N339 0x63 Int BE Pri
!#0 N342 P215 CASX 13 -1 N340 0x64 Int BE Pri
!#A N341 N342
!#0 N343 P216 DWLD 18 -1 Int BE Pri
!#0 N344 P216 DWLD 19 -1 Int BE Pri
!#A N343 N344
!#0 N345 P217 ST_BINIT 8 0x65 Int BE Pri
!#0 N346 P218 MEMBAR
!#0 N347 P219 SWAP 18 0xffffffff 0x66 Int BE Pri
!#0 N348 P220 MEMBAR
!#0 N349 P221 BLD 18 -1 FP BE Pri
!#0 N350 P221 BLD 19 -1 FP BE Pri
!#A N349 N350
!#0 N351 P221 BLD 20 -1 FP BE Pri
!#0 N352 P222 MEMBAR
!#0 N353 P223 BSTC 9 0x3f800044 FP BE Pri
!#0 N354 P223 BSTC 10 0x3f800045 FP BE Pri
!#A N353 N354
!#0 N355 P223 BSTC 11 0x3f800046 FP BE Pri
!#0 N356 P224 MEMBAR
!#0 N357 P225 SWAP 23 0xffffffff 0x67 Int BE Pri
!#0 N358 P226 DWST_BINIT 20 0x68 Int BE Pri
!#0 N359 P227 MEMBAR
!#0 N360 P228 DWST_BINIT 0 0x69 Int BE Pri
!#0 N361 P228 DWST_BINIT 1 0x6a Int BE Pri
!#A N360 N361
!#0 N362 P229 MEMBAR
!#0 N363 P230 BLD 9 -1 FP BE Pri
!#0 N364 P230 BLD 10 -1 FP BE Pri
!#A N363 N364
!#0 N365 P230 BLD 11 -1 FP BE Pri
!#0 N366 P231 MEMBAR
!#0 N367 P232 LD 23 -1 Int BE Pri
!#0 N368 P232 CAS 23 -1 N367 0x6b Int BE Pri
!#0 N369 P233 LD 21 -1 Int BE Pri
!#0 N370 P233 CAS 21 -1 N369 0x6c Int BE Pri
!#0 N371 P234 DWLD 18 -1 Int BE Pri
!#0 N372 P234 DWLD 19 -1 Int BE Pri
!#A N371 N372
!#0 N373 P234 CASX 18 -1 N371 0x6d Int BE Pri
!#0 N374 P234 CASX 19 -1 N372 0x6e Int BE Pri
!#A N373 N374
!#0 N375 P235 MEMBAR
!#0 N376 P236 BST 0 0x3f800047 FP BE Pri
!#0 N377 P236 BST 1 0x3f800048 FP BE Pri
!#A N376 N377
!#0 N378 P236 BST 2 0x3f800049 FP BE Pri
!#0 N379 P237 MEMBAR
!#0 N380 P238 PREFETCH 2 Int BE Pri
!#0 N381 P239 DWLD 20 -1,0x0 Int BE Pri
!#0 N382 P239 CASX 20 -1,0x0 N381 0x6f Int BE Pri
!#0 N383 P240 MEMBAR
!#0 N384 P241 BLD 0 -1 FP BE Pri
!#0 N385 P241 BLD 1 -1 FP BE Pri
!#A N384 N385
!#0 N386 P241 BLD 2 -1 FP BE Pri
!#0 N387 P242 MEMBAR
!#0 N388 P243 LD 3 -1 Int BE Pri
!#0 N389 P243 CAS 3 -1 N388 0x70 Int BE Pri
!#0 N390 P244 DWLD 21 -1 Int LE Pri
!#0 N391 P244 DWLD 22 -1 Int LE Pri
!#A N390 N391
!#0 N392 P245 ST_BINIT 2 0x71 Int BE Pri
!#0 N393 P246 MEMBAR
!#0 N394 P247 BLD 12 -1 FP BE Pri
!#0 N395 P247 BLD 13 -1 FP BE Pri
!#A N394 N395
!#0 N396 P247 BLD 14 -1 FP BE Pri
!#0 N397 P248 MEMBAR
!#0 N398 P249 ST_BINIT 16 0x72 Int BE Pri
!#0 N399 P250 MEMBAR
!#0 N400 P251 ST_BINIT 4 0x73 Int BE Pri
!#0 N401 P252 MEMBAR
!#0 N402 P253 BSTC 15 0x3f80004a FP BE Pri
!#0 N403 P253 BSTC 16 0x3f80004b FP BE Pri
!#A N402 N403
!#0 N404 P253 BSTC 17 0x3f80004c FP BE Pri
!#0 N405 P254 MEMBAR
!#0 N406 P255 SWAP 19 0xffffffff 0x74 Int BE Pri
!#0 N407 P256 LD 23 -1 Int BE Pri
!#0 N408 P256 CAS 23 -1 N407 0x75 Int BE Pri
!#0 N409 P257 MEMBAR
!#0 N410 P258 BST 3 0x3f80004d FP BE Pri
!#0 N411 P258 BST 4 0x3f80004e FP BE Pri
!#A N410 N411
!#0 N412 P258 BST 5 0x3f80004f FP BE Pri
!#0 N413 P259 MEMBAR
!#0 N414 P260 PREFETCH 3 Int BE Pri
!#0 N415 P261 SWAP 21 0xffffffff 0x76 Int BE Pri
!#0 N416 P262 ST_BINIT 19 0x77 Int BE Pri
!#0 N417 P263 MEMBAR
!#0 N418 P264 BSTC 21 0x3f800050 FP BE Pri
!#0 N419 P264 BSTC 22 0x3f800051 FP BE Pri
!#A N418 N419
!#0 N420 P264 BSTC 23 0x3f800052 FP BE Pri
!#0 N421 P265 MEMBAR
!#0 N422 P266 BLD 6 -1 FP BE Pri
!#0 N423 P266 BLD 7 -1 FP BE Pri
!#A N422 N423
!#0 N424 P266 BLD 8 -1 FP BE Pri
!#0 N425 P267 MEMBAR
!#0 N426 P268 DWST 12 0x78 Int BE Pri
!#0 N427 P268 DWST 13 0x79 Int BE Pri
!#A N426 N427
!#0 N428 P269 DWLD 0 -1 Int BE Pri
!#0 N429 P269 DWLD 1 -1 Int BE Pri
!#A N428 N429
!#0 N430 P269 CASX 0 -1 N428 0x7a Int BE Pri
!#0 N431 P269 CASX 1 -1 N429 0x7b Int BE Pri
!#A N430 N431
!#0 N432 P270 LD 20 -1 Int BE Pri
!#0 N433 P271 ST_BINIT 11 0x7c Int BE Pri
!#0 N434 P272 MEMBAR
!#0 N435 P273 PREFETCH 11 Int BE Pri
!#0 N436 P274 LD 2 -1 Int LE Pri
!#0 N437 P274 CAS 2 -1 N436 0x7d Int LE Pri
!#0 N438 P275 ST_BINIT 15 0x7e Int BE Pri
!#0 N439 P276 MEMBAR
!#0 N440 P277 DWST_BINIT 6 0x7f Int BE Pri
!#0 N441 P277 DWST_BINIT 7 0x80 Int BE Pri
!#A N440 N441
!#0 N442 P278 MEMBAR
!#0 N443 P279 REPLACEMENT 6 Int BE Pri
!#0 N444 P280 LDD 3 -1 Int BE Pri
!#0 N445 P280 LDD 4 -1 Int BE Pri
!#A N444 N445
!#0 N446 P281 LD 22 -1 Int BE Pri
!#0 N447 P282 LD 6 -1 Int LE Pri
!#0 N448 P283 DWLD 9 -1 Int BE Pri
!#0 N449 P283 DWLD 10 -1 Int BE Pri
!#A N448 N449
!#0 N450 P283 CASX 9 -1 N448 0x81 Int BE Pri
!#0 N451 P283 CASX 10 -1 N449 0x82 Int BE Pri
!#A N450 N451
!#0 N452 P284 DWLD 3 -1 Int BE Pri
!#0 N453 P284 DWLD 4 -1 Int BE Pri
!#A N452 N453
!#0 N454 P285 DWLD 9 -1 Int BE Pri
!#0 N455 P285 DWLD 10 -1 Int BE Pri
!#A N454 N455
!#0 N456 P285 CASX 9 -1 N454 0x83 Int BE Pri
!#0 N457 P285 CASX 10 -1 N455 0x84 Int BE Pri
!#A N456 N457
!#0 N458 P286 MEMBAR
!#0 N459 P287 BSTC 0 0x3f800053 FP BE Pri
!#0 N460 P287 BSTC 1 0x3f800054 FP BE Pri
!#A N459 N460
!#0 N461 P287 BSTC 2 0x3f800055 FP BE Pri
!#0 N462 P288 MEMBAR
!#0 N463 P289 BSTC 21 0x3f800056 FP BE Pri
!#0 N464 P289 BSTC 22 0x3f800057 FP BE Pri
!#A N463 N464
!#0 N465 P289 BSTC 23 0x3f800058 FP BE Pri
!#0 N466 P290 MEMBAR
!#0 N467 P291 BLD 15 -1 FP BE Pri
!#0 N468 P291 BLD 16 -1 FP BE Pri
!#A N467 N468
!#0 N469 P291 BLD 17 -1 FP BE Pri
!#0 N470 P292 MEMBAR
!#0 N471 P293 BSTC 15 0x3f800059 FP BE Pri
!#0 N472 P293 BSTC 16 0x3f80005a FP BE Pri
!#A N471 N472
!#0 N473 P293 BSTC 17 0x3f80005b FP BE Pri
!#0 N474 P294 MEMBAR
!#0 N475 P295 ST 4 0x85 Int BE Pri
!#0 N476 P296 LD 10 -1 Int LE Pri
!#0 N477 P296 CAS 10 -1 N476 0x86 Int LE Pri
!#0 N478 P297 ST_BINIT 16 0x87 Int BE Pri
!#0 N479 P298 MEMBAR
!#0 N480 P299 BST 12 0x3f80005c FP BE Pri
!#0 N481 P299 BST 13 0x3f80005d FP BE Pri
!#A N480 N481
!#0 N482 P299 BST 14 0x3f80005e FP BE Pri
!#0 N483 P300 MEMBAR
!#0 N484 P301 PREFETCH 6 Int BE Pri
!#0 N485 P302 LD 7 -1 Int BE Pri
!#0 N486 P303 REPLACEMENT 18 Int BE Pri
!#0 N487 P304 LD 16 -1 Int BE Pri
!#0 N488 P304 CAS 16 -1 N487 0x88 Int BE Pri
!#0 N489 P305 DWLD 14 -1,0x0 Int BE Pri
!#0 N490 P305 CASX 14 -1,0x0 N489 0x89 Int BE Pri
!#0 N491 P306 LD 22 -1 Int BE Pri
!#0 N492 P307 DWST_BINIT 6 0x8a Int BE Pri
!#0 N493 P307 DWST_BINIT 7 0x8b Int BE Pri
!#A N492 N493
!#0 N494 P308 MEMBAR
!#0 N495 P309 BLD 6 -1 FP BE Pri
!#0 N496 P309 BLD 7 -1 FP BE Pri
!#A N495 N496
!#0 N497 P309 BLD 8 -1 FP BE Pri
!#0 N498 P310 MEMBAR
!#0 N499 P311 BST 18 0x3f80005f FP BE Pri
!#0 N500 P311 BST 19 0x3f800060 FP BE Pri
!#A N499 N500
!#0 N501 P311 BST 20 0x3f800061 FP BE Pri
!#0 N502 P312 MEMBAR
!#0 N503 P313 DWLD 14 -1,0x0 Int BE Pri
!#0 N504 P313 CASX 14 -1,0x0 N503 0x8c Int BE Pri
!#0 N505 P314 MEMBAR
!#0 N506 P315 BST 21 0x3f800062 FP BE Pri
!#0 N507 P315 BST 22 0x3f800063 FP BE Pri
!#A N506 N507
!#0 N508 P315 BST 23 0x3f800064 FP BE Pri
!#0 N509 P316 MEMBAR
!#0 N510 P317 SWAP 17 0xffffffff 0x8d Int BE Pri
!#0 N511 P318 DWST_BINIT 20 0x8e Int BE Pri
!#0 N512 P319 MEMBAR
!#0 N513 P320 DWST_BINIT 6 0x8f Int BE Pri
!#0 N514 P320 DWST_BINIT 7 0x90 Int BE Pri
!#A N513 N514
!#0 N515 P321 MEMBAR
!#0 N516 P322 BST 21 0x3f800065 FP BE Pri
!#0 N517 P322 BST 22 0x3f800066 FP BE Pri
!#A N516 N517
!#0 N518 P322 BST 23 0x3f800067 FP BE Pri
!#0 N519 P323 MEMBAR
!#0 N520 P324 DWLD 18 -1 Int BE Pri
!#0 N521 P324 DWLD 19 -1 Int BE Pri
!#A N520 N521
!#0 N522 P325 PREFETCH 13 Int BE Pri
!#0 N523 P326 ST_BINIT 14 0x91 Int BE Pri
!#0 N524 P327 MEMBAR
!#0 N525 P328 BSTC 6 0x3f800068 FP BE Pri
!#0 N526 P328 BSTC 7 0x3f800069 FP BE Pri
!#A N525 N526
!#0 N527 P328 BSTC 8 0x3f80006a FP BE Pri
!#0 N528 P329 MEMBAR
!#0 N529 P330 SWAP 23 0xffffffff 0x92 Int BE Pri
!#0 N530 P331 DWLD 12 -1 Int BE Pri
!#0 N531 P331 DWLD 13 -1 Int BE Pri
!#A N530 N531
!#0 N532 P332 DWLD 18 -1 Int BE Pri
!#0 N533 P332 DWLD 19 -1 Int BE Pri
!#A N532 N533
!#0 N534 P333 LD 2 -1 Int BE Pri
!#0 N535 P334 SWAP 12 0xffffffff 0x93 Int BE Pri
!#0 N536 P335 MEMBAR
!#0 N537 P336 BST 18 0x3f80006b FP BE Pri
!#0 N538 P336 BST 19 0x3f80006c FP BE Pri
!#A N537 N538
!#0 N539 P336 BST 20 0x3f80006d FP BE Pri
!#0 N540 P337 MEMBAR
!#0 N541 P338 LD 8 -1 Int LE Pri
!#0 N542 P339 ST_BINIT 4 0x94 Int BE Pri
!#0 N543 P340 MEMBAR
!#0 N544 P341 LD 2 -1 Int BE Pri
!#0 N545 P341 CAS 2 -1 N544 0x95 Int BE Pri
!#0 N546 P342 DWST_BINIT 5 0x96 Int BE Pri
!#0 N547 P343 MEMBAR
!#0 N548 P344 BST 18 0x3f80006e FP BE Pri
!#0 N549 P344 BST 19 0x3f80006f FP BE Pri
!#A N548 N549
!#0 N550 P344 BST 20 0x3f800070 FP BE Pri
!#0 N551 P345 MEMBAR
!#0 N552 P346 DWST 6 0x97 Int LE Pri
!#0 N553 P346 DWST 7 0x98 Int LE Pri
!#A N552 N553
!#0 N554 P347 DWLD 15 -1 Int BE Pri
!#0 N555 P347 DWLD 16 -1 Int BE Pri
!#A N554 N555
!#0 N556 P347 CASX 15 -1 N554 0x99 Int BE Pri
!#0 N557 P347 CASX 16 -1 N555 0x9a Int BE Pri
!#A N556 N557
!#0 N558 P348 MEMBAR
!#0 N559 P349 BLD 18 -1 FP BE Pri
!#0 N560 P349 BLD 19 -1 FP BE Pri
!#A N559 N560
!#0 N561 P349 BLD 20 -1 FP BE Pri
!#0 N562 P350 MEMBAR
!#0 N563 P351 ST 10 0x3f800071 FP BE Pri
!#0 N564 P352 ST 16 0x9b Int BE Pri
!#0 N565 P353 MEMBAR
!#0 N566 P354 BSTC 15 0x3f800072 FP BE Pri
!#0 N567 P354 BSTC 16 0x3f800073 FP BE Pri
!#A N566 N567
!#0 N568 P354 BSTC 17 0x3f800074 FP BE Pri
!#0 N569 P355 MEMBAR
!#0 N570 P356 ST_BINIT 16 0x9c Int BE Pri
!#0 N571 P357 MEMBAR
!#0 N572 P358 BSTC 21 0x3f800075 FP BE Pri
!#0 N573 P358 BSTC 22 0x3f800076 FP BE Pri
!#A N572 N573
!#0 N574 P358 BSTC 23 0x3f800077 FP BE Pri
!#0 N575 P359 MEMBAR
!#0 N576 P360 BLD 18 -1 FP BE Pri
!#0 N577 P360 BLD 19 -1 FP BE Pri
!#A N576 N577
!#0 N578 P360 BLD 20 -1 FP BE Pri
!#0 N579 P361 MEMBAR
!#0 N580 P362 LD 0 -1 Int BE Pri
!#0 N581 P362 CAS 0 -1 N580 0x9d Int BE Pri
!#0 N582 P363 DWST_BINIT 0 0x9e Int BE Pri
!#0 N583 P363 DWST_BINIT 1 0x9f Int BE Pri
!#A N582 N583
!#0 N584 P364 MEMBAR
!#0 N585 P365 DWST 8 0xa0 Int BE Pri
!#0 N586 P366 PREFETCH 13 Int BE Pri
!#0 N587 P367 LD 9 -1 Int BE Pri
!#0 N588 P367 CAS 9 -1 N587 0xa1 Int BE Pri
!#0 N589 P368 MEMBAR
!#0 N590 P369 BST 6 0x3f800078 FP BE Pri
!#0 N591 P369 BST 7 0x3f800079 FP BE Pri
!#A N590 N591
!#0 N592 P369 BST 8 0x3f80007a FP BE Pri
!#0 N593 P370 MEMBAR
!#0 N594 P371 BLD 15 -1 FP BE Pri
!#0 N595 P371 BLD 16 -1 FP BE Pri
!#A N594 N595
!#0 N596 P371 BLD 17 -1 FP BE Pri
!#0 N597 P372 MEMBAR
!#0 N598 P373 SWAP 13 0xffffffff 0xa2 Int BE Pri
!#0 N599 P374 LDD 21 -1 Int BE Pri
!#0 N600 P374 LDD 22 -1 Int BE Pri
!#A N599 N600
!#0 N601 P375 DWST_BINIT 9 0xa3 Int BE Pri
!#0 N602 P375 DWST_BINIT 10 0xa4 Int BE Pri
!#A N601 N602
!#0 N603 P376 MEMBAR
!#0 N604 P377 ST_BINIT 17 0xa5 Int BE Pri
!#0 N605 P378 MEMBAR
!#0 N606 P379 BLD 15 -1 FP BE Pri
!#0 N607 P379 BLD 16 -1 FP BE Pri
!#A N606 N607
!#0 N608 P379 BLD 17 -1 FP BE Pri
!#0 N609 P380 MEMBAR
!#0 N610 P381 BLD 21 -1 FP BE Pri
!#0 N611 P381 BLD 22 -1 FP BE Pri
!#A N610 N611
!#0 N612 P381 BLD 23 -1 FP BE Pri
!#0 N613 P382 MEMBAR
!#0 N614 P383 LD 13 -1 Int BE Pri
!#0 N615 P383 CAS 13 -1 N614 0xa6 Int BE Pri
!#0 N616 P384 MEMBAR
!#0 N617 P385 BLD 3 -1 FP BE Pri
!#0 N618 P385 BLD 4 -1 FP BE Pri
!#A N617 N618
!#0 N619 P385 BLD 5 -1 FP BE Pri
!#0 N620 P386 MEMBAR
!#0 N621 P387 BSTC 0 0x3f80007b FP BE Pri
!#0 N622 P387 BSTC 1 0x3f80007c FP BE Pri
!#A N621 N622
!#0 N623 P387 BSTC 2 0x3f80007d FP BE Pri
!#0 N624 P388 MEMBAR
!#0 N625 P389 BLD 3 -1 FP BE Pri
!#0 N626 P389 BLD 4 -1 FP BE Pri
!#A N625 N626
!#0 N627 P389 BLD 5 -1 FP BE Pri
!#0 N628 P390 MEMBAR
!#0 N629 P391 DWST_BINIT 9 0xa7 Int BE Pri
!#0 N630 P391 DWST_BINIT 10 0xa8 Int BE Pri
!#A N629 N630
!#0 N631 P392 MEMBAR
!#0 N632 P393 LDD 3 -1 Int BE Pri
!#0 N633 P393 LDD 4 -1 Int BE Pri
!#A N632 N633
!#0 N634 P394 DWLD 18 -1 Int BE Pri
!#0 N635 P394 DWLD 19 -1 Int BE Pri
!#A N634 N635
!#0 N636 P394 CASX 18 -1 N634 0xa9 Int BE Pri
!#0 N637 P394 CASX 19 -1 N635 0xaa Int BE Pri
!#A N636 N637
!#0 N638 P395 DWLD 2 -1 Int BE Pri
!#0 N639 P396 MEMBAR
!#0 N640 P397 BLD 9 -1 FP BE Pri
!#0 N641 P397 BLD 10 -1 FP BE Pri
!#A N640 N641
!#0 N642 P397 BLD 11 -1 FP BE Pri
!#0 N643 P398 MEMBAR
!#0 N644 P399 LD 1 -1 Int BE Pri
!#0 N645 P400 DWST_BINIT 21 0xab Int BE Pri
!#0 N646 P400 DWST_BINIT 22 0xac Int BE Pri
!#A N645 N646
!#0 N647 P401 MEMBAR
!#0 N648 P402 BLD 9 -1 FP BE Pri
!#0 N649 P402 BLD 10 -1 FP BE Pri
!#A N648 N649
!#0 N650 P402 BLD 11 -1 FP BE Pri
!#0 N651 P403 MEMBAR
!#0 N652 P404 SWAP 20 0xffffffff 0xad Int BE Pri
!#0 N653 P405 PREFETCH 6 Int BE Pri
!#0 N654 P406 LDD 11 -1 Int BE Pri
!#0 N655 P407 MEMBAR
!#0 N656 P408 BSTC 18 0x3f80007e FP BE Pri
!#0 N657 P408 BSTC 19 0x3f80007f FP BE Pri
!#A N656 N657
!#0 N658 P408 BSTC 20 0x3f800080 FP BE Pri
!#0 N659 P409 MEMBAR
!#0 N660 P410 LD 12 -1 Int BE Pri
!#0 N661 P411 SWAP 2 0xffffffff 0xae Int BE Pri
!#0 N662 P412 LD 17 -1 Int BE Pri
!#0 N663 P412 CAS 17 -1 N662 0xaf Int BE Pri
!#0 N664 P413 MEMBAR
!#0 N665 P414 BSTC 3 0x3f800081 FP BE Pri
!#0 N666 P414 BSTC 4 0x3f800082 FP BE Pri
!#A N665 N666
!#0 N667 P414 BSTC 5 0x3f800083 FP BE Pri
!#0 N668 P415 MEMBAR
!#0 N669 P416 DWLD 20 -1,0x0 Int BE Pri
!#0 N670 P416 CASX 20 -1,0x0 N669 0xb0 Int BE Pri
!#0 N671 P417 MEMBAR
!#0 N672 P418 BSTC 9 0x3f800084 FP BE Pri
!#0 N673 P418 BSTC 10 0x3f800085 FP BE Pri
!#A N672 N673
!#0 N674 P418 BSTC 11 0x3f800086 FP BE Pri
!#0 N675 P419 MEMBAR
!#0 N676 P420 LD 19 -1 Int BE Pri
!#0 N677 P420 CAS 19 -1 N676 0xb1 Int BE Pri
!#0 N678 P421 DWLD 12 -1 Int BE Pri
!#0 N679 P421 DWLD 13 -1 Int BE Pri
!#A N678 N679
!#0 N680 P421 CASX 12 -1 N678 0xb2 Int BE Pri
!#0 N681 P421 CASX 13 -1 N679 0xb3 Int BE Pri
!#A N680 N681
!#0 N682 P422 LDD 9 -1 Int BE Pri
!#0 N683 P422 LDD 10 -1 Int BE Pri
!#A N682 N683
!#0 N684 P423 LD 22 -1 Int BE Pri
!#0 N685 P423 CAS 22 -1 N684 0xb4 Int BE Pri
!#0 N686 P424 MEMBAR
!#0 N687 P425 BLD 6 -1 FP BE Pri
!#0 N688 P425 BLD 7 -1 FP BE Pri
!#A N687 N688
!#0 N689 P425 BLD 8 -1 FP BE Pri
!#0 N690 P426 MEMBAR
!#0 N691 P427 LD 1 -1 Int BE Pri
!#0 N692 P427 CAS 1 -1 N691 0xb5 Int BE Pri
!#0 N693 P428 SWAP 15 0xffffffff 0xb6 Int BE Pri
!#0 N694 P429 MEMBAR
!#0 N695 P430 BSTC 0 0x3f800087 FP BE Pri
!#0 N696 P430 BSTC 1 0x3f800088 FP BE Pri
!#A N695 N696
!#0 N697 P430 BSTC 2 0x3f800089 FP BE Pri
!#0 N698 P431 MEMBAR
!#0 N699 P432 DWLD 12 -1 Int BE Pri
!#0 N700 P432 DWLD 13 -1 Int BE Pri
!#A N699 N700
!#0 N701 P432 CASX 12 -1 N699 0xb7 Int BE Pri
!#0 N702 P432 CASX 13 -1 N700 0xb8 Int BE Pri
!#A N701 N702
!#0 N703 P433 DWST_BINIT 23 0xb9 Int BE Pri
!#0 N704 P434 MEMBAR
!#0 N705 P435 ST_BINIT 13 0xba Int BE Pri
!#0 N706 P436 MEMBAR
!#0 N707 P437 DWST 18 0xbb Int BE Pri
!#0 N708 P437 DWST 19 0xbc Int BE Pri
!#A N707 N708
!#0 N709 P438 REPLACEMENT 8 Int BE Pri
!#0 N710 P439 DWST 20 0xbd Int BE Pri
!#0 N711 P440 MEMBAR
!#0 N712 P441 BLD 21 -1 FP BE Pri
!#0 N713 P441 BLD 22 -1 FP BE Pri
!#A N712 N713
!#0 N714 P441 BLD 23 -1 FP BE Pri
!#0 N715 P442 MEMBAR
!#0 N716 P443 LD 18 -1 Int BE Pri
!#0 N717 P444 DWLD 12 -1 Int BE Pri
!#0 N718 P444 DWLD 13 -1 Int BE Pri
!#A N717 N718
!#0 N719 P444 CASX 12 -1 N717 0xbe Int BE Pri
!#0 N720 P444 CASX 13 -1 N718 0xbf Int BE Pri
!#A N719 N720
!#0 N721 P445 SWAP 19 0xffffffff 0xc0 Int BE Pri
!#0 N722 P446 DWLD 12 -1 FP BE Pri
!#0 N723 P446 DWLD 13 -1 FP BE Pri
!#A N722 N723
!#0 N724 P447 LDD 15 -1 Int BE Pri
!#0 N725 P447 LDD 16 -1 Int BE Pri
!#A N724 N725
!#0 N726 P448 LD 7 -1 Int BE Pri
!#0 N727 P448 CAS 7 -1 N726 0xc1 Int BE Pri
!#0 N728 P449 MEMBAR
!#0 N729 P450 BLD 6 -1 FP BE Pri
!#0 N730 P450 BLD 7 -1 FP BE Pri
!#A N729 N730
!#0 N731 P450 BLD 8 -1 FP BE Pri
!#0 N732 P451 MEMBAR
!#0 N733 P452 DWST 9 0xc2 Int BE Pri
!#0 N734 P452 DWST 10 0xc3 Int BE Pri
!#A N733 N734
!#0 N735 P453 LD 11 -1 Int BE Pri
!#0 N736 P453 CAS 11 -1 N735 0xc4 Int BE Pri
!#0 N737 P454 DWLD 9 -1 Int BE Pri
!#0 N738 P454 DWLD 10 -1 Int BE Pri
!#A N737 N738
!#0 N739 P455 REPLACEMENT 20 Int BE Pri
!#0 N740 P456 DWLD 20 -1 Int BE Pri
!#0 N741 P457 DWLD 18 -1 Int BE Pri
!#0 N742 P457 DWLD 19 -1 Int BE Pri
!#A N741 N742
!#0 N743 P458 DWLD 11 -1 Int BE Pri
!#0 N744 P459 REPLACEMENT 19 Int BE Pri
!#0 N745 P460 SWAP 0 0xffffffff 0xc5 Int BE Pri
!#0 N746 P461 DWLD 23 -1,0x0 Int BE Pri
!#0 N747 P461 CASX 23 -1,0x0 N746 0xc6 Int BE Pri
!#0 N748 P462 DWLD 20 -1 Int LE Pri
!#0 N749 P463 LD 18 -1 Int BE Pri
!#0 N750 P464 LD 8 -1 Int BE Pri
!#0 N751 P464 CAS 8 -1 N750 0xc7 Int BE Pri
!#0 N752 P465 ST 9 0x3f80008a FP BE Pri
!#0 N753 P466 SWAP 1 0xffffffff 0xc8 Int BE Pri
!#0 N754 P467 ST_BINIT 8 0xc9 Int BE Pri
!#0 N755 P468 MEMBAR
!#0 N756 P469 DWLD 23 -1,0x0 Int BE Pri
!#0 N757 P469 CASX 23 -1,0x0 N756 0xca Int BE Pri
!#0 N758 P470 LD 11 -1 Int BE Pri
!#0 N759 P470 CAS 11 -1 N758 0xcb Int BE Pri
!#0 N760 P471 MEMBAR
!#0 N761 P472 BST 12 0x3f80008b FP BE Pri
!#0 N762 P472 BST 13 0x3f80008c FP BE Pri
!#A N761 N762
!#0 N763 P472 BST 14 0x3f80008d FP BE Pri
!#0 N764 P473 MEMBAR
!#0 N765 P474 DWLD 11 -1 Int BE Pri
!#0 N766 P475 DWST_BINIT 23 0xcc Int BE Pri
!#0 N767 P476 MEMBAR
!#0 N768 P477 DWST_BINIT 12 0xcd Int BE Pri
!#0 N769 P477 DWST_BINIT 13 0xce Int BE Pri
!#A N768 N769
!#0 N770 P478 MEMBAR
!#0 N771 P479 REPLACEMENT 10 Int BE Pri
!#0 N772 P480 ST_BINIT 18 0xcf Int BE Pri
!#0 N773 P481 MEMBAR
!#0 N774 P482 DWLD 6 -1 Int BE Pri
!#0 N775 P482 DWLD 7 -1 Int BE Pri
!#A N774 N775
!#0 N776 P482 CASX 6 -1 N774 0xd0 Int BE Pri
!#0 N777 P482 CASX 7 -1 N775 0xd1 Int BE Pri
!#A N776 N777
!#0 N778 P483 MEMBAR
!#0 N779 P484 BLD 9 -1 FP BE Pri
!#0 N780 P484 BLD 10 -1 FP BE Pri
!#A N779 N780
!#0 N781 P484 BLD 11 -1 FP BE Pri
!#0 N782 P485 MEMBAR
!#0 N783 P486 REPLACEMENT 14 Int BE Pri
!#0 N784 P487 SWAP 9 0xffffffff 0xd2 Int BE Pri
!#0 N785 P488 ST 2 0xd3 Int LE Pri
!#0 N786 P489 DWLD 14 -1,0x0 Int BE Pri
!#0 N787 P489 CASX 14 -1,0x0 N786 0xd4 Int BE Pri
!#0 N788 P490 MEMBAR
!#0 N789 P491 BST 18 0x3f80008e FP BE Pri
!#0 N790 P491 BST 19 0x3f80008f FP BE Pri
!#A N789 N790
!#0 N791 P491 BST 20 0x3f800090 FP BE Pri
!#0 N792 P492 MEMBAR
!#0 N793 P493 ST 6 0x3f800091 FP BE Pri
!#0 N794 P494 MEMBAR
!#0 N795 P495 BSTC 6 0x3f800092 FP BE Pri
!#0 N796 P495 BSTC 7 0x3f800093 FP BE Pri
!#A N795 N796
!#0 N797 P495 BSTC 8 0x3f800094 FP BE Pri
!#0 N798 P496 MEMBAR
!#0 N799 P497 LD 4 -1 Int BE Pri
!#0 N800 P498 DWST 3 0xd5 Int BE Pri
!#0 N801 P498 DWST 4 0xd6 Int BE Pri
!#A N800 N801
!#0 N802 P499 PREFETCH 6 Int BE Pri
!#0 N803 P500 ST 0 0xd7 Int BE Pri
!#0 N804 P501 LD 13 -1 Int BE Pri
!#0 N805 P501 CAS 13 -1 N804 0xd8 Int BE Pri
!#0 N806 P502 DWLD 3 -1 Int BE Pri
!#0 N807 P502 DWLD 4 -1 Int BE Pri
!#A N806 N807
!#0 N808 P503 DWST 14 0xd9 Int BE Pri
!#0 N809 P504 MEMBAR
!#0 N810 P505 BST 3 0x3f800095 FP BE Pri
!#0 N811 P505 BST 4 0x3f800096 FP BE Pri
!#A N810 N811
!#0 N812 P505 BST 5 0x3f800097 FP BE Pri
!#0 N813 P506 MEMBAR
!#0 N814 P507 LD 16 -1 Int BE Pri
!#0 N815 P507 CAS 16 -1 N814 0xda Int BE Pri
!#0 N816 P508 MEMBAR
!#0 N817 P509 BLD 18 -1 FP BE Pri
!#0 N818 P509 BLD 19 -1 FP BE Pri
!#A N817 N818
!#0 N819 P509 BLD 20 -1 FP BE Pri
!#0 N820 P510 MEMBAR
!#0 N821 P511 PREFETCH 15 Int BE Pri
!#0 N822 P512 MEMBAR
!#0 N823 P513 BSTC 15 0x3f800098 FP BE Pri
!#0 N824 P513 BSTC 16 0x3f800099 FP BE Pri
!#A N823 N824
!#0 N825 P513 BSTC 17 0x3f80009a FP BE Pri
!#0 N826 P514 MEMBAR
!#0 N827 P515 LD 22 -1 Int BE Pri
!#0 N828 P515 CAS 22 -1 N827 0xdb Int BE Pri
!#0 N829 P516 ST 0 0xdc Int BE Pri
!#0 N830 P517 SWAP 6 0xffffffff 0xdd Int LE Pri
!#0 N831 P518 SWAP 2 0xffffffff 0xde Int BE Pri
!#0 N832 P519 DWLD 0 -1 Int BE Pri
!#0 N833 P519 DWLD 1 -1 Int BE Pri
!#A N832 N833
!#0 N834 P520 MEMBAR
!#0 N835 P521 BSTC 18 0x3f80009b FP BE Pri
!#0 N836 P521 BSTC 19 0x3f80009c FP BE Pri
!#A N835 N836
!#0 N837 P521 BSTC 20 0x3f80009d FP BE Pri
!#0 N838 P522 MEMBAR
!#0 N839 P523 DWST 18 0xdf Int LE Pri
!#0 N840 P523 DWST 19 0xe0 Int LE Pri
!#A N839 N840
!#0 N841 P524 DWLD 21 -1 Int BE Pri
!#0 N842 P524 DWLD 22 -1 Int BE Pri
!#A N841 N842
!#0 N843 P525 DWLD 9 -1 Int BE Pri
!#0 N844 P525 DWLD 10 -1 Int BE Pri
!#A N843 N844
!#0 N845 P526 REPLACEMENT 1 Int BE Pri
!#0 N846 P527 DWLD 15 -1 Int BE Pri
!#0 N847 P527 DWLD 16 -1 Int BE Pri
!#A N846 N847
!#0 N848 P527 CASX 15 -1 N846 0xe1 Int BE Pri
!#0 N849 P527 CASX 16 -1 N847 0xe2 Int BE Pri
!#A N848 N849
!#0 N850 P528 ST_BINIT 0 0xe3 Int BE Pri
!#0 N851 P529 MEMBAR
!#0 N852 P530 LD 6 -1 Int BE Pri
!#0 N853 P530 CAS 6 -1 N852 0xe4 Int BE Pri
!#0 N854 P531 DWST 12 0xe5 Int LE Pri
!#0 N855 P531 DWST 13 0xe6 Int LE Pri
!#A N854 N855
!#0 N856 P532 DWST 11 0xe7 Int BE Pri
!#0 N857 P533 DWLD 15 -1 Int LE Pri
!#0 N858 P533 DWLD 16 -1 Int LE Pri
!#A N857 N858
!#0 N859 P533 CASX 15 -1 N857 0xe8 Int LE Pri
!#0 N860 P533 CASX 16 -1 N858 0xe9 Int LE Pri
!#A N859 N860
!#0 N861 P534 ST 21 0xea Int BE Pri
!#0 N862 P535 DWST_BINIT 18 0xeb Int BE Pri
!#0 N863 P535 DWST_BINIT 19 0xec Int BE Pri
!#A N862 N863
!#0 N864 P536 MEMBAR
!#0 N865 P537 BST 6 0x3f80009e FP BE Pri
!#0 N866 P537 BST 7 0x3f80009f FP BE Pri
!#A N865 N866
!#0 N867 P537 BST 8 0x3f8000a0 FP BE Pri
!#0 N868 P538 MEMBAR
!#0 N869 P539 SWAP 4 0xffffffff 0xed Int LE Pri
!#0 N870 P540 MEMBAR
!#0 N871 P541 BSTC 18 0x3f8000a1 FP BE Pri
!#0 N872 P541 BSTC 19 0x3f8000a2 FP BE Pri
!#A N871 N872
!#0 N873 P541 BSTC 20 0x3f8000a3 FP BE Pri
!#0 N874 P542 MEMBAR
!#0 N875 P543 LDD 3 -1 Int BE Pri
!#0 N876 P543 LDD 4 -1 Int BE Pri
!#A N875 N876
!#0 N877 P544 SWAP 16 0xffffffff 0xee Int BE Pri
!#0 N878 P545 LD 23 -1 Int BE Pri
!#0 N879 P545 CAS 23 -1 N878 0xef Int BE Pri
!#0 N880 P546 LDD 23 -1 Int BE Pri
!#0 N881 P547 REPLACEMENT 21 Int BE Pri
!#0 N882 P548 LDD 14 -1 Int BE Pri
!#0 N883 P549 MEMBAR
!#0 N884 P550 BLD 18 -1 FP BE Pri
!#0 N885 P550 BLD 19 -1 FP BE Pri
!#A N884 N885
!#0 N886 P550 BLD 20 -1 FP BE Pri
!#0 N887 P551 MEMBAR
!#0 N888 P552 ST_BINIT 7 0xf0 Int BE Pri
!#0 N889 P553 MEMBAR
!#0 N890 P554 BLD 15 -1 FP BE Pri
!#0 N891 P554 BLD 16 -1 FP BE Pri
!#A N890 N891
!#0 N892 P554 BLD 17 -1 FP BE Pri
!#0 N893 P555 MEMBAR
!#0 N894 P556 DWST_BINIT 18 0xf1 Int BE Pri
!#0 N895 P556 DWST_BINIT 19 0xf2 Int BE Pri
!#A N894 N895
!#0 N896 P557 MEMBAR
!#0 N897 P558 DWST_BINIT 2 0xf3 Int BE Pri
!#0 N898 P559 MEMBAR
!#0 N899 P560 DWST_BINIT 3 0xf4 Int BE Pri
!#0 N900 P560 DWST_BINIT 4 0xf5 Int BE Pri
!#A N899 N900
!#0 N901 P561 MEMBAR
!#0 N902 P562 LDD 12 -1 Int BE Pri
!#0 N903 P562 LDD 13 -1 Int BE Pri
!#A N902 N903
!#0 N904 P563 MEMBAR
!#0 N905 P564 BSTC 6 0x3f8000a4 FP BE Pri
!#0 N906 P564 BSTC 7 0x3f8000a5 FP BE Pri
!#A N905 N906
!#0 N907 P564 BSTC 8 0x3f8000a6 FP BE Pri
!#0 N908 P565 MEMBAR
!#0 N909 P566 ST_BINIT 6 0xf6 Int BE Pri
!#0 N910 P567 MEMBAR
!#0 N911 P568 SWAP 3 0xffffffff 0xf7 Int BE Pri
!#0 N912 P569 DWST 6 0xf8 Int BE Pri
!#0 N913 P569 DWST 7 0xf9 Int BE Pri
!#A N912 N913
!#0 N914 P570 MEMBAR
!#0 N915 P571 BST 18 0x3f8000a7 FP BE Pri
!#0 N916 P571 BST 19 0x3f8000a8 FP BE Pri
!#A N915 N916
!#0 N917 P571 BST 20 0x3f8000a9 FP BE Pri
!#0 N918 P572 MEMBAR
!#0 N919 P573 LD 13 -1 Int BE Pri
!#0 N920 P574 DWST_BINIT 3 0xfa Int BE Pri
!#0 N921 P574 DWST_BINIT 4 0xfb Int BE Pri
!#A N920 N921
!#0 N922 P575 MEMBAR
!#0 N923 P576 DWST 3 0xfc Int BE Pri
!#0 N924 P576 DWST 4 0xfd Int BE Pri
!#A N923 N924
!#0 N925 P577 MEMBAR
!#0 N926 P578 BSTC 6 0x3f8000aa FP BE Pri
!#0 N927 P578 BSTC 7 0x3f8000ab FP BE Pri
!#A N926 N927
!#0 N928 P578 BSTC 8 0x3f8000ac FP BE Pri
!#0 N929 P579 MEMBAR
!#0 N930 P580 SWAP 6 0xffffffff 0xfe Int BE Pri
!#0 N931 P581 MEMBAR
!#0 N932 P582 BST 6 0x3f8000ad FP BE Pri
!#0 N933 P582 BST 7 0x3f8000ae FP BE Pri
!#A N932 N933
!#0 N934 P582 BST 8 0x3f8000af FP BE Pri
!#0 N935 P583 MEMBAR
!#0 N936 P584 LDD 18 -1 Int BE Pri
!#0 N937 P584 LDD 19 -1 Int BE Pri
!#A N936 N937
!#0 N938 P585 ST_BINIT 9 0xff Int BE Pri
!#0 N939 P586 MEMBAR
!#0 N940 P587 DWST_BINIT 2 0x100 Int BE Pri
!#0 N941 P588 MEMBAR
!#0 N942 P589 DWST 0 0x101 Int BE Pri
!#0 N943 P589 DWST 1 0x102 Int BE Pri
!#A N942 N943
!#0 N944 P590 ST 2 0x103 Int BE Pri
!#0 N945 P591 MEMBAR
!#0 N946 P592 BST 15 0x3f8000b0 FP BE Pri
!#0 N947 P592 BST 16 0x3f8000b1 FP BE Pri
!#A N946 N947
!#0 N948 P592 BST 17 0x3f8000b2 FP BE Pri
!#0 N949 P593 MEMBAR
!#0 N950 P594 ST_BINIT 21 0x104 Int BE Pri
!#0 N951 P595 MEMBAR
!#0 N952 P596 DWST 12 0x105 Int BE Pri
!#0 N953 P596 DWST 13 0x106 Int BE Pri
!#A N952 N953
!#0 N954 P597 DWLD 3 -1 Int BE Pri
!#0 N955 P597 DWLD 4 -1 Int BE Pri
!#A N954 N955
!#0 N956 P597 CASX 3 -1 N954 0x107 Int BE Pri
!#0 N957 P597 CASX 4 -1 N955 0x108 Int BE Pri
!#A N956 N957
!#0 N958 P598 PREFETCH 7 Int BE Pri
!#0 N959 P599 DWLD 9 -1 Int BE Pri
!#0 N960 P599 DWLD 10 -1 Int BE Pri
!#A N959 N960
!#0 N961 P600 DWLD 18 -1 Int BE Pri
!#0 N962 P600 DWLD 19 -1 Int BE Pri
!#A N961 N962
!#0 N963 P600 CASX 18 -1 N961 0x109 Int BE Pri
!#0 N964 P600 CASX 19 -1 N962 0x10a Int BE Pri
!#A N963 N964
!#0 N965 P601 SWAP 12 0xffffffff 0x10b Int BE Pri
!#0 N966 P602 DWLD 8 -1 Int BE Pri
!#0 N967 P603 MEMBAR
!#0 N968 P604 BLD 0 -1 FP BE Pri
!#0 N969 P604 BLD 1 -1 FP BE Pri
!#A N968 N969
!#0 N970 P604 BLD 2 -1 FP BE Pri
!#0 N971 P605 MEMBAR
!#0 N972 P606 SWAP 7 0xffffffff 0x10c Int BE Pri
!#0 N973 P607 ST_BINIT 18 0x10d Int BE Pri
!#0 N974 P608 MEMBAR
!#0 N975 P609 ST 15 0x10e Int BE Pri
!#0 N976 P610 PREFETCH 18 Int BE Pri
!#0 N977 P611 PREFETCH 10 Int BE Pri
!#0 N978 P612 ST_BINIT 23 0x10f Int BE Pri
!#0 N979 P613 MEMBAR
!#0 N980 P614 BLD 6 -1 FP BE Pri
!#0 N981 P614 BLD 7 -1 FP BE Pri
!#A N980 N981
!#0 N982 P614 BLD 8 -1 FP BE Pri
!#0 N983 P615 MEMBAR
!#0 N984 P616 DWLD 9 -1 Int BE Pri
!#0 N985 P616 DWLD 10 -1 Int BE Pri
!#A N984 N985
!#0 N986 P617 DWLD 5 -1,0x0 Int BE Pri
!#0 N987 P617 CASX 5 -1,0x0 N986 0x110 Int BE Pri
!#0 N988 P618 MEMBAR
!#0 N989 P619 BSTC 21 0x3f8000b3 FP BE Pri
!#0 N990 P619 BSTC 22 0x3f8000b4 FP BE Pri
!#A N989 N990
!#0 N991 P619 BSTC 23 0x3f8000b5 FP BE Pri
!#0 N992 P620 MEMBAR
!#0 N993 P621 ST 20 0x111 Int BE Pri
!#0 N994 P622 ST_BINIT 15 0x112 Int BE Pri
!#0 N995 P623 MEMBAR
!#0 N996 P624 BSTC 21 0x3f8000b6 FP BE Pri
!#0 N997 P624 BSTC 22 0x3f8000b7 FP BE Pri
!#A N996 N997
!#0 N998 P624 BSTC 23 0x3f8000b8 FP BE Pri
!#0 N999 P625 MEMBAR
!#0 N1000 P626 DWST_BINIT 0 0x113 Int LE Pri
!#0 N1001 P626 DWST_BINIT 1 0x114 Int LE Pri
!#A N1000 N1001
!#0 N1002 P627 MEMBAR
!#0 N1003 P628 DWST_BINIT 11 0x115 Int LE Pri
!#0 N1004 P629 MEMBAR
!#0 N1005 P630 BST 15 0x3f8000b9 FP BE Pri
!#0 N1006 P630 BST 16 0x3f8000ba FP BE Pri
!#A N1005 N1006
!#0 N1007 P630 BST 17 0x3f8000bb FP BE Pri
!#0 N1008 P631 MEMBAR
!#0 N1009 P632 DWLD 5 -1,0x0 Int BE Pri
!#0 N1010 P632 CASX 5 -1,0x0 N1009 0x116 Int BE Pri
!#0 N1011 P633 ST 15 0x117 Int BE Pri
!#0 N1012 P634 SWAP 3 0xffffffff 0x118 Int BE Pri
!#0 N1013 P635 MEMBAR
!#0 N1014 P636 BST 21 0x3f8000bc FP BE Pri
!#0 N1015 P636 BST 22 0x3f8000bd FP BE Pri
!#A N1014 N1015
!#0 N1016 P636 BST 23 0x3f8000be FP BE Pri
!#0 N1017 P637 MEMBAR
!#0 N1018 P638 BST 21 0x3f8000bf FP BE Pri
!#0 N1019 P638 BST 22 0x3f8000c0 FP BE Pri
!#A N1018 N1019
!#0 N1020 P638 BST 23 0x3f8000c1 FP BE Pri
!#0 N1021 P639 MEMBAR
!#0 N1022 P640 ST 16 0x119 Int BE Pri
!#0 N1023 P641 DWLD 3 -1 Int BE Pri
!#0 N1024 P641 DWLD 4 -1 Int BE Pri
!#A N1023 N1024
!#0 N1025 P641 CASX 3 -1 N1023 0x11a Int BE Pri
!#0 N1026 P641 CASX 4 -1 N1024 0x11b Int BE Pri
!#A N1025 N1026
!#0 N1027 P642 DWST_BINIT 15 0x11c Int BE Pri
!#0 N1028 P642 DWST_BINIT 16 0x11d Int BE Pri
!#A N1027 N1028
!#0 N1029 P643 MEMBAR
!#0 N1030 P644 DWLD 0 -1 Int BE Pri
!#0 N1031 P644 DWLD 1 -1 Int BE Pri
!#A N1030 N1031
!#0 N1032 P644 CASX 0 -1 N1030 0x11e Int BE Pri
!#0 N1033 P644 CASX 1 -1 N1031 0x11f Int BE Pri
!#A N1032 N1033
!#0 N1034 P645 LDD 3 -1 Int BE Pri
!#0 N1035 P645 LDD 4 -1 Int BE Pri
!#A N1034 N1035
!#0 N1036 P646 PREFETCH 4 Int BE Pri
!#0 N1037 P647 DWLD 23 -1,0x0 Int BE Pri
!#0 N1038 P647 CASX 23 -1,0x0 N1037 0x120 Int BE Pri
!#0 N1039 P648 MEMBAR
!#0 N1040 P649 BSTC 3 0x3f8000c2 FP BE Pri
!#0 N1041 P649 BSTC 4 0x3f8000c3 FP BE Pri
!#A N1040 N1041
!#0 N1042 P649 BSTC 5 0x3f8000c4 FP BE Pri
!#0 N1043 P650 MEMBAR
!#0 N1044 P651 LDD 8 -1 Int BE Pri
!#0 N1045 P652 MEMBAR
!#0 N1046 P653 BSTC 3 0x3f8000c5 FP BE Pri
!#0 N1047 P653 BSTC 4 0x3f8000c6 FP BE Pri
!#A N1046 N1047
!#0 N1048 P653 BSTC 5 0x3f8000c7 FP BE Pri
!#0 N1049 P654 MEMBAR
!#0 N1050 P655 BST 9 0x3f8000c8 FP BE Pri
!#0 N1051 P655 BST 10 0x3f8000c9 FP BE Pri
!#A N1050 N1051
!#0 N1052 P655 BST 11 0x3f8000ca FP BE Pri
!#0 N1053 P656 MEMBAR
!#0 N1054 P657 DWLD 18 -1 Int BE Pri
!#0 N1055 P657 DWLD 19 -1 Int BE Pri
!#A N1054 N1055
!#0 N1056 P657 CASX 18 -1 N1054 0x121 Int BE Pri
!#0 N1057 P657 CASX 19 -1 N1055 0x122 Int BE Pri
!#A N1056 N1057
!#0 N1058 P658 LD 10 -1 Int BE Pri
!#0 N1059 P658 CAS 10 -1 N1058 0x123 Int BE Pri
!#0 N1060 P659 MEMBAR
!#0 N1061 P660 BSTC 9 0x3f8000cb FP BE Pri
!#0 N1062 P660 BSTC 10 0x3f8000cc FP BE Pri
!#A N1061 N1062
!#0 N1063 P660 BSTC 11 0x3f8000cd FP BE Pri
!#0 N1064 P661 MEMBAR
!#0 N1065 P662 BLD 6 -1 FP BE Pri
!#0 N1066 P662 BLD 7 -1 FP BE Pri
!#A N1065 N1066
!#0 N1067 P662 BLD 8 -1 FP BE Pri
!#0 N1068 P663 MEMBAR
!#0 N1069 P664 ST_BINIT 8 0x124 Int LE Pri
!#0 N1070 P665 MEMBAR
!#0 N1071 P666 LDD 21 -1 Int BE Pri
!#0 N1072 P666 LDD 22 -1 Int BE Pri
!#A N1071 N1072
!#0 N1073 P667 SWAP 2 0xffffffff 0x125 Int BE Pri
!#0 N1074 P668 MEMBAR
!#0 N1075 P669 BST 15 0x3f8000ce FP BE Pri
!#0 N1076 P669 BST 16 0x3f8000cf FP BE Pri
!#A N1075 N1076
!#0 N1077 P669 BST 17 0x3f8000d0 FP BE Pri
!#0 N1078 P670 MEMBAR
!#0 N1079 P671 PREFETCH 0 Int BE Pri
!#0 N1080 P672 SWAP 22 0xffffffff 0x126 Int BE Pri
!#0 N1081 P673 DWST 15 0x127 Int BE Pri
!#0 N1082 P673 DWST 16 0x128 Int BE Pri
!#A N1081 N1082
!#0 N1083 P674 LD 11 -1 Int BE Pri
!#0 N1084 P675 REPLACEMENT 13 Int BE Pri
!#0 N1085 P676 LDD 3 -1 Int BE Pri
!#0 N1086 P676 LDD 4 -1 Int BE Pri
!#A N1085 N1086
!#0 N1087 P677 DWST_BINIT 18 0x129 Int BE Pri
!#0 N1088 P677 DWST_BINIT 19 0x12a Int BE Pri
!#A N1087 N1088
!#0 N1089 P678 MEMBAR
!#0 N1090 P679 BST 9 0x3f8000d1 FP BE Pri
!#0 N1091 P679 BST 10 0x3f8000d2 FP BE Pri
!#A N1090 N1091
!#0 N1092 P679 BST 11 0x3f8000d3 FP BE Pri
!#0 N1093 P680 MEMBAR
!#0 N1094 P681 BLD 6 -1 FP BE Pri
!#0 N1095 P681 BLD 7 -1 FP BE Pri
!#A N1094 N1095
!#0 N1096 P681 BLD 8 -1 FP BE Pri
!#0 N1097 P682 MEMBAR
!#0 N1098 P683 BLD 9 -1 FP BE Pri
!#0 N1099 P683 BLD 10 -1 FP BE Pri
!#A N1098 N1099
!#0 N1100 P683 BLD 11 -1 FP BE Pri
!#0 N1101 P684 MEMBAR
!#0 N1102 P685 PREFETCH 17 Int BE Pri
!#0 N1103 P686 MEMBAR
!#0 N1104 P687 BST 0 0x3f8000d4 FP BE Pri
!#0 N1105 P687 BST 1 0x3f8000d5 FP BE Pri
!#A N1104 N1105
!#0 N1106 P687 BST 2 0x3f8000d6 FP BE Pri
!#0 N1107 P688 MEMBAR
!#0 N1108 P689 BST 3 0x3f8000d7 FP BE Pri
!#0 N1109 P689 BST 4 0x3f8000d8 FP BE Pri
!#A N1108 N1109
!#0 N1110 P689 BST 5 0x3f8000d9 FP BE Pri
!#0 N1111 P690 MEMBAR
!#0 N1112 P691 DWLD 11 -1 Int BE Pri
!#0 N1113 P692 MEMBAR
!#0 N1114 P693 BLD 3 -1 FP BE Pri
!#0 N1115 P693 BLD 4 -1 FP BE Pri
!#A N1114 N1115
!#0 N1116 P693 BLD 5 -1 FP BE Pri
!#0 N1117 P694 MEMBAR
!#0 N1118 P695 DWST_BINIT 21 0x12b Int BE Pri
!#0 N1119 P695 DWST_BINIT 22 0x12c Int BE Pri
!#A N1118 N1119
!#0 N1120 P696 MEMBAR
!#0 N1121 P697 LD 14 -1 Int BE Pri
!#0 N1122 P697 CAS 14 -1 N1121 0x12d Int BE Pri
!#0 N1123 P698 MEMBAR
!#0 N1124 P699 BSTC 15 0x3f8000da FP BE Pri
!#0 N1125 P699 BSTC 16 0x3f8000db FP BE Pri
!#A N1124 N1125
!#0 N1126 P699 BSTC 17 0x3f8000dc FP BE Pri
!#0 N1127 P700 MEMBAR
!#0 N1128 P701 DWST 20 0x12e Int BE Pri
!#0 N1129 P702 DWST 14 0x12f Int BE Pri
!#0 N1130 P703 MEMBAR
!#0 N1131 P704 BLD 21 -1 FP BE Pri
!#0 N1132 P704 BLD 22 -1 FP BE Pri
!#A N1131 N1132
!#0 N1133 P704 BLD 23 -1 FP BE Pri
!#0 N1134 P705 MEMBAR
!#0 N1135 P706 PREFETCH 2 Int BE Pri
!#0 N1136 P707 LD 3 -1 Int BE Pri
!#0 N1137 P708 DWST 12 0x130 Int BE Pri
!#0 N1138 P708 DWST 13 0x131 Int BE Pri
!#A N1137 N1138
!#0 N1139 P709 SWAP 5 0xffffffff 0x132 Int BE Pri
!#0 N1140 P710 MEMBAR
!#0 N1141 P711 BST 3 0x3f8000dd FP BE Pri
!#0 N1142 P711 BST 4 0x3f8000de FP BE Pri
!#A N1141 N1142
!#0 N1143 P711 BST 5 0x3f8000df FP BE Pri
!#0 N1144 P712 MEMBAR
!#0 N1145 P713 REPLACEMENT 19 Int BE Pri
!#0 N1146 P714 MEMBAR
!#0 N1147 P715 BST 21 0x3f8000e0 FP BE Pri
!#0 N1148 P715 BST 22 0x3f8000e1 FP BE Pri
!#A N1147 N1148
!#0 N1149 P715 BST 23 0x3f8000e2 FP BE Pri
!#0 N1150 P716 MEMBAR
!#0 N1151 P717 LD 18 -1 Int BE Pri
!#0 N1152 P718 LDD 12 -1 Int BE Pri
!#0 N1153 P718 LDD 13 -1 Int BE Pri
!#A N1152 N1153
!#0 N1154 P719 ST_BINIT 22 0x133 Int LE Pri
!#0 N1155 P720 MEMBAR
!#0 N1156 P721 SWAP 13 0xffffffff 0x134 Int BE Pri
!#0 N1157 P722 LD 11 -1 Int BE Pri
!#0 N1158 P723 DWLD 23 -1 FP BE Pri
!#0 N1159 P724 MEMBAR
!#0 N1160 P725 BSTC 3 0x3f8000e3 FP BE Pri
!#0 N1161 P725 BSTC 4 0x3f8000e4 FP BE Pri
!#A N1160 N1161
!#0 N1162 P725 BSTC 5 0x3f8000e5 FP BE Pri
!#0 N1163 P726 MEMBAR
!#0 N1164 P727 SWAP 5 0xffffffff 0x135 Int BE Pri
!#0 N1165 P728 LDD 6 -1 Int BE Pri
!#0 N1166 P728 LDD 7 -1 Int BE Pri
!#A N1165 N1166
!#0 N1167 P729 LDD 2 -1 Int BE Pri
!#0 N1168 P730 ST_BINIT 22 0x136 Int BE Pri
!#0 N1169 P731 MEMBAR
!#0 N1170 P732 BST 3 0x3f8000e6 FP BE Pri
!#0 N1171 P732 BST 4 0x3f8000e7 FP BE Pri
!#A N1170 N1171
!#0 N1172 P732 BST 5 0x3f8000e8 FP BE Pri
!#0 N1173 P733 MEMBAR
!#0 N1174 P734 ST_BINIT 4 0x137 Int BE Pri
!#0 N1175 P735 MEMBAR
!#0 N1176 P736 LDD 20 -1 Int BE Pri
!#0 N1177 P737 MEMBAR
!#0 N1178 P738 BSTC 0 0x3f8000e9 FP BE Pri
!#0 N1179 P738 BSTC 1 0x3f8000ea FP BE Pri
!#A N1178 N1179
!#0 N1180 P738 BSTC 2 0x3f8000eb FP BE Pri
!#0 N1181 P739 MEMBAR
!#0 N1182 P740 DWST 6 0x138 Int BE Pri
!#0 N1183 P740 DWST 7 0x139 Int BE Pri
!#A N1182 N1183
!#0 N1184 P741 LD 20 -1 Int BE Pri
!#0 N1185 P741 CAS 20 -1 N1184 0x13a Int BE Pri
!#0 N1186 P742 DWST 8 0x13b Int BE Pri
!#0 N1187 P743 LDD 12 -1 Int BE Pri
!#0 N1188 P743 LDD 13 -1 Int BE Pri
!#A N1187 N1188
!#0 N1189 P744 LDD 0 -1 Int BE Pri
!#0 N1190 P744 LDD 1 -1 Int BE Pri
!#A N1189 N1190
!#0 N1191 P745 DWST 12 0x13c Int BE Pri
!#0 N1192 P745 DWST 13 0x13d Int BE Pri
!#A N1191 N1192
!#0 N1193 P746 DWST 17 0x13e Int BE Pri
!#0 N1194 P747 DWLD 11 -1 Int BE Pri
!#0 N1195 P748 SWAP 23 0xffffffff 0x13f Int BE Pri
!#0 N1196 P749 LDD 18 -1 Int BE Pri
!#0 N1197 P749 LDD 19 -1 Int BE Pri
!#A N1196 N1197
!#0 N1198 P750 DWST_BINIT 15 0x140 Int BE Pri
!#0 N1199 P750 DWST_BINIT 16 0x141 Int BE Pri
!#A N1198 N1199
!#0 N1200 P751 MEMBAR
!#0 N1201 P752 LD 0 -1 Int LE Pri
!#0 N1202 P752 CAS 0 -1 N1201 0x142 Int LE Pri
!#0 N1203 P753 DWLD 12 -1 Int BE Pri
!#0 N1204 P753 DWLD 13 -1 Int BE Pri
!#A N1203 N1204
!#0 N1205 P753 CASX 12 -1 N1203 0x143 Int BE Pri
!#0 N1206 P753 CASX 13 -1 N1204 0x144 Int BE Pri
!#A N1205 N1206
!#0 N1207 P754 ST_BINIT 7 0x145 Int BE Pri
!#0 N1208 P755 MEMBAR
!#0 N1209 P756 LD 21 -1 Int BE Pri
!#0 N1210 P756 CAS 21 -1 N1209 0x146 Int BE Pri
!#0 N1211 P757 LD 13 -1 Int BE Pri
!#0 N1212 P758 DWST 15 0x147 Int BE Pri
!#0 N1213 P758 DWST 16 0x148 Int BE Pri
!#A N1212 N1213
!#0 N1214 P759 DWLD 0 -1 Int BE Pri
!#0 N1215 P759 DWLD 1 -1 Int BE Pri
!#A N1214 N1215
!#0 N1216 P760 PREFETCH 13 Int BE Pri
!#0 N1217 P761 PREFETCH 16 Int BE Pri
!#0 N1218 P762 DWLD 12 -1 Int BE Pri
!#0 N1219 P762 DWLD 13 -1 Int BE Pri
!#A N1218 N1219
!#0 N1220 P762 CASX 12 -1 N1218 0x149 Int BE Pri
!#0 N1221 P762 CASX 13 -1 N1219 0x14a Int BE Pri
!#A N1220 N1221
!#0 N1222 P763 SWAP 15 0xffffffff 0x14b Int BE Pri
!#0 N1223 P764 MEMBAR
!#0 N1224 P765 BLD 15 -1 FP BE Pri
!#0 N1225 P765 BLD 16 -1 FP BE Pri
!#A N1224 N1225
!#0 N1226 P765 BLD 17 -1 FP BE Pri
!#0 N1227 P766 MEMBAR
!#0 N1228 P767 BLD 0 -1 FP BE Pri
!#0 N1229 P767 BLD 1 -1 FP BE Pri
!#A N1228 N1229
!#0 N1230 P767 BLD 2 -1 FP BE Pri
!#0 N1231 P768 MEMBAR
!#0 N1232 P769 ST 6 0x14c Int BE Pri
!#0 N1233 P770 LD 0 -1 Int BE Pri
!#0 N1234 P771 MEMBAR
!#0 N1235 P772 BST 9 0x3f8000ec FP BE Pri
!#0 N1236 P772 BST 10 0x3f8000ed FP BE Pri
!#A N1235 N1236
!#0 N1237 P772 BST 11 0x3f8000ee FP BE Pri
!#0 N1238 P773 MEMBAR
!#0 N1239 P774 ST 5 0x14d Int BE Pri
!#0 N1240 P775 ST_BINIT 0 0x14e Int BE Pri
!#0 N1241 P776 MEMBAR
!#0 N1242 P777 DWLD 15 -1 Int BE Pri
!#0 N1243 P777 DWLD 16 -1 Int BE Pri
!#A N1242 N1243
!#0 N1244 P777 CASX 15 -1 N1242 0x14f Int BE Pri
!#0 N1245 P777 CASX 16 -1 N1243 0x150 Int BE Pri
!#A N1244 N1245
!#0 N1246 P778 LD 7 -1 Int BE Pri
!#0 N1247 P779 SWAP 12 0xffffffff 0x151 Int BE Pri
!#0 N1248 P780 SWAP 10 0xffffffff 0x152 Int BE Pri
!#0 N1249 P781 ST_BINIT 17 0x153 Int BE Pri
!#0 N1250 P782 MEMBAR
!#0 N1251 P783 LDD 9 -1 Int BE Pri
!#0 N1252 P783 LDD 10 -1 Int BE Pri
!#A N1251 N1252
!#0 N1253 P784 LD 0 -1 Int BE Pri
!#0 N1254 P784 CAS 0 -1 N1253 0x154 Int BE Pri
!#0 N1255 P785 DWLD 0 -1 Int BE Pri
!#0 N1256 P785 DWLD 1 -1 Int BE Pri
!#A N1255 N1256
!#0 N1257 P786 MEMBAR
!#0 N1258 P787 BSTC 18 0x3f8000ef FP BE Pri
!#0 N1259 P787 BSTC 19 0x3f8000f0 FP BE Pri
!#A N1258 N1259
!#0 N1260 P787 BSTC 20 0x3f8000f1 FP BE Pri
!#0 N1261 P788 MEMBAR
!#0 N1262 P789 LD 8 -1 Int LE Pri
!#0 N1263 P790 SWAP 4 0xffffffff 0x155 Int LE Pri
!#0 N1264 P791 SWAP 12 0xffffffff 0x156 Int BE Pri
!#0 N1265 P792 LD 7 -1 Int LE Pri
!#0 N1266 P793 ST_BINIT 18 0x157 Int BE Pri
!#0 N1267 P794 MEMBAR
!#0 N1268 P795 LD 13 -1 Int BE Pri
!#0 N1269 P796 PREFETCH 11 Int BE Pri
!#0 N1270 P797 ST_BINIT 19 0x158 Int BE Pri
!#0 N1271 P798 MEMBAR
!#0 N1272 P799 DWLD 18 -1 Int BE Pri
!#0 N1273 P799 DWLD 19 -1 Int BE Pri
!#A N1272 N1273
!#0 N1274 P799 CASX 18 -1 N1272 0x159 Int BE Pri
!#0 N1275 P799 CASX 19 -1 N1273 0x15a Int BE Pri
!#A N1274 N1275
!#0 N1276 P800 LDD 21 -1 Int BE Pri
!#0 N1277 P800 LDD 22 -1 Int BE Pri
!#A N1276 N1277
!#0 N1278 P801 LDD 18 -1 Int BE Pri
!#0 N1279 P801 LDD 19 -1 Int BE Pri
!#A N1278 N1279
!#0 N1280 P802 SWAP 1 0xffffffff 0x15b Int BE Pri
!#0 N1281 P803 MEMBAR
!#0 N1282 P804 BST 6 0x3f8000f2 FP BE Pri
!#0 N1283 P804 BST 7 0x3f8000f3 FP BE Pri
!#A N1282 N1283
!#0 N1284 P804 BST 8 0x3f8000f4 FP BE Pri
!#0 N1285 P805 MEMBAR
!#0 N1286 P806 ST_BINIT 7 0x15c Int BE Pri
!#0 N1287 P807 MEMBAR
!#0 N1288 P808 REPLACEMENT 8 Int BE Pri
!#0 N1289 P809 LD 16 -1 FP BE Pri
!#0 N1290 P810 MEMBAR
!#0 N1291 P811 BSTC 12 0x3f8000f5 FP BE Pri
!#0 N1292 P811 BSTC 13 0x3f8000f6 FP BE Pri
!#A N1291 N1292
!#0 N1293 P811 BSTC 14 0x3f8000f7 FP BE Pri
!#0 N1294 P812 MEMBAR
!#0 N1295 P813 BST 9 0x3f8000f8 FP BE Pri
!#0 N1296 P813 BST 10 0x3f8000f9 FP BE Pri
!#A N1295 N1296
!#0 N1297 P813 BST 11 0x3f8000fa FP BE Pri
!#0 N1298 P814 MEMBAR
!#0 N1299 P815 DWST_BINIT 12 0x15d Int BE Pri
!#0 N1300 P815 DWST_BINIT 13 0x15e Int BE Pri
!#A N1299 N1300
!#0 N1301 P816 MEMBAR
!#0 N1302 P817 DWLD 12 -1 Int BE Pri
!#0 N1303 P817 DWLD 13 -1 Int BE Pri
!#A N1302 N1303
!#0 N1304 P818 DWLD 8 -1,0x0 Int BE Pri
!#0 N1305 P818 CASX 8 -1,0x0 N1304 0x15f Int BE Pri
!#0 N1306 P819 MEMBAR
!#0 N1307 P820 BLD 12 -1 FP BE Pri
!#0 N1308 P820 BLD 13 -1 FP BE Pri
!#A N1307 N1308
!#0 N1309 P820 BLD 14 -1 FP BE Pri
!#0 N1310 P821 MEMBAR
!#0 N1311 P822 BST 6 0x3f8000fb FP BE Pri
!#0 N1312 P822 BST 7 0x3f8000fc FP BE Pri
!#A N1311 N1312
!#0 N1313 P822 BST 8 0x3f8000fd FP BE Pri
!#0 N1314 P823 MEMBAR
!#0 N1315 P824 BLD 18 -1 FP BE Pri
!#0 N1316 P824 BLD 19 -1 FP BE Pri
!#A N1315 N1316
!#0 N1317 P824 BLD 20 -1 FP BE Pri
!#0 N1318 P825 MEMBAR
!#0 N1319 P826 LD 17 -1 Int BE Pri
!#0 N1320 P826 CAS 17 -1 N1319 0x160 Int BE Pri
!#0 N1321 P827 MEMBAR
!#0 N1322 P828 BSTC 21 0x3f8000fe FP BE Pri
!#0 N1323 P828 BSTC 22 0x3f8000ff FP BE Pri
!#A N1322 N1323
!#0 N1324 P828 BSTC 23 0x3f800100 FP BE Pri
!#0 N1325 P829 MEMBAR
!#0 N1326 P830 BSTC 12 0x3f800101 FP BE Pri
!#0 N1327 P830 BSTC 13 0x3f800102 FP BE Pri
!#A N1326 N1327
!#0 N1328 P830 BSTC 14 0x3f800103 FP BE Pri
!#0 N1329 P831 MEMBAR
!#0 N1330 P832 DWLD 5 -1 FP BE Pri
!#0 N1331 P833 DWST 6 0x161 Int BE Pri
!#0 N1332 P833 DWST 7 0x162 Int BE Pri
!#A N1331 N1332
!#0 N1333 P834 LD 0 -1 Int BE Pri
!#0 N1334 P835 DWST 15 0x163 Int BE Pri
!#0 N1335 P835 DWST 16 0x164 Int BE Pri
!#A N1334 N1335
!#0 N1336 P836 MEMBAR
!#0 N1337 P837 BSTC 12 0x3f800104 FP BE Pri
!#0 N1338 P837 BSTC 13 0x3f800105 FP BE Pri
!#A N1337 N1338
!#0 N1339 P837 BSTC 14 0x3f800106 FP BE Pri
!#0 N1340 P838 MEMBAR
!#0 N1341 P839 LD 0 -1 Int BE Pri
!#0 N1342 P840 DWST_BINIT 14 0x165 Int BE Pri
!#0 N1343 P841 MEMBAR
!#0 N1344 P842 DWLD 21 -1 Int BE Pri
!#0 N1345 P842 DWLD 22 -1 Int BE Pri
!#A N1344 N1345
!#0 N1346 P842 CASX 21 -1 N1344 0x166 Int BE Pri
!#0 N1347 P842 CASX 22 -1 N1345 0x167 Int BE Pri
!#A N1346 N1347
!#0 N1348 P843 PREFETCH 6 Int BE Pri
!#0 N1349 P844 DWLD 14 -1,0x0 Int BE Pri
!#0 N1350 P844 CASX 14 -1,0x0 N1349 0x168 Int BE Pri
!#0 N1351 P845 MEMBAR
!#0 N1352 P846 BST 6 0x3f800107 FP BE Pri
!#0 N1353 P846 BST 7 0x3f800108 FP BE Pri
!#A N1352 N1353
!#0 N1354 P846 BST 8 0x3f800109 FP BE Pri
!#0 N1355 P847 MEMBAR
!#0 N1356 P848 BSTC 0 0x3f80010a FP BE Pri
!#0 N1357 P848 BSTC 1 0x3f80010b FP BE Pri
!#A N1356 N1357
!#0 N1358 P848 BSTC 2 0x3f80010c FP BE Pri
!#0 N1359 P849 MEMBAR
!#0 N1360 P850 SWAP 9 0xffffffff 0x169 Int BE Pri
!#0 N1361 P851 MEMBAR
!#0 N1362 P852 BST 6 0x3f80010d FP BE Pri
!#0 N1363 P852 BST 7 0x3f80010e FP BE Pri
!#A N1362 N1363
!#0 N1364 P852 BST 8 0x3f80010f FP BE Pri
!#0 N1365 P853 MEMBAR
!#0 N1366 P854 DWST 6 0x16a Int BE Pri
!#0 N1367 P854 DWST 7 0x16b Int BE Pri
!#A N1366 N1367
!#0 N1368 P855 SWAP 9 0xffffffff 0x16c Int BE Pri
!#0 N1369 P856 ST 21 0x16d Int BE Pri
!#0 N1370 P857 DWST_BINIT 0 0x16e Int BE Pri
!#0 N1371 P857 DWST_BINIT 1 0x16f Int BE Pri
!#A N1370 N1371
!#0 N1372 P858 MEMBAR
!#0 N1373 P859 DWLD 15 -1 Int BE Pri
!#0 N1374 P859 DWLD 16 -1 Int BE Pri
!#A N1373 N1374
!#0 N1375 P860 DWST 9 0x170 Int BE Pri
!#0 N1376 P860 DWST 10 0x171 Int BE Pri
!#A N1375 N1376
!#0 N1377 P861 DWST_BINIT 21 0x172 Int BE Pri
!#0 N1378 P861 DWST_BINIT 22 0x173 Int BE Pri
!#A N1377 N1378
!#0 N1379 P862 MEMBAR
!#0 N1380 P863 BLD 9 -1 FP BE Pri
!#0 N1381 P863 BLD 10 -1 FP BE Pri
!#A N1380 N1381
!#0 N1382 P863 BLD 11 -1 FP BE Pri
!#0 N1383 P864 MEMBAR
!#0 N1384 P865 BST 18 0x3f800110 FP BE Pri
!#0 N1385 P865 BST 19 0x3f800111 FP BE Pri
!#A N1384 N1385
!#0 N1386 P865 BST 20 0x3f800112 FP BE Pri
!#0 N1387 P866 MEMBAR
!#0 N1388 P867 DWLD 18 -1 FP BE Pri
!#0 N1389 P867 DWLD 19 -1 FP BE Pri
!#A N1388 N1389
!#0 N1390 P868 DWLD 18 -1 Int BE Pri
!#0 N1391 P868 DWLD 19 -1 Int BE Pri
!#A N1390 N1391
!#0 N1392 P868 CASX 18 -1 N1390 0x174 Int BE Pri
!#0 N1393 P868 CASX 19 -1 N1391 0x175 Int BE Pri
!#A N1392 N1393
!#0 N1394 P869 DWLD 3 -1 Int BE Pri
!#0 N1395 P869 DWLD 4 -1 Int BE Pri
!#A N1394 N1395
!#0 N1396 P869 CASX 3 -1 N1394 0x176 Int BE Pri
!#0 N1397 P869 CASX 4 -1 N1395 0x177 Int BE Pri
!#A N1396 N1397
!#0 N1398 P870 LDD 3 -1 Int BE Pri
!#0 N1399 P870 LDD 4 -1 Int BE Pri
!#A N1398 N1399
!#0 N1400 P871 LDD 12 -1 Int BE Pri
!#0 N1401 P871 LDD 13 -1 Int BE Pri
!#A N1400 N1401
!#0 N1402 P872 PREFETCH 8 Int BE Pri
!#0 N1403 P873 MEMBAR
!#0 N1404 P874 BST 3 0x3f800113 FP BE Pri
!#0 N1405 P874 BST 4 0x3f800114 FP BE Pri
!#A N1404 N1405
!#0 N1406 P874 BST 5 0x3f800115 FP BE Pri
!#0 N1407 P875 MEMBAR
!#0 N1408 P876 LD 4 -1 Int BE Pri
!#0 N1409 P876 CAS 4 -1 N1408 0x178 Int BE Pri
!#0 N1410 P877 MEMBAR
!#0 N1411 P878 BST 0 0x3f800116 FP BE Pri
!#0 N1412 P878 BST 1 0x3f800117 FP BE Pri
!#A N1411 N1412
!#0 N1413 P878 BST 2 0x3f800118 FP BE Pri
!#0 N1414 P879 MEMBAR
!#0 N1415 P880 DWST 18 0x179 Int BE Pri
!#0 N1416 P880 DWST 19 0x17a Int BE Pri
!#A N1415 N1416
!#0 N1417 P881 DWST_BINIT 8 0x17b Int BE Pri
!#0 N1418 P882 MEMBAR
!#0 N1419 P883 DWST_BINIT 18 0x17c Int BE Pri
!#0 N1420 P883 DWST_BINIT 19 0x17d Int BE Pri
!#A N1419 N1420
!#0 N1421 P884 MEMBAR
!#0 N1422 P885 ST_BINIT 6 0x17e Int BE Pri
!#0 N1423 P886 MEMBAR
!#0 N1424 P887 BSTC 12 0x3f800119 FP BE Pri
!#0 N1425 P887 BSTC 13 0x3f80011a FP BE Pri
!#A N1424 N1425
!#0 N1426 P887 BSTC 14 0x3f80011b FP BE Pri
!#0 N1427 P888 MEMBAR
!#0 N1428 P889 ST 14 0x17f Int BE Pri
!#0 N1429 P890 LD 23 -1 Int BE Pri
!#0 N1430 P890 CAS 23 -1 N1429 0x180 Int BE Pri
!#0 N1431 P891 DWST 21 0x181 Int BE Pri
!#0 N1432 P891 DWST 22 0x182 Int BE Pri
!#A N1431 N1432
!#0 N1433 P892 ST_BINIT 18 0x183 Int BE Pri
!#0 N1434 P893 MEMBAR
!#0 N1435 P894 DWST 0 0x184 Int BE Pri
!#0 N1436 P894 DWST 1 0x185 Int BE Pri
!#A N1435 N1436
!#0 N1437 P895 MEMBAR
!#0 N1438 P896 BLD 3 -1 FP BE Pri
!#0 N1439 P896 BLD 4 -1 FP BE Pri
!#A N1438 N1439
!#0 N1440 P896 BLD 5 -1 FP BE Pri
!#0 N1441 P897 MEMBAR
!#0 N1442 P898 PREFETCH 0 Int BE Pri
!#0 N1443 P899 DWLD 18 -1 FP BE Pri
!#0 N1444 P899 DWLD 19 -1 FP BE Pri
!#A N1443 N1444
!#0 N1445 P900 MEMBAR
!#0 N1446 P901 BSTC 0 0x3f80011c FP BE Pri
!#0 N1447 P901 BSTC 1 0x3f80011d FP BE Pri
!#A N1446 N1447
!#0 N1448 P901 BSTC 2 0x3f80011e FP BE Pri
!#0 N1449 P902 MEMBAR
!#0 N1450 P903 LD 1 -1 Int BE Pri
!#0 N1451 P903 CAS 1 -1 N1450 0x186 Int BE Pri
!#0 N1452 P904 MEMBAR
!#0 N1453 P905 BST 0 0x3f80011f FP BE Pri
!#0 N1454 P905 BST 1 0x3f800120 FP BE Pri
!#A N1453 N1454
!#0 N1455 P905 BST 2 0x3f800121 FP BE Pri
!#0 N1456 P906 MEMBAR
!#0 N1457 P907 BLD 9 -1 FP BE Pri
!#0 N1458 P907 BLD 10 -1 FP BE Pri
!#A N1457 N1458
!#0 N1459 P907 BLD 11 -1 FP BE Pri
!#0 N1460 P908 MEMBAR
!#0 N1461 P909 SWAP 16 0xffffffff 0x187 Int BE Pri
!#0 N1462 P910 LDD 0 -1 Int BE Pri
!#0 N1463 P910 LDD 1 -1 Int BE Pri
!#A N1462 N1463
!#0 N1464 P911 LD 10 -1 Int BE Pri
!#0 N1465 P912 SWAP 9 0xffffffff 0x188 Int BE Pri
!#0 N1466 P913 DWLD 0 -1 Int BE Pri
!#0 N1467 P913 DWLD 1 -1 Int BE Pri
!#A N1466 N1467
!#0 N1468 P913 CASX 0 -1 N1466 0x189 Int BE Pri
!#0 N1469 P913 CASX 1 -1 N1467 0x18a Int BE Pri
!#A N1468 N1469
!#0 N1470 P914 ST 23 0x18b Int BE Pri
!#0 N1471 P915 DWST 11 0x18c Int BE Pri
!#0 N1472 P916 ST 17 0x18d Int BE Pri
!#0 N1473 P917 DWLD 18 -1 Int BE Pri
!#0 N1474 P917 DWLD 19 -1 Int BE Pri
!#A N1473 N1474
!#0 N1475 P917 CASX 18 -1 N1473 0x18e Int BE Pri
!#0 N1476 P917 CASX 19 -1 N1474 0x18f Int BE Pri
!#A N1475 N1476
!#0 N1477 P918 ST_BINIT 11 0x190 Int LE Pri
!#0 N1478 P919 MEMBAR
!#0 N1479 P920 DWLD 20 -1,0x0 Int BE Pri
!#0 N1480 P920 CASX 20 -1,0x0 N1479 0x191 Int BE Pri
!#0 N1481 P921 DWLD 17 -1 Int BE Pri
!#0 N1482 P922 LD 16 -1 Int BE Pri
!#0 N1483 P922 CAS 16 -1 N1482 0x192 Int BE Pri
!#0 N1484 P923 LD 6 -1 Int BE Pri
!#0 N1485 P924 LD 7 -1 Int BE Pri
!#0 N1486 P925 DWLD 0 -1 Int BE Pri
!#0 N1487 P925 DWLD 1 -1 Int BE Pri
!#A N1486 N1487
!#0 N1488 P926 MEMBAR
!#0 N1489 P927 BLD 12 -1 FP BE Pri
!#0 N1490 P927 BLD 13 -1 FP BE Pri
!#A N1489 N1490
!#0 N1491 P927 BLD 14 -1 FP BE Pri
!#0 N1492 P928 MEMBAR
!#0 N1493 P929 DWLD 20 -1,0x0 Int BE Pri
!#0 N1494 P929 CASX 20 -1,0x0 N1493 0x193 Int BE Pri
!#0 N1495 P930 ST_BINIT 20 0x194 Int BE Pri
!#0 N1496 P931 MEMBAR
!#0 N1497 P932 DWLD 5 -1 Int BE Pri
!#0 N1498 P933 ST_BINIT 9 0x195 Int BE Pri
!#0 N1499 P934 MEMBAR
!#0 N1500 P935 ST_BINIT 0 0x196 Int BE Pri
!#0 N1501 P936 MEMBAR
!#0 N1502 P937 DWST_BINIT 0 0x197 Int BE Pri
!#0 N1503 P937 DWST_BINIT 1 0x198 Int BE Pri
!#A N1502 N1503
!#0 N1504 P938 MEMBAR
!#0 N1505 P939 ST_BINIT 21 0x199 Int BE Pri
!#0 N1506 P940 MEMBAR
!#0 N1507 P941 PREFETCH 3 Int BE Pri
!#0 N1508 P942 MEMBAR
!#0 N1509 P943 BLD 0 -1 FP BE Pri
!#0 N1510 P943 BLD 1 -1 FP BE Pri
!#A N1509 N1510
!#0 N1511 P943 BLD 2 -1 FP BE Pri
!#0 N1512 P944 MEMBAR
!#0 N1513 P945 DWLD 6 -1 Int BE Pri
!#0 N1514 P945 DWLD 7 -1 Int BE Pri
!#A N1513 N1514
!#0 N1515 P945 CASX 6 -1 N1513 0x19a Int BE Pri
!#0 N1516 P945 CASX 7 -1 N1514 0x19b Int BE Pri
!#A N1515 N1516
!#0 N1517 P946 ST_BINIT 9 0x19c Int BE Pri
!#0 N1518 P947 MEMBAR
!#0 N1519 P948 BLD 9 -1 FP BE Pri
!#0 N1520 P948 BLD 10 -1 FP BE Pri
!#A N1519 N1520
!#0 N1521 P948 BLD 11 -1 FP BE Pri
!#0 N1522 P949 MEMBAR
!#0 N1523 P950 ST_BINIT 3 0x19d Int BE Pri
!#0 N1524 P951 MEMBAR
!#0 N1525 P952 PREFETCH 18 Int BE Pri
!#0 N1526 P953 DWLD 3 -1 Int BE Pri
!#0 N1527 P953 DWLD 4 -1 Int BE Pri
!#A N1526 N1527
!#0 N1528 P954 ST_BINIT 15 0x19e Int BE Pri
!#0 N1529 P955 MEMBAR
!#0 N1530 P956 DWST_BINIT 15 0x19f Int BE Pri
!#0 N1531 P956 DWST_BINIT 16 0x1a0 Int BE Pri
!#A N1530 N1531
!#0 N1532 P957 MEMBAR
!#0 N1533 P958 ST_BINIT 11 0x1a1 Int BE Pri
!#0 N1534 P959 MEMBAR
!#0 N1535 P960 DWLD 0 -1 Int BE Pri
!#0 N1536 P960 DWLD 1 -1 Int BE Pri
!#A N1535 N1536
!#0 N1537 P961 LD 1 -1 Int BE Pri
!#0 N1538 P962 DWLD 18 -1 Int BE Pri
!#0 N1539 P962 DWLD 19 -1 Int BE Pri
!#A N1538 N1539
!#0 N1540 P962 CASX 18 -1 N1538 0x1a2 Int BE Pri
!#0 N1541 P962 CASX 19 -1 N1539 0x1a3 Int BE Pri
!#A N1540 N1541
!#0 N1542 P963 REPLACEMENT 20 Int BE Pri
!#0 N1543 P964 DWLD 9 -1 Int BE Pri
!#0 N1544 P964 DWLD 10 -1 Int BE Pri
!#A N1543 N1544
!#0 N1545 P965 SWAP 9 0xffffffff 0x1a4 Int BE Pri
!#0 N1546 P966 ST 13 0x1a5 Int BE Pri
!#0 N1547 P967 ST 5 0x1a6 Int BE Pri
!#0 N1548 P968 LD 4 -1 Int BE Pri
!#0 N1549 P968 CAS 4 -1 N1548 0x1a7 Int BE Pri
!#0 N1550 P969 LD 20 -1 Int BE Pri
!#0 N1551 P969 CAS 20 -1 N1550 0x1a8 Int BE Pri
!#0 N1552 P970 REPLACEMENT 5 Int BE Pri
!#0 N1553 P971 DWLD 3 -1 Int BE Pri
!#0 N1554 P971 DWLD 4 -1 Int BE Pri
!#A N1553 N1554
!#0 N1555 P972 LDD 20 -1 Int BE Pri
!#0 N1556 P973 ST 18 0x3f800122 FP BE Pri
!#0 N1557 P974 PREFETCH 17 Int BE Pri
!#0 N1558 P975 SWAP 17 0xffffffff 0x1a9 Int BE Pri
!#0 N1559 P976 PREFETCH 20 Int BE Pri
!#0 N1560 P977 DWLD 12 -1 Int BE Pri
!#0 N1561 P977 DWLD 13 -1 Int BE Pri
!#A N1560 N1561
!#0 N1562 P978 ST 0 0x1aa Int BE Pri
!#0 N1563 P979 DWLD 2 -1 Int BE Pri
!#0 N1564 P980 LD 1 -1 Int BE Pri
!#0 N1565 P981 MEMBAR
!#0 N1566 P982 BST 6 0x3f800123 FP BE Pri
!#0 N1567 P982 BST 7 0x3f800124 FP BE Pri
!#A N1566 N1567
!#0 N1568 P982 BST 8 0x3f800125 FP BE Pri
!#0 N1569 P983 MEMBAR
!#0 N1570 P984 DWST_BINIT 15 0x1ab Int BE Pri
!#0 N1571 P984 DWST_BINIT 16 0x1ac Int BE Pri
!#A N1570 N1571
!#0 N1572 P985 MEMBAR
!#0 N1573 P986 DWST_BINIT 18 0x1ad Int BE Pri
!#0 N1574 P986 DWST_BINIT 19 0x1ae Int BE Pri
!#A N1573 N1574
!#0 N1575 P987 MEMBAR
!#0 N1576 P988 DWLD 9 -1 Int BE Pri
!#0 N1577 P988 DWLD 10 -1 Int BE Pri
!#A N1576 N1577
!#0 N1578 P989 DWST 18 0x1af Int BE Pri
!#0 N1579 P989 DWST 19 0x1b0 Int BE Pri
!#A N1578 N1579
!#0 N1580 P990 DWLD 14 -1 Int BE Pri
!#0 N1581 P991 LDD 20 -1 Int BE Pri
!#0 N1582 P992 MEMBAR
!#0 N1583 P993 BSTC 6 0x3f800126 FP BE Pri
!#0 N1584 P993 BSTC 7 0x3f800127 FP BE Pri
!#A N1583 N1584
!#0 N1585 P993 BSTC 8 0x3f800128 FP BE Pri
!#0 N1586 P994 MEMBAR
!#0 N1587 P995 BLD 9 -1 FP BE Pri
!#0 N1588 P995 BLD 10 -1 FP BE Pri
!#A N1587 N1588
!#0 N1589 P995 BLD 11 -1 FP BE Pri
!#0 N1590 P996 MEMBAR
!#0 N1591 P997 BSTC 9 0x3f800129 FP BE Pri
!#0 N1592 P997 BSTC 10 0x3f80012a FP BE Pri
!#A N1591 N1592
!#0 N1593 P997 BSTC 11 0x3f80012b FP BE Pri
!#0 N1594 P998 MEMBAR
!#0 N1595 P999 DWLD 11 -1 Int BE Pri
!#0 N1596 P1000 PREFETCH 12 Int BE Pri Loop_exit
!#0 N1597 P1001 MEMBAR
!#1 N1598 P1002 LD 9 -1 Int BE Pri Loop_entry
!#1 N1599 P1003 MEMBAR
!#1 N1600 P1004 BLD 21 -1 FP BE Pri
!#1 N1601 P1004 BLD 22 -1 FP BE Pri
!#A N1600 N1601
!#1 N1602 P1004 BLD 23 -1 FP BE Pri
!#1 N1603 P1005 MEMBAR
!#1 N1604 P1006 LD 9 -1 Int BE Pri
!#1 N1605 P1006 CAS 9 -1 N1604 0x800001 Int BE Pri
!#1 N1606 P1007 LDD 9 -1 Int BE Pri
!#1 N1607 P1007 LDD 10 -1 Int BE Pri
!#A N1606 N1607
!#1 N1608 P1008 MEMBAR
!#1 N1609 P1009 BST 0 0x40000001 FP BE Pri
!#1 N1610 P1009 BST 1 0x40000002 FP BE Pri
!#A N1609 N1610
!#1 N1611 P1009 BST 2 0x40000003 FP BE Pri
!#1 N1612 P1010 MEMBAR
!#1 N1613 P1011 DWST_BINIT 21 0x800002 Int BE Pri
!#1 N1614 P1011 DWST_BINIT 22 0x800003 Int BE Pri
!#A N1613 N1614
!#1 N1615 P1012 MEMBAR
!#1 N1616 P1013 BST 15 0x40000004 FP BE Pri
!#1 N1617 P1013 BST 16 0x40000005 FP BE Pri
!#A N1616 N1617
!#1 N1618 P1013 BST 17 0x40000006 FP BE Pri
!#1 N1619 P1014 MEMBAR
!#1 N1620 P1015 ST_BINIT 0 0x800004 Int BE Pri
!#1 N1621 P1016 MEMBAR
!#1 N1622 P1017 ST 0 0x40000007 FP BE Pri
!#1 N1623 P1018 PREFETCH 0 Int BE Pri
!#1 N1624 P1019 DWLD 2 -1 Int BE Pri
!#1 N1625 P1020 SWAP 13 0xffffffff 0x800005 Int LE Pri
!#1 N1626 P1021 DWST_BINIT 6 0x800006 Int BE Pri
!#1 N1627 P1021 DWST_BINIT 7 0x800007 Int BE Pri
!#A N1626 N1627
!#1 N1628 P1022 MEMBAR
!#1 N1629 P1023 DWLD 6 -1 Int BE Pri
!#1 N1630 P1023 DWLD 7 -1 Int BE Pri
!#A N1629 N1630
!#1 N1631 P1023 CASX 6 -1 N1629 0x800008 Int BE Pri
!#1 N1632 P1023 CASX 7 -1 N1630 0x800009 Int BE Pri
!#A N1631 N1632
!#1 N1633 P1024 LD 8 -1 Int BE Pri
!#1 N1634 P1024 CAS 8 -1 N1633 0x80000a Int BE Pri
!#1 N1635 P1025 MEMBAR
!#1 N1636 P1026 BSTC 6 0x40000008 FP BE Pri
!#1 N1637 P1026 BSTC 7 0x40000009 FP BE Pri
!#A N1636 N1637
!#1 N1638 P1026 BSTC 8 0x4000000a FP BE Pri
!#1 N1639 P1027 MEMBAR
!#1 N1640 P1028 LD 8 -1 Int BE Pri
!#1 N1641 P1029 LD 23 -1 Int LE Pri
!#1 N1642 P1030 LDD 23 -1 Int BE Pri
!#1 N1643 P1031 ST_BINIT 21 0x80000b Int BE Pri
!#1 N1644 P1032 MEMBAR
!#1 N1645 P1033 BLD 12 -1 FP BE Pri
!#1 N1646 P1033 BLD 13 -1 FP BE Pri
!#A N1645 N1646
!#1 N1647 P1033 BLD 14 -1 FP BE Pri
!#1 N1648 P1034 MEMBAR
!#1 N1649 P1035 BSTC 9 0x4000000b FP BE Pri
!#1 N1650 P1035 BSTC 10 0x4000000c FP BE Pri
!#A N1649 N1650
!#1 N1651 P1035 BSTC 11 0x4000000d FP BE Pri
!#1 N1652 P1036 MEMBAR
!#1 N1653 P1037 DWLD 5 -1,0x0 Int BE Pri
!#1 N1654 P1037 CASX 5 -1,0x0 N1653 0x80000c Int BE Pri
!#1 N1655 P1038 ST_BINIT 7 0x80000d Int BE Pri
!#1 N1656 P1039 MEMBAR
!#1 N1657 P1040 DWLD 6 -1 Int BE Pri
!#1 N1658 P1040 DWLD 7 -1 Int BE Pri
!#A N1657 N1658
!#1 N1659 P1040 CASX 6 -1 N1657 0x80000e Int BE Pri
!#1 N1660 P1040 CASX 7 -1 N1658 0x80000f Int BE Pri
!#A N1659 N1660
!#1 N1661 P1041 ST_BINIT 1 0x800010 Int BE Pri
!#1 N1662 P1042 MEMBAR
!#1 N1663 P1043 LDD 12 -1 Int BE Pri
!#1 N1664 P1043 LDD 13 -1 Int BE Pri
!#A N1663 N1664
!#1 N1665 P1044 REPLACEMENT 7 Int BE Pri
!#1 N1666 P1045 DWLD 3 -1 Int BE Pri
!#1 N1667 P1045 DWLD 4 -1 Int BE Pri
!#A N1666 N1667
!#1 N1668 P1045 CASX 3 -1 N1666 0x800011 Int BE Pri
!#1 N1669 P1045 CASX 4 -1 N1667 0x800012 Int BE Pri
!#A N1668 N1669
!#1 N1670 P1046 DWLD 6 -1 Int LE Pri
!#1 N1671 P1046 DWLD 7 -1 Int LE Pri
!#A N1670 N1671
!#1 N1672 P1046 CASX 6 -1 N1670 0x800013 Int LE Pri
!#1 N1673 P1046 CASX 7 -1 N1671 0x800014 Int LE Pri
!#A N1672 N1673
!#1 N1674 P1047 ST_BINIT 11 0x800015 Int LE Pri
!#1 N1675 P1048 MEMBAR
!#1 N1676 P1049 LDD 9 -1 Int BE Pri
!#1 N1677 P1049 LDD 10 -1 Int BE Pri
!#A N1676 N1677
!#1 N1678 P1050 MEMBAR
!#1 N1679 P1051 BSTC 6 0x4000000e FP BE Pri
!#1 N1680 P1051 BSTC 7 0x4000000f FP BE Pri
!#A N1679 N1680
!#1 N1681 P1051 BSTC 8 0x40000010 FP BE Pri
!#1 N1682 P1052 MEMBAR
!#1 N1683 P1053 PREFETCH 19 Int BE Pri
!#1 N1684 P1054 LD 7 -1 Int BE Pri
!#1 N1685 P1054 CAS 7 -1 N1684 0x800016 Int BE Pri
!#1 N1686 P1055 LDD 12 -1 Int BE Pri
!#1 N1687 P1055 LDD 13 -1 Int BE Pri
!#A N1686 N1687
!#1 N1688 P1056 DWST 6 0x40000011 FP BE Pri
!#1 N1689 P1056 DWST 7 0x40000012 FP BE Pri
!#A N1688 N1689
!#1 N1690 P1057 PREFETCH 8 Int BE Pri
!#1 N1691 P1058 DWLD 20 -1,0x0 Int BE Pri
!#1 N1692 P1058 CASX 20 -1,0x0 N1691 0x800017 Int BE Pri
!#1 N1693 P1059 PREFETCH 3 Int BE Pri
!#1 N1694 P1060 DWST 2 0x800018 Int BE Pri
!#1 N1695 P1061 SWAP 19 0xffffffff 0x800019 Int BE Pri
!#1 N1696 P1062 DWST_BINIT 18 0x80001a Int BE Pri
!#1 N1697 P1062 DWST_BINIT 19 0x80001b Int BE Pri
!#A N1696 N1697
!#1 N1698 P1063 MEMBAR
!#1 N1699 P1064 ST_BINIT 18 0x80001c Int BE Pri
!#1 N1700 P1065 MEMBAR
!#1 N1701 P1066 BLD 9 -1 FP BE Pri
!#1 N1702 P1066 BLD 10 -1 FP BE Pri
!#A N1701 N1702
!#1 N1703 P1066 BLD 11 -1 FP BE Pri
!#1 N1704 P1067 MEMBAR
!#1 N1705 P1068 LD 17 -1 FP BE Pri
!#1 N1706 P1069 ST_BINIT 6 0x80001d Int BE Pri
!#1 N1707 P1070 MEMBAR
!#1 N1708 P1071 LD 22 -1 Int BE Pri
!#1 N1709 P1072 SWAP 7 0xffffffff 0x80001e Int LE Pri
!#1 N1710 P1073 ST 17 0x80001f Int BE Pri
!#1 N1711 P1074 ST 20 0x800020 Int LE Pri
!#1 N1712 P1075 LDD 8 -1 Int BE Pri
!#1 N1713 P1076 MEMBAR
!#1 N1714 P1077 BSTC 9 0x40000013 FP BE Pri
!#1 N1715 P1077 BSTC 10 0x40000014 FP BE Pri
!#A N1714 N1715
!#1 N1716 P1077 BSTC 11 0x40000015 FP BE Pri
!#1 N1717 P1078 MEMBAR
!#1 N1718 P1079 DWST 3 0x800021 Int BE Pri
!#1 N1719 P1079 DWST 4 0x800022 Int BE Pri
!#A N1718 N1719
!#1 N1720 P1080 LD 16 -1 Int BE Pri
!#1 N1721 P1080 CAS 16 -1 N1720 0x800023 Int BE Pri
!#1 N1722 P1081 LD 22 -1 Int BE Pri
!#1 N1723 P1082 DWLD 17 -1,0x0 Int BE Pri
!#1 N1724 P1082 CASX 17 -1,0x0 N1723 0x800024 Int BE Pri
!#1 N1725 P1083 DWST_BINIT 6 0x800025 Int BE Pri
!#1 N1726 P1083 DWST_BINIT 7 0x800026 Int BE Pri
!#A N1725 N1726
!#1 N1727 P1084 MEMBAR
!#1 N1728 P1085 LD 9 -1 Int BE Pri
!#1 N1729 P1085 CAS 9 -1 N1728 0x800027 Int BE Pri
!#1 N1730 P1086 SWAP 19 0xffffffff 0x800028 Int BE Pri
!#1 N1731 P1087 MEMBAR
!#1 N1732 P1088 BLD 21 -1 FP BE Pri
!#1 N1733 P1088 BLD 22 -1 FP BE Pri
!#A N1732 N1733
!#1 N1734 P1088 BLD 23 -1 FP BE Pri
!#1 N1735 P1089 MEMBAR
!#1 N1736 P1090 DWLD 17 -1 Int BE Pri
!#1 N1737 P1091 LD 19 -1 Int BE Pri
!#1 N1738 P1092 MEMBAR
!#1 N1739 P1093 BLD 12 -1 FP BE Pri
!#1 N1740 P1093 BLD 13 -1 FP BE Pri
!#A N1739 N1740
!#1 N1741 P1093 BLD 14 -1 FP BE Pri
!#1 N1742 P1094 MEMBAR
!#1 N1743 P1095 DWLD 18 -1 Int BE Pri
!#1 N1744 P1095 DWLD 19 -1 Int BE Pri
!#A N1743 N1744
!#1 N1745 P1096 MEMBAR
!#1 N1746 P1097 BST 3 0x40000016 FP BE Pri
!#1 N1747 P1097 BST 4 0x40000017 FP BE Pri
!#A N1746 N1747
!#1 N1748 P1097 BST 5 0x40000018 FP BE Pri
!#1 N1749 P1098 MEMBAR
!#1 N1750 P1099 DWLD 23 -1,0x0 Int BE Pri
!#1 N1751 P1099 CASX 23 -1,0x0 N1750 0x800029 Int BE Pri
!#1 N1752 P1100 LDD 6 -1 Int BE Pri
!#1 N1753 P1100 LDD 7 -1 Int BE Pri
!#A N1752 N1753
!#1 N1754 P1101 PREFETCH 9 Int BE Pri
!#1 N1755 P1102 LDD 21 -1 Int BE Pri
!#1 N1756 P1102 LDD 22 -1 Int BE Pri
!#A N1755 N1756
!#1 N1757 P1103 DWLD 6 -1 Int BE Pri
!#1 N1758 P1103 DWLD 7 -1 Int BE Pri
!#A N1757 N1758
!#1 N1759 P1103 CASX 6 -1 N1757 0x80002a Int BE Pri
!#1 N1760 P1103 CASX 7 -1 N1758 0x80002b Int BE Pri
!#A N1759 N1760
!#1 N1761 P1104 DWST_BINIT 8 0x80002c Int BE Pri
!#1 N1762 P1105 MEMBAR
!#1 N1763 P1106 DWLD 12 -1 Int BE Pri
!#1 N1764 P1106 DWLD 13 -1 Int BE Pri
!#A N1763 N1764
!#1 N1765 P1107 LD 17 -1 Int BE Pri
!#1 N1766 P1107 CAS 17 -1 N1765 0x80002d Int BE Pri
!#1 N1767 P1108 DWST_BINIT 0 0x80002e Int BE Pri
!#1 N1768 P1108 DWST_BINIT 1 0x80002f Int BE Pri
!#A N1767 N1768
!#1 N1769 P1109 MEMBAR
!#1 N1770 P1110 DWLD 9 -1 FP BE Pri
!#1 N1771 P1110 DWLD 10 -1 FP BE Pri
!#A N1770 N1771
!#1 N1772 P1111 DWST_BINIT 12 0x800030 Int BE Pri
!#1 N1773 P1111 DWST_BINIT 13 0x800031 Int BE Pri
!#A N1772 N1773
!#1 N1774 P1112 MEMBAR
!#1 N1775 P1113 BST 18 0x40000019 FP BE Pri
!#1 N1776 P1113 BST 19 0x4000001a FP BE Pri
!#A N1775 N1776
!#1 N1777 P1113 BST 20 0x4000001b FP BE Pri
!#1 N1778 P1114 MEMBAR
!#1 N1779 P1115 DWLD 17 -1 Int BE Pri
!#1 N1780 P1116 LD 15 -1 Int BE Pri
!#1 N1781 P1116 CAS 15 -1 N1780 0x800032 Int BE Pri
!#1 N1782 P1117 DWLD 15 -1 Int BE Pri
!#1 N1783 P1117 DWLD 16 -1 Int BE Pri
!#A N1782 N1783
!#1 N1784 P1117 CASX 15 -1 N1782 0x800033 Int BE Pri
!#1 N1785 P1117 CASX 16 -1 N1783 0x800034 Int BE Pri
!#A N1784 N1785
!#1 N1786 P1118 LD 12 -1 Int BE Pri
!#1 N1787 P1119 SWAP 4 0xffffffff 0x800035 Int LE Pri
!#1 N1788 P1120 ST 10 0x800036 Int BE Pri
!#1 N1789 P1121 LD 0 -1 Int BE Pri
!#1 N1790 P1122 LDD 9 -1 Int BE Pri
!#1 N1791 P1122 LDD 10 -1 Int BE Pri
!#A N1790 N1791
!#1 N1792 P1123 MEMBAR
!#1 N1793 P1124 BST 6 0x4000001c FP BE Pri
!#1 N1794 P1124 BST 7 0x4000001d FP BE Pri
!#A N1793 N1794
!#1 N1795 P1124 BST 8 0x4000001e FP BE Pri
!#1 N1796 P1125 MEMBAR
!#1 N1797 P1126 DWLD 15 -1 Int BE Pri
!#1 N1798 P1126 DWLD 16 -1 Int BE Pri
!#A N1797 N1798
!#1 N1799 P1127 LDD 9 -1 Int BE Pri
!#1 N1800 P1127 LDD 10 -1 Int BE Pri
!#A N1799 N1800
!#1 N1801 P1128 MEMBAR
!#1 N1802 P1129 BLD 18 -1 FP BE Pri
!#1 N1803 P1129 BLD 19 -1 FP BE Pri
!#A N1802 N1803
!#1 N1804 P1129 BLD 20 -1 FP BE Pri
!#1 N1805 P1130 MEMBAR
!#1 N1806 P1131 BLD 9 -1 FP BE Pri
!#1 N1807 P1131 BLD 10 -1 FP BE Pri
!#A N1806 N1807
!#1 N1808 P1131 BLD 11 -1 FP BE Pri
!#1 N1809 P1132 MEMBAR
!#1 N1810 P1133 BLD 6 -1 FP BE Pri
!#1 N1811 P1133 BLD 7 -1 FP BE Pri
!#A N1810 N1811
!#1 N1812 P1133 BLD 8 -1 FP BE Pri
!#1 N1813 P1134 MEMBAR
!#1 N1814 P1135 SWAP 11 0xffffffff 0x800037 Int BE Pri
!#1 N1815 P1136 DWLD 9 -1 Int BE Pri
!#1 N1816 P1136 DWLD 10 -1 Int BE Pri
!#A N1815 N1816
!#1 N1817 P1136 CASX 9 -1 N1815 0x800038 Int BE Pri
!#1 N1818 P1136 CASX 10 -1 N1816 0x800039 Int BE Pri
!#A N1817 N1818
!#1 N1819 P1137 DWST_BINIT 15 0x80003a Int BE Pri
!#1 N1820 P1137 DWST_BINIT 16 0x80003b Int BE Pri
!#A N1819 N1820
!#1 N1821 P1138 MEMBAR
!#1 N1822 P1139 DWLD 6 -1 Int BE Pri
!#1 N1823 P1139 DWLD 7 -1 Int BE Pri
!#A N1822 N1823
!#1 N1824 P1140 LD 16 -1 Int BE Pri
!#1 N1825 P1141 DWST_BINIT 12 0x80003c Int BE Pri
!#1 N1826 P1141 DWST_BINIT 13 0x80003d Int BE Pri
!#A N1825 N1826
!#1 N1827 P1142 MEMBAR
!#1 N1828 P1143 DWST 3 0x80003e Int BE Pri
!#1 N1829 P1143 DWST 4 0x80003f Int BE Pri
!#A N1828 N1829
!#1 N1830 P1144 DWLD 9 -1 Int BE Pri
!#1 N1831 P1144 DWLD 10 -1 Int BE Pri
!#A N1830 N1831
!#1 N1832 P1144 CASX 9 -1 N1830 0x800040 Int BE Pri
!#1 N1833 P1144 CASX 10 -1 N1831 0x800041 Int BE Pri
!#A N1832 N1833
!#1 N1834 P1145 DWLD 15 -1 Int BE Pri
!#1 N1835 P1145 DWLD 16 -1 Int BE Pri
!#A N1834 N1835
!#1 N1836 P1146 LD 4 -1 Int BE Pri
!#1 N1837 P1147 DWST 0 0x4000001f FP BE Pri
!#1 N1838 P1147 DWST 1 0x40000020 FP BE Pri
!#A N1837 N1838
!#1 N1839 P1148 LDD 6 -1 Int BE Pri
!#1 N1840 P1148 LDD 7 -1 Int BE Pri
!#A N1839 N1840
!#1 N1841 P1149 DWLD 12 -1 Int BE Pri
!#1 N1842 P1149 DWLD 13 -1 Int BE Pri
!#A N1841 N1842
!#1 N1843 P1149 CASX 12 -1 N1841 0x800042 Int BE Pri
!#1 N1844 P1149 CASX 13 -1 N1842 0x800043 Int BE Pri
!#A N1843 N1844
!#1 N1845 P1150 LDD 12 -1 Int BE Pri
!#1 N1846 P1150 LDD 13 -1 Int BE Pri
!#A N1845 N1846
!#1 N1847 P1151 MEMBAR
!#1 N1848 P1152 BSTC 9 0x40000021 FP BE Pri
!#1 N1849 P1152 BSTC 10 0x40000022 FP BE Pri
!#A N1848 N1849
!#1 N1850 P1152 BSTC 11 0x40000023 FP BE Pri
!#1 N1851 P1153 MEMBAR
!#1 N1852 P1154 BSTC 9 0x40000024 FP BE Pri
!#1 N1853 P1154 BSTC 10 0x40000025 FP BE Pri
!#A N1852 N1853
!#1 N1854 P1154 BSTC 11 0x40000026 FP BE Pri
!#1 N1855 P1155 MEMBAR
!#1 N1856 P1156 BST 18 0x40000027 FP BE Pri
!#1 N1857 P1156 BST 19 0x40000028 FP BE Pri
!#A N1856 N1857
!#1 N1858 P1156 BST 20 0x40000029 FP BE Pri
!#1 N1859 P1157 MEMBAR
!#1 N1860 P1158 LDD 6 -1 Int BE Pri
!#1 N1861 P1158 LDD 7 -1 Int BE Pri
!#A N1860 N1861
!#1 N1862 P1159 MEMBAR
!#1 N1863 P1160 BST 9 0x4000002a FP BE Pri
!#1 N1864 P1160 BST 10 0x4000002b FP BE Pri
!#A N1863 N1864
!#1 N1865 P1160 BST 11 0x4000002c FP BE Pri
!#1 N1866 P1161 MEMBAR
!#1 N1867 P1162 BST 12 0x4000002d FP BE Pri
!#1 N1868 P1162 BST 13 0x4000002e FP BE Pri
!#A N1867 N1868
!#1 N1869 P1162 BST 14 0x4000002f FP BE Pri
!#1 N1870 P1163 MEMBAR
!#1 N1871 P1164 BST 6 0x40000030 FP BE Pri
!#1 N1872 P1164 BST 7 0x40000031 FP BE Pri
!#A N1871 N1872
!#1 N1873 P1164 BST 8 0x40000032 FP BE Pri
!#1 N1874 P1165 MEMBAR
!#1 N1875 P1166 DWST_BINIT 18 0x800044 Int BE Pri
!#1 N1876 P1166 DWST_BINIT 19 0x800045 Int BE Pri
!#A N1875 N1876
!#1 N1877 P1167 MEMBAR
!#1 N1878 P1168 DWLD 23 -1 FP BE Pri
!#1 N1879 P1169 DWLD 15 -1 Int BE Pri
!#1 N1880 P1169 DWLD 16 -1 Int BE Pri
!#A N1879 N1880
!#1 N1881 P1169 CASX 15 -1 N1879 0x800046 Int BE Pri
!#1 N1882 P1169 CASX 16 -1 N1880 0x800047 Int BE Pri
!#A N1881 N1882
!#1 N1883 P1170 DWST 8 0x40000033 FP BE Pri
!#1 N1884 P1171 ST 2 0x800048 Int BE Pri
!#1 N1885 P1172 MEMBAR
!#1 N1886 P1173 BST 6 0x40000034 FP BE Pri
!#1 N1887 P1173 BST 7 0x40000035 FP BE Pri
!#A N1886 N1887
!#1 N1888 P1173 BST 8 0x40000036 FP BE Pri
!#1 N1889 P1174 MEMBAR
!#1 N1890 P1175 ST_BINIT 10 0x800049 Int BE Pri
!#1 N1891 P1176 MEMBAR
!#1 N1892 P1177 SWAP 17 0xffffffff 0x80004a Int BE Pri
!#1 N1893 P1178 MEMBAR
!#1 N1894 P1179 BSTC 9 0x40000037 FP BE Pri
!#1 N1895 P1179 BSTC 10 0x40000038 FP BE Pri
!#A N1894 N1895
!#1 N1896 P1179 BSTC 11 0x40000039 FP BE Pri
!#1 N1897 P1180 MEMBAR
!#1 N1898 P1181 DWST 9 0x80004b Int BE Pri
!#1 N1899 P1181 DWST 10 0x80004c Int BE Pri
!#A N1898 N1899
!#1 N1900 P1182 PREFETCH 5 Int BE Pri
!#1 N1901 P1183 DWLD 11 -1,0x0 Int BE Pri
!#1 N1902 P1183 CASX 11 -1,0x0 N1901 0x80004d Int BE Pri
!#1 N1903 P1184 LD 20 -1 Int BE Pri
!#1 N1904 P1185 DWST_BINIT 14 0x80004e Int BE Pri
!#1 N1905 P1186 MEMBAR
!#1 N1906 P1187 PREFETCH 18 Int BE Pri
!#1 N1907 P1188 LD 4 -1 Int BE Pri
!#1 N1908 P1188 CAS 4 -1 N1907 0x80004f Int BE Pri
!#1 N1909 P1189 MEMBAR
!#1 N1910 P1190 BLD 18 -1 FP BE Pri
!#1 N1911 P1190 BLD 19 -1 FP BE Pri
!#A N1910 N1911
!#1 N1912 P1190 BLD 20 -1 FP BE Pri
!#1 N1913 P1191 MEMBAR
!#1 N1914 P1192 BLD 3 -1 FP BE Pri
!#1 N1915 P1192 BLD 4 -1 FP BE Pri
!#A N1914 N1915
!#1 N1916 P1192 BLD 5 -1 FP BE Pri
!#1 N1917 P1193 MEMBAR
!#1 N1918 P1194 LD 2 -1 FP BE Pri
!#1 N1919 P1195 REPLACEMENT 13 Int BE Pri
!#1 N1920 P1196 LD 22 -1 Int BE Pri
!#1 N1921 P1197 LD 20 -1 Int BE Pri
!#1 N1922 P1197 CAS 20 -1 N1921 0x800050 Int BE Pri
!#1 N1923 P1198 SWAP 21 0xffffffff 0x800051 Int BE Pri
!#1 N1924 P1199 ST 13 0x800052 Int BE Pri
!#1 N1925 P1200 DWST_BINIT 8 0x800053 Int BE Pri
!#1 N1926 P1201 MEMBAR
!#1 N1927 P1202 PREFETCH 0 Int BE Pri
!#1 N1928 P1203 SWAP 23 0xffffffff 0x800054 Int BE Pri
!#1 N1929 P1204 SWAP 4 0xffffffff 0x800055 Int BE Pri
!#1 N1930 P1205 DWLD 5 -1,0x0 Int BE Pri
!#1 N1931 P1205 CASX 5 -1,0x0 N1930 0x800056 Int BE Pri
!#1 N1932 P1206 MEMBAR
!#1 N1933 P1207 BSTC 9 0x4000003a FP BE Pri
!#1 N1934 P1207 BSTC 10 0x4000003b FP BE Pri
!#A N1933 N1934
!#1 N1935 P1207 BSTC 11 0x4000003c FP BE Pri
!#1 N1936 P1208 MEMBAR
!#1 N1937 P1209 BST 15 0x4000003d FP BE Pri
!#1 N1938 P1209 BST 16 0x4000003e FP BE Pri
!#A N1937 N1938
!#1 N1939 P1209 BST 17 0x4000003f FP BE Pri
!#1 N1940 P1210 MEMBAR
!#1 N1941 P1211 DWST 18 0x800057 Int BE Pri
!#1 N1942 P1211 DWST 19 0x800058 Int BE Pri
!#A N1941 N1942
!#1 N1943 P1212 DWST_BINIT 20 0x800059 Int BE Pri
!#1 N1944 P1213 MEMBAR
!#1 N1945 P1214 DWLD 3 -1 Int BE Pri
!#1 N1946 P1214 DWLD 4 -1 Int BE Pri
!#A N1945 N1946
!#1 N1947 P1215 LD 17 -1 Int BE Pri
!#1 N1948 P1215 CAS 17 -1 N1947 0x80005a Int BE Pri
!#1 N1949 P1216 DWST_BINIT 9 0x80005b Int BE Pri
!#1 N1950 P1216 DWST_BINIT 10 0x80005c Int BE Pri
!#A N1949 N1950
!#1 N1951 P1217 MEMBAR
!#1 N1952 P1218 BST 21 0x40000040 FP BE Pri
!#1 N1953 P1218 BST 22 0x40000041 FP BE Pri
!#A N1952 N1953
!#1 N1954 P1218 BST 23 0x40000042 FP BE Pri
!#1 N1955 P1219 MEMBAR
!#1 N1956 P1220 DWST 12 0x80005d Int BE Pri
!#1 N1957 P1220 DWST 13 0x80005e Int BE Pri
!#A N1956 N1957
!#1 N1958 P1221 MEMBAR
!#1 N1959 P1222 BST 6 0x40000043 FP BE Pri
!#1 N1960 P1222 BST 7 0x40000044 FP BE Pri
!#A N1959 N1960
!#1 N1961 P1222 BST 8 0x40000045 FP BE Pri
!#1 N1962 P1223 MEMBAR
!#1 N1963 P1224 PREFETCH 13 Int BE Pri
!#1 N1964 P1225 REPLACEMENT 20 Int BE Pri
!#1 N1965 P1226 ST 6 0x80005f Int BE Pri
!#1 N1966 P1227 SWAP 15 0xffffffff 0x800060 Int BE Pri
!#1 N1967 P1228 ST 1 0x800061 Int BE Pri
!#1 N1968 P1229 REPLACEMENT 21 Int BE Pri
!#1 N1969 P1230 SWAP 20 0xffffffff 0x800062 Int BE Pri
!#1 N1970 P1231 LD 13 -1 Int LE Pri
!#1 N1971 P1232 MEMBAR
!#1 N1972 P1233 BST 6 0x40000046 FP BE Pri
!#1 N1973 P1233 BST 7 0x40000047 FP BE Pri
!#A N1972 N1973
!#1 N1974 P1233 BST 8 0x40000048 FP BE Pri
!#1 N1975 P1234 MEMBAR
!#1 N1976 P1235 DWST_BINIT 0 0x800063 Int BE Pri
!#1 N1977 P1235 DWST_BINIT 1 0x800064 Int BE Pri
!#A N1976 N1977
!#1 N1978 P1236 MEMBAR
!#1 N1979 P1237 PREFETCH 22 Int LE Pri
!#1 N1980 P1238 MEMBAR
!#1 N1981 P1239 BLD 0 -1 FP BE Pri
!#1 N1982 P1239 BLD 1 -1 FP BE Pri
!#A N1981 N1982
!#1 N1983 P1239 BLD 2 -1 FP BE Pri
!#1 N1984 P1240 MEMBAR
!#1 N1985 P1241 ST 21 0x800065 Int BE Pri
!#1 N1986 P1242 DWST_BINIT 0 0x800066 Int BE Pri
!#1 N1987 P1242 DWST_BINIT 1 0x800067 Int BE Pri
!#A N1986 N1987
!#1 N1988 P1243 MEMBAR
!#1 N1989 P1244 DWST_BINIT 15 0x800068 Int BE Pri
!#1 N1990 P1244 DWST_BINIT 16 0x800069 Int BE Pri
!#A N1989 N1990
!#1 N1991 P1245 MEMBAR
!#1 N1992 P1246 PREFETCH 23 Int BE Pri
!#1 N1993 P1247 MEMBAR
!#1 N1994 P1248 BST 3 0x40000049 FP BE Pri
!#1 N1995 P1248 BST 4 0x4000004a FP BE Pri
!#A N1994 N1995
!#1 N1996 P1248 BST 5 0x4000004b FP BE Pri
!#1 N1997 P1249 MEMBAR
!#1 N1998 P1250 SWAP 21 0xffffffff 0x80006a Int BE Pri
!#1 N1999 P1251 LD 23 -1 Int BE Pri
!#1 N2000 P1252 ST 23 0x80006b Int BE Pri
!#1 N2001 P1253 REPLACEMENT 19 Int BE Pri
!#1 N2002 P1254 LDD 18 -1 Int BE Pri
!#1 N2003 P1254 LDD 19 -1 Int BE Pri
!#A N2002 N2003
!#1 N2004 P1255 ST_BINIT 11 0x80006c Int BE Pri
!#1 N2005 P1256 MEMBAR
!#1 N2006 P1257 LD 22 -1 Int BE Pri
!#1 N2007 P1257 CAS 22 -1 N2006 0x80006d Int BE Pri
!#1 N2008 P1258 ST 17 0x4000004c FP BE Pri
!#1 N2009 P1259 PREFETCH 13 Int BE Pri
!#1 N2010 P1260 ST 8 0x80006e Int BE Pri
!#1 N2011 P1261 LD 15 -1 Int BE Pri
!#1 N2012 P1261 CAS 15 -1 N2011 0x80006f Int BE Pri
!#1 N2013 P1262 DWLD 14 -1 Int BE Pri
!#1 N2014 P1263 DWST 6 0x800070 Int BE Pri
!#1 N2015 P1263 DWST 7 0x800071 Int BE Pri
!#A N2014 N2015
!#1 N2016 P1264 LDD 9 -1 Int BE Pri
!#1 N2017 P1264 LDD 10 -1 Int BE Pri
!#A N2016 N2017
!#1 N2018 P1265 DWLD 12 -1 Int BE Pri
!#1 N2019 P1265 DWLD 13 -1 Int BE Pri
!#A N2018 N2019
!#1 N2020 P1265 CASX 12 -1 N2018 0x800072 Int BE Pri
!#1 N2021 P1265 CASX 13 -1 N2019 0x800073 Int BE Pri
!#A N2020 N2021
!#1 N2022 P1266 REPLACEMENT 22 Int BE Pri
!#1 N2023 P1267 PREFETCH 7 Int BE Pri
!#1 N2024 P1268 LDD 9 -1 Int BE Pri
!#1 N2025 P1268 LDD 10 -1 Int BE Pri
!#A N2024 N2025
!#1 N2026 P1269 SWAP 23 0xffffffff 0x800074 Int BE Pri
!#1 N2027 P1270 SWAP 15 0xffffffff 0x800075 Int BE Pri
!#1 N2028 P1271 DWLD 18 -1 Int BE Pri
!#1 N2029 P1271 DWLD 19 -1 Int BE Pri
!#A N2028 N2029
!#1 N2030 P1272 SWAP 12 0xffffffff 0x800076 Int BE Pri
!#1 N2031 P1273 DWST 3 0x800077 Int BE Pri
!#1 N2032 P1273 DWST 4 0x800078 Int BE Pri
!#A N2031 N2032
!#1 N2033 P1274 DWST 0 0x800079 Int BE Pri
!#1 N2034 P1274 DWST 1 0x80007a Int BE Pri
!#A N2033 N2034
!#1 N2035 P1275 LD 15 -1 Int BE Pri
!#1 N2036 P1275 CAS 15 -1 N2035 0x80007b Int BE Pri
!#1 N2037 P1276 LDD 8 -1 Int BE Pri
!#1 N2038 P1277 MEMBAR
!#1 N2039 P1278 BSTC 6 0x4000004d FP BE Pri
!#1 N2040 P1278 BSTC 7 0x4000004e FP BE Pri
!#A N2039 N2040
!#1 N2041 P1278 BSTC 8 0x4000004f FP BE Pri
!#1 N2042 P1279 MEMBAR
!#1 N2043 P1280 LD 20 -1 Int BE Pri
!#1 N2044 P1281 MEMBAR
!#1 N2045 P1282 BST 21 0x40000050 FP BE Pri
!#1 N2046 P1282 BST 22 0x40000051 FP BE Pri
!#A N2045 N2046
!#1 N2047 P1282 BST 23 0x40000052 FP BE Pri
!#1 N2048 P1283 MEMBAR
!#1 N2049 P1284 BST 21 0x40000053 FP BE Pri
!#1 N2050 P1284 BST 22 0x40000054 FP BE Pri
!#A N2049 N2050
!#1 N2051 P1284 BST 23 0x40000055 FP BE Pri
!#1 N2052 P1285 MEMBAR
!#1 N2053 P1286 BSTC 6 0x40000056 FP BE Pri
!#1 N2054 P1286 BSTC 7 0x40000057 FP BE Pri
!#A N2053 N2054
!#1 N2055 P1286 BSTC 8 0x40000058 FP BE Pri
!#1 N2056 P1287 MEMBAR
!#1 N2057 P1288 BLD 18 -1 FP BE Pri
!#1 N2058 P1288 BLD 19 -1 FP BE Pri
!#A N2057 N2058
!#1 N2059 P1288 BLD 20 -1 FP BE Pri
!#1 N2060 P1289 MEMBAR
!#1 N2061 P1290 BSTC 6 0x40000059 FP BE Pri
!#1 N2062 P1290 BSTC 7 0x4000005a FP BE Pri
!#A N2061 N2062
!#1 N2063 P1290 BSTC 8 0x4000005b FP BE Pri
!#1 N2064 P1291 MEMBAR
!#1 N2065 P1292 ST_BINIT 21 0x80007c Int BE Pri
!#1 N2066 P1293 MEMBAR
!#1 N2067 P1294 ST_BINIT 23 0x80007d Int BE Pri
!#1 N2068 P1295 MEMBAR
!#1 N2069 P1296 BSTC 9 0x4000005c FP BE Pri
!#1 N2070 P1296 BSTC 10 0x4000005d FP BE Pri
!#A N2069 N2070
!#1 N2071 P1296 BSTC 11 0x4000005e FP BE Pri
!#1 N2072 P1297 MEMBAR
!#1 N2073 P1298 LDD 12 -1 Int BE Pri
!#1 N2074 P1298 LDD 13 -1 Int BE Pri
!#A N2073 N2074
!#1 N2075 P1299 LD 17 -1 Int BE Pri
!#1 N2076 P1299 CAS 17 -1 N2075 0x80007e Int BE Pri
!#1 N2077 P1300 DWLD 6 -1 Int BE Pri
!#1 N2078 P1300 DWLD 7 -1 Int BE Pri
!#A N2077 N2078
!#1 N2079 P1301 DWLD 21 -1 Int BE Pri
!#1 N2080 P1301 DWLD 22 -1 Int BE Pri
!#A N2079 N2080
!#1 N2081 P1301 CASX 21 -1 N2079 0x80007f Int BE Pri
!#1 N2082 P1301 CASX 22 -1 N2080 0x800080 Int BE Pri
!#A N2081 N2082
!#1 N2083 P1302 MEMBAR
!#1 N2084 P1303 BSTC 0 0x4000005f FP BE Pri
!#1 N2085 P1303 BSTC 1 0x40000060 FP BE Pri
!#A N2084 N2085
!#1 N2086 P1303 BSTC 2 0x40000061 FP BE Pri
!#1 N2087 P1304 MEMBAR
!#1 N2088 P1305 PREFETCH 5 Int BE Pri
!#1 N2089 P1306 LDD 9 -1 Int BE Pri
!#1 N2090 P1306 LDD 10 -1 Int BE Pri
!#A N2089 N2090
!#1 N2091 P1307 LD 16 -1 Int BE Pri
!#1 N2092 P1307 CAS 16 -1 N2091 0x800081 Int BE Pri
!#1 N2093 P1308 DWLD 9 -1 Int BE Pri
!#1 N2094 P1308 DWLD 10 -1 Int BE Pri
!#A N2093 N2094
!#1 N2095 P1309 MEMBAR
!#1 N2096 P1310 BLD 0 -1 FP BE Pri
!#1 N2097 P1310 BLD 1 -1 FP BE Pri
!#A N2096 N2097
!#1 N2098 P1310 BLD 2 -1 FP BE Pri
!#1 N2099 P1311 MEMBAR
!#1 N2100 P1312 ST_BINIT 2 0x800082 Int BE Pri
!#1 N2101 P1313 MEMBAR
!#1 N2102 P1314 DWST_BINIT 20 0x800083 Int BE Pri
!#1 N2103 P1315 MEMBAR
!#1 N2104 P1316 DWST 14 0x800084 Int BE Pri
!#1 N2105 P1317 LDD 15 -1 Int BE Pri
!#1 N2106 P1317 LDD 16 -1 Int BE Pri
!#A N2105 N2106
!#1 N2107 P1318 MEMBAR
!#1 N2108 P1319 BSTC 18 0x40000062 FP BE Pri
!#1 N2109 P1319 BSTC 19 0x40000063 FP BE Pri
!#A N2108 N2109
!#1 N2110 P1319 BSTC 20 0x40000064 FP BE Pri
!#1 N2111 P1320 MEMBAR
!#1 N2112 P1321 BLD 3 -1 FP BE Pri
!#1 N2113 P1321 BLD 4 -1 FP BE Pri
!#A N2112 N2113
!#1 N2114 P1321 BLD 5 -1 FP BE Pri
!#1 N2115 P1322 MEMBAR
!#1 N2116 P1323 BSTC 15 0x40000065 FP BE Pri
!#1 N2117 P1323 BSTC 16 0x40000066 FP BE Pri
!#A N2116 N2117
!#1 N2118 P1323 BSTC 17 0x40000067 FP BE Pri
!#1 N2119 P1324 MEMBAR
!#1 N2120 P1325 BLD 15 -1 FP BE Pri
!#1 N2121 P1325 BLD 16 -1 FP BE Pri
!#A N2120 N2121
!#1 N2122 P1325 BLD 17 -1 FP BE Pri
!#1 N2123 P1326 MEMBAR
!#1 N2124 P1327 ST_BINIT 1 0x800085 Int BE Pri
!#1 N2125 P1328 MEMBAR
!#1 N2126 P1329 DWST 14 0x800086 Int BE Pri
!#1 N2127 P1330 DWLD 3 -1 Int BE Pri
!#1 N2128 P1330 DWLD 4 -1 Int BE Pri
!#A N2127 N2128
!#1 N2129 P1330 CASX 3 -1 N2127 0x800087 Int BE Pri
!#1 N2130 P1330 CASX 4 -1 N2128 0x800088 Int BE Pri
!#A N2129 N2130
!#1 N2131 P1331 ST 21 0x800089 Int BE Pri
!#1 N2132 P1332 LD 21 -1 Int BE Pri
!#1 N2133 P1332 CAS 21 -1 N2132 0x80008a Int BE Pri
!#1 N2134 P1333 SWAP 11 0xffffffff 0x80008b Int BE Pri
!#1 N2135 P1334 DWLD 11 -1 FP BE Pri
!#1 N2136 P1335 LD 3 -1 Int BE Pri
!#1 N2137 P1336 REPLACEMENT 15 Int BE Pri
!#1 N2138 P1337 LD 8 -1 Int BE Pri
!#1 N2139 P1337 CAS 8 -1 N2138 0x80008c Int BE Pri
!#1 N2140 P1338 DWST_BINIT 15 0x80008d Int BE Pri
!#1 N2141 P1338 DWST_BINIT 16 0x80008e Int BE Pri
!#A N2140 N2141
!#1 N2142 P1339 MEMBAR
!#1 N2143 P1340 DWST 5 0x40000068 FP BE Pri
!#1 N2144 P1341 SWAP 17 0xffffffff 0x80008f Int BE Pri
!#1 N2145 P1342 DWST_BINIT 21 0x800090 Int BE Pri
!#1 N2146 P1342 DWST_BINIT 22 0x800091 Int BE Pri
!#A N2145 N2146
!#1 N2147 P1343 MEMBAR
!#1 N2148 P1344 LD 11 -1 Int BE Pri
!#1 N2149 P1345 MEMBAR
!#1 N2150 P1346 BLD 9 -1 FP BE Pri
!#1 N2151 P1346 BLD 10 -1 FP BE Pri
!#A N2150 N2151
!#1 N2152 P1346 BLD 11 -1 FP BE Pri
!#1 N2153 P1347 MEMBAR
!#1 N2154 P1348 LD 0 -1 Int BE Pri
!#1 N2155 P1349 LDD 6 -1 Int BE Pri
!#1 N2156 P1349 LDD 7 -1 Int BE Pri
!#A N2155 N2156
!#1 N2157 P1350 LD 2 -1 Int BE Pri
!#1 N2158 P1350 CAS 2 -1 N2157 0x800092 Int BE Pri
!#1 N2159 P1351 MEMBAR
!#1 N2160 P1352 BSTC 18 0x40000069 FP BE Pri
!#1 N2161 P1352 BSTC 19 0x4000006a FP BE Pri
!#A N2160 N2161
!#1 N2162 P1352 BSTC 20 0x4000006b FP BE Pri
!#1 N2163 P1353 MEMBAR
!#1 N2164 P1354 SWAP 15 0xffffffff 0x800093 Int BE Pri
!#1 N2165 P1355 SWAP 23 0xffffffff 0x800094 Int BE Pri
!#1 N2166 P1356 DWLD 8 -1 Int BE Pri
!#1 N2167 P1357 PREFETCH 10 Int BE Pri
!#1 N2168 P1358 MEMBAR
!#1 N2169 P1359 BST 12 0x4000006c FP BE Pri
!#1 N2170 P1359 BST 13 0x4000006d FP BE Pri
!#A N2169 N2170
!#1 N2171 P1359 BST 14 0x4000006e FP BE Pri
!#1 N2172 P1360 MEMBAR
!#1 N2173 P1361 LDD 21 -1 Int LE Pri
!#1 N2174 P1361 LDD 22 -1 Int LE Pri
!#A N2173 N2174
!#1 N2175 P1362 ST 6 0x800095 Int BE Pri
!#1 N2176 P1363 PREFETCH 3 Int BE Pri
!#1 N2177 P1364 DWST_BINIT 15 0x800096 Int BE Pri
!#1 N2178 P1364 DWST_BINIT 16 0x800097 Int BE Pri
!#A N2177 N2178
!#1 N2179 P1365 MEMBAR
!#1 N2180 P1366 DWLD 3 -1 Int BE Pri
!#1 N2181 P1366 DWLD 4 -1 Int BE Pri
!#A N2180 N2181
!#1 N2182 P1367 LD 1 -1 Int BE Pri
!#1 N2183 P1367 CAS 1 -1 N2182 0x800098 Int BE Pri
!#1 N2184 P1368 DWLD 15 -1 FP BE Pri
!#1 N2185 P1368 DWLD 16 -1 FP BE Pri
!#A N2184 N2185
!#1 N2186 P1369 ST_BINIT 11 0x800099 Int BE Pri
!#1 N2187 P1370 MEMBAR
!#1 N2188 P1371 BST 12 0x4000006f FP BE Pri
!#1 N2189 P1371 BST 13 0x40000070 FP BE Pri
!#A N2188 N2189
!#1 N2190 P1371 BST 14 0x40000071 FP BE Pri
!#1 N2191 P1372 MEMBAR
!#1 N2192 P1373 LD 6 -1 Int BE Pri
!#1 N2193 P1373 CAS 6 -1 N2192 0x80009a Int BE Pri
!#1 N2194 P1374 SWAP 15 0xffffffff 0x80009b Int BE Pri
!#1 N2195 P1375 REPLACEMENT 23 Int BE Pri
!#1 N2196 P1376 ST_BINIT 22 0x80009c Int BE Pri
!#1 N2197 P1377 MEMBAR
!#1 N2198 P1378 DWST_BINIT 21 0x80009d Int BE Pri
!#1 N2199 P1378 DWST_BINIT 22 0x80009e Int BE Pri
!#A N2198 N2199
!#1 N2200 P1379 MEMBAR
!#1 N2201 P1380 DWLD 9 -1 Int BE Pri
!#1 N2202 P1380 DWLD 10 -1 Int BE Pri
!#A N2201 N2202
!#1 N2203 P1381 ST 0 0x80009f Int BE Pri
!#1 N2204 P1382 ST_BINIT 22 0x8000a0 Int BE Pri
!#1 N2205 P1383 MEMBAR
!#1 N2206 P1384 ST 18 0x8000a1 Int BE Pri
!#1 N2207 P1385 MEMBAR
!#1 N2208 P1386 BSTC 0 0x40000072 FP BE Pri
!#1 N2209 P1386 BSTC 1 0x40000073 FP BE Pri
!#A N2208 N2209
!#1 N2210 P1386 BSTC 2 0x40000074 FP BE Pri
!#1 N2211 P1387 MEMBAR
!#1 N2212 P1388 ST 12 0x8000a2 Int BE Pri
!#1 N2213 P1389 MEMBAR
!#1 N2214 P1390 BST 0 0x40000075 FP BE Pri
!#1 N2215 P1390 BST 1 0x40000076 FP BE Pri
!#A N2214 N2215
!#1 N2216 P1390 BST 2 0x40000077 FP BE Pri
!#1 N2217 P1391 MEMBAR
!#1 N2218 P1392 LD 2 -1 Int BE Pri
!#1 N2219 P1393 LD 15 -1 Int BE Pri
!#1 N2220 P1393 CAS 15 -1 N2219 0x8000a3 Int BE Pri
!#1 N2221 P1394 LD 12 -1 Int BE Pri
!#1 N2222 P1395 MEMBAR
!#1 N2223 P1396 BLD 6 -1 FP BE Pri
!#1 N2224 P1396 BLD 7 -1 FP BE Pri
!#A N2223 N2224
!#1 N2225 P1396 BLD 8 -1 FP BE Pri
!#1 N2226 P1397 MEMBAR
!#1 N2227 P1398 LDD 6 -1 Int BE Pri
!#1 N2228 P1398 LDD 7 -1 Int BE Pri
!#A N2227 N2228
!#1 N2229 P1399 MEMBAR
!#1 N2230 P1400 BLD 21 -1 FP BE Pri
!#1 N2231 P1400 BLD 22 -1 FP BE Pri
!#A N2230 N2231
!#1 N2232 P1400 BLD 23 -1 FP BE Pri
!#1 N2233 P1401 MEMBAR
!#1 N2234 P1402 SWAP 10 0xffffffff 0x8000a4 Int BE Pri
!#1 N2235 P1403 LDD 18 -1 Int BE Pri
!#1 N2236 P1403 LDD 19 -1 Int BE Pri
!#A N2235 N2236
!#1 N2237 P1404 LD 6 -1 Int BE Pri
!#1 N2238 P1404 CAS 6 -1 N2237 0x8000a5 Int BE Pri
!#1 N2239 P1405 DWST_BINIT 0 0x8000a6 Int BE Pri
!#1 N2240 P1405 DWST_BINIT 1 0x8000a7 Int BE Pri
!#A N2239 N2240
!#1 N2241 P1406 MEMBAR
!#1 N2242 P1407 PREFETCH 1 Int BE Pri
!#1 N2243 P1408 ST 16 0x8000a8 Int BE Pri
!#1 N2244 P1409 DWST 3 0x8000a9 Int BE Pri
!#1 N2245 P1409 DWST 4 0x8000aa Int BE Pri
!#A N2244 N2245
!#1 N2246 P1410 MEMBAR
!#1 N2247 P1411 BLD 21 -1 FP BE Pri
!#1 N2248 P1411 BLD 22 -1 FP BE Pri
!#A N2247 N2248
!#1 N2249 P1411 BLD 23 -1 FP BE Pri
!#1 N2250 P1412 MEMBAR
!#1 N2251 P1413 DWST 6 0x8000ab Int BE Pri
!#1 N2252 P1413 DWST 7 0x8000ac Int BE Pri
!#A N2251 N2252
!#1 N2253 P1414 SWAP 18 0xffffffff 0x8000ad Int BE Pri
!#1 N2254 P1415 ST 1 0x8000ae Int BE Pri
!#1 N2255 P1416 ST 12 0x40000078 FP BE Pri
!#1 N2256 P1417 ST 22 0x8000af Int BE Pri
!#1 N2257 P1418 PREFETCH 10 Int BE Pri
!#1 N2258 P1419 DWLD 0 -1 Int BE Pri
!#1 N2259 P1419 DWLD 1 -1 Int BE Pri
!#A N2258 N2259
!#1 N2260 P1420 LD 14 -1 Int BE Pri
!#1 N2261 P1420 CAS 14 -1 N2260 0x8000b0 Int BE Pri
!#1 N2262 P1421 MEMBAR
!#1 N2263 P1422 BSTC 6 0x40000079 FP BE Pri
!#1 N2264 P1422 BSTC 7 0x4000007a FP BE Pri
!#A N2263 N2264
!#1 N2265 P1422 BSTC 8 0x4000007b FP BE Pri
!#1 N2266 P1423 MEMBAR
!#1 N2267 P1424 LD 9 -1 Int BE Pri
!#1 N2268 P1424 CAS 9 -1 N2267 0x8000b1 Int BE Pri
!#1 N2269 P1425 MEMBAR
!#1 N2270 P1426 BST 12 0x4000007c FP BE Pri
!#1 N2271 P1426 BST 13 0x4000007d FP BE Pri
!#A N2270 N2271
!#1 N2272 P1426 BST 14 0x4000007e FP BE Pri
!#1 N2273 P1427 MEMBAR
!#1 N2274 P1428 ST_BINIT 17 0x8000b2 Int BE Pri
!#1 N2275 P1429 MEMBAR
!#1 N2276 P1430 DWLD 18 -1 Int BE Pri
!#1 N2277 P1430 DWLD 19 -1 Int BE Pri
!#A N2276 N2277
!#1 N2278 P1431 DWLD 11 -1,0x0 Int BE Pri
!#1 N2279 P1431 CASX 11 -1,0x0 N2278 0x8000b3 Int BE Pri
!#1 N2280 P1432 DWLD 9 -1 FP BE Pri
!#1 N2281 P1432 DWLD 10 -1 FP BE Pri
!#A N2280 N2281
!#1 N2282 P1433 MEMBAR
!#1 N2283 P1434 BST 9 0x4000007f FP BE Pri
!#1 N2284 P1434 BST 10 0x40000080 FP BE Pri
!#A N2283 N2284
!#1 N2285 P1434 BST 11 0x40000081 FP BE Pri
!#1 N2286 P1435 MEMBAR
!#1 N2287 P1436 SWAP 4 0xffffffff 0x8000b4 Int BE Pri
!#1 N2288 P1437 DWLD 0 -1 Int BE Pri
!#1 N2289 P1437 DWLD 1 -1 Int BE Pri
!#A N2288 N2289
!#1 N2290 P1438 ST 17 0x8000b5 Int BE Pri
!#1 N2291 P1439 REPLACEMENT 18 Int BE Pri
!#1 N2292 P1440 MEMBAR
!#1 N2293 P1441 BLD 9 -1 FP BE Pri
!#1 N2294 P1441 BLD 10 -1 FP BE Pri
!#A N2293 N2294
!#1 N2295 P1441 BLD 11 -1 FP BE Pri
!#1 N2296 P1442 MEMBAR
!#1 N2297 P1443 BSTC 21 0x40000082 FP BE Pri
!#1 N2298 P1443 BSTC 22 0x40000083 FP BE Pri
!#A N2297 N2298
!#1 N2299 P1443 BSTC 23 0x40000084 FP BE Pri
!#1 N2300 P1444 MEMBAR
!#1 N2301 P1445 BST 18 0x40000085 FP BE Pri
!#1 N2302 P1445 BST 19 0x40000086 FP BE Pri
!#A N2301 N2302
!#1 N2303 P1445 BST 20 0x40000087 FP BE Pri
!#1 N2304 P1446 MEMBAR
!#1 N2305 P1447 PREFETCH 14 Int BE Pri
!#1 N2306 P1448 PREFETCH 17 Int BE Pri
!#1 N2307 P1449 LDD 0 -1 Int BE Pri
!#1 N2308 P1449 LDD 1 -1 Int BE Pri
!#A N2307 N2308
!#1 N2309 P1450 DWST_BINIT 3 0x8000b6 Int BE Pri
!#1 N2310 P1450 DWST_BINIT 4 0x8000b7 Int BE Pri
!#A N2309 N2310
!#1 N2311 P1451 MEMBAR
!#1 N2312 P1452 BST 6 0x40000088 FP BE Pri
!#1 N2313 P1452 BST 7 0x40000089 FP BE Pri
!#A N2312 N2313
!#1 N2314 P1452 BST 8 0x4000008a FP BE Pri
!#1 N2315 P1453 MEMBAR
!#1 N2316 P1454 SWAP 9 0xffffffff 0x8000b8 Int BE Pri
!#1 N2317 P1455 REPLACEMENT 1 Int BE Pri
!#1 N2318 P1456 MEMBAR
!#1 N2319 P1457 BST 3 0x4000008b FP BE Pri
!#1 N2320 P1457 BST 4 0x4000008c FP BE Pri
!#A N2319 N2320
!#1 N2321 P1457 BST 5 0x4000008d FP BE Pri
!#1 N2322 P1458 MEMBAR
!#1 N2323 P1459 BST 0 0x4000008e FP BE Pri
!#1 N2324 P1459 BST 1 0x4000008f FP BE Pri
!#A N2323 N2324
!#1 N2325 P1459 BST 2 0x40000090 FP BE Pri
!#1 N2326 P1460 MEMBAR
!#1 N2327 P1461 LD 6 -1 Int BE Pri
!#1 N2328 P1462 MEMBAR
!#1 N2329 P1463 BST 12 0x40000091 FP BE Pri
!#1 N2330 P1463 BST 13 0x40000092 FP BE Pri
!#A N2329 N2330
!#1 N2331 P1463 BST 14 0x40000093 FP BE Pri
!#1 N2332 P1464 MEMBAR
!#1 N2333 P1465 DWST 9 0x40000094 FP BE Pri
!#1 N2334 P1465 DWST 10 0x40000095 FP BE Pri
!#A N2333 N2334
!#1 N2335 P1466 MEMBAR
!#1 N2336 P1467 BST 3 0x40000096 FP BE Pri
!#1 N2337 P1467 BST 4 0x40000097 FP BE Pri
!#A N2336 N2337
!#1 N2338 P1467 BST 5 0x40000098 FP BE Pri
!#1 N2339 P1468 MEMBAR
!#1 N2340 P1469 PREFETCH 5 Int BE Pri
!#1 N2341 P1470 LD 16 -1 FP BE Pri
!#1 N2342 P1471 SWAP 15 0xffffffff 0x8000b9 Int BE Pri
!#1 N2343 P1472 SWAP 18 0xffffffff 0x8000ba Int BE Pri
!#1 N2344 P1473 DWLD 17 -1,0x0 Int BE Pri
!#1 N2345 P1473 CASX 17 -1,0x0 N2344 0x8000bb Int BE Pri
!#1 N2346 P1474 SWAP 14 0xffffffff 0x8000bc Int BE Pri
!#1 N2347 P1475 DWLD 9 -1 Int BE Pri
!#1 N2348 P1475 DWLD 10 -1 Int BE Pri
!#A N2347 N2348
!#1 N2349 P1476 DWST 6 0x8000bd Int BE Pri
!#1 N2350 P1476 DWST 7 0x8000be Int BE Pri
!#A N2349 N2350
!#1 N2351 P1477 DWST_BINIT 18 0x8000bf Int BE Pri
!#1 N2352 P1477 DWST_BINIT 19 0x8000c0 Int BE Pri
!#A N2351 N2352
!#1 N2353 P1478 MEMBAR
!#1 N2354 P1479 BLD 6 -1 FP BE Pri
!#1 N2355 P1479 BLD 7 -1 FP BE Pri
!#A N2354 N2355
!#1 N2356 P1479 BLD 8 -1 FP BE Pri
!#1 N2357 P1480 MEMBAR
!#1 N2358 P1481 DWLD 17 -1,0x0 Int LE Pri
!#1 N2359 P1481 CASX 17 -1,0x0 N2358 0x8000c1 Int LE Pri
!#1 N2360 P1482 REPLACEMENT 3 Int BE Pri
!#1 N2361 P1483 ST 10 0x40000099 FP BE Pri
!#1 N2362 P1484 MEMBAR
!#1 N2363 P1485 BLD 15 -1 FP BE Pri
!#1 N2364 P1485 BLD 16 -1 FP BE Pri
!#A N2363 N2364
!#1 N2365 P1485 BLD 17 -1 FP BE Pri
!#1 N2366 P1486 MEMBAR
!#1 N2367 P1487 DWLD 6 -1 Int BE Pri
!#1 N2368 P1487 DWLD 7 -1 Int BE Pri
!#A N2367 N2368
!#1 N2369 P1487 CASX 6 -1 N2367 0x8000c2 Int BE Pri
!#1 N2370 P1487 CASX 7 -1 N2368 0x8000c3 Int BE Pri
!#A N2369 N2370
!#1 N2371 P1488 ST_BINIT 6 0x8000c4 Int BE Pri
!#1 N2372 P1489 MEMBAR
!#1 N2373 P1490 DWST_BINIT 12 0x8000c5 Int BE Pri
!#1 N2374 P1490 DWST_BINIT 13 0x8000c6 Int BE Pri
!#A N2373 N2374
!#1 N2375 P1491 MEMBAR
!#1 N2376 P1492 REPLACEMENT 18 Int BE Pri
!#1 N2377 P1493 DWLD 8 -1 Int BE Pri
!#1 N2378 P1494 MEMBAR
!#1 N2379 P1495 BSTC 18 0x4000009a FP BE Pri
!#1 N2380 P1495 BSTC 19 0x4000009b FP BE Pri
!#A N2379 N2380
!#1 N2381 P1495 BSTC 20 0x4000009c FP BE Pri
!#1 N2382 P1496 MEMBAR
!#1 N2383 P1497 ST 19 0x8000c7 Int BE Pri
!#1 N2384 P1498 ST 12 0x8000c8 Int BE Pri
!#1 N2385 P1499 DWLD 5 -1,0x0 Int BE Pri
!#1 N2386 P1499 CASX 5 -1,0x0 N2385 0x8000c9 Int BE Pri
!#1 N2387 P1500 REPLACEMENT 11 Int BE Pri
!#1 N2388 P1501 MEMBAR
!#1 N2389 P1502 BST 0 0x4000009d FP BE Pri
!#1 N2390 P1502 BST 1 0x4000009e FP BE Pri
!#A N2389 N2390
!#1 N2391 P1502 BST 2 0x4000009f FP BE Pri
!#1 N2392 P1503 MEMBAR
!#1 N2393 P1504 SWAP 3 0xffffffff 0x8000ca Int BE Pri
!#1 N2394 P1505 ST_BINIT 10 0x8000cb Int BE Pri
!#1 N2395 P1506 MEMBAR
!#1 N2396 P1507 LDD 15 -1 Int BE Pri
!#1 N2397 P1507 LDD 16 -1 Int BE Pri
!#A N2396 N2397
!#1 N2398 P1508 DWLD 5 -1 Int BE Pri
!#1 N2399 P1509 DWLD 14 -1 Int BE Pri
!#1 N2400 P1510 REPLACEMENT 12 Int BE Pri
!#1 N2401 P1511 ST 15 0x8000cc Int BE Pri
!#1 N2402 P1512 LD 3 -1 Int BE Pri
!#1 N2403 P1513 PREFETCH 3 Int BE Pri
!#1 N2404 P1514 MEMBAR
!#1 N2405 P1515 BSTC 0 0x400000a0 FP BE Pri
!#1 N2406 P1515 BSTC 1 0x400000a1 FP BE Pri
!#A N2405 N2406
!#1 N2407 P1515 BSTC 2 0x400000a2 FP BE Pri
!#1 N2408 P1516 MEMBAR
!#1 N2409 P1517 BSTC 12 0x400000a3 FP BE Pri
!#1 N2410 P1517 BSTC 13 0x400000a4 FP BE Pri
!#A N2409 N2410
!#1 N2411 P1517 BSTC 14 0x400000a5 FP BE Pri
!#1 N2412 P1518 MEMBAR
!#1 N2413 P1519 BSTC 3 0x400000a6 FP BE Pri
!#1 N2414 P1519 BSTC 4 0x400000a7 FP BE Pri
!#A N2413 N2414
!#1 N2415 P1519 BSTC 5 0x400000a8 FP BE Pri
!#1 N2416 P1520 MEMBAR
!#1 N2417 P1521 ST 2 0x400000a9 FP BE Pri
!#1 N2418 P1522 MEMBAR
!#1 N2419 P1523 BLD 9 -1 FP BE Pri
!#1 N2420 P1523 BLD 10 -1 FP BE Pri
!#A N2419 N2420
!#1 N2421 P1523 BLD 11 -1 FP BE Pri
!#1 N2422 P1524 MEMBAR
!#1 N2423 P1525 ST 21 0x8000cd Int BE Pri
!#1 N2424 P1526 LDD 12 -1 Int BE Pri
!#1 N2425 P1526 LDD 13 -1 Int BE Pri
!#A N2424 N2425
!#1 N2426 P1527 MEMBAR
!#1 N2427 P1528 BSTC 3 0x400000aa FP BE Pri
!#1 N2428 P1528 BSTC 4 0x400000ab FP BE Pri
!#A N2427 N2428
!#1 N2429 P1528 BSTC 5 0x400000ac FP BE Pri
!#1 N2430 P1529 MEMBAR
!#1 N2431 P1530 BST 12 0x400000ad FP BE Pri
!#1 N2432 P1530 BST 13 0x400000ae FP BE Pri
!#A N2431 N2432
!#1 N2433 P1530 BST 14 0x400000af FP BE Pri
!#1 N2434 P1531 MEMBAR
!#1 N2435 P1532 ST 6 0x8000ce Int BE Pri
!#1 N2436 P1533 MEMBAR
!#1 N2437 P1534 BLD 0 -1 FP BE Pri
!#1 N2438 P1534 BLD 1 -1 FP BE Pri
!#A N2437 N2438
!#1 N2439 P1534 BLD 2 -1 FP BE Pri
!#1 N2440 P1535 MEMBAR
!#1 N2441 P1536 SWAP 5 0xffffffff 0x8000cf Int BE Pri
!#1 N2442 P1537 DWLD 18 -1 Int BE Pri
!#1 N2443 P1537 DWLD 19 -1 Int BE Pri
!#A N2442 N2443
!#1 N2444 P1537 CASX 18 -1 N2442 0x8000d0 Int BE Pri
!#1 N2445 P1537 CASX 19 -1 N2443 0x8000d1 Int BE Pri
!#A N2444 N2445
!#1 N2446 P1538 ST_BINIT 14 0x8000d2 Int BE Pri
!#1 N2447 P1539 MEMBAR
!#1 N2448 P1540 LD 15 -1 Int BE Pri
!#1 N2449 P1541 DWLD 11 -1,0x0 Int BE Pri
!#1 N2450 P1541 CASX 11 -1,0x0 N2449 0x8000d3 Int BE Pri
!#1 N2451 P1542 MEMBAR
!#1 N2452 P1543 BSTC 6 0x400000b0 FP BE Pri
!#1 N2453 P1543 BSTC 7 0x400000b1 FP BE Pri
!#A N2452 N2453
!#1 N2454 P1543 BSTC 8 0x400000b2 FP BE Pri
!#1 N2455 P1544 MEMBAR
!#1 N2456 P1545 DWLD 0 -1 Int BE Pri
!#1 N2457 P1545 DWLD 1 -1 Int BE Pri
!#A N2456 N2457
!#1 N2458 P1546 REPLACEMENT 4 Int BE Pri
!#1 N2459 P1547 DWST 9 0x400000b3 FP BE Pri
!#1 N2460 P1547 DWST 10 0x400000b4 FP BE Pri
!#A N2459 N2460
!#1 N2461 P1548 MEMBAR
!#1 N2462 P1549 BST 18 0x400000b5 FP BE Pri
!#1 N2463 P1549 BST 19 0x400000b6 FP BE Pri
!#A N2462 N2463
!#1 N2464 P1549 BST 20 0x400000b7 FP BE Pri
!#1 N2465 P1550 MEMBAR
!#1 N2466 P1551 LDD 6 -1 Int BE Pri
!#1 N2467 P1551 LDD 7 -1 Int BE Pri
!#A N2466 N2467
!#1 N2468 P1552 MEMBAR
!#1 N2469 P1553 BSTC 18 0x400000b8 FP BE Pri
!#1 N2470 P1553 BSTC 19 0x400000b9 FP BE Pri
!#A N2469 N2470
!#1 N2471 P1553 BSTC 20 0x400000ba FP BE Pri
!#1 N2472 P1554 MEMBAR
!#1 N2473 P1555 BST 3 0x400000bb FP BE Pri
!#1 N2474 P1555 BST 4 0x400000bc FP BE Pri
!#A N2473 N2474
!#1 N2475 P1555 BST 5 0x400000bd FP BE Pri
!#1 N2476 P1556 MEMBAR
!#1 N2477 P1557 LDD 11 -1 Int BE Pri
!#1 N2478 P1558 REPLACEMENT 6 Int BE Pri
!#1 N2479 P1559 MEMBAR
!#1 N2480 P1560 BSTC 15 0x400000be FP BE Pri
!#1 N2481 P1560 BSTC 16 0x400000bf FP BE Pri
!#A N2480 N2481
!#1 N2482 P1560 BSTC 17 0x400000c0 FP BE Pri
!#1 N2483 P1561 MEMBAR
!#1 N2484 P1562 BSTC 12 0x400000c1 FP BE Pri
!#1 N2485 P1562 BSTC 13 0x400000c2 FP BE Pri
!#A N2484 N2485
!#1 N2486 P1562 BSTC 14 0x400000c3 FP BE Pri
!#1 N2487 P1563 MEMBAR
!#1 N2488 P1564 LD 9 -1 Int BE Pri
!#1 N2489 P1564 CAS 9 -1 N2488 0x8000d4 Int BE Pri
!#1 N2490 P1565 ST 17 0x8000d5 Int BE Pri
!#1 N2491 P1566 LD 20 -1 Int BE Pri
!#1 N2492 P1567 LD 19 -1 Int BE Pri
!#1 N2493 P1568 DWLD 0 -1 Int BE Pri
!#1 N2494 P1568 DWLD 1 -1 Int BE Pri
!#A N2493 N2494
!#1 N2495 P1568 CASX 0 -1 N2493 0x8000d6 Int BE Pri
!#1 N2496 P1568 CASX 1 -1 N2494 0x8000d7 Int BE Pri
!#A N2495 N2496
!#1 N2497 P1569 ST_BINIT 11 0x8000d8 Int BE Pri
!#1 N2498 P1570 MEMBAR
!#1 N2499 P1571 SWAP 11 0xffffffff 0x8000d9 Int BE Pri
!#1 N2500 P1572 LD 7 -1 Int BE Pri
!#1 N2501 P1573 MEMBAR
!#1 N2502 P1574 BLD 9 -1 FP BE Pri
!#1 N2503 P1574 BLD 10 -1 FP BE Pri
!#A N2502 N2503
!#1 N2504 P1574 BLD 11 -1 FP BE Pri
!#1 N2505 P1575 MEMBAR
!#1 N2506 P1576 DWLD 18 -1 FP BE Pri
!#1 N2507 P1576 DWLD 19 -1 FP BE Pri
!#A N2506 N2507
!#1 N2508 P1577 ST 1 0x8000da Int BE Pri
!#1 N2509 P1578 LD 8 -1 Int BE Pri
!#1 N2510 P1578 CAS 8 -1 N2509 0x8000db Int BE Pri
!#1 N2511 P1579 SWAP 16 0xffffffff 0x8000dc Int BE Pri
!#1 N2512 P1580 ST_BINIT 23 0x8000dd Int BE Pri
!#1 N2513 P1581 MEMBAR
!#1 N2514 P1582 DWLD 0 -1 Int BE Pri
!#1 N2515 P1582 DWLD 1 -1 Int BE Pri
!#A N2514 N2515
!#1 N2516 P1583 PREFETCH 17 Int BE Pri
!#1 N2517 P1584 LD 3 -1 Int LE Pri
!#1 N2518 P1585 ST 17 0x8000de Int BE Pri
!#1 N2519 P1586 LD 21 -1 Int BE Pri
!#1 N2520 P1586 CAS 21 -1 N2519 0x8000df Int BE Pri
!#1 N2521 P1587 MEMBAR
!#1 N2522 P1588 BSTC 3 0x400000c4 FP BE Pri
!#1 N2523 P1588 BSTC 4 0x400000c5 FP BE Pri
!#A N2522 N2523
!#1 N2524 P1588 BSTC 5 0x400000c6 FP BE Pri
!#1 N2525 P1589 MEMBAR
!#1 N2526 P1590 LD 15 -1 Int BE Pri
!#1 N2527 P1590 CAS 15 -1 N2526 0x8000e0 Int BE Pri
!#1 N2528 P1591 ST_BINIT 7 0x8000e1 Int BE Pri
!#1 N2529 P1592 MEMBAR
!#1 N2530 P1593 BLD 15 -1 FP BE Pri
!#1 N2531 P1593 BLD 16 -1 FP BE Pri
!#A N2530 N2531
!#1 N2532 P1593 BLD 17 -1 FP BE Pri
!#1 N2533 P1594 MEMBAR
!#1 N2534 P1595 LDD 9 -1 Int BE Pri
!#1 N2535 P1595 LDD 10 -1 Int BE Pri
!#A N2534 N2535
!#1 N2536 P1596 ST 22 0x8000e2 Int BE Pri
!#1 N2537 P1597 LD 7 -1 Int BE Pri
!#1 N2538 P1597 CAS 7 -1 N2537 0x8000e3 Int BE Pri
!#1 N2539 P1598 LD 22 -1 Int BE Pri
!#1 N2540 P1598 CAS 22 -1 N2539 0x8000e4 Int BE Pri
!#1 N2541 P1599 LD 12 -1 Int BE Pri
!#1 N2542 P1600 DWST_BINIT 0 0x8000e5 Int BE Pri
!#1 N2543 P1600 DWST_BINIT 1 0x8000e6 Int BE Pri
!#A N2542 N2543
!#1 N2544 P1601 MEMBAR
!#1 N2545 P1602 DWST_BINIT 15 0x8000e7 Int BE Pri
!#1 N2546 P1602 DWST_BINIT 16 0x8000e8 Int BE Pri
!#A N2545 N2546
!#1 N2547 P1603 MEMBAR
!#1 N2548 P1604 DWST 2 0x8000e9 Int BE Pri
!#1 N2549 P1605 MEMBAR
!#1 N2550 P1606 BST 18 0x400000c7 FP BE Pri
!#1 N2551 P1606 BST 19 0x400000c8 FP BE Pri
!#A N2550 N2551
!#1 N2552 P1606 BST 20 0x400000c9 FP BE Pri
!#1 N2553 P1607 MEMBAR
!#1 N2554 P1608 LDD 11 -1 Int BE Pri
!#1 N2555 P1609 ST_BINIT 0 0x8000ea Int BE Pri
!#1 N2556 P1610 MEMBAR
!#1 N2557 P1611 LD 19 -1 FP BE Pri
!#1 N2558 P1612 PREFETCH 22 Int BE Pri
!#1 N2559 P1613 PREFETCH 14 Int BE Pri
!#1 N2560 P1614 SWAP 7 0xffffffff 0x8000eb Int BE Pri
!#1 N2561 P1615 DWST_BINIT 6 0x8000ec Int BE Pri
!#1 N2562 P1615 DWST_BINIT 7 0x8000ed Int BE Pri
!#A N2561 N2562
!#1 N2563 P1616 MEMBAR
!#1 N2564 P1617 DWLD 6 -1 Int BE Pri
!#1 N2565 P1617 DWLD 7 -1 Int BE Pri
!#A N2564 N2565
!#1 N2566 P1618 LDD 5 -1 Int LE Pri
!#1 N2567 P1619 DWST 3 0x400000ca FP BE Pri
!#1 N2568 P1619 DWST 4 0x400000cb FP BE Pri
!#A N2567 N2568
!#1 N2569 P1620 DWST_BINIT 17 0x8000ee Int BE Pri
!#1 N2570 P1621 MEMBAR
!#1 N2571 P1622 DWLD 2 -1 Int BE Pri
!#1 N2572 P1623 MEMBAR
!#1 N2573 P1624 BLD 3 -1 FP BE Pri
!#1 N2574 P1624 BLD 4 -1 FP BE Pri
!#A N2573 N2574
!#1 N2575 P1624 BLD 5 -1 FP BE Pri
!#1 N2576 P1625 MEMBAR
!#1 N2577 P1626 LDD 18 -1 Int BE Pri
!#1 N2578 P1626 LDD 19 -1 Int BE Pri
!#A N2577 N2578
!#1 N2579 P1627 MEMBAR
!#1 N2580 P1628 BSTC 18 0x400000cc FP BE Pri
!#1 N2581 P1628 BSTC 19 0x400000cd FP BE Pri
!#A N2580 N2581
!#1 N2582 P1628 BSTC 20 0x400000ce FP BE Pri
!#1 N2583 P1629 MEMBAR
!#1 N2584 P1630 LD 16 -1 Int BE Pri
!#1 N2585 P1631 MEMBAR
!#1 N2586 P1632 BLD 0 -1 FP BE Pri
!#1 N2587 P1632 BLD 1 -1 FP BE Pri
!#A N2586 N2587
!#1 N2588 P1632 BLD 2 -1 FP BE Pri
!#1 N2589 P1633 MEMBAR
!#1 N2590 P1634 LD 4 -1 Int BE Pri
!#1 N2591 P1634 CAS 4 -1 N2590 0x8000ef Int BE Pri
!#1 N2592 P1635 ST_BINIT 1 0x8000f0 Int BE Pri
!#1 N2593 P1636 MEMBAR
!#1 N2594 P1637 BSTC 9 0x400000cf FP BE Pri
!#1 N2595 P1637 BSTC 10 0x400000d0 FP BE Pri
!#A N2594 N2595
!#1 N2596 P1637 BSTC 11 0x400000d1 FP BE Pri
!#1 N2597 P1638 MEMBAR
!#1 N2598 P1639 DWLD 6 -1 Int BE Pri
!#1 N2599 P1639 DWLD 7 -1 Int BE Pri
!#A N2598 N2599
!#1 N2600 P1639 CASX 6 -1 N2598 0x8000f1 Int BE Pri
!#1 N2601 P1639 CASX 7 -1 N2599 0x8000f2 Int BE Pri
!#A N2600 N2601
!#1 N2602 P1640 PREFETCH 0 Int BE Pri
!#1 N2603 P1641 SWAP 1 0xffffffff 0x8000f3 Int BE Pri
!#1 N2604 P1642 MEMBAR
!#1 N2605 P1643 BST 3 0x400000d2 FP BE Pri
!#1 N2606 P1643 BST 4 0x400000d3 FP BE Pri
!#A N2605 N2606
!#1 N2607 P1643 BST 5 0x400000d4 FP BE Pri
!#1 N2608 P1644 MEMBAR
!#1 N2609 P1645 ST 18 0x8000f4 Int BE Pri
!#1 N2610 P1646 PREFETCH 13 Int LE Pri
!#1 N2611 P1647 DWLD 18 -1 Int LE Pri
!#1 N2612 P1647 DWLD 19 -1 Int LE Pri
!#A N2611 N2612
!#1 N2613 P1647 CASX 18 -1 N2611 0x8000f5 Int LE Pri
!#1 N2614 P1647 CASX 19 -1 N2612 0x8000f6 Int LE Pri
!#A N2613 N2614
!#1 N2615 P1648 DWST 0 0x8000f7 Int BE Pri
!#1 N2616 P1648 DWST 1 0x8000f8 Int BE Pri
!#A N2615 N2616
!#1 N2617 P1649 ST_BINIT 13 0x8000f9 Int BE Pri
!#1 N2618 P1650 MEMBAR
!#1 N2619 P1651 DWLD 18 -1 Int BE Pri
!#1 N2620 P1651 DWLD 19 -1 Int BE Pri
!#A N2619 N2620
!#1 N2621 P1651 CASX 18 -1 N2619 0x8000fa Int BE Pri
!#1 N2622 P1651 CASX 19 -1 N2620 0x8000fb Int BE Pri
!#A N2621 N2622
!#1 N2623 P1652 MEMBAR
!#1 N2624 P1653 BST 12 0x400000d5 FP BE Pri
!#1 N2625 P1653 BST 13 0x400000d6 FP BE Pri
!#A N2624 N2625
!#1 N2626 P1653 BST 14 0x400000d7 FP BE Pri
!#1 N2627 P1654 MEMBAR
!#1 N2628 P1655 ST_BINIT 11 0x8000fc Int BE Pri
!#1 N2629 P1656 MEMBAR
!#1 N2630 P1657 ST_BINIT 14 0x8000fd Int BE Pri
!#1 N2631 P1658 MEMBAR
!#1 N2632 P1659 ST 21 0x8000fe Int BE Pri
!#1 N2633 P1660 REPLACEMENT 12 Int BE Pri
!#1 N2634 P1661 LD 1 -1 Int BE Pri
!#1 N2635 P1661 CAS 1 -1 N2634 0x8000ff Int BE Pri
!#1 N2636 P1662 MEMBAR
!#1 N2637 P1663 BSTC 3 0x400000d8 FP BE Pri
!#1 N2638 P1663 BSTC 4 0x400000d9 FP BE Pri
!#A N2637 N2638
!#1 N2639 P1663 BSTC 5 0x400000da FP BE Pri
!#1 N2640 P1664 MEMBAR
!#1 N2641 P1665 DWLD 15 -1 Int BE Pri
!#1 N2642 P1665 DWLD 16 -1 Int BE Pri
!#A N2641 N2642
!#1 N2643 P1666 LD 3 -1 Int BE Pri
!#1 N2644 P1667 DWST_BINIT 3 0x800100 Int BE Pri
!#1 N2645 P1667 DWST_BINIT 4 0x800101 Int BE Pri
!#A N2644 N2645
!#1 N2646 P1668 MEMBAR
!#1 N2647 P1669 DWST 3 0x800102 Int BE Pri
!#1 N2648 P1669 DWST 4 0x800103 Int BE Pri
!#A N2647 N2648
!#1 N2649 P1670 DWST 0 0x800104 Int BE Pri
!#1 N2650 P1670 DWST 1 0x800105 Int BE Pri
!#A N2649 N2650
!#1 N2651 P1671 MEMBAR
!#1 N2652 P1672 BSTC 3 0x400000db FP BE Pri
!#1 N2653 P1672 BSTC 4 0x400000dc FP BE Pri
!#A N2652 N2653
!#1 N2654 P1672 BSTC 5 0x400000dd FP BE Pri
!#1 N2655 P1673 MEMBAR
!#1 N2656 P1674 DWLD 3 -1 Int BE Pri
!#1 N2657 P1674 DWLD 4 -1 Int BE Pri
!#A N2656 N2657
!#1 N2658 P1675 DWST_BINIT 2 0x800106 Int BE Pri
!#1 N2659 P1676 MEMBAR
!#1 N2660 P1677 ST_BINIT 1 0x800107 Int BE Pri
!#1 N2661 P1678 MEMBAR
!#1 N2662 P1679 LD 3 -1 Int BE Pri
!#1 N2663 P1680 MEMBAR
!#1 N2664 P1681 BLD 18 -1 FP BE Pri
!#1 N2665 P1681 BLD 19 -1 FP BE Pri
!#A N2664 N2665
!#1 N2666 P1681 BLD 20 -1 FP BE Pri
!#1 N2667 P1682 MEMBAR
!#1 N2668 P1683 DWLD 18 -1 Int BE Pri
!#1 N2669 P1683 DWLD 19 -1 Int BE Pri
!#A N2668 N2669
!#1 N2670 P1684 LD 5 -1 Int BE Pri
!#1 N2671 P1685 LDD 14 -1 Int BE Pri
!#1 N2672 P1686 ST 15 0x800108 Int BE Pri
!#1 N2673 P1687 PREFETCH 13 Int BE Pri
!#1 N2674 P1688 ST_BINIT 6 0x800109 Int BE Pri
!#1 N2675 P1689 MEMBAR
!#1 N2676 P1690 DWLD 12 -1 Int BE Pri
!#1 N2677 P1690 DWLD 13 -1 Int BE Pri
!#A N2676 N2677
!#1 N2678 P1691 LD 14 -1 Int BE Pri
!#1 N2679 P1692 MEMBAR
!#1 N2680 P1693 BST 0 0x400000de FP BE Pri
!#1 N2681 P1693 BST 1 0x400000df FP BE Pri
!#A N2680 N2681
!#1 N2682 P1693 BST 2 0x400000e0 FP BE Pri
!#1 N2683 P1694 MEMBAR
!#1 N2684 P1695 BST 6 0x400000e1 FP BE Pri
!#1 N2685 P1695 BST 7 0x400000e2 FP BE Pri
!#A N2684 N2685
!#1 N2686 P1695 BST 8 0x400000e3 FP BE Pri
!#1 N2687 P1696 MEMBAR
!#1 N2688 P1697 ST 10 0x80010a Int BE Pri
!#1 N2689 P1698 DWST 5 0x80010b Int BE Pri
!#1 N2690 P1699 DWST 20 0x80010c Int BE Pri
!#1 N2691 P1700 DWST_BINIT 11 0x80010d Int BE Pri
!#1 N2692 P1701 MEMBAR
!#1 N2693 P1702 BSTC 6 0x400000e4 FP BE Pri
!#1 N2694 P1702 BSTC 7 0x400000e5 FP BE Pri
!#A N2693 N2694
!#1 N2695 P1702 BSTC 8 0x400000e6 FP BE Pri
!#1 N2696 P1703 MEMBAR
!#1 N2697 P1704 LD 2 -1 Int BE Pri
!#1 N2698 P1704 CAS 2 -1 N2697 0x80010e Int BE Pri
!#1 N2699 P1705 MEMBAR
!#1 N2700 P1706 BST 6 0x400000e7 FP BE Pri
!#1 N2701 P1706 BST 7 0x400000e8 FP BE Pri
!#A N2700 N2701
!#1 N2702 P1706 BST 8 0x400000e9 FP BE Pri
!#1 N2703 P1707 MEMBAR
!#1 N2704 P1708 PREFETCH 1 Int BE Pri
!#1 N2705 P1709 SWAP 23 0xffffffff 0x80010f Int BE Pri
!#1 N2706 P1710 ST_BINIT 4 0x800110 Int BE Pri
!#1 N2707 P1711 MEMBAR
!#1 N2708 P1712 DWST_BINIT 15 0x800111 Int BE Pri
!#1 N2709 P1712 DWST_BINIT 16 0x800112 Int BE Pri
!#A N2708 N2709
!#1 N2710 P1713 MEMBAR
!#1 N2711 P1714 BST 6 0x400000ea FP BE Pri
!#1 N2712 P1714 BST 7 0x400000eb FP BE Pri
!#A N2711 N2712
!#1 N2713 P1714 BST 8 0x400000ec FP BE Pri
!#1 N2714 P1715 MEMBAR
!#1 N2715 P1716 LDD 18 -1 Int BE Pri
!#1 N2716 P1716 LDD 19 -1 Int BE Pri
!#A N2715 N2716
!#1 N2717 P1717 SWAP 1 0xffffffff 0x800113 Int BE Pri
!#1 N2718 P1718 MEMBAR
!#1 N2719 P1719 BLD 21 -1 FP BE Pri
!#1 N2720 P1719 BLD 22 -1 FP BE Pri
!#A N2719 N2720
!#1 N2721 P1719 BLD 23 -1 FP BE Pri
!#1 N2722 P1720 MEMBAR
!#1 N2723 P1721 ST_BINIT 20 0x800114 Int BE Pri
!#1 N2724 P1722 MEMBAR
!#1 N2725 P1723 BSTC 3 0x400000ed FP BE Pri
!#1 N2726 P1723 BSTC 4 0x400000ee FP BE Pri
!#A N2725 N2726
!#1 N2727 P1723 BSTC 5 0x400000ef FP BE Pri
!#1 N2728 P1724 MEMBAR
!#1 N2729 P1725 SWAP 0 0xffffffff 0x800115 Int BE Pri
!#1 N2730 P1726 MEMBAR
!#1 N2731 P1727 BSTC 6 0x400000f0 FP BE Pri
!#1 N2732 P1727 BSTC 7 0x400000f1 FP BE Pri
!#A N2731 N2732
!#1 N2733 P1727 BSTC 8 0x400000f2 FP BE Pri
!#1 N2734 P1728 MEMBAR
!#1 N2735 P1729 REPLACEMENT 8 Int BE Pri
!#1 N2736 P1730 LD 21 -1 Int BE Pri
!#1 N2737 P1730 CAS 21 -1 N2736 0x800116 Int BE Pri
!#1 N2738 P1731 DWLD 20 -1 Int BE Pri
!#1 N2739 P1732 DWST 9 0x800117 Int BE Pri
!#1 N2740 P1732 DWST 10 0x800118 Int BE Pri
!#A N2739 N2740
!#1 N2741 P1733 DWST 20 0x800119 Int BE Pri
!#1 N2742 P1734 DWST_BINIT 21 0x80011a Int BE Pri
!#1 N2743 P1734 DWST_BINIT 22 0x80011b Int BE Pri
!#A N2742 N2743
!#1 N2744 P1735 MEMBAR
!#1 N2745 P1736 DWST 18 0x80011c Int BE Pri
!#1 N2746 P1736 DWST 19 0x80011d Int BE Pri
!#A N2745 N2746
!#1 N2747 P1737 DWLD 18 -1 Int BE Pri
!#1 N2748 P1737 DWLD 19 -1 Int BE Pri
!#A N2747 N2748
!#1 N2749 P1738 PREFETCH 15 Int BE Pri
!#1 N2750 P1739 MEMBAR
!#1 N2751 P1740 BST 21 0x400000f3 FP BE Pri
!#1 N2752 P1740 BST 22 0x400000f4 FP BE Pri
!#A N2751 N2752
!#1 N2753 P1740 BST 23 0x400000f5 FP BE Pri
!#1 N2754 P1741 MEMBAR
!#1 N2755 P1742 LDD 15 -1 Int BE Pri
!#1 N2756 P1742 LDD 16 -1 Int BE Pri
!#A N2755 N2756
!#1 N2757 P1743 MEMBAR
!#1 N2758 P1744 BSTC 9 0x400000f6 FP BE Pri
!#1 N2759 P1744 BSTC 10 0x400000f7 FP BE Pri
!#A N2758 N2759
!#1 N2760 P1744 BSTC 11 0x400000f8 FP BE Pri
!#1 N2761 P1745 MEMBAR
!#1 N2762 P1746 BLD 12 -1 FP BE Pri
!#1 N2763 P1746 BLD 13 -1 FP BE Pri
!#A N2762 N2763
!#1 N2764 P1746 BLD 14 -1 FP BE Pri
!#1 N2765 P1747 MEMBAR
!#1 N2766 P1748 DWST_BINIT 0 0x80011e Int BE Pri
!#1 N2767 P1748 DWST_BINIT 1 0x80011f Int BE Pri
!#A N2766 N2767
!#1 N2768 P1749 MEMBAR
!#1 N2769 P1750 DWST 21 0x800120 Int BE Pri
!#1 N2770 P1750 DWST 22 0x800121 Int BE Pri
!#A N2769 N2770
!#1 N2771 P1751 MEMBAR
!#1 N2772 P1752 BSTC 0 0x400000f9 FP BE Pri
!#1 N2773 P1752 BSTC 1 0x400000fa FP BE Pri
!#A N2772 N2773
!#1 N2774 P1752 BSTC 2 0x400000fb FP BE Pri
!#1 N2775 P1753 MEMBAR
!#1 N2776 P1754 PREFETCH 3 Int BE Pri
!#1 N2777 P1755 DWST 15 0x400000fc FP BE Pri
!#1 N2778 P1755 DWST 16 0x400000fd FP BE Pri
!#A N2777 N2778
!#1 N2779 P1756 DWST_BINIT 8 0x800122 Int BE Pri
!#1 N2780 P1757 MEMBAR
!#1 N2781 P1758 ST 9 0x800123 Int BE Pri
!#1 N2782 P1759 DWST 6 0x800124 Int BE Pri
!#1 N2783 P1759 DWST 7 0x800125 Int BE Pri
!#A N2782 N2783
!#1 N2784 P1760 LD 18 -1 FP BE Pri
!#1 N2785 P1761 DWST_BINIT 6 0x800126 Int BE Pri
!#1 N2786 P1761 DWST_BINIT 7 0x800127 Int BE Pri
!#A N2785 N2786
!#1 N2787 P1762 MEMBAR
!#1 N2788 P1763 SWAP 8 0xffffffff 0x800128 Int BE Pri
!#1 N2789 P1764 ST 23 0x400000fe FP BE Pri
!#1 N2790 P1765 ST 17 0x800129 Int BE Pri
!#1 N2791 P1766 SWAP 5 0xffffffff 0x80012a Int BE Pri
!#1 N2792 P1767 DWST_BINIT 11 0x80012b Int BE Pri
!#1 N2793 P1768 MEMBAR
!#1 N2794 P1769 BST 21 0x400000ff FP BE Pri
!#1 N2795 P1769 BST 22 0x40000100 FP BE Pri
!#A N2794 N2795
!#1 N2796 P1769 BST 23 0x40000101 FP BE Pri
!#1 N2797 P1770 MEMBAR
!#1 N2798 P1771 LDD 11 -1 Int BE Pri
!#1 N2799 P1772 LD 20 -1 Int BE Pri
!#1 N2800 P1772 CAS 20 -1 N2799 0x80012c Int BE Pri
!#1 N2801 P1773 DWST 0 0x80012d Int BE Pri
!#1 N2802 P1773 DWST 1 0x80012e Int BE Pri
!#A N2801 N2802
!#1 N2803 P1774 LDD 3 -1 Int BE Pri
!#1 N2804 P1774 LDD 4 -1 Int BE Pri
!#A N2803 N2804
!#1 N2805 P1775 MEMBAR
!#1 N2806 P1776 BST 12 0x40000102 FP BE Pri
!#1 N2807 P1776 BST 13 0x40000103 FP BE Pri
!#A N2806 N2807
!#1 N2808 P1776 BST 14 0x40000104 FP BE Pri
!#1 N2809 P1777 MEMBAR
!#1 N2810 P1778 PREFETCH 2 Int BE Pri
!#1 N2811 P1779 LDD 3 -1 Int BE Pri
!#1 N2812 P1779 LDD 4 -1 Int BE Pri
!#A N2811 N2812
!#1 N2813 P1780 MEMBAR
!#1 N2814 P1781 BST 12 0x40000105 FP BE Pri
!#1 N2815 P1781 BST 13 0x40000106 FP BE Pri
!#A N2814 N2815
!#1 N2816 P1781 BST 14 0x40000107 FP BE Pri
!#1 N2817 P1782 MEMBAR
!#1 N2818 P1783 REPLACEMENT 0 Int BE Pri
!#1 N2819 P1784 MEMBAR
!#1 N2820 P1785 BST 9 0x40000108 FP BE Pri
!#1 N2821 P1785 BST 10 0x40000109 FP BE Pri
!#A N2820 N2821
!#1 N2822 P1785 BST 11 0x4000010a FP BE Pri
!#1 N2823 P1786 MEMBAR
!#1 N2824 P1787 BSTC 6 0x4000010b FP BE Pri
!#1 N2825 P1787 BSTC 7 0x4000010c FP BE Pri
!#A N2824 N2825
!#1 N2826 P1787 BSTC 8 0x4000010d FP BE Pri
!#1 N2827 P1788 MEMBAR
!#1 N2828 P1789 ST_BINIT 5 0x80012f Int BE Pri
!#1 N2829 P1790 MEMBAR
!#1 N2830 P1791 SWAP 6 0xffffffff 0x800130 Int BE Pri
!#1 N2831 P1792 MEMBAR
!#1 N2832 P1793 BSTC 0 0x4000010e FP BE Pri
!#1 N2833 P1793 BSTC 1 0x4000010f FP BE Pri
!#A N2832 N2833
!#1 N2834 P1793 BSTC 2 0x40000110 FP BE Pri
!#1 N2835 P1794 MEMBAR
!#1 N2836 P1795 DWST 11 0x800131 Int BE Pri
!#1 N2837 P1796 LD 7 -1 Int BE Pri
!#1 N2838 P1796 CAS 7 -1 N2837 0x800132 Int BE Pri
!#1 N2839 P1797 LD 23 -1 Int BE Pri
!#1 N2840 P1797 CAS 23 -1 N2839 0x800133 Int BE Pri
!#1 N2841 P1798 MEMBAR
!#1 N2842 P1799 BST 6 0x40000111 FP BE Pri
!#1 N2843 P1799 BST 7 0x40000112 FP BE Pri
!#A N2842 N2843
!#1 N2844 P1799 BST 8 0x40000113 FP BE Pri
!#1 N2845 P1800 MEMBAR
!#1 N2846 P1801 REPLACEMENT 18 Int BE Pri
!#1 N2847 P1802 MEMBAR
!#1 N2848 P1803 BST 6 0x40000114 FP BE Pri
!#1 N2849 P1803 BST 7 0x40000115 FP BE Pri
!#A N2848 N2849
!#1 N2850 P1803 BST 8 0x40000116 FP BE Pri
!#1 N2851 P1804 MEMBAR
!#1 N2852 P1805 ST_BINIT 11 0x800134 Int BE Pri
!#1 N2853 P1806 MEMBAR
!#1 N2854 P1807 ST_BINIT 12 0x800135 Int BE Pri
!#1 N2855 P1808 MEMBAR
!#1 N2856 P1809 PREFETCH 2 Int BE Pri
!#1 N2857 P1810 MEMBAR
!#1 N2858 P1811 BST 18 0x40000117 FP BE Pri
!#1 N2859 P1811 BST 19 0x40000118 FP BE Pri
!#A N2858 N2859
!#1 N2860 P1811 BST 20 0x40000119 FP BE Pri
!#1 N2861 P1812 MEMBAR
!#1 N2862 P1813 ST_BINIT 22 0x800136 Int BE Pri
!#1 N2863 P1814 MEMBAR
!#1 N2864 P1815 BSTC 0 0x4000011a FP BE Pri
!#1 N2865 P1815 BSTC 1 0x4000011b FP BE Pri
!#A N2864 N2865
!#1 N2866 P1815 BSTC 2 0x4000011c FP BE Pri
!#1 N2867 P1816 MEMBAR
!#1 N2868 P1817 DWLD 15 -1 Int BE Pri
!#1 N2869 P1817 DWLD 16 -1 Int BE Pri
!#A N2868 N2869
!#1 N2870 P1817 CASX 15 -1 N2868 0x800137 Int BE Pri
!#1 N2871 P1817 CASX 16 -1 N2869 0x800138 Int BE Pri
!#A N2870 N2871
!#1 N2872 P1818 ST 23 0x800139 Int BE Pri
!#1 N2873 P1819 LDD 0 -1 Int BE Pri
!#1 N2874 P1819 LDD 1 -1 Int BE Pri
!#A N2873 N2874
!#1 N2875 P1820 DWLD 3 -1 Int BE Pri
!#1 N2876 P1820 DWLD 4 -1 Int BE Pri
!#A N2875 N2876
!#1 N2877 P1820 CASX 3 -1 N2875 0x80013a Int BE Pri
!#1 N2878 P1820 CASX 4 -1 N2876 0x80013b Int BE Pri
!#A N2877 N2878
!#1 N2879 P1821 MEMBAR
!#1 N2880 P1822 BST 6 0x4000011d FP BE Pri
!#1 N2881 P1822 BST 7 0x4000011e FP BE Pri
!#A N2880 N2881
!#1 N2882 P1822 BST 8 0x4000011f FP BE Pri
!#1 N2883 P1823 MEMBAR
!#1 N2884 P1824 PREFETCH 12 Int BE Pri
!#1 N2885 P1825 LD 8 -1 Int BE Pri
!#1 N2886 P1825 CAS 8 -1 N2885 0x80013c Int BE Pri
!#1 N2887 P1826 MEMBAR
!#1 N2888 P1827 BST 21 0x40000120 FP BE Pri
!#1 N2889 P1827 BST 22 0x40000121 FP BE Pri
!#A N2888 N2889
!#1 N2890 P1827 BST 23 0x40000122 FP BE Pri
!#1 N2891 P1828 MEMBAR
!#1 N2892 P1829 BSTC 12 0x40000123 FP BE Pri
!#1 N2893 P1829 BSTC 13 0x40000124 FP BE Pri
!#A N2892 N2893
!#1 N2894 P1829 BSTC 14 0x40000125 FP BE Pri
!#1 N2895 P1830 MEMBAR
!#1 N2896 P1831 LDD 18 -1 Int BE Pri
!#1 N2897 P1831 LDD 19 -1 Int BE Pri
!#A N2896 N2897
!#1 N2898 P1832 ST 0 0x40000126 FP BE Pri
!#1 N2899 P1833 MEMBAR
!#1 N2900 P1834 BST 12 0x40000127 FP BE Pri
!#1 N2901 P1834 BST 13 0x40000128 FP BE Pri
!#A N2900 N2901
!#1 N2902 P1834 BST 14 0x40000129 FP BE Pri
!#1 N2903 P1835 MEMBAR
!#1 N2904 P1836 PREFETCH 23 Int BE Pri
!#1 N2905 P1837 DWLD 15 -1 Int BE Pri
!#1 N2906 P1837 DWLD 16 -1 Int BE Pri
!#A N2905 N2906
!#1 N2907 P1837 CASX 15 -1 N2905 0x80013d Int BE Pri
!#1 N2908 P1837 CASX 16 -1 N2906 0x80013e Int BE Pri
!#A N2907 N2908
!#1 N2909 P1838 SWAP 10 0xffffffff 0x80013f Int BE Pri
!#1 N2910 P1839 SWAP 12 0xffffffff 0x800140 Int BE Pri
!#1 N2911 P1840 LD 12 -1 Int BE Pri
!#1 N2912 P1840 CAS 12 -1 N2911 0x800141 Int BE Pri
!#1 N2913 P1841 PREFETCH 19 Int BE Pri
!#1 N2914 P1842 LD 9 -1 Int BE Pri
!#1 N2915 P1842 CAS 9 -1 N2914 0x800142 Int BE Pri
!#1 N2916 P1843 LDD 0 -1 Int LE Pri
!#1 N2917 P1843 LDD 1 -1 Int LE Pri
!#A N2916 N2917
!#1 N2918 P1844 DWST_BINIT 18 0x800143 Int BE Pri
!#1 N2919 P1844 DWST_BINIT 19 0x800144 Int BE Pri
!#A N2918 N2919
!#1 N2920 P1845 MEMBAR
!#1 N2921 P1846 DWLD 3 -1 Int BE Pri
!#1 N2922 P1846 DWLD 4 -1 Int BE Pri
!#A N2921 N2922
!#1 N2923 P1847 SWAP 17 0xffffffff 0x800145 Int BE Pri
!#1 N2924 P1848 MEMBAR
!#1 N2925 P1849 BST 15 0x4000012a FP BE Pri
!#1 N2926 P1849 BST 16 0x4000012b FP BE Pri
!#A N2925 N2926
!#1 N2927 P1849 BST 17 0x4000012c FP BE Pri
!#1 N2928 P1850 MEMBAR
!#1 N2929 P1851 BSTC 0 0x4000012d FP BE Pri
!#1 N2930 P1851 BSTC 1 0x4000012e FP BE Pri
!#A N2929 N2930
!#1 N2931 P1851 BSTC 2 0x4000012f FP BE Pri
!#1 N2932 P1852 MEMBAR
!#1 N2933 P1853 BLD 12 -1 FP BE Pri
!#1 N2934 P1853 BLD 13 -1 FP BE Pri
!#A N2933 N2934
!#1 N2935 P1853 BLD 14 -1 FP BE Pri
!#1 N2936 P1854 MEMBAR
!#1 N2937 P1855 DWST_BINIT 0 0x800146 Int BE Pri
!#1 N2938 P1855 DWST_BINIT 1 0x800147 Int BE Pri
!#A N2937 N2938
!#1 N2939 P1856 MEMBAR
!#1 N2940 P1857 ST_BINIT 4 0x800148 Int BE Pri
!#1 N2941 P1858 MEMBAR
!#1 N2942 P1859 LD 16 -1 Int BE Pri
!#1 N2943 P1859 CAS 16 -1 N2942 0x800149 Int BE Pri
!#1 N2944 P1860 DWST_BINIT 21 0x80014a Int BE Pri
!#1 N2945 P1860 DWST_BINIT 22 0x80014b Int BE Pri
!#A N2944 N2945
!#1 N2946 P1861 MEMBAR
!#1 N2947 P1862 LDD 17 -1 Int BE Pri
!#1 N2948 P1863 ST 0 0x80014c Int BE Pri
!#1 N2949 P1864 DWST 15 0x80014d Int BE Pri
!#1 N2950 P1864 DWST 16 0x80014e Int BE Pri
!#A N2949 N2950
!#1 N2951 P1865 MEMBAR
!#1 N2952 P1866 BLD 9 -1 FP BE Pri
!#1 N2953 P1866 BLD 10 -1 FP BE Pri
!#A N2952 N2953
!#1 N2954 P1866 BLD 11 -1 FP BE Pri
!#1 N2955 P1867 MEMBAR
!#1 N2956 P1868 BSTC 21 0x40000130 FP BE Pri
!#1 N2957 P1868 BSTC 22 0x40000131 FP BE Pri
!#A N2956 N2957
!#1 N2958 P1868 BSTC 23 0x40000132 FP BE Pri
!#1 N2959 P1869 MEMBAR
!#1 N2960 P1870 ST 20 0x80014f Int BE Pri
!#1 N2961 P1871 PREFETCH 22 Int BE Pri
!#1 N2962 P1872 MEMBAR
!#1 N2963 P1873 BLD 15 -1 FP BE Pri
!#1 N2964 P1873 BLD 16 -1 FP BE Pri
!#A N2963 N2964
!#1 N2965 P1873 BLD 17 -1 FP BE Pri
!#1 N2966 P1874 MEMBAR
!#1 N2967 P1875 LDD 18 -1 Int BE Pri
!#1 N2968 P1875 LDD 19 -1 Int BE Pri
!#A N2967 N2968
!#1 N2969 P1876 LD 10 -1 Int BE Pri
!#1 N2970 P1876 CAS 10 -1 N2969 0x800150 Int BE Pri
!#1 N2971 P1877 MEMBAR
!#1 N2972 P1878 BSTC 12 0x40000133 FP BE Pri
!#1 N2973 P1878 BSTC 13 0x40000134 FP BE Pri
!#A N2972 N2973
!#1 N2974 P1878 BSTC 14 0x40000135 FP BE Pri
!#1 N2975 P1879 MEMBAR
!#1 N2976 P1880 BLD 3 -1 FP BE Pri
!#1 N2977 P1880 BLD 4 -1 FP BE Pri
!#A N2976 N2977
!#1 N2978 P1880 BLD 5 -1 FP BE Pri
!#1 N2979 P1881 MEMBAR
!#1 N2980 P1882 LD 6 -1 Int BE Pri
!#1 N2981 P1883 LDD 0 -1 Int BE Pri
!#1 N2982 P1883 LDD 1 -1 Int BE Pri
!#A N2981 N2982
!#1 N2983 P1884 MEMBAR
!#1 N2984 P1885 BSTC 15 0x40000136 FP BE Pri
!#1 N2985 P1885 BSTC 16 0x40000137 FP BE Pri
!#A N2984 N2985
!#1 N2986 P1885 BSTC 17 0x40000138 FP BE Pri
!#1 N2987 P1886 MEMBAR
!#1 N2988 P1887 DWLD 21 -1 Int BE Pri
!#1 N2989 P1887 DWLD 22 -1 Int BE Pri
!#A N2988 N2989
!#1 N2990 P1888 LD 17 -1 Int LE Pri
!#1 N2991 P1888 CAS 17 -1 N2990 0x800151 Int LE Pri
!#1 N2992 P1889 DWLD 18 -1 Int BE Pri
!#1 N2993 P1889 DWLD 19 -1 Int BE Pri
!#A N2992 N2993
!#1 N2994 P1889 CASX 18 -1 N2992 0x800152 Int BE Pri
!#1 N2995 P1889 CASX 19 -1 N2993 0x800153 Int BE Pri
!#A N2994 N2995
!#1 N2996 P1890 LDD 15 -1 Int BE Pri
!#1 N2997 P1890 LDD 16 -1 Int BE Pri
!#A N2996 N2997
!#1 N2998 P1891 MEMBAR
!#1 N2999 P1892 BLD 3 -1 FP BE Pri
!#1 N3000 P1892 BLD 4 -1 FP BE Pri
!#A N2999 N3000
!#1 N3001 P1892 BLD 5 -1 FP BE Pri
!#1 N3002 P1893 MEMBAR
!#1 N3003 P1894 ST 17 0x800154 Int BE Pri
!#1 N3004 P1895 LD 1 -1 Int BE Pri
!#1 N3005 P1895 CAS 1 -1 N3004 0x800155 Int BE Pri
!#1 N3006 P1896 SWAP 20 0xffffffff 0x800156 Int BE Pri
!#1 N3007 P1897 LD 22 -1 Int BE Pri
!#1 N3008 P1897 CAS 22 -1 N3007 0x800157 Int BE Pri
!#1 N3009 P1898 LDD 5 -1 Int BE Pri
!#1 N3010 P1899 DWLD 21 -1 Int BE Pri
!#1 N3011 P1899 DWLD 22 -1 Int BE Pri
!#A N3010 N3011
!#1 N3012 P1899 CASX 21 -1 N3010 0x800158 Int BE Pri
!#1 N3013 P1899 CASX 22 -1 N3011 0x800159 Int BE Pri
!#A N3012 N3013
!#1 N3014 P1900 LDD 15 -1 Int BE Pri
!#1 N3015 P1900 LDD 16 -1 Int BE Pri
!#A N3014 N3015
!#1 N3016 P1901 MEMBAR
!#1 N3017 P1902 BST 6 0x40000139 FP BE Pri
!#1 N3018 P1902 BST 7 0x4000013a FP BE Pri
!#A N3017 N3018
!#1 N3019 P1902 BST 8 0x4000013b FP BE Pri
!#1 N3020 P1903 MEMBAR
!#1 N3021 P1904 BST 0 0x4000013c FP BE Pri
!#1 N3022 P1904 BST 1 0x4000013d FP BE Pri
!#A N3021 N3022
!#1 N3023 P1904 BST 2 0x4000013e FP BE Pri
!#1 N3024 P1905 MEMBAR
!#1 N3025 P1906 BLD 21 -1 FP BE Pri
!#1 N3026 P1906 BLD 22 -1 FP BE Pri
!#A N3025 N3026
!#1 N3027 P1906 BLD 23 -1 FP BE Pri
!#1 N3028 P1907 MEMBAR
!#1 N3029 P1908 LD 13 -1 Int BE Pri
!#1 N3030 P1909 PREFETCH 21 Int BE Pri
!#1 N3031 P1910 MEMBAR
!#1 N3032 P1911 BST 0 0x4000013f FP BE Pri
!#1 N3033 P1911 BST 1 0x40000140 FP BE Pri
!#A N3032 N3033
!#1 N3034 P1911 BST 2 0x40000141 FP BE Pri
!#1 N3035 P1912 MEMBAR
!#1 N3036 P1913 DWST 0 0x80015a Int BE Pri
!#1 N3037 P1913 DWST 1 0x80015b Int BE Pri
!#A N3036 N3037
!#1 N3038 P1914 MEMBAR
!#1 N3039 P1915 BSTC 15 0x40000142 FP BE Pri
!#1 N3040 P1915 BSTC 16 0x40000143 FP BE Pri
!#A N3039 N3040
!#1 N3041 P1915 BSTC 17 0x40000144 FP BE Pri
!#1 N3042 P1916 MEMBAR
!#1 N3043 P1917 BSTC 18 0x40000145 FP BE Pri
!#1 N3044 P1917 BSTC 19 0x40000146 FP BE Pri
!#A N3043 N3044
!#1 N3045 P1917 BSTC 20 0x40000147 FP BE Pri
!#1 N3046 P1918 MEMBAR
!#1 N3047 P1919 DWLD 11 -1,0x0 Int BE Pri
!#1 N3048 P1919 CASX 11 -1,0x0 N3047 0x80015c Int BE Pri
!#1 N3049 P1920 SWAP 2 0xffffffff 0x80015d Int BE Pri
!#1 N3050 P1921 LD 22 -1 Int BE Pri
!#1 N3051 P1922 MEMBAR
!#1 N3052 P1923 BLD 18 -1 FP BE Pri
!#1 N3053 P1923 BLD 19 -1 FP BE Pri
!#A N3052 N3053
!#1 N3054 P1923 BLD 20 -1 FP BE Pri
!#1 N3055 P1924 MEMBAR
!#1 N3056 P1925 DWLD 15 -1 Int BE Pri
!#1 N3057 P1925 DWLD 16 -1 Int BE Pri
!#A N3056 N3057
!#1 N3058 P1925 CASX 15 -1 N3056 0x80015e Int BE Pri
!#1 N3059 P1925 CASX 16 -1 N3057 0x80015f Int BE Pri
!#A N3058 N3059
!#1 N3060 P1926 SWAP 18 0xffffffff 0x800160 Int BE Pri
!#1 N3061 P1927 LDD 21 -1 Int BE Pri
!#1 N3062 P1927 LDD 22 -1 Int BE Pri
!#A N3061 N3062
!#1 N3063 P1928 LD 1 -1 Int BE Pri
!#1 N3064 P1929 ST 10 0x800161 Int BE Pri
!#1 N3065 P1930 MEMBAR
!#1 N3066 P1931 BST 12 0x40000148 FP BE Pri
!#1 N3067 P1931 BST 13 0x40000149 FP BE Pri
!#A N3066 N3067
!#1 N3068 P1931 BST 14 0x4000014a FP BE Pri
!#1 N3069 P1932 MEMBAR
!#1 N3070 P1933 LD 8 -1 Int BE Pri
!#1 N3071 P1933 CAS 8 -1 N3070 0x800162 Int BE Pri
!#1 N3072 P1934 ST_BINIT 5 0x800163 Int BE Pri
!#1 N3073 P1935 MEMBAR
!#1 N3074 P1936 SWAP 8 0xffffffff 0x800164 Int BE Pri
!#1 N3075 P1937 MEMBAR
!#1 N3076 P1938 BLD 12 -1 FP BE Pri
!#1 N3077 P1938 BLD 13 -1 FP BE Pri
!#A N3076 N3077
!#1 N3078 P1938 BLD 14 -1 FP BE Pri
!#1 N3079 P1939 MEMBAR
!#1 N3080 P1940 DWST_BINIT 21 0x800165 Int BE Pri
!#1 N3081 P1940 DWST_BINIT 22 0x800166 Int BE Pri
!#A N3080 N3081
!#1 N3082 P1941 MEMBAR
!#1 N3083 P1942 ST_BINIT 9 0x800167 Int BE Pri
!#1 N3084 P1943 MEMBAR
!#1 N3085 P1944 DWLD 17 -1,0x0 Int BE Pri
!#1 N3086 P1944 CASX 17 -1,0x0 N3085 0x800168 Int BE Pri
!#1 N3087 P1945 MEMBAR
!#1 N3088 P1946 BLD 3 -1 FP BE Pri
!#1 N3089 P1946 BLD 4 -1 FP BE Pri
!#A N3088 N3089
!#1 N3090 P1946 BLD 5 -1 FP BE Pri
!#1 N3091 P1947 MEMBAR
!#1 N3092 P1948 LDD 12 -1 Int BE Pri
!#1 N3093 P1948 LDD 13 -1 Int BE Pri
!#A N3092 N3093
!#1 N3094 P1949 ST_BINIT 20 0x800169 Int BE Pri
!#1 N3095 P1950 MEMBAR
!#1 N3096 P1951 DWLD 12 -1 Int BE Pri
!#1 N3097 P1951 DWLD 13 -1 Int BE Pri
!#A N3096 N3097
!#1 N3098 P1952 ST_BINIT 0 0x80016a Int BE Pri
!#1 N3099 P1953 MEMBAR
!#1 N3100 P1954 BLD 3 -1 FP BE Pri
!#1 N3101 P1954 BLD 4 -1 FP BE Pri
!#A N3100 N3101
!#1 N3102 P1954 BLD 5 -1 FP BE Pri
!#1 N3103 P1955 MEMBAR
!#1 N3104 P1956 DWLD 3 -1 Int BE Pri
!#1 N3105 P1956 DWLD 4 -1 Int BE Pri
!#A N3104 N3105
!#1 N3106 P1957 SWAP 4 0xffffffff 0x80016b Int BE Pri
!#1 N3107 P1958 LD 14 -1 Int BE Pri
!#1 N3108 P1958 CAS 14 -1 N3107 0x80016c Int BE Pri
!#1 N3109 P1959 ST 4 0x80016d Int BE Pri
!#1 N3110 P1960 MEMBAR
!#1 N3111 P1961 BST 15 0x4000014b FP BE Pri
!#1 N3112 P1961 BST 16 0x4000014c FP BE Pri
!#A N3111 N3112
!#1 N3113 P1961 BST 17 0x4000014d FP BE Pri
!#1 N3114 P1962 MEMBAR
!#1 N3115 P1963 BST 21 0x4000014e FP BE Pri
!#1 N3116 P1963 BST 22 0x4000014f FP BE Pri
!#A N3115 N3116
!#1 N3117 P1963 BST 23 0x40000150 FP BE Pri
!#1 N3118 P1964 MEMBAR
!#1 N3119 P1965 BSTC 18 0x40000151 FP BE Pri
!#1 N3120 P1965 BSTC 19 0x40000152 FP BE Pri
!#A N3119 N3120
!#1 N3121 P1965 BSTC 20 0x40000153 FP BE Pri
!#1 N3122 P1966 MEMBAR
!#1 N3123 P1967 BSTC 9 0x40000154 FP BE Pri
!#1 N3124 P1967 BSTC 10 0x40000155 FP BE Pri
!#A N3123 N3124
!#1 N3125 P1967 BSTC 11 0x40000156 FP BE Pri
!#1 N3126 P1968 MEMBAR
!#1 N3127 P1969 BSTC 0 0x40000157 FP BE Pri
!#1 N3128 P1969 BSTC 1 0x40000158 FP BE Pri
!#A N3127 N3128
!#1 N3129 P1969 BSTC 2 0x40000159 FP BE Pri
!#1 N3130 P1970 MEMBAR
!#1 N3131 P1971 DWLD 3 -1 Int BE Pri
!#1 N3132 P1971 DWLD 4 -1 Int BE Pri
!#A N3131 N3132
!#1 N3133 P1971 CASX 3 -1 N3131 0x80016e Int BE Pri
!#1 N3134 P1971 CASX 4 -1 N3132 0x80016f Int BE Pri
!#A N3133 N3134
!#1 N3135 P1972 DWST 15 0x800170 Int BE Pri
!#1 N3136 P1972 DWST 16 0x800171 Int BE Pri
!#A N3135 N3136
!#1 N3137 P1973 SWAP 2 0xffffffff 0x800172 Int BE Pri
!#1 N3138 P1974 DWST 6 0x800173 Int LE Pri
!#1 N3139 P1974 DWST 7 0x800174 Int LE Pri
!#A N3138 N3139
!#1 N3140 P1975 DWLD 21 -1 Int BE Pri
!#1 N3141 P1975 DWLD 22 -1 Int BE Pri
!#A N3140 N3141
!#1 N3142 P1975 CASX 21 -1 N3140 0x800175 Int BE Pri
!#1 N3143 P1975 CASX 22 -1 N3141 0x800176 Int BE Pri
!#A N3142 N3143
!#1 N3144 P1976 MEMBAR
!#1 N3145 P1977 BLD 21 -1 FP BE Pri
!#1 N3146 P1977 BLD 22 -1 FP BE Pri
!#A N3145 N3146
!#1 N3147 P1977 BLD 23 -1 FP BE Pri
!#1 N3148 P1978 MEMBAR
!#1 N3149 P1979 SWAP 16 0xffffffff 0x800177 Int BE Pri
!#1 N3150 P1980 REPLACEMENT 12 Int BE Pri
!#1 N3151 P1981 SWAP 21 0xffffffff 0x800178 Int BE Pri
!#1 N3152 P1982 DWLD 0 -1 Int BE Pri
!#1 N3153 P1982 DWLD 1 -1 Int BE Pri
!#A N3152 N3153
!#1 N3154 P1983 MEMBAR
!#1 N3155 P1984 BSTC 0 0x4000015a FP BE Pri
!#1 N3156 P1984 BSTC 1 0x4000015b FP BE Pri
!#A N3155 N3156
!#1 N3157 P1984 BSTC 2 0x4000015c FP BE Pri
!#1 N3158 P1985 MEMBAR
!#1 N3159 P1986 BST 18 0x4000015d FP BE Pri
!#1 N3160 P1986 BST 19 0x4000015e FP BE Pri
!#A N3159 N3160
!#1 N3161 P1986 BST 20 0x4000015f FP BE Pri
!#1 N3162 P1987 MEMBAR
!#1 N3163 P1988 BLD 12 -1 FP BE Pri
!#1 N3164 P1988 BLD 13 -1 FP BE Pri
!#A N3163 N3164
!#1 N3165 P1988 BLD 14 -1 FP BE Pri
!#1 N3166 P1989 MEMBAR
!#1 N3167 P1990 SWAP 18 0xffffffff 0x800179 Int BE Pri
!#1 N3168 P1991 ST_BINIT 11 0x80017a Int BE Pri
!#1 N3169 P1992 MEMBAR
!#1 N3170 P1993 DWLD 20 -1,0x0 Int BE Pri
!#1 N3171 P1993 CASX 20 -1,0x0 N3170 0x80017b Int BE Pri
!#1 N3172 P1994 DWST 17 0x80017c Int BE Pri
!#1 N3173 P1995 LDD 17 -1 Int BE Pri
!#1 N3174 P1996 DWLD 18 -1 Int BE Pri
!#1 N3175 P1996 DWLD 19 -1 Int BE Pri
!#A N3174 N3175
!#1 N3176 P1997 MEMBAR
!#1 N3177 P1998 BLD 12 -1 FP BE Pri
!#1 N3178 P1998 BLD 13 -1 FP BE Pri
!#A N3177 N3178
!#1 N3179 P1998 BLD 14 -1 FP BE Pri
!#1 N3180 P1999 MEMBAR
!#1 N3181 P2000 LDD 12 -1 Int BE Pri
!#1 N3182 P2000 LDD 13 -1 Int BE Pri
!#A N3181 N3182
!#1 N3183 P2001 LD 18 -1 Int BE Pri
!#1 N3184 P2002 LD 18 -1 Int BE Pri Loop_exit
!#1 N3185 P2003 MEMBAR
!#2 N3186 P2004 DWLD 0 -1 Int BE Pri Loop_entry
!#2 N3187 P2004 DWLD 1 -1 Int BE Pri Loop_entry
!#A N3186 N3187
!#2 N3188 P2005 ST_BINIT 10 0x1000001 Int BE Pri
!#2 N3189 P2006 MEMBAR
!#2 N3190 P2007 SWAP 5 0xffffffff 0x1000002 Int BE Pri
!#2 N3191 P2008 ST_BINIT 6 0x1000003 Int BE Pri
!#2 N3192 P2009 MEMBAR
!#2 N3193 P2010 ST_BINIT 18 0x1000004 Int BE Pri
!#2 N3194 P2011 MEMBAR
!#2 N3195 P2012 ST 7 0x1000005 Int BE Pri
!#2 N3196 P2013 ST_BINIT 4 0x1000006 Int BE Pri
!#2 N3197 P2014 MEMBAR
!#2 N3198 P2015 DWLD 8 -1,0x0 Int BE Pri
!#2 N3199 P2015 CASX 8 -1,0x0 N3198 0x1000007 Int BE Pri
!#2 N3200 P2016 PREFETCH 10 Int BE Pri
!#2 N3201 P2017 MEMBAR
!#2 N3202 P2018 BLD 18 -1 FP BE Pri
!#2 N3203 P2018 BLD 19 -1 FP BE Pri
!#A N3202 N3203
!#2 N3204 P2018 BLD 20 -1 FP BE Pri
!#2 N3205 P2019 MEMBAR
!#2 N3206 P2020 BSTC 18 0x40800001 FP BE Pri
!#2 N3207 P2020 BSTC 19 0x40800002 FP BE Pri
!#A N3206 N3207
!#2 N3208 P2020 BSTC 20 0x40800003 FP BE Pri
!#2 N3209 P2021 MEMBAR
!#2 N3210 P2022 ST 7 0x1000008 Int BE Pri
!#2 N3211 P2023 LDD 12 -1 Int BE Pri
!#2 N3212 P2023 LDD 13 -1 Int BE Pri
!#A N3211 N3212
!#2 N3213 P2024 LD 3 -1 Int BE Pri
!#2 N3214 P2025 DWST 0 0x1000009 Int BE Pri
!#2 N3215 P2025 DWST 1 0x100000a Int BE Pri
!#A N3214 N3215
!#2 N3216 P2026 ST 21 0x100000b Int BE Pri
!#2 N3217 P2027 REPLACEMENT 15 Int BE Pri
!#2 N3218 P2028 MEMBAR
!#2 N3219 P2029 BST 21 0x40800004 FP BE Pri
!#2 N3220 P2029 BST 22 0x40800005 FP BE Pri
!#A N3219 N3220
!#2 N3221 P2029 BST 23 0x40800006 FP BE Pri
!#2 N3222 P2030 MEMBAR
!#2 N3223 P2031 LDD 3 -1 Int BE Pri
!#2 N3224 P2031 LDD 4 -1 Int BE Pri
!#A N3223 N3224
!#2 N3225 P2032 PREFETCH 7 Int BE Pri
!#2 N3226 P2033 LDD 15 -1 Int BE Pri
!#2 N3227 P2033 LDD 16 -1 Int BE Pri
!#A N3226 N3227
!#2 N3228 P2034 MEMBAR
!#2 N3229 P2035 BSTC 12 0x40800007 FP BE Pri
!#2 N3230 P2035 BSTC 13 0x40800008 FP BE Pri
!#A N3229 N3230
!#2 N3231 P2035 BSTC 14 0x40800009 FP BE Pri
!#2 N3232 P2036 MEMBAR
!#2 N3233 P2037 LD 5 -1 Int BE Pri
!#2 N3234 P2037 CAS 5 -1 N3233 0x100000c Int BE Pri
!#2 N3235 P2038 MEMBAR
!#2 N3236 P2039 BST 15 0x4080000a FP BE Pri
!#2 N3237 P2039 BST 16 0x4080000b FP BE Pri
!#A N3236 N3237
!#2 N3238 P2039 BST 17 0x4080000c FP BE Pri
!#2 N3239 P2040 MEMBAR
!#2 N3240 P2041 REPLACEMENT 7 Int BE Pri
!#2 N3241 P2042 ST_BINIT 13 0x100000d Int LE Pri
!#2 N3242 P2043 MEMBAR
!#2 N3243 P2044 ST 5 0x4080000d FP BE Pri
!#2 N3244 P2045 MEMBAR
!#2 N3245 P2046 BST 0 0x4080000e FP BE Pri
!#2 N3246 P2046 BST 1 0x4080000f FP BE Pri
!#A N3245 N3246
!#2 N3247 P2046 BST 2 0x40800010 FP BE Pri
!#2 N3248 P2047 MEMBAR
!#2 N3249 P2048 REPLACEMENT 15 Int BE Pri
!#2 N3250 P2049 LD 14 -1 Int BE Pri
!#2 N3251 P2049 CAS 14 -1 N3250 0x100000e Int BE Pri
!#2 N3252 P2050 MEMBAR
!#2 N3253 P2051 BSTC 3 0x40800011 FP BE Pri
!#2 N3254 P2051 BSTC 4 0x40800012 FP BE Pri
!#A N3253 N3254
!#2 N3255 P2051 BSTC 5 0x40800013 FP BE Pri
!#2 N3256 P2052 MEMBAR
!#2 N3257 P2053 DWLD 17 -1,0x0 Int BE Pri
!#2 N3258 P2053 CASX 17 -1,0x0 N3257 0x100000f Int BE Pri
!#2 N3259 P2054 ST_BINIT 7 0x1000010 Int BE Pri
!#2 N3260 P2055 MEMBAR
!#2 N3261 P2056 SWAP 10 0xffffffff 0x1000011 Int BE Pri
!#2 N3262 P2057 SWAP 12 0xffffffff 0x1000012 Int BE Pri
!#2 N3263 P2058 DWST_BINIT 9 0x1000013 Int BE Pri
!#2 N3264 P2058 DWST_BINIT 10 0x1000014 Int BE Pri
!#A N3263 N3264
!#2 N3265 P2059 MEMBAR
!#2 N3266 P2060 SWAP 1 0xffffffff 0x1000015 Int BE Pri
!#2 N3267 P2061 PREFETCH 1 Int BE Pri
!#2 N3268 P2062 ST 23 0x40800014 FP BE Pri
!#2 N3269 P2063 DWST 0 0x1000016 Int BE Pri
!#2 N3270 P2063 DWST 1 0x1000017 Int BE Pri
!#A N3269 N3270
!#2 N3271 P2064 DWST 0 0x1000018 Int BE Pri
!#2 N3272 P2064 DWST 1 0x1000019 Int BE Pri
!#A N3271 N3272
!#2 N3273 P2065 DWST_BINIT 3 0x100001a Int BE Pri
!#2 N3274 P2065 DWST_BINIT 4 0x100001b Int BE Pri
!#A N3273 N3274
!#2 N3275 P2066 MEMBAR
!#2 N3276 P2067 DWLD 21 -1 Int BE Pri
!#2 N3277 P2067 DWLD 22 -1 Int BE Pri
!#A N3276 N3277
!#2 N3278 P2067 CASX 21 -1 N3276 0x100001c Int BE Pri
!#2 N3279 P2067 CASX 22 -1 N3277 0x100001d Int BE Pri
!#A N3278 N3279
!#2 N3280 P2068 SWAP 16 0xffffffff 0x100001e Int BE Pri
!#2 N3281 P2069 DWLD 0 -1 Int BE Pri
!#2 N3282 P2069 DWLD 1 -1 Int BE Pri
!#A N3281 N3282
!#2 N3283 P2070 DWLD 12 -1 Int BE Pri
!#2 N3284 P2070 DWLD 13 -1 Int BE Pri
!#A N3283 N3284
!#2 N3285 P2071 LD 18 -1 Int BE Pri
!#2 N3286 P2071 CAS 18 -1 N3285 0x100001f Int BE Pri
!#2 N3287 P2072 SWAP 1 0xffffffff 0x1000020 Int BE Pri
!#2 N3288 P2073 DWST 14 0x1000021 Int BE Pri
!#2 N3289 P2074 ST 23 0x1000022 Int BE Pri
!#2 N3290 P2075 MEMBAR
!#2 N3291 P2076 BST 12 0x40800015 FP BE Pri
!#2 N3292 P2076 BST 13 0x40800016 FP BE Pri
!#A N3291 N3292
!#2 N3293 P2076 BST 14 0x40800017 FP BE Pri
!#2 N3294 P2077 MEMBAR
!#2 N3295 P2078 SWAP 18 0xffffffff 0x1000023 Int BE Pri
!#2 N3296 P2079 ST 4 0x40800018 FP BE Pri
!#2 N3297 P2080 DWST_BINIT 14 0x1000024 Int BE Pri
!#2 N3298 P2081 MEMBAR
!#2 N3299 P2082 DWLD 2 -1,0x0 Int BE Pri
!#2 N3300 P2082 CASX 2 -1,0x0 N3299 0x1000025 Int BE Pri
!#2 N3301 P2083 MEMBAR
!#2 N3302 P2084 BSTC 15 0x40800019 FP BE Pri
!#2 N3303 P2084 BSTC 16 0x4080001a FP BE Pri
!#A N3302 N3303
!#2 N3304 P2084 BSTC 17 0x4080001b FP BE Pri
!#2 N3305 P2085 MEMBAR
!#2 N3306 P2086 DWLD 11 -1 Int BE Pri
!#2 N3307 P2087 ST 23 0x1000026 Int BE Pri
!#2 N3308 P2088 MEMBAR
!#2 N3309 P2089 BSTC 12 0x4080001c FP BE Pri
!#2 N3310 P2089 BSTC 13 0x4080001d FP BE Pri
!#A N3309 N3310
!#2 N3311 P2089 BSTC 14 0x4080001e FP BE Pri
!#2 N3312 P2090 MEMBAR
!#2 N3313 P2091 ST 4 0x1000027 Int BE Pri
!#2 N3314 P2092 ST_BINIT 6 0x1000028 Int BE Pri
!#2 N3315 P2093 MEMBAR
!#2 N3316 P2094 SWAP 7 0xffffffff 0x1000029 Int BE Pri
!#2 N3317 P2095 DWLD 0 -1 Int BE Pri
!#2 N3318 P2095 DWLD 1 -1 Int BE Pri
!#A N3317 N3318
!#2 N3319 P2096 MEMBAR
!#2 N3320 P2097 BSTC 21 0x4080001f FP BE Pri
!#2 N3321 P2097 BSTC 22 0x40800020 FP BE Pri
!#A N3320 N3321
!#2 N3322 P2097 BSTC 23 0x40800021 FP BE Pri
!#2 N3323 P2098 MEMBAR
!#2 N3324 P2099 PREFETCH 22 Int BE Pri
!#2 N3325 P2100 SWAP 7 0xffffffff 0x100002a Int BE Pri
!#2 N3326 P2101 LD 12 -1 Int BE Pri
!#2 N3327 P2101 CAS 12 -1 N3326 0x100002b Int BE Pri
!#2 N3328 P2102 MEMBAR
!#2 N3329 P2103 BLD 9 -1 FP BE Pri
!#2 N3330 P2103 BLD 10 -1 FP BE Pri
!#A N3329 N3330
!#2 N3331 P2103 BLD 11 -1 FP BE Pri
!#2 N3332 P2104 MEMBAR
!#2 N3333 P2105 PREFETCH 10 Int BE Pri
!#2 N3334 P2106 MEMBAR
!#2 N3335 P2107 BSTC 18 0x40800022 FP BE Pri
!#2 N3336 P2107 BSTC 19 0x40800023 FP BE Pri
!#A N3335 N3336
!#2 N3337 P2107 BSTC 20 0x40800024 FP BE Pri
!#2 N3338 P2108 MEMBAR
!#2 N3339 P2109 REPLACEMENT 16 Int BE Pri
!#2 N3340 P2110 ST_BINIT 12 0x100002c Int BE Pri
!#2 N3341 P2111 MEMBAR
!#2 N3342 P2112 BST 12 0x40800025 FP BE Pri
!#2 N3343 P2112 BST 13 0x40800026 FP BE Pri
!#A N3342 N3343
!#2 N3344 P2112 BST 14 0x40800027 FP BE Pri
!#2 N3345 P2113 MEMBAR
!#2 N3346 P2114 BLD 21 -1 FP BE Pri
!#2 N3347 P2114 BLD 22 -1 FP BE Pri
!#A N3346 N3347
!#2 N3348 P2114 BLD 23 -1 FP BE Pri
!#2 N3349 P2115 MEMBAR
!#2 N3350 P2116 LD 21 -1 Int BE Pri
!#2 N3351 P2116 CAS 21 -1 N3350 0x100002d Int BE Pri
!#2 N3352 P2117 DWST_BINIT 3 0x100002e Int BE Pri
!#2 N3353 P2117 DWST_BINIT 4 0x100002f Int BE Pri
!#A N3352 N3353
!#2 N3354 P2118 MEMBAR
!#2 N3355 P2119 BSTC 12 0x40800028 FP BE Pri
!#2 N3356 P2119 BSTC 13 0x40800029 FP BE Pri
!#A N3355 N3356
!#2 N3357 P2119 BSTC 14 0x4080002a FP BE Pri
!#2 N3358 P2120 MEMBAR
!#2 N3359 P2121 BSTC 9 0x4080002b FP BE Pri
!#2 N3360 P2121 BSTC 10 0x4080002c FP BE Pri
!#A N3359 N3360
!#2 N3361 P2121 BSTC 11 0x4080002d FP BE Pri
!#2 N3362 P2122 MEMBAR
!#2 N3363 P2123 LD 4 -1 Int BE Pri
!#2 N3364 P2124 LD 6 -1 Int BE Pri
!#2 N3365 P2125 LD 20 -1 Int BE Pri
!#2 N3366 P2126 DWLD 12 -1 Int BE Pri
!#2 N3367 P2126 DWLD 13 -1 Int BE Pri
!#A N3366 N3367
!#2 N3368 P2126 CASX 12 -1 N3366 0x1000030 Int BE Pri
!#2 N3369 P2126 CASX 13 -1 N3367 0x1000031 Int BE Pri
!#A N3368 N3369
!#2 N3370 P2127 ST_BINIT 1 0x1000032 Int BE Pri
!#2 N3371 P2128 MEMBAR
!#2 N3372 P2129 BLD 0 -1 FP BE Pri
!#2 N3373 P2129 BLD 1 -1 FP BE Pri
!#A N3372 N3373
!#2 N3374 P2129 BLD 2 -1 FP BE Pri
!#2 N3375 P2130 MEMBAR
!#2 N3376 P2131 DWST 0 0x1000033 Int BE Pri
!#2 N3377 P2131 DWST 1 0x1000034 Int BE Pri
!#A N3376 N3377
!#2 N3378 P2132 DWLD 18 -1 Int BE Pri
!#2 N3379 P2132 DWLD 19 -1 Int BE Pri
!#A N3378 N3379
!#2 N3380 P2133 DWLD 3 -1 Int BE Pri
!#2 N3381 P2133 DWLD 4 -1 Int BE Pri
!#A N3380 N3381
!#2 N3382 P2133 CASX 3 -1 N3380 0x1000035 Int BE Pri
!#2 N3383 P2133 CASX 4 -1 N3381 0x1000036 Int BE Pri
!#A N3382 N3383
!#2 N3384 P2134 LD 21 -1 Int BE Pri
!#2 N3385 P2134 CAS 21 -1 N3384 0x1000037 Int BE Pri
!#2 N3386 P2135 MEMBAR
!#2 N3387 P2136 BST 6 0x4080002e FP BE Pri
!#2 N3388 P2136 BST 7 0x4080002f FP BE Pri
!#A N3387 N3388
!#2 N3389 P2136 BST 8 0x40800030 FP BE Pri
!#2 N3390 P2137 MEMBAR
!#2 N3391 P2138 SWAP 0 0xffffffff 0x1000038 Int LE Pri
!#2 N3392 P2139 DWLD 23 -1,0x0 Int BE Pri
!#2 N3393 P2139 CASX 23 -1,0x0 N3392 0x1000039 Int BE Pri
!#2 N3394 P2140 LD 6 -1 Int BE Pri
!#2 N3395 P2140 CAS 6 -1 N3394 0x100003a Int BE Pri
!#2 N3396 P2141 ST 11 0x100003b Int BE Pri
!#2 N3397 P2142 LDD 8 -1 Int BE Pri
!#2 N3398 P2143 MEMBAR
!#2 N3399 P2144 BLD 3 -1 FP BE Pri
!#2 N3400 P2144 BLD 4 -1 FP BE Pri
!#A N3399 N3400
!#2 N3401 P2144 BLD 5 -1 FP BE Pri
!#2 N3402 P2145 MEMBAR
!#2 N3403 P2146 DWLD 2 -1,0x0 Int BE Pri
!#2 N3404 P2146 CASX 2 -1,0x0 N3403 0x100003c Int BE Pri
!#2 N3405 P2147 MEMBAR
!#2 N3406 P2148 BSTC 9 0x40800031 FP BE Pri
!#2 N3407 P2148 BSTC 10 0x40800032 FP BE Pri
!#A N3406 N3407
!#2 N3408 P2148 BSTC 11 0x40800033 FP BE Pri
!#2 N3409 P2149 MEMBAR
!#2 N3410 P2150 LDD 15 -1 Int BE Pri
!#2 N3411 P2150 LDD 16 -1 Int BE Pri
!#A N3410 N3411
!#2 N3412 P2151 DWST_BINIT 12 0x100003d Int BE Pri
!#2 N3413 P2151 DWST_BINIT 13 0x100003e Int BE Pri
!#A N3412 N3413
!#2 N3414 P2152 MEMBAR
!#2 N3415 P2153 BST 15 0x40800034 FP BE Pri
!#2 N3416 P2153 BST 16 0x40800035 FP BE Pri
!#A N3415 N3416
!#2 N3417 P2153 BST 17 0x40800036 FP BE Pri
!#2 N3418 P2154 MEMBAR
!#2 N3419 P2155 BST 21 0x40800037 FP BE Pri
!#2 N3420 P2155 BST 22 0x40800038 FP BE Pri
!#A N3419 N3420
!#2 N3421 P2155 BST 23 0x40800039 FP BE Pri
!#2 N3422 P2156 MEMBAR
!#2 N3423 P2157 DWST_BINIT 12 0x100003f Int BE Pri
!#2 N3424 P2157 DWST_BINIT 13 0x1000040 Int BE Pri
!#A N3423 N3424
!#2 N3425 P2158 MEMBAR
!#2 N3426 P2159 LDD 15 -1 Int BE Pri
!#2 N3427 P2159 LDD 16 -1 Int BE Pri
!#A N3426 N3427
!#2 N3428 P2160 DWST_BINIT 23 0x1000041 Int BE Pri
!#2 N3429 P2161 MEMBAR
!#2 N3430 P2162 BSTC 12 0x4080003a FP BE Pri
!#2 N3431 P2162 BSTC 13 0x4080003b FP BE Pri
!#A N3430 N3431
!#2 N3432 P2162 BSTC 14 0x4080003c FP BE Pri
!#2 N3433 P2163 MEMBAR
!#2 N3434 P2164 SWAP 10 0xffffffff 0x1000042 Int BE Pri
!#2 N3435 P2165 PREFETCH 18 Int BE Pri
!#2 N3436 P2166 MEMBAR
!#2 N3437 P2167 BLD 15 -1 FP BE Pri
!#2 N3438 P2167 BLD 16 -1 FP BE Pri
!#A N3437 N3438
!#2 N3439 P2167 BLD 17 -1 FP BE Pri
!#2 N3440 P2168 MEMBAR
!#2 N3441 P2169 ST 13 0x4080003d FP BE Pri
!#2 N3442 P2170 DWST_BINIT 12 0x1000043 Int BE Pri
!#2 N3443 P2170 DWST_BINIT 13 0x1000044 Int BE Pri
!#A N3442 N3443
!#2 N3444 P2171 MEMBAR
!#2 N3445 P2172 DWST 12 0x1000045 Int BE Pri
!#2 N3446 P2172 DWST 13 0x1000046 Int BE Pri
!#A N3445 N3446
!#2 N3447 P2173 DWLD 2 -1,0x0 Int BE Pri
!#2 N3448 P2173 CASX 2 -1,0x0 N3447 0x1000047 Int BE Pri
!#2 N3449 P2174 ST_BINIT 13 0x1000048 Int BE Pri
!#2 N3450 P2175 MEMBAR
!#2 N3451 P2176 BLD 9 -1 FP BE Pri
!#2 N3452 P2176 BLD 10 -1 FP BE Pri
!#A N3451 N3452
!#2 N3453 P2176 BLD 11 -1 FP BE Pri
!#2 N3454 P2177 MEMBAR
!#2 N3455 P2178 DWST 15 0x1000049 Int BE Pri
!#2 N3456 P2178 DWST 16 0x100004a Int BE Pri
!#A N3455 N3456
!#2 N3457 P2179 LD 5 -1 Int BE Pri
!#2 N3458 P2179 CAS 5 -1 N3457 0x100004b Int BE Pri
!#2 N3459 P2180 LD 4 -1 Int BE Pri
!#2 N3460 P2181 LD 22 -1 Int BE Pri
!#2 N3461 P2181 CAS 22 -1 N3460 0x100004c Int BE Pri
!#2 N3462 P2182 DWLD 18 -1 Int BE Pri
!#2 N3463 P2182 DWLD 19 -1 Int BE Pri
!#A N3462 N3463
!#2 N3464 P2183 DWLD 15 -1 Int BE Pri
!#2 N3465 P2183 DWLD 16 -1 Int BE Pri
!#A N3464 N3465
!#2 N3466 P2183 CASX 15 -1 N3464 0x100004d Int BE Pri
!#2 N3467 P2183 CASX 16 -1 N3465 0x100004e Int BE Pri
!#A N3466 N3467
!#2 N3468 P2184 DWLD 9 -1 Int BE Pri
!#2 N3469 P2184 DWLD 10 -1 Int BE Pri
!#A N3468 N3469
!#2 N3470 P2185 ST_BINIT 19 0x100004f Int BE Pri
!#2 N3471 P2186 MEMBAR
!#2 N3472 P2187 SWAP 21 0xffffffff 0x1000050 Int BE Pri
!#2 N3473 P2188 DWLD 18 -1 FP BE Pri
!#2 N3474 P2188 DWLD 19 -1 FP BE Pri
!#A N3473 N3474
!#2 N3475 P2189 MEMBAR
!#2 N3476 P2190 BST 0 0x4080003e FP BE Pri
!#2 N3477 P2190 BST 1 0x4080003f FP BE Pri
!#A N3476 N3477
!#2 N3478 P2190 BST 2 0x40800040 FP BE Pri
!#2 N3479 P2191 MEMBAR
!#2 N3480 P2192 LDD 18 -1 Int BE Pri
!#2 N3481 P2192 LDD 19 -1 Int BE Pri
!#A N3480 N3481
!#2 N3482 P2193 DWLD 21 -1 Int BE Pri
!#2 N3483 P2193 DWLD 22 -1 Int BE Pri
!#A N3482 N3483
!#2 N3484 P2193 CASX 21 -1 N3482 0x1000051 Int BE Pri
!#2 N3485 P2193 CASX 22 -1 N3483 0x1000052 Int BE Pri
!#A N3484 N3485
!#2 N3486 P2194 MEMBAR
!#2 N3487 P2195 BSTC 12 0x40800041 FP BE Pri
!#2 N3488 P2195 BSTC 13 0x40800042 FP BE Pri
!#A N3487 N3488
!#2 N3489 P2195 BSTC 14 0x40800043 FP BE Pri
!#2 N3490 P2196 MEMBAR
!#2 N3491 P2197 ST 16 0x1000053 Int LE Pri
!#2 N3492 P2198 LDD 15 -1 Int BE Pri
!#2 N3493 P2198 LDD 16 -1 Int BE Pri
!#A N3492 N3493
!#2 N3494 P2199 LD 18 -1 Int BE Pri
!#2 N3495 P2199 CAS 18 -1 N3494 0x1000054 Int BE Pri
!#2 N3496 P2200 LD 1 -1 FP BE Pri
!#2 N3497 P2201 DWST_BINIT 6 0x1000055 Int BE Pri
!#2 N3498 P2201 DWST_BINIT 7 0x1000056 Int BE Pri
!#A N3497 N3498
!#2 N3499 P2202 MEMBAR
!#2 N3500 P2203 DWST_BINIT 14 0x1000057 Int BE Pri
!#2 N3501 P2204 MEMBAR
!#2 N3502 P2205 DWST_BINIT 23 0x1000058 Int BE Pri
!#2 N3503 P2206 MEMBAR
!#2 N3504 P2207 REPLACEMENT 12 Int BE Pri
!#2 N3505 P2208 DWST 12 0x1000059 Int BE Pri
!#2 N3506 P2208 DWST 13 0x100005a Int BE Pri
!#A N3505 N3506
!#2 N3507 P2209 LDD 11 -1 Int BE Pri
!#2 N3508 P2210 MEMBAR
!#2 N3509 P2211 BLD 0 -1 FP BE Pri
!#2 N3510 P2211 BLD 1 -1 FP BE Pri
!#A N3509 N3510
!#2 N3511 P2211 BLD 2 -1 FP BE Pri
!#2 N3512 P2212 MEMBAR
!#2 N3513 P2213 BST 21 0x40800044 FP BE Pri
!#2 N3514 P2213 BST 22 0x40800045 FP BE Pri
!#A N3513 N3514
!#2 N3515 P2213 BST 23 0x40800046 FP BE Pri
!#2 N3516 P2214 MEMBAR
!#2 N3517 P2215 LD 3 -1 Int BE Pri
!#2 N3518 P2215 CAS 3 -1 N3517 0x100005b Int BE Pri
!#2 N3519 P2216 DWST_BINIT 6 0x100005c Int BE Pri
!#2 N3520 P2216 DWST_BINIT 7 0x100005d Int BE Pri
!#A N3519 N3520
!#2 N3521 P2217 MEMBAR
!#2 N3522 P2218 ST_BINIT 23 0x100005e Int BE Pri
!#2 N3523 P2219 MEMBAR
!#2 N3524 P2220 BLD 9 -1 FP BE Pri
!#2 N3525 P2220 BLD 10 -1 FP BE Pri
!#A N3524 N3525
!#2 N3526 P2220 BLD 11 -1 FP BE Pri
!#2 N3527 P2221 MEMBAR
!#2 N3528 P2222 LD 8 -1 Int BE Pri
!#2 N3529 P2222 CAS 8 -1 N3528 0x100005f Int BE Pri
!#2 N3530 P2223 MEMBAR
!#2 N3531 P2224 BST 15 0x40800047 FP BE Pri
!#2 N3532 P2224 BST 16 0x40800048 FP BE Pri
!#A N3531 N3532
!#2 N3533 P2224 BST 17 0x40800049 FP BE Pri
!#2 N3534 P2225 MEMBAR
!#2 N3535 P2226 BST 15 0x4080004a FP BE Pri
!#2 N3536 P2226 BST 16 0x4080004b FP BE Pri
!#A N3535 N3536
!#2 N3537 P2226 BST 17 0x4080004c FP BE Pri
!#2 N3538 P2227 MEMBAR
!#2 N3539 P2228 BST 0 0x4080004d FP BE Pri
!#2 N3540 P2228 BST 1 0x4080004e FP BE Pri
!#A N3539 N3540
!#2 N3541 P2228 BST 2 0x4080004f FP BE Pri
!#2 N3542 P2229 MEMBAR
!#2 N3543 P2230 ST_BINIT 1 0x1000060 Int BE Pri
!#2 N3544 P2231 MEMBAR
!#2 N3545 P2232 DWLD 6 -1 Int LE Pri
!#2 N3546 P2232 DWLD 7 -1 Int LE Pri
!#A N3545 N3546
!#2 N3547 P2233 ST_BINIT 5 0x1000061 Int BE Pri
!#2 N3548 P2234 MEMBAR
!#2 N3549 P2235 ST 16 0x1000062 Int BE Pri
!#2 N3550 P2236 DWLD 2 -1 FP BE Pri
!#2 N3551 P2237 ST_BINIT 15 0x1000063 Int BE Pri
!#2 N3552 P2238 MEMBAR
!#2 N3553 P2239 DWST 15 0x1000064 Int BE Pri
!#2 N3554 P2239 DWST 16 0x1000065 Int BE Pri
!#A N3553 N3554
!#2 N3555 P2240 ST_BINIT 21 0x1000066 Int BE Pri
!#2 N3556 P2241 MEMBAR
!#2 N3557 P2242 DWLD 12 -1 Int BE Pri
!#2 N3558 P2242 DWLD 13 -1 Int BE Pri
!#A N3557 N3558
!#2 N3559 P2242 CASX 12 -1 N3557 0x1000067 Int BE Pri
!#2 N3560 P2242 CASX 13 -1 N3558 0x1000068 Int BE Pri
!#A N3559 N3560
!#2 N3561 P2243 MEMBAR
!#2 N3562 P2244 BLD 6 -1 FP BE Pri
!#2 N3563 P2244 BLD 7 -1 FP BE Pri
!#A N3562 N3563
!#2 N3564 P2244 BLD 8 -1 FP BE Pri
!#2 N3565 P2245 MEMBAR
!#2 N3566 P2246 BST 9 0x40800050 FP BE Pri
!#2 N3567 P2246 BST 10 0x40800051 FP BE Pri
!#A N3566 N3567
!#2 N3568 P2246 BST 11 0x40800052 FP BE Pri
!#2 N3569 P2247 MEMBAR
!#2 N3570 P2248 SWAP 23 0xffffffff 0x1000069 Int BE Pri
!#2 N3571 P2249 PREFETCH 18 Int LE Pri
!#2 N3572 P2250 DWST_BINIT 15 0x100006a Int LE Pri
!#2 N3573 P2250 DWST_BINIT 16 0x100006b Int LE Pri
!#A N3572 N3573
!#2 N3574 P2251 MEMBAR
!#2 N3575 P2252 SWAP 4 0xffffffff 0x100006c Int BE Pri
!#2 N3576 P2253 DWST 8 0x100006d Int BE Pri
!#2 N3577 P2254 PREFETCH 1 Int BE Pri
!#2 N3578 P2255 LD 20 -1 Int BE Pri
!#2 N3579 P2256 LD 15 -1 Int BE Pri
!#2 N3580 P2257 MEMBAR
!#2 N3581 P2258 BLD 9 -1 FP BE Pri
!#2 N3582 P2258 BLD 10 -1 FP BE Pri
!#A N3581 N3582
!#2 N3583 P2258 BLD 11 -1 FP BE Pri
!#2 N3584 P2259 MEMBAR
!#2 N3585 P2260 SWAP 19 0xffffffff 0x100006e Int BE Pri
!#2 N3586 P2261 DWLD 21 -1 Int BE Pri
!#2 N3587 P2261 DWLD 22 -1 Int BE Pri
!#A N3586 N3587
!#2 N3588 P2261 CASX 21 -1 N3586 0x100006f Int BE Pri
!#2 N3589 P2261 CASX 22 -1 N3587 0x1000070 Int BE Pri
!#A N3588 N3589
!#2 N3590 P2262 LDD 12 -1 Int BE Pri
!#2 N3591 P2262 LDD 13 -1 Int BE Pri
!#A N3590 N3591
!#2 N3592 P2263 ST 21 0x1000071 Int BE Pri
!#2 N3593 P2264 PREFETCH 12 Int BE Pri
!#2 N3594 P2265 MEMBAR
!#2 N3595 P2266 BSTC 18 0x40800053 FP BE Pri
!#2 N3596 P2266 BSTC 19 0x40800054 FP BE Pri
!#A N3595 N3596
!#2 N3597 P2266 BSTC 20 0x40800055 FP BE Pri
!#2 N3598 P2267 MEMBAR
!#2 N3599 P2268 LDD 3 -1 Int BE Pri
!#2 N3600 P2268 LDD 4 -1 Int BE Pri
!#A N3599 N3600
!#2 N3601 P2269 MEMBAR
!#2 N3602 P2270 BSTC 6 0x40800056 FP BE Pri
!#2 N3603 P2270 BSTC 7 0x40800057 FP BE Pri
!#A N3602 N3603
!#2 N3604 P2270 BSTC 8 0x40800058 FP BE Pri
!#2 N3605 P2271 MEMBAR
!#2 N3606 P2272 PREFETCH 17 Int BE Pri
!#2 N3607 P2273 MEMBAR
!#2 N3608 P2274 BLD 3 -1 FP BE Pri
!#2 N3609 P2274 BLD 4 -1 FP BE Pri
!#A N3608 N3609
!#2 N3610 P2274 BLD 5 -1 FP BE Pri
!#2 N3611 P2275 MEMBAR
!#2 N3612 P2276 DWLD 18 -1 Int BE Pri
!#2 N3613 P2276 DWLD 19 -1 Int BE Pri
!#A N3612 N3613
!#2 N3614 P2277 DWLD 20 -1,0x0 Int BE Pri
!#2 N3615 P2277 CASX 20 -1,0x0 N3614 0x1000072 Int BE Pri
!#2 N3616 P2278 MEMBAR
!#2 N3617 P2279 BSTC 15 0x40800059 FP BE Pri
!#2 N3618 P2279 BSTC 16 0x4080005a FP BE Pri
!#A N3617 N3618
!#2 N3619 P2279 BSTC 17 0x4080005b FP BE Pri
!#2 N3620 P2280 MEMBAR
!#2 N3621 P2281 PREFETCH 3 Int BE Pri
!#2 N3622 P2282 DWLD 11 -1,0x0 Int BE Pri
!#2 N3623 P2282 CASX 11 -1,0x0 N3622 0x1000073 Int BE Pri
!#2 N3624 P2283 ST 3 0x1000074 Int BE Pri
!#2 N3625 P2284 DWLD 20 -1 Int BE Pri
!#2 N3626 P2285 DWLD 15 -1 Int BE Pri
!#2 N3627 P2285 DWLD 16 -1 Int BE Pri
!#A N3626 N3627
!#2 N3628 P2286 MEMBAR
!#2 N3629 P2287 BSTC 3 0x4080005c FP BE Pri
!#2 N3630 P2287 BSTC 4 0x4080005d FP BE Pri
!#A N3629 N3630
!#2 N3631 P2287 BSTC 5 0x4080005e FP BE Pri
!#2 N3632 P2288 MEMBAR
!#2 N3633 P2289 LD 1 -1 FP BE Pri
!#2 N3634 P2290 LD 1 -1 Int BE Pri
!#2 N3635 P2290 CAS 1 -1 N3634 0x1000075 Int BE Pri
!#2 N3636 P2291 MEMBAR
!#2 N3637 P2292 BST 3 0x4080005f FP BE Pri
!#2 N3638 P2292 BST 4 0x40800060 FP BE Pri
!#A N3637 N3638
!#2 N3639 P2292 BST 5 0x40800061 FP BE Pri
!#2 N3640 P2293 MEMBAR
!#2 N3641 P2294 BSTC 18 0x40800062 FP BE Pri
!#2 N3642 P2294 BSTC 19 0x40800063 FP BE Pri
!#A N3641 N3642
!#2 N3643 P2294 BSTC 20 0x40800064 FP BE Pri
!#2 N3644 P2295 MEMBAR
!#2 N3645 P2296 BLD 18 -1 FP BE Pri
!#2 N3646 P2296 BLD 19 -1 FP BE Pri
!#A N3645 N3646
!#2 N3647 P2296 BLD 20 -1 FP BE Pri
!#2 N3648 P2297 MEMBAR
!#2 N3649 P2298 PREFETCH 3 Int BE Pri
!#2 N3650 P2299 LD 8 -1 Int BE Pri
!#2 N3651 P2299 CAS 8 -1 N3650 0x1000076 Int BE Pri
!#2 N3652 P2300 MEMBAR
!#2 N3653 P2301 BST 12 0x40800065 FP BE Pri
!#2 N3654 P2301 BST 13 0x40800066 FP BE Pri
!#A N3653 N3654
!#2 N3655 P2301 BST 14 0x40800067 FP BE Pri
!#2 N3656 P2302 MEMBAR
!#2 N3657 P2303 PREFETCH 16 Int BE Pri
!#2 N3658 P2304 MEMBAR
!#2 N3659 P2305 BLD 9 -1 FP BE Pri
!#2 N3660 P2305 BLD 10 -1 FP BE Pri
!#A N3659 N3660
!#2 N3661 P2305 BLD 11 -1 FP BE Pri
!#2 N3662 P2306 MEMBAR
!#2 N3663 P2307 BST 15 0x40800068 FP BE Pri
!#2 N3664 P2307 BST 16 0x40800069 FP BE Pri
!#A N3663 N3664
!#2 N3665 P2307 BST 17 0x4080006a FP BE Pri
!#2 N3666 P2308 MEMBAR
!#2 N3667 P2309 BLD 6 -1 FP BE Pri
!#2 N3668 P2309 BLD 7 -1 FP BE Pri
!#A N3667 N3668
!#2 N3669 P2309 BLD 8 -1 FP BE Pri
!#2 N3670 P2310 MEMBAR
!#2 N3671 P2311 LD 15 -1 Int BE Pri
!#2 N3672 P2312 DWST 14 0x1000077 Int BE Pri
!#2 N3673 P2313 DWLD 21 -1 Int BE Pri
!#2 N3674 P2313 DWLD 22 -1 Int BE Pri
!#A N3673 N3674
!#2 N3675 P2313 CASX 21 -1 N3673 0x1000078 Int BE Pri
!#2 N3676 P2313 CASX 22 -1 N3674 0x1000079 Int BE Pri
!#A N3675 N3676
!#2 N3677 P2314 DWST_BINIT 15 0x100007a Int BE Pri
!#2 N3678 P2314 DWST_BINIT 16 0x100007b Int BE Pri
!#A N3677 N3678
!#2 N3679 P2315 MEMBAR
!#2 N3680 P2316 DWST_BINIT 17 0x100007c Int BE Pri
!#2 N3681 P2317 MEMBAR
!#2 N3682 P2318 ST 19 0x4080006b FP BE Pri
!#2 N3683 P2319 DWST 20 0x100007d Int BE Pri
!#2 N3684 P2320 DWST_BINIT 3 0x100007e Int BE Pri
!#2 N3685 P2320 DWST_BINIT 4 0x100007f Int BE Pri
!#A N3684 N3685
!#2 N3686 P2321 MEMBAR
!#2 N3687 P2322 SWAP 11 0xffffffff 0x1000080 Int BE Pri
!#2 N3688 P2323 PREFETCH 23 Int BE Pri
!#2 N3689 P2324 MEMBAR
!#2 N3690 P2325 BSTC 9 0x4080006c FP BE Pri
!#2 N3691 P2325 BSTC 10 0x4080006d FP BE Pri
!#A N3690 N3691
!#2 N3692 P2325 BSTC 11 0x4080006e FP BE Pri
!#2 N3693 P2326 MEMBAR
!#2 N3694 P2327 BST 6 0x4080006f FP BE Pri
!#2 N3695 P2327 BST 7 0x40800070 FP BE Pri
!#A N3694 N3695
!#2 N3696 P2327 BST 8 0x40800071 FP BE Pri
!#2 N3697 P2328 MEMBAR
!#2 N3698 P2329 LDD 12 -1 Int BE Pri
!#2 N3699 P2329 LDD 13 -1 Int BE Pri
!#A N3698 N3699
!#2 N3700 P2330 PREFETCH 22 Int BE Pri
!#2 N3701 P2331 LDD 8 -1 Int BE Pri
!#2 N3702 P2332 DWST 2 0x1000081 Int BE Pri
!#2 N3703 P2333 MEMBAR
!#2 N3704 P2334 BLD 15 -1 FP BE Pri
!#2 N3705 P2334 BLD 16 -1 FP BE Pri
!#A N3704 N3705
!#2 N3706 P2334 BLD 17 -1 FP BE Pri
!#2 N3707 P2335 MEMBAR
!#2 N3708 P2336 DWLD 18 -1 Int BE Pri
!#2 N3709 P2336 DWLD 19 -1 Int BE Pri
!#A N3708 N3709
!#2 N3710 P2337 MEMBAR
!#2 N3711 P2338 BLD 21 -1 FP BE Pri
!#2 N3712 P2338 BLD 22 -1 FP BE Pri
!#A N3711 N3712
!#2 N3713 P2338 BLD 23 -1 FP BE Pri
!#2 N3714 P2339 MEMBAR
!#2 N3715 P2340 PREFETCH 15 Int BE Pri
!#2 N3716 P2341 DWLD 3 -1 Int BE Pri
!#2 N3717 P2341 DWLD 4 -1 Int BE Pri
!#A N3716 N3717
!#2 N3718 P2342 DWST_BINIT 3 0x1000082 Int BE Pri
!#2 N3719 P2342 DWST_BINIT 4 0x1000083 Int BE Pri
!#A N3718 N3719
!#2 N3720 P2343 MEMBAR
!#2 N3721 P2344 LD 7 -1 Int BE Pri
!#2 N3722 P2344 CAS 7 -1 N3721 0x1000084 Int BE Pri
!#2 N3723 P2345 MEMBAR
!#2 N3724 P2346 BSTC 6 0x40800072 FP BE Pri
!#2 N3725 P2346 BSTC 7 0x40800073 FP BE Pri
!#A N3724 N3725
!#2 N3726 P2346 BSTC 8 0x40800074 FP BE Pri
!#2 N3727 P2347 MEMBAR
!#2 N3728 P2348 BST 15 0x40800075 FP BE Pri
!#2 N3729 P2348 BST 16 0x40800076 FP BE Pri
!#A N3728 N3729
!#2 N3730 P2348 BST 17 0x40800077 FP BE Pri
!#2 N3731 P2349 MEMBAR
!#2 N3732 P2350 ST 1 0x40800078 FP BE Pri
!#2 N3733 P2351 SWAP 5 0xffffffff 0x1000085 Int BE Pri
!#2 N3734 P2352 LDD 9 -1 Int BE Pri
!#2 N3735 P2352 LDD 10 -1 Int BE Pri
!#A N3734 N3735
!#2 N3736 P2353 ST 1 0x1000086 Int BE Pri
!#2 N3737 P2354 ST_BINIT 2 0x1000087 Int BE Pri
!#2 N3738 P2355 MEMBAR
!#2 N3739 P2356 DWLD 18 -1 Int BE Pri
!#2 N3740 P2356 DWLD 19 -1 Int BE Pri
!#A N3739 N3740
!#2 N3741 P2357 LDD 0 -1 Int BE Pri
!#2 N3742 P2357 LDD 1 -1 Int BE Pri
!#A N3741 N3742
!#2 N3743 P2358 LDD 21 -1 Int BE Pri
!#2 N3744 P2358 LDD 22 -1 Int BE Pri
!#A N3743 N3744
!#2 N3745 P2359 ST_BINIT 16 0x1000088 Int BE Pri
!#2 N3746 P2360 MEMBAR
!#2 N3747 P2361 LDD 0 -1 Int BE Pri
!#2 N3748 P2361 LDD 1 -1 Int BE Pri
!#A N3747 N3748
!#2 N3749 P2362 DWLD 18 -1 Int BE Pri
!#2 N3750 P2362 DWLD 19 -1 Int BE Pri
!#A N3749 N3750
!#2 N3751 P2363 MEMBAR
!#2 N3752 P2364 BST 3 0x40800079 FP BE Pri
!#2 N3753 P2364 BST 4 0x4080007a FP BE Pri
!#A N3752 N3753
!#2 N3754 P2364 BST 5 0x4080007b FP BE Pri
!#2 N3755 P2365 MEMBAR
!#2 N3756 P2366 DWLD 9 -1 Int BE Pri
!#2 N3757 P2366 DWLD 10 -1 Int BE Pri
!#A N3756 N3757
!#2 N3758 P2367 ST 1 0x4080007c FP BE Pri
!#2 N3759 P2368 MEMBAR
!#2 N3760 P2369 BST 18 0x4080007d FP BE Pri
!#2 N3761 P2369 BST 19 0x4080007e FP BE Pri
!#A N3760 N3761
!#2 N3762 P2369 BST 20 0x4080007f FP BE Pri
!#2 N3763 P2370 MEMBAR
!#2 N3764 P2371 SWAP 20 0xffffffff 0x1000089 Int BE Pri
!#2 N3765 P2372 LDD 9 -1 Int BE Pri
!#2 N3766 P2372 LDD 10 -1 Int BE Pri
!#A N3765 N3766
!#2 N3767 P2373 PREFETCH 9 Int BE Pri
!#2 N3768 P2374 LD 12 -1 Int BE Pri
!#2 N3769 P2375 LD 10 -1 FP BE Pri
!#2 N3770 P2376 LD 13 -1 Int BE Pri
!#2 N3771 P2376 CAS 13 -1 N3770 0x100008a Int BE Pri
!#2 N3772 P2377 MEMBAR
!#2 N3773 P2378 BST 3 0x40800080 FP BE Pri
!#2 N3774 P2378 BST 4 0x40800081 FP BE Pri
!#A N3773 N3774
!#2 N3775 P2378 BST 5 0x40800082 FP BE Pri
!#2 N3776 P2379 MEMBAR
!#2 N3777 P2380 PREFETCH 13 Int BE Pri
!#2 N3778 P2381 PREFETCH 18 Int BE Pri
!#2 N3779 P2382 LD 23 -1 Int BE Pri
!#2 N3780 P2383 DWLD 12 -1 Int BE Pri
!#2 N3781 P2383 DWLD 13 -1 Int BE Pri
!#A N3780 N3781
!#2 N3782 P2383 CASX 12 -1 N3780 0x100008b Int BE Pri
!#2 N3783 P2383 CASX 13 -1 N3781 0x100008c Int BE Pri
!#A N3782 N3783
!#2 N3784 P2384 MEMBAR
!#2 N3785 P2385 BLD 0 -1 FP BE Pri
!#2 N3786 P2385 BLD 1 -1 FP BE Pri
!#A N3785 N3786
!#2 N3787 P2385 BLD 2 -1 FP BE Pri
!#2 N3788 P2386 MEMBAR
!#2 N3789 P2387 BSTC 12 0x40800083 FP BE Pri
!#2 N3790 P2387 BSTC 13 0x40800084 FP BE Pri
!#A N3789 N3790
!#2 N3791 P2387 BSTC 14 0x40800085 FP BE Pri
!#2 N3792 P2388 MEMBAR
!#2 N3793 P2389 BSTC 12 0x40800086 FP BE Pri
!#2 N3794 P2389 BSTC 13 0x40800087 FP BE Pri
!#A N3793 N3794
!#2 N3795 P2389 BSTC 14 0x40800088 FP BE Pri
!#2 N3796 P2390 MEMBAR
!#2 N3797 P2391 BSTC 0 0x40800089 FP BE Pri
!#2 N3798 P2391 BSTC 1 0x4080008a FP BE Pri
!#A N3797 N3798
!#2 N3799 P2391 BSTC 2 0x4080008b FP BE Pri
!#2 N3800 P2392 MEMBAR
!#2 N3801 P2393 ST 23 0x100008d Int BE Pri
!#2 N3802 P2394 DWST_BINIT 5 0x100008e Int BE Pri
!#2 N3803 P2395 MEMBAR
!#2 N3804 P2396 BLD 18 -1 FP BE Pri
!#2 N3805 P2396 BLD 19 -1 FP BE Pri
!#A N3804 N3805
!#2 N3806 P2396 BLD 20 -1 FP BE Pri
!#2 N3807 P2397 MEMBAR
!#2 N3808 P2398 DWLD 6 -1 Int BE Pri
!#2 N3809 P2398 DWLD 7 -1 Int BE Pri
!#A N3808 N3809
!#2 N3810 P2398 CASX 6 -1 N3808 0x100008f Int BE Pri
!#2 N3811 P2398 CASX 7 -1 N3809 0x1000090 Int BE Pri
!#A N3810 N3811
!#2 N3812 P2399 MEMBAR
!#2 N3813 P2400 BST 21 0x4080008c FP BE Pri
!#2 N3814 P2400 BST 22 0x4080008d FP BE Pri
!#A N3813 N3814
!#2 N3815 P2400 BST 23 0x4080008e FP BE Pri
!#2 N3816 P2401 MEMBAR
!#2 N3817 P2402 BSTC 15 0x4080008f FP BE Pri
!#2 N3818 P2402 BSTC 16 0x40800090 FP BE Pri
!#A N3817 N3818
!#2 N3819 P2402 BSTC 17 0x40800091 FP BE Pri
!#2 N3820 P2403 MEMBAR
!#2 N3821 P2404 BLD 6 -1 FP BE Pri
!#2 N3822 P2404 BLD 7 -1 FP BE Pri
!#A N3821 N3822
!#2 N3823 P2404 BLD 8 -1 FP BE Pri
!#2 N3824 P2405 MEMBAR
!#2 N3825 P2406 BLD 15 -1 FP BE Pri
!#2 N3826 P2406 BLD 16 -1 FP BE Pri
!#A N3825 N3826
!#2 N3827 P2406 BLD 17 -1 FP BE Pri
!#2 N3828 P2407 MEMBAR
!#2 N3829 P2408 ST 19 0x1000091 Int BE Pri
!#2 N3830 P2409 MEMBAR
!#2 N3831 P2410 BLD 12 -1 FP BE Pri
!#2 N3832 P2410 BLD 13 -1 FP BE Pri
!#A N3831 N3832
!#2 N3833 P2410 BLD 14 -1 FP BE Pri
!#2 N3834 P2411 MEMBAR
!#2 N3835 P2412 ST_BINIT 6 0x1000092 Int BE Pri
!#2 N3836 P2413 MEMBAR
!#2 N3837 P2414 PREFETCH 2 Int BE Pri
!#2 N3838 P2415 DWLD 20 -1 Int BE Pri
!#2 N3839 P2416 SWAP 22 0xffffffff 0x1000093 Int BE Pri
!#2 N3840 P2417 MEMBAR
!#2 N3841 P2418 BST 6 0x40800092 FP BE Pri
!#2 N3842 P2418 BST 7 0x40800093 FP BE Pri
!#A N3841 N3842
!#2 N3843 P2418 BST 8 0x40800094 FP BE Pri
!#2 N3844 P2419 MEMBAR
!#2 N3845 P2420 DWLD 5 -1,0x0 Int BE Pri
!#2 N3846 P2420 CASX 5 -1,0x0 N3845 0x1000094 Int BE Pri
!#2 N3847 P2421 MEMBAR
!#2 N3848 P2422 BST 6 0x40800095 FP BE Pri
!#2 N3849 P2422 BST 7 0x40800096 FP BE Pri
!#A N3848 N3849
!#2 N3850 P2422 BST 8 0x40800097 FP BE Pri
!#2 N3851 P2423 MEMBAR
!#2 N3852 P2424 SWAP 6 0xffffffff 0x1000095 Int BE Pri
!#2 N3853 P2425 DWST 15 0x1000096 Int BE Pri
!#2 N3854 P2425 DWST 16 0x1000097 Int BE Pri
!#A N3853 N3854
!#2 N3855 P2426 LD 17 -1 Int BE Pri
!#2 N3856 P2427 DWST 11 0x1000098 Int BE Pri
!#2 N3857 P2428 LD 16 -1 Int BE Pri
!#2 N3858 P2428 CAS 16 -1 N3857 0x1000099 Int BE Pri
!#2 N3859 P2429 LD 18 -1 Int BE Pri
!#2 N3860 P2429 CAS 18 -1 N3859 0x100009a Int BE Pri
!#2 N3861 P2430 ST 8 0x100009b Int BE Pri
!#2 N3862 P2431 MEMBAR
!#2 N3863 P2432 BST 18 0x40800098 FP BE Pri
!#2 N3864 P2432 BST 19 0x40800099 FP BE Pri
!#A N3863 N3864
!#2 N3865 P2432 BST 20 0x4080009a FP BE Pri
!#2 N3866 P2433 MEMBAR
!#2 N3867 P2434 LD 21 -1 Int BE Pri
!#2 N3868 P2434 CAS 21 -1 N3867 0x100009c Int BE Pri
!#2 N3869 P2435 REPLACEMENT 21 Int BE Pri
!#2 N3870 P2436 ST 4 0x100009d Int BE Pri
!#2 N3871 P2437 LD 6 -1 Int BE Pri
!#2 N3872 P2437 CAS 6 -1 N3871 0x100009e Int BE Pri
!#2 N3873 P2438 DWST_BINIT 14 0x100009f Int BE Pri
!#2 N3874 P2439 MEMBAR
!#2 N3875 P2440 DWST_BINIT 15 0x10000a0 Int BE Pri
!#2 N3876 P2440 DWST_BINIT 16 0x10000a1 Int BE Pri
!#A N3875 N3876
!#2 N3877 P2441 MEMBAR
!#2 N3878 P2442 BSTC 0 0x4080009b FP BE Pri
!#2 N3879 P2442 BSTC 1 0x4080009c FP BE Pri
!#A N3878 N3879
!#2 N3880 P2442 BSTC 2 0x4080009d FP BE Pri
!#2 N3881 P2443 MEMBAR
!#2 N3882 P2444 BLD 6 -1 FP BE Pri
!#2 N3883 P2444 BLD 7 -1 FP BE Pri
!#A N3882 N3883
!#2 N3884 P2444 BLD 8 -1 FP BE Pri
!#2 N3885 P2445 MEMBAR
!#2 N3886 P2446 LDD 9 -1 Int BE Pri
!#2 N3887 P2446 LDD 10 -1 Int BE Pri
!#A N3886 N3887
!#2 N3888 P2447 DWLD 0 -1 Int BE Pri
!#2 N3889 P2447 DWLD 1 -1 Int BE Pri
!#A N3888 N3889
!#2 N3890 P2448 MEMBAR
!#2 N3891 P2449 BSTC 18 0x4080009e FP BE Pri
!#2 N3892 P2449 BSTC 19 0x4080009f FP BE Pri
!#A N3891 N3892
!#2 N3893 P2449 BSTC 20 0x408000a0 FP BE Pri
!#2 N3894 P2450 MEMBAR
!#2 N3895 P2451 BST 12 0x408000a1 FP BE Pri
!#2 N3896 P2451 BST 13 0x408000a2 FP BE Pri
!#A N3895 N3896
!#2 N3897 P2451 BST 14 0x408000a3 FP BE Pri
!#2 N3898 P2452 MEMBAR
!#2 N3899 P2453 ST 12 0x10000a2 Int BE Pri
!#2 N3900 P2454 LDD 18 -1 Int BE Pri
!#2 N3901 P2454 LDD 19 -1 Int BE Pri
!#A N3900 N3901
!#2 N3902 P2455 DWLD 15 -1 Int BE Pri
!#2 N3903 P2455 DWLD 16 -1 Int BE Pri
!#A N3902 N3903
!#2 N3904 P2455 CASX 15 -1 N3902 0x10000a3 Int BE Pri
!#2 N3905 P2455 CASX 16 -1 N3903 0x10000a4 Int BE Pri
!#A N3904 N3905
!#2 N3906 P2456 DWLD 0 -1 Int BE Pri
!#2 N3907 P2456 DWLD 1 -1 Int BE Pri
!#A N3906 N3907
!#2 N3908 P2456 CASX 0 -1 N3906 0x10000a5 Int BE Pri
!#2 N3909 P2456 CASX 1 -1 N3907 0x10000a6 Int BE Pri
!#A N3908 N3909
!#2 N3910 P2457 REPLACEMENT 1 Int BE Pri
!#2 N3911 P2458 MEMBAR
!#2 N3912 P2459 BLD 15 -1 FP BE Pri
!#2 N3913 P2459 BLD 16 -1 FP BE Pri
!#A N3912 N3913
!#2 N3914 P2459 BLD 17 -1 FP BE Pri
!#2 N3915 P2460 MEMBAR
!#2 N3916 P2461 DWLD 0 -1 Int BE Pri
!#2 N3917 P2461 DWLD 1 -1 Int BE Pri
!#A N3916 N3917
!#2 N3918 P2462 ST_BINIT 6 0x10000a7 Int BE Pri
!#2 N3919 P2463 MEMBAR
!#2 N3920 P2464 DWLD 12 -1 Int BE Pri
!#2 N3921 P2464 DWLD 13 -1 Int BE Pri
!#A N3920 N3921
!#2 N3922 P2465 LD 16 -1 Int BE Pri
!#2 N3923 P2465 CAS 16 -1 N3922 0x10000a8 Int BE Pri
!#2 N3924 P2466 ST 0 0x408000a4 FP BE Pri
!#2 N3925 P2467 DWLD 15 -1 Int BE Pri
!#2 N3926 P2467 DWLD 16 -1 Int BE Pri
!#A N3925 N3926
!#2 N3927 P2467 CASX 15 -1 N3925 0x10000a9 Int BE Pri
!#2 N3928 P2467 CASX 16 -1 N3926 0x10000aa Int BE Pri
!#A N3927 N3928
!#2 N3929 P2468 MEMBAR
!#2 N3930 P2469 BLD 6 -1 FP BE Pri
!#2 N3931 P2469 BLD 7 -1 FP BE Pri
!#A N3930 N3931
!#2 N3932 P2469 BLD 8 -1 FP BE Pri
!#2 N3933 P2470 MEMBAR
!#2 N3934 P2471 DWST_BINIT 21 0x10000ab Int BE Pri
!#2 N3935 P2471 DWST_BINIT 22 0x10000ac Int BE Pri
!#A N3934 N3935
!#2 N3936 P2472 MEMBAR
!#2 N3937 P2473 ST_BINIT 3 0x10000ad Int BE Pri
!#2 N3938 P2474 MEMBAR
!#2 N3939 P2475 BSTC 15 0x408000a5 FP BE Pri
!#2 N3940 P2475 BSTC 16 0x408000a6 FP BE Pri
!#A N3939 N3940
!#2 N3941 P2475 BSTC 17 0x408000a7 FP BE Pri
!#2 N3942 P2476 MEMBAR
!#2 N3943 P2477 ST 13 0x10000ae Int LE Pri
!#2 N3944 P2478 MEMBAR
!#2 N3945 P2479 BLD 18 -1 FP BE Pri
!#2 N3946 P2479 BLD 19 -1 FP BE Pri
!#A N3945 N3946
!#2 N3947 P2479 BLD 20 -1 FP BE Pri
!#2 N3948 P2480 MEMBAR
!#2 N3949 P2481 ST_BINIT 19 0x10000af Int BE Pri
!#2 N3950 P2482 MEMBAR
!#2 N3951 P2483 ST 8 0x10000b0 Int BE Pri
!#2 N3952 P2484 DWLD 15 -1 Int BE Pri
!#2 N3953 P2484 DWLD 16 -1 Int BE Pri
!#A N3952 N3953
!#2 N3954 P2485 DWLD 6 -1 Int BE Pri
!#2 N3955 P2485 DWLD 7 -1 Int BE Pri
!#A N3954 N3955
!#2 N3956 P2486 MEMBAR
!#2 N3957 P2487 BSTC 18 0x408000a8 FP BE Pri
!#2 N3958 P2487 BSTC 19 0x408000a9 FP BE Pri
!#A N3957 N3958
!#2 N3959 P2487 BSTC 20 0x408000aa FP BE Pri
!#2 N3960 P2488 MEMBAR
!#2 N3961 P2489 PREFETCH 21 Int BE Pri
!#2 N3962 P2490 ST_BINIT 22 0x10000b1 Int BE Pri
!#2 N3963 P2491 MEMBAR
!#2 N3964 P2492 PREFETCH 0 Int BE Pri
!#2 N3965 P2493 ST_BINIT 2 0x10000b2 Int BE Pri
!#2 N3966 P2494 MEMBAR
!#2 N3967 P2495 PREFETCH 8 Int BE Pri
!#2 N3968 P2496 ST 21 0x10000b3 Int BE Pri
!#2 N3969 P2497 DWST_BINIT 8 0x10000b4 Int BE Pri
!#2 N3970 P2498 MEMBAR
!#2 N3971 P2499 DWLD 3 -1 Int BE Pri
!#2 N3972 P2499 DWLD 4 -1 Int BE Pri
!#A N3971 N3972
!#2 N3973 P2500 DWLD 9 -1 FP BE Pri
!#2 N3974 P2500 DWLD 10 -1 FP BE Pri
!#A N3973 N3974
!#2 N3975 P2501 DWST_BINIT 5 0x10000b5 Int BE Pri
!#2 N3976 P2502 MEMBAR
!#2 N3977 P2503 ST 4 0x10000b6 Int BE Pri
!#2 N3978 P2504 DWST 0 0x10000b7 Int BE Pri
!#2 N3979 P2504 DWST 1 0x10000b8 Int BE Pri
!#A N3978 N3979
!#2 N3980 P2505 DWST_BINIT 12 0x10000b9 Int BE Pri
!#2 N3981 P2505 DWST_BINIT 13 0x10000ba Int BE Pri
!#A N3980 N3981
!#2 N3982 P2506 MEMBAR
!#2 N3983 P2507 LDD 12 -1 Int BE Pri
!#2 N3984 P2507 LDD 13 -1 Int BE Pri
!#A N3983 N3984
!#2 N3985 P2508 MEMBAR
!#2 N3986 P2509 BST 9 0x408000ab FP BE Pri
!#2 N3987 P2509 BST 10 0x408000ac FP BE Pri
!#A N3986 N3987
!#2 N3988 P2509 BST 11 0x408000ad FP BE Pri
!#2 N3989 P2510 MEMBAR
!#2 N3990 P2511 ST_BINIT 0 0x10000bb Int BE Pri
!#2 N3991 P2512 MEMBAR
!#2 N3992 P2513 LD 1 -1 Int BE Pri
!#2 N3993 P2513 CAS 1 -1 N3992 0x10000bc Int BE Pri
!#2 N3994 P2514 MEMBAR
!#2 N3995 P2515 BLD 15 -1 FP BE Pri
!#2 N3996 P2515 BLD 16 -1 FP BE Pri
!#A N3995 N3996
!#2 N3997 P2515 BLD 17 -1 FP BE Pri
!#2 N3998 P2516 MEMBAR
!#2 N3999 P2517 PREFETCH 9 Int BE Pri
!#2 N4000 P2518 LDD 0 -1 Int BE Pri
!#2 N4001 P2518 LDD 1 -1 Int BE Pri
!#A N4000 N4001
!#2 N4002 P2519 SWAP 14 0xffffffff 0x10000bd Int BE Pri
!#2 N4003 P2520 DWST_BINIT 5 0x10000be Int BE Pri
!#2 N4004 P2521 MEMBAR
!#2 N4005 P2522 LD 5 -1 Int BE Pri
!#2 N4006 P2522 CAS 5 -1 N4005 0x10000bf Int BE Pri
!#2 N4007 P2523 MEMBAR
!#2 N4008 P2524 BSTC 18 0x408000ae FP BE Pri
!#2 N4009 P2524 BSTC 19 0x408000af FP BE Pri
!#A N4008 N4009
!#2 N4010 P2524 BSTC 20 0x408000b0 FP BE Pri
!#2 N4011 P2525 MEMBAR
!#2 N4012 P2526 ST_BINIT 14 0x10000c0 Int BE Pri
!#2 N4013 P2527 MEMBAR
!#2 N4014 P2528 DWLD 2 -1,0x0 Int BE Pri
!#2 N4015 P2528 CASX 2 -1,0x0 N4014 0x10000c1 Int BE Pri
!#2 N4016 P2529 DWST_BINIT 9 0x10000c2 Int BE Pri
!#2 N4017 P2529 DWST_BINIT 10 0x10000c3 Int BE Pri
!#A N4016 N4017
!#2 N4018 P2530 MEMBAR
!#2 N4019 P2531 DWLD 17 -1 Int BE Pri
!#2 N4020 P2532 MEMBAR
!#2 N4021 P2533 BST 0 0x408000b1 FP BE Pri
!#2 N4022 P2533 BST 1 0x408000b2 FP BE Pri
!#A N4021 N4022
!#2 N4023 P2533 BST 2 0x408000b3 FP BE Pri
!#2 N4024 P2534 MEMBAR
!#2 N4025 P2535 ST_BINIT 17 0x10000c4 Int BE Pri
!#2 N4026 P2536 MEMBAR
!#2 N4027 P2537 BST 0 0x408000b4 FP BE Pri
!#2 N4028 P2537 BST 1 0x408000b5 FP BE Pri
!#A N4027 N4028
!#2 N4029 P2537 BST 2 0x408000b6 FP BE Pri
!#2 N4030 P2538 MEMBAR
!#2 N4031 P2539 BLD 12 -1 FP BE Pri
!#2 N4032 P2539 BLD 13 -1 FP BE Pri
!#A N4031 N4032
!#2 N4033 P2539 BLD 14 -1 FP BE Pri
!#2 N4034 P2540 MEMBAR
!#2 N4035 P2541 LD 0 -1 Int BE Pri
!#2 N4036 P2541 CAS 0 -1 N4035 0x10000c5 Int BE Pri
!#2 N4037 P2542 PREFETCH 5 Int BE Pri
!#2 N4038 P2543 PREFETCH 13 Int BE Pri
!#2 N4039 P2544 DWST 15 0x10000c6 Int BE Pri
!#2 N4040 P2544 DWST 16 0x10000c7 Int BE Pri
!#A N4039 N4040
!#2 N4041 P2545 DWST_BINIT 2 0x10000c8 Int BE Pri
!#2 N4042 P2546 MEMBAR
!#2 N4043 P2547 BLD 18 -1 FP BE Pri
!#2 N4044 P2547 BLD 19 -1 FP BE Pri
!#A N4043 N4044
!#2 N4045 P2547 BLD 20 -1 FP BE Pri
!#2 N4046 P2548 MEMBAR
!#2 N4047 P2549 ST 21 0x10000c9 Int BE Pri
!#2 N4048 P2550 MEMBAR
!#2 N4049 P2551 BLD 21 -1 FP BE Pri
!#2 N4050 P2551 BLD 22 -1 FP BE Pri
!#A N4049 N4050
!#2 N4051 P2551 BLD 23 -1 FP BE Pri
!#2 N4052 P2552 MEMBAR
!#2 N4053 P2553 DWLD 18 -1 Int BE Pri
!#2 N4054 P2553 DWLD 19 -1 Int BE Pri
!#A N4053 N4054
!#2 N4055 P2553 CASX 18 -1 N4053 0x10000ca Int BE Pri
!#2 N4056 P2553 CASX 19 -1 N4054 0x10000cb Int BE Pri
!#A N4055 N4056
!#2 N4057 P2554 DWST_BINIT 0 0x10000cc Int BE Pri
!#2 N4058 P2554 DWST_BINIT 1 0x10000cd Int BE Pri
!#A N4057 N4058
!#2 N4059 P2555 MEMBAR
!#2 N4060 P2556 PREFETCH 20 Int BE Pri
!#2 N4061 P2557 MEMBAR
!#2 N4062 P2558 BLD 9 -1 FP BE Pri
!#2 N4063 P2558 BLD 10 -1 FP BE Pri
!#A N4062 N4063
!#2 N4064 P2558 BLD 11 -1 FP BE Pri
!#2 N4065 P2559 MEMBAR
!#2 N4066 P2560 DWLD 20 -1 Int BE Pri
!#2 N4067 P2561 DWLD 14 -1 Int BE Pri
!#2 N4068 P2562 LD 18 -1 Int BE Pri
!#2 N4069 P2563 SWAP 7 0xffffffff 0x10000ce Int BE Pri
!#2 N4070 P2564 MEMBAR
!#2 N4071 P2565 BST 6 0x408000b7 FP BE Pri
!#2 N4072 P2565 BST 7 0x408000b8 FP BE Pri
!#A N4071 N4072
!#2 N4073 P2565 BST 8 0x408000b9 FP BE Pri
!#2 N4074 P2566 MEMBAR
!#2 N4075 P2567 LD 15 -1 Int BE Pri
!#2 N4076 P2568 PREFETCH 7 Int BE Pri
!#2 N4077 P2569 PREFETCH 11 Int BE Pri
!#2 N4078 P2570 LDD 5 -1 Int BE Pri
!#2 N4079 P2571 LD 14 -1 Int BE Pri
!#2 N4080 P2571 CAS 14 -1 N4079 0x10000cf Int BE Pri
!#2 N4081 P2572 PREFETCH 21 Int LE Pri
!#2 N4082 P2573 DWLD 12 -1 Int BE Pri
!#2 N4083 P2573 DWLD 13 -1 Int BE Pri
!#A N4082 N4083
!#2 N4084 P2573 CASX 12 -1 N4082 0x10000d0 Int BE Pri
!#2 N4085 P2573 CASX 13 -1 N4083 0x10000d1 Int BE Pri
!#A N4084 N4085
!#2 N4086 P2574 SWAP 14 0xffffffff 0x10000d2 Int BE Pri
!#2 N4087 P2575 DWST_BINIT 6 0x10000d3 Int BE Pri
!#2 N4088 P2575 DWST_BINIT 7 0x10000d4 Int BE Pri
!#A N4087 N4088
!#2 N4089 P2576 MEMBAR
!#2 N4090 P2577 DWLD 12 -1 FP BE Pri
!#2 N4091 P2577 DWLD 13 -1 FP BE Pri
!#A N4090 N4091
!#2 N4092 P2578 DWST_BINIT 0 0x10000d5 Int BE Pri
!#2 N4093 P2578 DWST_BINIT 1 0x10000d6 Int BE Pri
!#A N4092 N4093
!#2 N4094 P2579 MEMBAR
!#2 N4095 P2580 BSTC 3 0x408000ba FP BE Pri
!#2 N4096 P2580 BSTC 4 0x408000bb FP BE Pri
!#A N4095 N4096
!#2 N4097 P2580 BSTC 5 0x408000bc FP BE Pri
!#2 N4098 P2581 MEMBAR
!#2 N4099 P2582 LD 22 -1 Int BE Pri
!#2 N4100 P2582 CAS 22 -1 N4099 0x10000d7 Int BE Pri
!#2 N4101 P2583 LDD 3 -1 Int BE Pri
!#2 N4102 P2583 LDD 4 -1 Int BE Pri
!#A N4101 N4102
!#2 N4103 P2584 LD 18 -1 Int BE Pri
!#2 N4104 P2584 CAS 18 -1 N4103 0x10000d8 Int BE Pri
!#2 N4105 P2585 MEMBAR
!#2 N4106 P2586 BST 15 0x408000bd FP BE Pri
!#2 N4107 P2586 BST 16 0x408000be FP BE Pri
!#A N4106 N4107
!#2 N4108 P2586 BST 17 0x408000bf FP BE Pri
!#2 N4109 P2587 MEMBAR
!#2 N4110 P2588 DWST_BINIT 11 0x10000d9 Int BE Pri
!#2 N4111 P2589 MEMBAR
!#2 N4112 P2590 ST 13 0x10000da Int BE Pri
!#2 N4113 P2591 LD 18 -1 Int BE Pri
!#2 N4114 P2591 CAS 18 -1 N4113 0x10000db Int BE Pri
!#2 N4115 P2592 DWLD 0 -1 Int BE Pri
!#2 N4116 P2592 DWLD 1 -1 Int BE Pri
!#A N4115 N4116
!#2 N4117 P2592 CASX 0 -1 N4115 0x10000dc Int BE Pri
!#2 N4118 P2592 CASX 1 -1 N4116 0x10000dd Int BE Pri
!#A N4117 N4118
!#2 N4119 P2593 DWST_BINIT 17 0x10000de Int BE Pri
!#2 N4120 P2594 MEMBAR
!#2 N4121 P2595 BST 18 0x408000c0 FP BE Pri
!#2 N4122 P2595 BST 19 0x408000c1 FP BE Pri
!#A N4121 N4122
!#2 N4123 P2595 BST 20 0x408000c2 FP BE Pri
!#2 N4124 P2596 MEMBAR
!#2 N4125 P2597 BST 21 0x408000c3 FP BE Pri
!#2 N4126 P2597 BST 22 0x408000c4 FP BE Pri
!#A N4125 N4126
!#2 N4127 P2597 BST 23 0x408000c5 FP BE Pri
!#2 N4128 P2598 MEMBAR
!#2 N4129 P2599 ST_BINIT 6 0x10000df Int BE Pri
!#2 N4130 P2600 MEMBAR
!#2 N4131 P2601 LD 20 -1 Int BE Pri
!#2 N4132 P2602 DWLD 18 -1 Int LE Pri
!#2 N4133 P2602 DWLD 19 -1 Int LE Pri
!#A N4132 N4133
!#2 N4134 P2603 ST 20 0x408000c6 FP BE Pri
!#2 N4135 P2604 LD 21 -1 Int BE Pri
!#2 N4136 P2604 CAS 21 -1 N4135 0x10000e0 Int BE Pri
!#2 N4137 P2605 LD 23 -1 Int LE Pri
!#2 N4138 P2606 DWST_BINIT 21 0x10000e1 Int BE Pri
!#2 N4139 P2606 DWST_BINIT 22 0x10000e2 Int BE Pri
!#A N4138 N4139
!#2 N4140 P2607 MEMBAR
!#2 N4141 P2608 SWAP 7 0xffffffff 0x10000e3 Int BE Pri
!#2 N4142 P2609 LD 9 -1 Int BE Pri
!#2 N4143 P2610 DWLD 9 -1 Int BE Pri
!#2 N4144 P2610 DWLD 10 -1 Int BE Pri
!#A N4143 N4144
!#2 N4145 P2610 CASX 9 -1 N4143 0x10000e4 Int BE Pri
!#2 N4146 P2610 CASX 10 -1 N4144 0x10000e5 Int BE Pri
!#A N4145 N4146
!#2 N4147 P2611 ST 14 0x10000e6 Int BE Pri
!#2 N4148 P2612 LDD 20 -1 Int BE Pri
!#2 N4149 P2613 LDD 12 -1 Int BE Pri
!#2 N4150 P2613 LDD 13 -1 Int BE Pri
!#A N4149 N4150
!#2 N4151 P2614 DWLD 5 -1,0x0 Int BE Pri
!#2 N4152 P2614 CASX 5 -1,0x0 N4151 0x10000e7 Int BE Pri
!#2 N4153 P2615 DWLD 14 -1,0x0 Int BE Pri
!#2 N4154 P2615 CASX 14 -1,0x0 N4153 0x10000e8 Int BE Pri
!#2 N4155 P2616 DWLD 0 -1 Int BE Pri
!#2 N4156 P2616 DWLD 1 -1 Int BE Pri
!#A N4155 N4156
!#2 N4157 P2616 CASX 0 -1 N4155 0x10000e9 Int BE Pri
!#2 N4158 P2616 CASX 1 -1 N4156 0x10000ea Int BE Pri
!#A N4157 N4158
!#2 N4159 P2617 MEMBAR
!#2 N4160 P2618 BLD 18 -1 FP BE Pri
!#2 N4161 P2618 BLD 19 -1 FP BE Pri
!#A N4160 N4161
!#2 N4162 P2618 BLD 20 -1 FP BE Pri
!#2 N4163 P2619 MEMBAR
!#2 N4164 P2620 PREFETCH 18 Int BE Pri
!#2 N4165 P2621 ST 12 0x10000eb Int BE Pri
!#2 N4166 P2622 ST_BINIT 5 0x10000ec Int BE Pri
!#2 N4167 P2623 MEMBAR
!#2 N4168 P2624 BST 3 0x408000c7 FP BE Pri
!#2 N4169 P2624 BST 4 0x408000c8 FP BE Pri
!#A N4168 N4169
!#2 N4170 P2624 BST 5 0x408000c9 FP BE Pri
!#2 N4171 P2625 MEMBAR
!#2 N4172 P2626 DWST 6 0x10000ed Int BE Pri
!#2 N4173 P2626 DWST 7 0x10000ee Int BE Pri
!#A N4172 N4173
!#2 N4174 P2627 SWAP 23 0xffffffff 0x10000ef Int BE Pri
!#2 N4175 P2628 ST 12 0x10000f0 Int BE Pri
!#2 N4176 P2629 LD 9 -1 Int BE Pri
!#2 N4177 P2630 MEMBAR
!#2 N4178 P2631 BLD 15 -1 FP BE Pri
!#2 N4179 P2631 BLD 16 -1 FP BE Pri
!#A N4178 N4179
!#2 N4180 P2631 BLD 17 -1 FP BE Pri
!#2 N4181 P2632 MEMBAR
!#2 N4182 P2633 BLD 12 -1 FP BE Pri
!#2 N4183 P2633 BLD 13 -1 FP BE Pri
!#A N4182 N4183
!#2 N4184 P2633 BLD 14 -1 FP BE Pri
!#2 N4185 P2634 MEMBAR
!#2 N4186 P2635 LD 21 -1 Int BE Pri
!#2 N4187 P2635 CAS 21 -1 N4186 0x10000f1 Int BE Pri
!#2 N4188 P2636 DWLD 14 -1,0x0 Int BE Pri
!#2 N4189 P2636 CASX 14 -1,0x0 N4188 0x10000f2 Int BE Pri
!#2 N4190 P2637 LDD 6 -1 Int BE Pri
!#2 N4191 P2637 LDD 7 -1 Int BE Pri
!#A N4190 N4191
!#2 N4192 P2638 LD 17 -1 Int BE Pri
!#2 N4193 P2639 ST 17 0x10000f3 Int BE Pri
!#2 N4194 P2640 MEMBAR
!#2 N4195 P2641 BLD 6 -1 FP BE Pri
!#2 N4196 P2641 BLD 7 -1 FP BE Pri
!#A N4195 N4196
!#2 N4197 P2641 BLD 8 -1 FP BE Pri
!#2 N4198 P2642 MEMBAR
!#2 N4199 P2643 DWST 15 0x10000f4 Int BE Pri
!#2 N4200 P2643 DWST 16 0x10000f5 Int BE Pri
!#A N4199 N4200
!#2 N4201 P2644 LD 16 -1 Int BE Pri
!#2 N4202 P2645 MEMBAR
!#2 N4203 P2646 BST 21 0x408000ca FP BE Pri
!#2 N4204 P2646 BST 22 0x408000cb FP BE Pri
!#A N4203 N4204
!#2 N4205 P2646 BST 23 0x408000cc FP BE Pri
!#2 N4206 P2647 MEMBAR
!#2 N4207 P2648 PREFETCH 22 Int BE Pri
!#2 N4208 P2649 MEMBAR
!#2 N4209 P2650 BSTC 9 0x408000cd FP BE Pri
!#2 N4210 P2650 BSTC 10 0x408000ce FP BE Pri
!#A N4209 N4210
!#2 N4211 P2650 BSTC 11 0x408000cf FP BE Pri
!#2 N4212 P2651 MEMBAR
!#2 N4213 P2652 DWLD 3 -1 Int BE Pri
!#2 N4214 P2652 DWLD 4 -1 Int BE Pri
!#A N4213 N4214
!#2 N4215 P2652 CASX 3 -1 N4213 0x10000f6 Int BE Pri
!#2 N4216 P2652 CASX 4 -1 N4214 0x10000f7 Int BE Pri
!#A N4215 N4216
!#2 N4217 P2653 PREFETCH 2 Int BE Pri
!#2 N4218 P2654 DWLD 8 -1,0x0 Int BE Pri
!#2 N4219 P2654 CASX 8 -1,0x0 N4218 0x10000f8 Int BE Pri
!#2 N4220 P2655 SWAP 20 0xffffffff 0x10000f9 Int LE Pri
!#2 N4221 P2656 DWLD 8 -1 Int BE Pri
!#2 N4222 P2657 DWLD 6 -1 Int BE Pri
!#2 N4223 P2657 DWLD 7 -1 Int BE Pri
!#A N4222 N4223
!#2 N4224 P2657 CASX 6 -1 N4222 0x10000fa Int BE Pri
!#2 N4225 P2657 CASX 7 -1 N4223 0x10000fb Int BE Pri
!#A N4224 N4225
!#2 N4226 P2658 ST 15 0x10000fc Int BE Pri
!#2 N4227 P2659 MEMBAR
!#2 N4228 P2660 BLD 12 -1 FP BE Pri
!#2 N4229 P2660 BLD 13 -1 FP BE Pri
!#A N4228 N4229
!#2 N4230 P2660 BLD 14 -1 FP BE Pri
!#2 N4231 P2661 MEMBAR
!#2 N4232 P2662 BLD 9 -1 FP BE Pri
!#2 N4233 P2662 BLD 10 -1 FP BE Pri
!#A N4232 N4233
!#2 N4234 P2662 BLD 11 -1 FP BE Pri
!#2 N4235 P2663 MEMBAR
!#2 N4236 P2664 LD 15 -1 Int BE Pri
!#2 N4237 P2664 CAS 15 -1 N4236 0x10000fd Int BE Pri
!#2 N4238 P2665 DWST_BINIT 21 0x10000fe Int BE Pri
!#2 N4239 P2665 DWST_BINIT 22 0x10000ff Int BE Pri
!#A N4238 N4239
!#2 N4240 P2666 MEMBAR
!#2 N4241 P2667 DWST 17 0x1000100 Int BE Pri
!#2 N4242 P2668 PREFETCH 7 Int BE Pri
!#2 N4243 P2669 MEMBAR
!#2 N4244 P2670 BSTC 18 0x408000d0 FP BE Pri
!#2 N4245 P2670 BSTC 19 0x408000d1 FP BE Pri
!#A N4244 N4245
!#2 N4246 P2670 BSTC 20 0x408000d2 FP BE Pri
!#2 N4247 P2671 MEMBAR
!#2 N4248 P2672 SWAP 14 0xffffffff 0x1000101 Int BE Pri
!#2 N4249 P2673 LD 19 -1 Int BE Pri
!#2 N4250 P2673 CAS 19 -1 N4249 0x1000102 Int BE Pri
!#2 N4251 P2674 LDD 18 -1 Int BE Pri
!#2 N4252 P2674 LDD 19 -1 Int BE Pri
!#A N4251 N4252
!#2 N4253 P2675 DWST_BINIT 23 0x1000103 Int BE Pri
!#2 N4254 P2676 MEMBAR
!#2 N4255 P2677 BLD 9 -1 FP BE Pri
!#2 N4256 P2677 BLD 10 -1 FP BE Pri
!#A N4255 N4256
!#2 N4257 P2677 BLD 11 -1 FP BE Pri
!#2 N4258 P2678 MEMBAR
!#2 N4259 P2679 REPLACEMENT 6 Int BE Pri
!#2 N4260 P2680 REPLACEMENT 13 Int BE Pri
!#2 N4261 P2681 REPLACEMENT 20 Int BE Pri
!#2 N4262 P2682 PREFETCH 19 Int BE Pri
!#2 N4263 P2683 MEMBAR
!#2 N4264 P2684 BLD 15 -1 FP BE Pri
!#2 N4265 P2684 BLD 16 -1 FP BE Pri
!#A N4264 N4265
!#2 N4266 P2684 BLD 17 -1 FP BE Pri
!#2 N4267 P2685 MEMBAR
!#2 N4268 P2686 SWAP 22 0xffffffff 0x1000104 Int BE Pri
!#2 N4269 P2687 PREFETCH 21 Int BE Pri
!#2 N4270 P2688 DWLD 12 -1 Int BE Pri
!#2 N4271 P2688 DWLD 13 -1 Int BE Pri
!#A N4270 N4271
!#2 N4272 P2688 CASX 12 -1 N4270 0x1000105 Int BE Pri
!#2 N4273 P2688 CASX 13 -1 N4271 0x1000106 Int BE Pri
!#A N4272 N4273
!#2 N4274 P2689 ST 23 0x1000107 Int BE Pri
!#2 N4275 P2690 DWLD 12 -1 Int BE Pri
!#2 N4276 P2690 DWLD 13 -1 Int BE Pri
!#A N4275 N4276
!#2 N4277 P2690 CASX 12 -1 N4275 0x1000108 Int BE Pri
!#2 N4278 P2690 CASX 13 -1 N4276 0x1000109 Int BE Pri
!#A N4277 N4278
!#2 N4279 P2691 MEMBAR
!#2 N4280 P2692 BSTC 9 0x408000d3 FP BE Pri
!#2 N4281 P2692 BSTC 10 0x408000d4 FP BE Pri
!#A N4280 N4281
!#2 N4282 P2692 BSTC 11 0x408000d5 FP BE Pri
!#2 N4283 P2693 MEMBAR
!#2 N4284 P2694 BSTC 9 0x408000d6 FP BE Pri
!#2 N4285 P2694 BSTC 10 0x408000d7 FP BE Pri
!#A N4284 N4285
!#2 N4286 P2694 BSTC 11 0x408000d8 FP BE Pri
!#2 N4287 P2695 MEMBAR
!#2 N4288 P2696 ST_BINIT 0 0x100010a Int BE Pri
!#2 N4289 P2697 MEMBAR
!#2 N4290 P2698 REPLACEMENT 1 Int BE Pri
!#2 N4291 P2699 DWLD 21 -1 Int BE Pri
!#2 N4292 P2699 DWLD 22 -1 Int BE Pri
!#A N4291 N4292
!#2 N4293 P2699 CASX 21 -1 N4291 0x100010b Int BE Pri
!#2 N4294 P2699 CASX 22 -1 N4292 0x100010c Int BE Pri
!#A N4293 N4294
!#2 N4295 P2700 LD 1 -1 Int BE Pri
!#2 N4296 P2701 LD 19 -1 Int BE Pri
!#2 N4297 P2702 DWST_BINIT 3 0x100010d Int BE Pri
!#2 N4298 P2702 DWST_BINIT 4 0x100010e Int BE Pri
!#A N4297 N4298
!#2 N4299 P2703 MEMBAR
!#2 N4300 P2704 PREFETCH 6 Int BE Pri
!#2 N4301 P2705 REPLACEMENT 3 Int BE Pri
!#2 N4302 P2706 ST_BINIT 13 0x100010f Int BE Pri
!#2 N4303 P2707 MEMBAR
!#2 N4304 P2708 DWLD 8 -1,0x0 Int BE Pri
!#2 N4305 P2708 CASX 8 -1,0x0 N4304 0x1000110 Int BE Pri
!#2 N4306 P2709 DWLD 3 -1 Int BE Pri
!#2 N4307 P2709 DWLD 4 -1 Int BE Pri
!#A N4306 N4307
!#2 N4308 P2709 CASX 3 -1 N4306 0x1000111 Int BE Pri
!#2 N4309 P2709 CASX 4 -1 N4307 0x1000112 Int BE Pri
!#A N4308 N4309
!#2 N4310 P2710 DWST 21 0x1000113 Int BE Pri
!#2 N4311 P2710 DWST 22 0x1000114 Int BE Pri
!#A N4310 N4311
!#2 N4312 P2711 LDD 6 -1 Int BE Pri
!#2 N4313 P2711 LDD 7 -1 Int BE Pri
!#A N4312 N4313
!#2 N4314 P2712 LD 21 -1 Int BE Pri
!#2 N4315 P2713 PREFETCH 12 Int BE Pri
!#2 N4316 P2714 SWAP 23 0xffffffff 0x1000115 Int BE Pri
!#2 N4317 P2715 SWAP 5 0xffffffff 0x1000116 Int BE Pri
!#2 N4318 P2716 ST_BINIT 2 0x1000117 Int BE Pri
!#2 N4319 P2717 MEMBAR
!#2 N4320 P2718 SWAP 12 0xffffffff 0x1000118 Int BE Pri
!#2 N4321 P2719 ST_BINIT 20 0x1000119 Int BE Pri
!#2 N4322 P2720 MEMBAR
!#2 N4323 P2721 DWST_BINIT 18 0x100011a Int BE Pri
!#2 N4324 P2721 DWST_BINIT 19 0x100011b Int BE Pri
!#A N4323 N4324
!#2 N4325 P2722 MEMBAR
!#2 N4326 P2723 PREFETCH 23 Int BE Pri
!#2 N4327 P2724 PREFETCH 13 Int BE Pri
!#2 N4328 P2725 PREFETCH 16 Int BE Pri
!#2 N4329 P2726 REPLACEMENT 1 Int BE Pri
!#2 N4330 P2727 MEMBAR
!#2 N4331 P2728 BLD 21 -1 FP BE Pri
!#2 N4332 P2728 BLD 22 -1 FP BE Pri
!#A N4331 N4332
!#2 N4333 P2728 BLD 23 -1 FP BE Pri
!#2 N4334 P2729 MEMBAR
!#2 N4335 P2730 ST_BINIT 19 0x100011c Int BE Pri
!#2 N4336 P2731 MEMBAR
!#2 N4337 P2732 ST_BINIT 1 0x100011d Int BE Pri
!#2 N4338 P2733 MEMBAR
!#2 N4339 P2734 BST 6 0x408000d9 FP BE Pri
!#2 N4340 P2734 BST 7 0x408000da FP BE Pri
!#A N4339 N4340
!#2 N4341 P2734 BST 8 0x408000db FP BE Pri
!#2 N4342 P2735 MEMBAR
!#2 N4343 P2736 DWST 0 0x100011e Int BE Pri
!#2 N4344 P2736 DWST 1 0x100011f Int BE Pri
!#A N4343 N4344
!#2 N4345 P2737 ST_BINIT 16 0x1000120 Int BE Pri
!#2 N4346 P2738 MEMBAR
!#2 N4347 P2739 PREFETCH 9 Int BE Pri
!#2 N4348 P2740 PREFETCH 19 Int BE Pri
!#2 N4349 P2741 DWST_BINIT 6 0x1000121 Int BE Pri
!#2 N4350 P2741 DWST_BINIT 7 0x1000122 Int BE Pri
!#A N4349 N4350
!#2 N4351 P2742 MEMBAR
!#2 N4352 P2743 BST 3 0x408000dc FP BE Pri
!#2 N4353 P2743 BST 4 0x408000dd FP BE Pri
!#A N4352 N4353
!#2 N4354 P2743 BST 5 0x408000de FP BE Pri
!#2 N4355 P2744 MEMBAR
!#2 N4356 P2745 PREFETCH 3 Int BE Pri
!#2 N4357 P2746 DWLD 9 -1 Int BE Pri
!#2 N4358 P2746 DWLD 10 -1 Int BE Pri
!#A N4357 N4358
!#2 N4359 P2747 MEMBAR
!#2 N4360 P2748 BSTC 21 0x408000df FP BE Pri
!#2 N4361 P2748 BSTC 22 0x408000e0 FP BE Pri
!#A N4360 N4361
!#2 N4362 P2748 BSTC 23 0x408000e1 FP BE Pri
!#2 N4363 P2749 MEMBAR
!#2 N4364 P2750 DWLD 3 -1 Int BE Pri
!#2 N4365 P2750 DWLD 4 -1 Int BE Pri
!#A N4364 N4365
!#2 N4366 P2751 SWAP 15 0xffffffff 0x1000123 Int BE Pri
!#2 N4367 P2752 PREFETCH 4 Int BE Pri
!#2 N4368 P2753 LD 11 -1 Int BE Pri
!#2 N4369 P2754 MEMBAR
!#2 N4370 P2755 BLD 3 -1 FP BE Pri
!#2 N4371 P2755 BLD 4 -1 FP BE Pri
!#A N4370 N4371
!#2 N4372 P2755 BLD 5 -1 FP BE Pri
!#2 N4373 P2756 MEMBAR
!#2 N4374 P2757 PREFETCH 5 Int BE Pri
!#2 N4375 P2758 MEMBAR
!#2 N4376 P2759 BST 15 0x408000e2 FP BE Pri
!#2 N4377 P2759 BST 16 0x408000e3 FP BE Pri
!#A N4376 N4377
!#2 N4378 P2759 BST 17 0x408000e4 FP BE Pri
!#2 N4379 P2760 MEMBAR
!#2 N4380 P2761 ST_BINIT 5 0x1000124 Int LE Pri
!#2 N4381 P2762 MEMBAR
!#2 N4382 P2763 ST 12 0x1000125 Int BE Pri
!#2 N4383 P2764 MEMBAR
!#2 N4384 P2765 BST 9 0x408000e5 FP BE Pri
!#2 N4385 P2765 BST 10 0x408000e6 FP BE Pri
!#A N4384 N4385
!#2 N4386 P2765 BST 11 0x408000e7 FP BE Pri
!#2 N4387 P2766 MEMBAR
!#2 N4388 P2767 LDD 9 -1 Int BE Pri
!#2 N4389 P2767 LDD 10 -1 Int BE Pri
!#A N4388 N4389
!#2 N4390 P2768 ST_BINIT 8 0x1000126 Int BE Pri
!#2 N4391 P2769 MEMBAR
!#2 N4392 P2770 BSTC 3 0x408000e8 FP BE Pri
!#2 N4393 P2770 BSTC 4 0x408000e9 FP BE Pri
!#A N4392 N4393
!#2 N4394 P2770 BSTC 5 0x408000ea FP BE Pri
!#2 N4395 P2771 MEMBAR
!#2 N4396 P2772 LD 4 -1 Int BE Pri
!#2 N4397 P2773 ST_BINIT 20 0x1000127 Int BE Pri
!#2 N4398 P2774 MEMBAR
!#2 N4399 P2775 ST 0 0x1000128 Int BE Pri
!#2 N4400 P2776 PREFETCH 2 Int BE Pri
!#2 N4401 P2777 DWST 0 0x1000129 Int BE Pri
!#2 N4402 P2777 DWST 1 0x100012a Int BE Pri
!#A N4401 N4402
!#2 N4403 P2778 MEMBAR
!#2 N4404 P2779 BST 18 0x408000eb FP BE Pri
!#2 N4405 P2779 BST 19 0x408000ec FP BE Pri
!#A N4404 N4405
!#2 N4406 P2779 BST 20 0x408000ed FP BE Pri
!#2 N4407 P2780 MEMBAR
!#2 N4408 P2781 DWST 6 0x408000ee FP BE Pri
!#2 N4409 P2781 DWST 7 0x408000ef FP BE Pri
!#A N4408 N4409
!#2 N4410 P2782 LDD 0 -1 Int BE Pri
!#2 N4411 P2782 LDD 1 -1 Int BE Pri
!#A N4410 N4411
!#2 N4412 P2783 SWAP 8 0xffffffff 0x100012b Int BE Pri
!#2 N4413 P2784 MEMBAR
!#2 N4414 P2785 BSTC 18 0x408000f0 FP BE Pri
!#2 N4415 P2785 BSTC 19 0x408000f1 FP BE Pri
!#A N4414 N4415
!#2 N4416 P2785 BSTC 20 0x408000f2 FP BE Pri
!#2 N4417 P2786 MEMBAR
!#2 N4418 P2787 PREFETCH 17 Int BE Pri
!#2 N4419 P2788 LD 2 -1 Int BE Pri
!#2 N4420 P2789 ST_BINIT 3 0x100012c Int BE Pri
!#2 N4421 P2790 MEMBAR
!#2 N4422 P2791 PREFETCH 15 Int BE Pri
!#2 N4423 P2792 REPLACEMENT 1 Int BE Pri
!#2 N4424 P2793 DWLD 8 -1,0x0 Int BE Pri
!#2 N4425 P2793 CASX 8 -1,0x0 N4424 0x100012d Int BE Pri
!#2 N4426 P2794 ST_BINIT 15 0x100012e Int BE Pri
!#2 N4427 P2795 MEMBAR
!#2 N4428 P2796 BST 0 0x408000f3 FP BE Pri
!#2 N4429 P2796 BST 1 0x408000f4 FP BE Pri
!#A N4428 N4429
!#2 N4430 P2796 BST 2 0x408000f5 FP BE Pri
!#2 N4431 P2797 MEMBAR
!#2 N4432 P2798 DWST 0 0x100012f Int BE Pri
!#2 N4433 P2798 DWST 1 0x1000130 Int BE Pri
!#A N4432 N4433
!#2 N4434 P2799 DWST 17 0x1000131 Int BE Pri
!#2 N4435 P2800 LD 20 -1 Int BE Pri
!#2 N4436 P2800 CAS 20 -1 N4435 0x1000132 Int BE Pri
!#2 N4437 P2801 LD 18 -1 Int LE Pri
!#2 N4438 P2801 CAS 18 -1 N4437 0x1000133 Int LE Pri
!#2 N4439 P2802 DWLD 9 -1 Int BE Pri
!#2 N4440 P2802 DWLD 10 -1 Int BE Pri
!#A N4439 N4440
!#2 N4441 P2803 DWST_BINIT 18 0x1000134 Int BE Pri
!#2 N4442 P2803 DWST_BINIT 19 0x1000135 Int BE Pri
!#A N4441 N4442
!#2 N4443 P2804 MEMBAR
!#2 N4444 P2805 PREFETCH 6 Int BE Pri
!#2 N4445 P2806 DWLD 6 -1 Int BE Pri
!#2 N4446 P2806 DWLD 7 -1 Int BE Pri
!#A N4445 N4446
!#2 N4447 P2806 CASX 6 -1 N4445 0x1000136 Int BE Pri
!#2 N4448 P2806 CASX 7 -1 N4446 0x1000137 Int BE Pri
!#A N4447 N4448
!#2 N4449 P2807 SWAP 17 0xffffffff 0x1000138 Int BE Pri
!#2 N4450 P2808 LDD 6 -1 Int BE Pri
!#2 N4451 P2808 LDD 7 -1 Int BE Pri
!#A N4450 N4451
!#2 N4452 P2809 MEMBAR
!#2 N4453 P2810 BLD 6 -1 FP BE Pri
!#2 N4454 P2810 BLD 7 -1 FP BE Pri
!#A N4453 N4454
!#2 N4455 P2810 BLD 8 -1 FP BE Pri
!#2 N4456 P2811 MEMBAR
!#2 N4457 P2812 BLD 3 -1 FP BE Pri
!#2 N4458 P2812 BLD 4 -1 FP BE Pri
!#A N4457 N4458
!#2 N4459 P2812 BLD 5 -1 FP BE Pri
!#2 N4460 P2813 MEMBAR
!#2 N4461 P2814 DWLD 14 -1 Int LE Pri
!#2 N4462 P2815 REPLACEMENT 15 Int BE Pri
!#2 N4463 P2816 MEMBAR
!#2 N4464 P2817 BSTC 18 0x408000f6 FP BE Pri
!#2 N4465 P2817 BSTC 19 0x408000f7 FP BE Pri
!#A N4464 N4465
!#2 N4466 P2817 BSTC 20 0x408000f8 FP BE Pri
!#2 N4467 P2818 MEMBAR
!#2 N4468 P2819 ST_BINIT 15 0x1000139 Int BE Pri
!#2 N4469 P2820 MEMBAR
!#2 N4470 P2821 DWLD 12 -1 Int BE Pri
!#2 N4471 P2821 DWLD 13 -1 Int BE Pri
!#A N4470 N4471
!#2 N4472 P2822 MEMBAR
!#2 N4473 P2823 BSTC 9 0x408000f9 FP BE Pri
!#2 N4474 P2823 BSTC 10 0x408000fa FP BE Pri
!#A N4473 N4474
!#2 N4475 P2823 BSTC 11 0x408000fb FP BE Pri
!#2 N4476 P2824 MEMBAR
!#2 N4477 P2825 DWST_BINIT 18 0x100013a Int BE Pri
!#2 N4478 P2825 DWST_BINIT 19 0x100013b Int BE Pri
!#A N4477 N4478
!#2 N4479 P2826 MEMBAR
!#2 N4480 P2827 ST_BINIT 1 0x100013c Int BE Pri
!#2 N4481 P2828 MEMBAR
!#2 N4482 P2829 LD 1 -1 Int BE Pri
!#2 N4483 P2830 ST 21 0x100013d Int BE Pri
!#2 N4484 P2831 PREFETCH 18 Int BE Pri
!#2 N4485 P2832 MEMBAR
!#2 N4486 P2833 BLD 18 -1 FP BE Pri
!#2 N4487 P2833 BLD 19 -1 FP BE Pri
!#A N4486 N4487
!#2 N4488 P2833 BLD 20 -1 FP BE Pri
!#2 N4489 P2834 MEMBAR
!#2 N4490 P2835 DWLD 3 -1 Int BE Pri
!#2 N4491 P2835 DWLD 4 -1 Int BE Pri
!#A N4490 N4491
!#2 N4492 P2835 CASX 3 -1 N4490 0x100013e Int BE Pri
!#2 N4493 P2835 CASX 4 -1 N4491 0x100013f Int BE Pri
!#A N4492 N4493
!#2 N4494 P2836 LD 10 -1 Int BE Pri
!#2 N4495 P2836 CAS 10 -1 N4494 0x1000140 Int BE Pri
!#2 N4496 P2837 MEMBAR
!#2 N4497 P2838 BSTC 21 0x408000fc FP BE Pri
!#2 N4498 P2838 BSTC 22 0x408000fd FP BE Pri
!#A N4497 N4498
!#2 N4499 P2838 BSTC 23 0x408000fe FP BE Pri
!#2 N4500 P2839 MEMBAR
!#2 N4501 P2840 REPLACEMENT 4 Int BE Pri
!#2 N4502 P2841 ST_BINIT 19 0x1000141 Int BE Pri
!#2 N4503 P2842 MEMBAR
!#2 N4504 P2843 DWLD 9 -1 Int BE Pri
!#2 N4505 P2843 DWLD 10 -1 Int BE Pri
!#A N4504 N4505
!#2 N4506 P2843 CASX 9 -1 N4504 0x1000142 Int BE Pri
!#2 N4507 P2843 CASX 10 -1 N4505 0x1000143 Int BE Pri
!#A N4506 N4507
!#2 N4508 P2844 PREFETCH 12 Int BE Pri
!#2 N4509 P2845 DWST_BINIT 6 0x1000144 Int BE Pri
!#2 N4510 P2845 DWST_BINIT 7 0x1000145 Int BE Pri
!#A N4509 N4510
!#2 N4511 P2846 MEMBAR
!#2 N4512 P2847 BLD 9 -1 FP BE Pri
!#2 N4513 P2847 BLD 10 -1 FP BE Pri
!#A N4512 N4513
!#2 N4514 P2847 BLD 11 -1 FP BE Pri
!#2 N4515 P2848 MEMBAR
!#2 N4516 P2849 DWST 3 0x1000146 Int BE Pri
!#2 N4517 P2849 DWST 4 0x1000147 Int BE Pri
!#A N4516 N4517
!#2 N4518 P2850 DWST_BINIT 15 0x1000148 Int BE Pri
!#2 N4519 P2850 DWST_BINIT 16 0x1000149 Int BE Pri
!#A N4518 N4519
!#2 N4520 P2851 MEMBAR
!#2 N4521 P2852 DWLD 21 -1 Int BE Pri
!#2 N4522 P2852 DWLD 22 -1 Int BE Pri
!#A N4521 N4522
!#2 N4523 P2853 MEMBAR
!#2 N4524 P2854 BSTC 18 0x408000ff FP BE Pri
!#2 N4525 P2854 BSTC 19 0x40800100 FP BE Pri
!#A N4524 N4525
!#2 N4526 P2854 BSTC 20 0x40800101 FP BE Pri
!#2 N4527 P2855 MEMBAR
!#2 N4528 P2856 BST 15 0x40800102 FP BE Pri
!#2 N4529 P2856 BST 16 0x40800103 FP BE Pri
!#A N4528 N4529
!#2 N4530 P2856 BST 17 0x40800104 FP BE Pri
!#2 N4531 P2857 MEMBAR
!#2 N4532 P2858 BLD 0 -1 FP BE Pri
!#2 N4533 P2858 BLD 1 -1 FP BE Pri
!#A N4532 N4533
!#2 N4534 P2858 BLD 2 -1 FP BE Pri
!#2 N4535 P2859 MEMBAR
!#2 N4536 P2860 ST 14 0x100014a Int BE Pri
!#2 N4537 P2861 DWST_BINIT 11 0x100014b Int BE Pri
!#2 N4538 P2862 MEMBAR
!#2 N4539 P2863 SWAP 16 0xffffffff 0x100014c Int BE Pri
!#2 N4540 P2864 MEMBAR
!#2 N4541 P2865 BLD 15 -1 FP BE Pri
!#2 N4542 P2865 BLD 16 -1 FP BE Pri
!#A N4541 N4542
!#2 N4543 P2865 BLD 17 -1 FP BE Pri
!#2 N4544 P2866 MEMBAR
!#2 N4545 P2867 BSTC 6 0x40800105 FP BE Pri
!#2 N4546 P2867 BSTC 7 0x40800106 FP BE Pri
!#A N4545 N4546
!#2 N4547 P2867 BSTC 8 0x40800107 FP BE Pri
!#2 N4548 P2868 MEMBAR
!#2 N4549 P2869 REPLACEMENT 6 Int BE Pri
!#2 N4550 P2870 LD 3 -1 Int LE Pri
!#2 N4551 P2870 CAS 3 -1 N4550 0x100014d Int LE Pri
!#2 N4552 P2871 MEMBAR
!#2 N4553 P2872 BLD 9 -1 FP BE Pri
!#2 N4554 P2872 BLD 10 -1 FP BE Pri
!#A N4553 N4554
!#2 N4555 P2872 BLD 11 -1 FP BE Pri
!#2 N4556 P2873 MEMBAR
!#2 N4557 P2874 BSTC 12 0x40800108 FP BE Pri
!#2 N4558 P2874 BSTC 13 0x40800109 FP BE Pri
!#A N4557 N4558
!#2 N4559 P2874 BSTC 14 0x4080010a FP BE Pri
!#2 N4560 P2875 MEMBAR
!#2 N4561 P2876 REPLACEMENT 6 Int BE Pri
!#2 N4562 P2877 PREFETCH 4 Int BE Pri
!#2 N4563 P2878 MEMBAR
!#2 N4564 P2879 BLD 3 -1 FP BE Pri
!#2 N4565 P2879 BLD 4 -1 FP BE Pri
!#A N4564 N4565
!#2 N4566 P2879 BLD 5 -1 FP BE Pri
!#2 N4567 P2880 MEMBAR
!#2 N4568 P2881 BST 3 0x4080010b FP BE Pri
!#2 N4569 P2881 BST 4 0x4080010c FP BE Pri
!#A N4568 N4569
!#2 N4570 P2881 BST 5 0x4080010d FP BE Pri
!#2 N4571 P2882 MEMBAR
!#2 N4572 P2883 DWLD 9 -1 Int BE Pri
!#2 N4573 P2883 DWLD 10 -1 Int BE Pri
!#A N4572 N4573
!#2 N4574 P2884 LD 5 -1 Int BE Pri
!#2 N4575 P2884 CAS 5 -1 N4574 0x100014e Int BE Pri
!#2 N4576 P2885 MEMBAR
!#2 N4577 P2886 BLD 21 -1 FP BE Pri
!#2 N4578 P2886 BLD 22 -1 FP BE Pri
!#A N4577 N4578
!#2 N4579 P2886 BLD 23 -1 FP BE Pri
!#2 N4580 P2887 MEMBAR
!#2 N4581 P2888 BSTC 21 0x4080010e FP BE Pri
!#2 N4582 P2888 BSTC 22 0x4080010f FP BE Pri
!#A N4581 N4582
!#2 N4583 P2888 BSTC 23 0x40800110 FP BE Pri
!#2 N4584 P2889 MEMBAR
!#2 N4585 P2890 ST_BINIT 10 0x100014f Int BE Pri
!#2 N4586 P2891 MEMBAR
!#2 N4587 P2892 BSTC 0 0x40800111 FP BE Pri
!#2 N4588 P2892 BSTC 1 0x40800112 FP BE Pri
!#A N4587 N4588
!#2 N4589 P2892 BSTC 2 0x40800113 FP BE Pri
!#2 N4590 P2893 MEMBAR
!#2 N4591 P2894 DWLD 14 -1,0x0 Int BE Pri
!#2 N4592 P2894 CASX 14 -1,0x0 N4591 0x1000150 Int BE Pri
!#2 N4593 P2895 MEMBAR
!#2 N4594 P2896 BST 15 0x40800114 FP BE Pri
!#2 N4595 P2896 BST 16 0x40800115 FP BE Pri
!#A N4594 N4595
!#2 N4596 P2896 BST 17 0x40800116 FP BE Pri
!#2 N4597 P2897 MEMBAR
!#2 N4598 P2898 BSTC 18 0x40800117 FP BE Pri
!#2 N4599 P2898 BSTC 19 0x40800118 FP BE Pri
!#A N4598 N4599
!#2 N4600 P2898 BSTC 20 0x40800119 FP BE Pri
!#2 N4601 P2899 MEMBAR
!#2 N4602 P2900 BST 6 0x4080011a FP BE Pri
!#2 N4603 P2900 BST 7 0x4080011b FP BE Pri
!#A N4602 N4603
!#2 N4604 P2900 BST 8 0x4080011c FP BE Pri
!#2 N4605 P2901 MEMBAR
!#2 N4606 P2902 BSTC 0 0x4080011d FP BE Pri
!#2 N4607 P2902 BSTC 1 0x4080011e FP BE Pri
!#A N4606 N4607
!#2 N4608 P2902 BSTC 2 0x4080011f FP BE Pri
!#2 N4609 P2903 MEMBAR
!#2 N4610 P2904 DWLD 17 -1 Int BE Pri
!#2 N4611 P2905 LD 10 -1 Int BE Pri
!#2 N4612 P2905 CAS 10 -1 N4611 0x1000151 Int BE Pri
!#2 N4613 P2906 LD 8 -1 Int BE Pri
!#2 N4614 P2906 CAS 8 -1 N4613 0x1000152 Int BE Pri
!#2 N4615 P2907 LD 19 -1 FP BE Pri
!#2 N4616 P2908 PREFETCH 4 Int BE Pri
!#2 N4617 P2909 DWST 9 0x40800120 FP BE Pri
!#2 N4618 P2909 DWST 10 0x40800121 FP BE Pri
!#A N4617 N4618
!#2 N4619 P2910 ST_BINIT 20 0x1000153 Int BE Pri
!#2 N4620 P2911 MEMBAR
!#2 N4621 P2912 LD 17 -1 Int BE Pri
!#2 N4622 P2913 DWST 15 0x1000154 Int LE Pri
!#2 N4623 P2913 DWST 16 0x1000155 Int LE Pri
!#A N4622 N4623
!#2 N4624 P2914 ST_BINIT 12 0x1000156 Int BE Pri
!#2 N4625 P2915 MEMBAR
!#2 N4626 P2916 LD 17 -1 Int BE Pri
!#2 N4627 P2916 CAS 17 -1 N4626 0x1000157 Int BE Pri
!#2 N4628 P2917 LDD 23 -1 Int BE Pri
!#2 N4629 P2918 MEMBAR
!#2 N4630 P2919 BSTC 15 0x40800122 FP BE Pri
!#2 N4631 P2919 BSTC 16 0x40800123 FP BE Pri
!#A N4630 N4631
!#2 N4632 P2919 BSTC 17 0x40800124 FP BE Pri
!#2 N4633 P2920 MEMBAR
!#2 N4634 P2921 BST 15 0x40800125 FP BE Pri
!#2 N4635 P2921 BST 16 0x40800126 FP BE Pri
!#A N4634 N4635
!#2 N4636 P2921 BST 17 0x40800127 FP BE Pri
!#2 N4637 P2922 MEMBAR
!#2 N4638 P2923 DWLD 15 -1 Int BE Pri
!#2 N4639 P2923 DWLD 16 -1 Int BE Pri
!#A N4638 N4639
!#2 N4640 P2923 CASX 15 -1 N4638 0x1000158 Int BE Pri
!#2 N4641 P2923 CASX 16 -1 N4639 0x1000159 Int BE Pri
!#A N4640 N4641
!#2 N4642 P2924 MEMBAR
!#2 N4643 P2925 BSTC 15 0x40800128 FP BE Pri
!#2 N4644 P2925 BSTC 16 0x40800129 FP BE Pri
!#A N4643 N4644
!#2 N4645 P2925 BSTC 17 0x4080012a FP BE Pri
!#2 N4646 P2926 MEMBAR
!#2 N4647 P2927 LD 2 -1 Int BE Pri
!#2 N4648 P2928 LD 6 -1 Int BE Pri
!#2 N4649 P2929 ST_BINIT 13 0x100015a Int BE Pri
!#2 N4650 P2930 MEMBAR
!#2 N4651 P2931 DWST_BINIT 11 0x100015b Int BE Pri
!#2 N4652 P2932 MEMBAR
!#2 N4653 P2933 DWST 2 0x100015c Int BE Pri
!#2 N4654 P2934 MEMBAR
!#2 N4655 P2935 BLD 18 -1 FP BE Pri
!#2 N4656 P2935 BLD 19 -1 FP BE Pri
!#A N4655 N4656
!#2 N4657 P2935 BLD 20 -1 FP BE Pri
!#2 N4658 P2936 MEMBAR
!#2 N4659 P2937 SWAP 23 0xffffffff 0x100015d Int BE Pri
!#2 N4660 P2938 MEMBAR
!#2 N4661 P2939 BSTC 21 0x4080012b FP BE Pri
!#2 N4662 P2939 BSTC 22 0x4080012c FP BE Pri
!#A N4661 N4662
!#2 N4663 P2939 BSTC 23 0x4080012d FP BE Pri
!#2 N4664 P2940 MEMBAR
!#2 N4665 P2941 LD 21 -1 Int BE Pri
!#2 N4666 P2941 CAS 21 -1 N4665 0x100015e Int BE Pri
!#2 N4667 P2942 ST 20 0x100015f Int BE Pri
!#2 N4668 P2943 MEMBAR
!#2 N4669 P2944 BST 0 0x4080012e FP BE Pri
!#2 N4670 P2944 BST 1 0x4080012f FP BE Pri
!#A N4669 N4670
!#2 N4671 P2944 BST 2 0x40800130 FP BE Pri
!#2 N4672 P2945 MEMBAR
!#2 N4673 P2946 REPLACEMENT 15 Int BE Pri
!#2 N4674 P2947 LDD 9 -1 Int BE Pri
!#2 N4675 P2947 LDD 10 -1 Int BE Pri
!#A N4674 N4675
!#2 N4676 P2948 MEMBAR
!#2 N4677 P2949 BST 12 0x40800131 FP BE Pri
!#2 N4678 P2949 BST 13 0x40800132 FP BE Pri
!#A N4677 N4678
!#2 N4679 P2949 BST 14 0x40800133 FP BE Pri
!#2 N4680 P2950 MEMBAR
!#2 N4681 P2951 DWLD 8 -1 Int BE Pri
!#2 N4682 P2952 ST_BINIT 16 0x1000160 Int BE Pri
!#2 N4683 P2953 MEMBAR
!#2 N4684 P2954 ST_BINIT 16 0x1000161 Int BE Pri
!#2 N4685 P2955 MEMBAR
!#2 N4686 P2956 ST_BINIT 12 0x1000162 Int BE Pri
!#2 N4687 P2957 MEMBAR
!#2 N4688 P2958 BLD 6 -1 FP BE Pri
!#2 N4689 P2958 BLD 7 -1 FP BE Pri
!#A N4688 N4689
!#2 N4690 P2958 BLD 8 -1 FP BE Pri
!#2 N4691 P2959 MEMBAR
!#2 N4692 P2960 LDD 21 -1 Int BE Pri
!#2 N4693 P2960 LDD 22 -1 Int BE Pri
!#A N4692 N4693
!#2 N4694 P2961 LD 0 -1 Int BE Pri
!#2 N4695 P2962 LD 23 -1 Int BE Pri
!#2 N4696 P2962 CAS 23 -1 N4695 0x1000163 Int BE Pri
!#2 N4697 P2963 LDD 2 -1 Int BE Pri
!#2 N4698 P2964 MEMBAR
!#2 N4699 P2965 BST 3 0x40800134 FP BE Pri
!#2 N4700 P2965 BST 4 0x40800135 FP BE Pri
!#A N4699 N4700
!#2 N4701 P2965 BST 5 0x40800136 FP BE Pri
!#2 N4702 P2966 MEMBAR
!#2 N4703 P2967 DWST_BINIT 11 0x1000164 Int BE Pri
!#2 N4704 P2968 MEMBAR
!#2 N4705 P2969 DWST 0 0x1000165 Int BE Pri
!#2 N4706 P2969 DWST 1 0x1000166 Int BE Pri
!#A N4705 N4706
!#2 N4707 P2970 DWST 21 0x1000167 Int BE Pri
!#2 N4708 P2970 DWST 22 0x1000168 Int BE Pri
!#A N4707 N4708
!#2 N4709 P2971 REPLACEMENT 15 Int BE Pri
!#2 N4710 P2972 DWLD 2 -1 Int BE Pri
!#2 N4711 P2973 SWAP 3 0xffffffff 0x1000169 Int BE Pri
!#2 N4712 P2974 ST_BINIT 12 0x100016a Int BE Pri
!#2 N4713 P2975 MEMBAR
!#2 N4714 P2976 BLD 18 -1 FP BE Pri
!#2 N4715 P2976 BLD 19 -1 FP BE Pri
!#A N4714 N4715
!#2 N4716 P2976 BLD 20 -1 FP BE Pri
!#2 N4717 P2977 MEMBAR
!#2 N4718 P2978 REPLACEMENT 18 Int BE Pri
!#2 N4719 P2979 ST 0 0x100016b Int BE Pri
!#2 N4720 P2980 DWST_BINIT 12 0x100016c Int BE Pri
!#2 N4721 P2980 DWST_BINIT 13 0x100016d Int BE Pri
!#A N4720 N4721
!#2 N4722 P2981 MEMBAR
!#2 N4723 P2982 BLD 12 -1 FP BE Pri
!#2 N4724 P2982 BLD 13 -1 FP BE Pri
!#A N4723 N4724
!#2 N4725 P2982 BLD 14 -1 FP BE Pri
!#2 N4726 P2983 MEMBAR
!#2 N4727 P2984 BST 12 0x40800137 FP BE Pri
!#2 N4728 P2984 BST 13 0x40800138 FP BE Pri
!#A N4727 N4728
!#2 N4729 P2984 BST 14 0x40800139 FP BE Pri
!#2 N4730 P2985 MEMBAR
!#2 N4731 P2986 LD 7 -1 Int BE Pri
!#2 N4732 P2986 CAS 7 -1 N4731 0x100016e Int BE Pri
!#2 N4733 P2987 DWST 0 0x100016f Int BE Pri
!#2 N4734 P2987 DWST 1 0x1000170 Int BE Pri
!#A N4733 N4734
!#2 N4735 P2988 SWAP 12 0xffffffff 0x1000171 Int BE Pri
!#2 N4736 P2989 MEMBAR
!#2 N4737 P2990 BLD 15 -1 FP BE Pri
!#2 N4738 P2990 BLD 16 -1 FP BE Pri
!#A N4737 N4738
!#2 N4739 P2990 BLD 17 -1 FP BE Pri
!#2 N4740 P2991 MEMBAR
!#2 N4741 P2992 DWLD 23 -1,0x0 Int BE Pri
!#2 N4742 P2992 CASX 23 -1,0x0 N4741 0x1000172 Int BE Pri
!#2 N4743 P2993 LDD 15 -1 Int BE Pri
!#2 N4744 P2993 LDD 16 -1 Int BE Pri
!#A N4743 N4744
!#2 N4745 P2994 ST_BINIT 20 0x1000173 Int BE Pri
!#2 N4746 P2995 MEMBAR
!#2 N4747 P2996 LDD 0 -1 Int BE Pri
!#2 N4748 P2996 LDD 1 -1 Int BE Pri
!#A N4747 N4748
!#2 N4749 P2997 PREFETCH 13 Int BE Pri
!#2 N4750 P2998 ST_BINIT 3 0x1000174 Int BE Pri
!#2 N4751 P2999 MEMBAR
!#2 N4752 P3000 DWST 2 0x1000175 Int BE Pri
!#2 N4753 P3001 DWST_BINIT 23 0x1000176 Int BE Pri
!#2 N4754 P3002 MEMBAR
!#2 N4755 P3003 ST_BINIT 14 0x1000177 Int BE Pri
!#2 N4756 P3004 MEMBAR
!#2 N4757 P3005 MEMBAR
!#3 N4758 P3006 ST_BINIT 0 0x1800001 Int BE Pri Loop_entry
!#3 N4759 P3007 MEMBAR
!#3 N4760 P3008 LDD 12 -1 Int BE Pri
!#3 N4761 P3008 LDD 13 -1 Int BE Pri
!#A N4760 N4761
!#3 N4762 P3009 LD 0 -1 Int BE Pri
!#3 N4763 P3009 CAS 0 -1 N4762 0x1800002 Int BE Pri
!#3 N4764 P3010 DWLD 6 -1 Int LE Pri
!#3 N4765 P3010 DWLD 7 -1 Int LE Pri
!#A N4764 N4765
!#3 N4766 P3010 CASX 6 -1 N4764 0x1800003 Int LE Pri
!#3 N4767 P3010 CASX 7 -1 N4765 0x1800004 Int LE Pri
!#A N4766 N4767
!#3 N4768 P3011 DWST_BINIT 3 0x1800005 Int BE Pri
!#3 N4769 P3011 DWST_BINIT 4 0x1800006 Int BE Pri
!#A N4768 N4769
!#3 N4770 P3012 MEMBAR
!#3 N4771 P3013 LDD 12 -1 Int BE Pri
!#3 N4772 P3013 LDD 13 -1 Int BE Pri
!#A N4771 N4772
!#3 N4773 P3014 ST_BINIT 11 0x1800007 Int BE Pri
!#3 N4774 P3015 MEMBAR
!#3 N4775 P3016 REPLACEMENT 0 Int BE Pri
!#3 N4776 P3017 LD 22 -1 Int BE Pri
!#3 N4777 P3018 PREFETCH 21 Int BE Pri
!#3 N4778 P3019 MEMBAR
!#3 N4779 P3020 BSTC 18 0x41000001 FP BE Pri
!#3 N4780 P3020 BSTC 19 0x41000002 FP BE Pri
!#A N4779 N4780
!#3 N4781 P3020 BSTC 20 0x41000003 FP BE Pri
!#3 N4782 P3021 MEMBAR
!#3 N4783 P3022 SWAP 3 0xffffffff 0x1800008 Int BE Pri
!#3 N4784 P3023 DWLD 11 -1 FP BE Pri
!#3 N4785 P3024 SWAP 10 0xffffffff 0x1800009 Int BE Pri
!#3 N4786 P3025 DWLD 14 -1 FP BE Pri
!#3 N4787 P3026 ST 16 0x180000a Int BE Pri
!#3 N4788 P3027 ST 22 0x180000b Int BE Pri
!#3 N4789 P3028 DWST_BINIT 23 0x180000c Int BE Pri
!#3 N4790 P3029 MEMBAR
!#3 N4791 P3030 DWST_BINIT 3 0x180000d Int BE Pri
!#3 N4792 P3030 DWST_BINIT 4 0x180000e Int BE Pri
!#A N4791 N4792
!#3 N4793 P3031 MEMBAR
!#3 N4794 P3032 DWLD 5 -1,0x0 Int BE Pri
!#3 N4795 P3032 CASX 5 -1,0x0 N4794 0x180000f Int BE Pri
!#3 N4796 P3033 DWST 18 0x1800010 Int BE Pri
!#3 N4797 P3033 DWST 19 0x1800011 Int BE Pri
!#A N4796 N4797
!#3 N4798 P3034 DWST 2 0x1800012 Int BE Pri
!#3 N4799 P3035 MEMBAR
!#3 N4800 P3036 BST 18 0x41000004 FP BE Pri
!#3 N4801 P3036 BST 19 0x41000005 FP BE Pri
!#A N4800 N4801
!#3 N4802 P3036 BST 20 0x41000006 FP BE Pri
!#3 N4803 P3037 MEMBAR
!#3 N4804 P3038 DWST_BINIT 21 0x1800013 Int BE Pri
!#3 N4805 P3038 DWST_BINIT 22 0x1800014 Int BE Pri
!#A N4804 N4805
!#3 N4806 P3039 MEMBAR
!#3 N4807 P3040 LDD 20 -1 Int BE Pri
!#3 N4808 P3041 PREFETCH 9 Int BE Pri
!#3 N4809 P3042 MEMBAR
!#3 N4810 P3043 BLD 3 -1 FP BE Pri
!#3 N4811 P3043 BLD 4 -1 FP BE Pri
!#A N4810 N4811
!#3 N4812 P3043 BLD 5 -1 FP BE Pri
!#3 N4813 P3044 MEMBAR
!#3 N4814 P3045 ST_BINIT 0 0x1800015 Int BE Pri
!#3 N4815 P3046 MEMBAR
!#3 N4816 P3047 DWST_BINIT 12 0x1800016 Int BE Pri
!#3 N4817 P3047 DWST_BINIT 13 0x1800017 Int BE Pri
!#A N4816 N4817
!#3 N4818 P3048 MEMBAR
!#3 N4819 P3049 LD 1 -1 Int BE Pri
!#3 N4820 P3049 CAS 1 -1 N4819 0x1800018 Int BE Pri
!#3 N4821 P3050 SWAP 12 0xffffffff 0x1800019 Int BE Pri
!#3 N4822 P3051 ST 4 0x180001a Int BE Pri
!#3 N4823 P3052 DWST 6 0x180001b Int BE Pri
!#3 N4824 P3052 DWST 7 0x180001c Int BE Pri
!#A N4823 N4824
!#3 N4825 P3053 DWST_BINIT 6 0x180001d Int BE Pri
!#3 N4826 P3053 DWST_BINIT 7 0x180001e Int BE Pri
!#A N4825 N4826
!#3 N4827 P3054 MEMBAR
!#3 N4828 P3055 LD 5 -1 Int BE Pri
!#3 N4829 P3056 ST_BINIT 2 0x180001f Int BE Pri
!#3 N4830 P3057 MEMBAR
!#3 N4831 P3058 LD 5 -1 Int BE Pri
!#3 N4832 P3059 PREFETCH 10 Int BE Pri
!#3 N4833 P3060 DWST_BINIT 15 0x1800020 Int BE Pri
!#3 N4834 P3060 DWST_BINIT 16 0x1800021 Int BE Pri
!#A N4833 N4834
!#3 N4835 P3061 MEMBAR
!#3 N4836 P3062 BLD 21 -1 FP BE Pri
!#3 N4837 P3062 BLD 22 -1 FP BE Pri
!#A N4836 N4837
!#3 N4838 P3062 BLD 23 -1 FP BE Pri
!#3 N4839 P3063 MEMBAR
!#3 N4840 P3064 LD 20 -1 Int LE Pri
!#3 N4841 P3065 DWST_BINIT 15 0x1800022 Int BE Pri
!#3 N4842 P3065 DWST_BINIT 16 0x1800023 Int BE Pri
!#A N4841 N4842
!#3 N4843 P3066 MEMBAR
!#3 N4844 P3067 BLD 6 -1 FP BE Pri
!#3 N4845 P3067 BLD 7 -1 FP BE Pri
!#A N4844 N4845
!#3 N4846 P3067 BLD 8 -1 FP BE Pri
!#3 N4847 P3068 MEMBAR
!#3 N4848 P3069 DWLD 21 -1 Int BE Pri
!#3 N4849 P3069 DWLD 22 -1 Int BE Pri
!#A N4848 N4849
!#3 N4850 P3070 DWST 21 0x1800024 Int BE Pri
!#3 N4851 P3070 DWST 22 0x1800025 Int BE Pri
!#A N4850 N4851
!#3 N4852 P3071 LDD 18 -1 Int BE Pri
!#3 N4853 P3071 LDD 19 -1 Int BE Pri
!#A N4852 N4853
!#3 N4854 P3072 DWLD 18 -1 Int BE Pri
!#3 N4855 P3072 DWLD 19 -1 Int BE Pri
!#A N4854 N4855
!#3 N4856 P3072 CASX 18 -1 N4854 0x1800026 Int BE Pri
!#3 N4857 P3072 CASX 19 -1 N4855 0x1800027 Int BE Pri
!#A N4856 N4857
!#3 N4858 P3073 REPLACEMENT 15 Int BE Pri
!#3 N4859 P3074 MEMBAR
!#3 N4860 P3075 BLD 21 -1 FP BE Pri
!#3 N4861 P3075 BLD 22 -1 FP BE Pri
!#A N4860 N4861
!#3 N4862 P3075 BLD 23 -1 FP BE Pri
!#3 N4863 P3076 MEMBAR
!#3 N4864 P3077 PREFETCH 12 Int BE Pri
!#3 N4865 P3078 SWAP 9 0xffffffff 0x1800028 Int BE Pri
!#3 N4866 P3079 ST 15 0x1800029 Int BE Pri
!#3 N4867 P3080 LDD 20 -1 Int BE Pri
!#3 N4868 P3081 DWLD 9 -1 Int BE Pri
!#3 N4869 P3081 DWLD 10 -1 Int BE Pri
!#A N4868 N4869
!#3 N4870 P3081 CASX 9 -1 N4868 0x180002a Int BE Pri
!#3 N4871 P3081 CASX 10 -1 N4869 0x180002b Int BE Pri
!#A N4870 N4871
!#3 N4872 P3082 MEMBAR
!#3 N4873 P3083 BSTC 18 0x41000007 FP BE Pri
!#3 N4874 P3083 BSTC 19 0x41000008 FP BE Pri
!#A N4873 N4874
!#3 N4875 P3083 BSTC 20 0x41000009 FP BE Pri
!#3 N4876 P3084 MEMBAR
!#3 N4877 P3085 REPLACEMENT 14 Int BE Pri
!#3 N4878 P3086 PREFETCH 21 Int LE Pri
!#3 N4879 P3087 LD 10 -1 Int BE Pri
!#3 N4880 P3087 CAS 10 -1 N4879 0x180002c Int BE Pri
!#3 N4881 P3088 ST_BINIT 15 0x180002d Int BE Pri
!#3 N4882 P3089 MEMBAR
!#3 N4883 P3090 BLD 15 -1 FP BE Pri
!#3 N4884 P3090 BLD 16 -1 FP BE Pri
!#A N4883 N4884
!#3 N4885 P3090 BLD 17 -1 FP BE Pri
!#3 N4886 P3091 MEMBAR
!#3 N4887 P3092 ST_BINIT 7 0x180002e Int BE Pri
!#3 N4888 P3093 MEMBAR
!#3 N4889 P3094 DWST 18 0x180002f Int BE Pri
!#3 N4890 P3094 DWST 19 0x1800030 Int BE Pri
!#A N4889 N4890
!#3 N4891 P3095 MEMBAR
!#3 N4892 P3096 BST 3 0x4100000a FP BE Pri
!#3 N4893 P3096 BST 4 0x4100000b FP BE Pri
!#A N4892 N4893
!#3 N4894 P3096 BST 5 0x4100000c FP BE Pri
!#3 N4895 P3097 MEMBAR
!#3 N4896 P3098 DWST 8 0x1800031 Int BE Pri
!#3 N4897 P3099 LD 15 -1 Int BE Pri
!#3 N4898 P3100 DWLD 17 -1,0x0 Int BE Pri
!#3 N4899 P3100 CASX 17 -1,0x0 N4898 0x1800032 Int BE Pri
!#3 N4900 P3101 DWLD 0 -1 Int BE Pri
!#3 N4901 P3101 DWLD 1 -1 Int BE Pri
!#A N4900 N4901
!#3 N4902 P3101 CASX 0 -1 N4900 0x1800033 Int BE Pri
!#3 N4903 P3101 CASX 1 -1 N4901 0x1800034 Int BE Pri
!#A N4902 N4903
!#3 N4904 P3102 LDD 21 -1 Int BE Pri
!#3 N4905 P3102 LDD 22 -1 Int BE Pri
!#A N4904 N4905
!#3 N4906 P3103 MEMBAR
!#3 N4907 P3104 BLD 3 -1 FP BE Pri
!#3 N4908 P3104 BLD 4 -1 FP BE Pri
!#A N4907 N4908
!#3 N4909 P3104 BLD 5 -1 FP BE Pri
!#3 N4910 P3105 MEMBAR
!#3 N4911 P3106 BLD 12 -1 FP BE Pri
!#3 N4912 P3106 BLD 13 -1 FP BE Pri
!#A N4911 N4912
!#3 N4913 P3106 BLD 14 -1 FP BE Pri
!#3 N4914 P3107 MEMBAR
!#3 N4915 P3108 BLD 12 -1 FP BE Pri
!#3 N4916 P3108 BLD 13 -1 FP BE Pri
!#A N4915 N4916
!#3 N4917 P3108 BLD 14 -1 FP BE Pri
!#3 N4918 P3109 MEMBAR
!#3 N4919 P3110 DWLD 8 -1,0x0 Int BE Pri
!#3 N4920 P3110 CASX 8 -1,0x0 N4919 0x1800035 Int BE Pri
!#3 N4921 P3111 LDD 9 -1 Int BE Pri
!#3 N4922 P3111 LDD 10 -1 Int BE Pri
!#A N4921 N4922
!#3 N4923 P3112 DWST_BINIT 14 0x1800036 Int BE Pri
!#3 N4924 P3113 MEMBAR
!#3 N4925 P3114 LD 17 -1 Int BE Pri
!#3 N4926 P3115 LD 5 -1 Int BE Pri
!#3 N4927 P3115 CAS 5 -1 N4926 0x1800037 Int BE Pri
!#3 N4928 P3116 LD 1 -1 Int BE Pri
!#3 N4929 P3116 CAS 1 -1 N4928 0x1800038 Int BE Pri
!#3 N4930 P3117 PREFETCH 9 Int BE Pri
!#3 N4931 P3118 DWLD 14 -1 Int BE Pri
!#3 N4932 P3119 MEMBAR
!#3 N4933 P3120 BSTC 15 0x4100000d FP BE Pri
!#3 N4934 P3120 BSTC 16 0x4100000e FP BE Pri
!#A N4933 N4934
!#3 N4935 P3120 BSTC 17 0x4100000f FP BE Pri
!#3 N4936 P3121 MEMBAR
!#3 N4937 P3122 LDD 0 -1 Int BE Pri
!#3 N4938 P3122 LDD 1 -1 Int BE Pri
!#A N4937 N4938
!#3 N4939 P3123 MEMBAR
!#3 N4940 P3124 BST 21 0x41000010 FP BE Pri
!#3 N4941 P3124 BST 22 0x41000011 FP BE Pri
!#A N4940 N4941
!#3 N4942 P3124 BST 23 0x41000012 FP BE Pri
!#3 N4943 P3125 MEMBAR
!#3 N4944 P3126 DWLD 23 -1,0x0 Int BE Pri
!#3 N4945 P3126 CASX 23 -1,0x0 N4944 0x1800039 Int BE Pri
!#3 N4946 P3127 MEMBAR
!#3 N4947 P3128 BST 21 0x41000013 FP BE Pri
!#3 N4948 P3128 BST 22 0x41000014 FP BE Pri
!#A N4947 N4948
!#3 N4949 P3128 BST 23 0x41000015 FP BE Pri
!#3 N4950 P3129 MEMBAR
!#3 N4951 P3130 BLD 3 -1 FP BE Pri
!#3 N4952 P3130 BLD 4 -1 FP BE Pri
!#A N4951 N4952
!#3 N4953 P3130 BLD 5 -1 FP BE Pri
!#3 N4954 P3131 MEMBAR
!#3 N4955 P3132 DWST_BINIT 3 0x180003a Int BE Pri
!#3 N4956 P3132 DWST_BINIT 4 0x180003b Int BE Pri
!#A N4955 N4956
!#3 N4957 P3133 MEMBAR
!#3 N4958 P3134 ST_BINIT 7 0x180003c Int BE Pri
!#3 N4959 P3135 MEMBAR
!#3 N4960 P3136 BSTC 18 0x41000016 FP BE Pri
!#3 N4961 P3136 BSTC 19 0x41000017 FP BE Pri
!#A N4960 N4961
!#3 N4962 P3136 BSTC 20 0x41000018 FP BE Pri
!#3 N4963 P3137 MEMBAR
!#3 N4964 P3138 REPLACEMENT 5 Int BE Pri
!#3 N4965 P3139 REPLACEMENT 10 Int BE Pri
!#3 N4966 P3140 LD 18 -1 Int BE Pri
!#3 N4967 P3141 DWLD 3 -1 Int BE Pri
!#3 N4968 P3141 DWLD 4 -1 Int BE Pri
!#A N4967 N4968
!#3 N4969 P3142 DWLD 15 -1 Int BE Pri
!#3 N4970 P3142 DWLD 16 -1 Int BE Pri
!#A N4969 N4970
!#3 N4971 P3142 CASX 15 -1 N4969 0x180003d Int BE Pri
!#3 N4972 P3142 CASX 16 -1 N4970 0x180003e Int BE Pri
!#A N4971 N4972
!#3 N4973 P3143 SWAP 19 0xffffffff 0x180003f Int BE Pri
!#3 N4974 P3144 LD 17 -1 Int BE Pri
!#3 N4975 P3144 CAS 17 -1 N4974 0x1800040 Int BE Pri
!#3 N4976 P3145 PREFETCH 15 Int BE Pri
!#3 N4977 P3146 DWLD 18 -1 Int BE Pri
!#3 N4978 P3146 DWLD 19 -1 Int BE Pri
!#A N4977 N4978
!#3 N4979 P3146 CASX 18 -1 N4977 0x1800041 Int BE Pri
!#3 N4980 P3146 CASX 19 -1 N4978 0x1800042 Int BE Pri
!#A N4979 N4980
!#3 N4981 P3147 ST_BINIT 1 0x1800043 Int BE Pri
!#3 N4982 P3148 MEMBAR
!#3 N4983 P3149 DWST 18 0x1800044 Int BE Pri
!#3 N4984 P3149 DWST 19 0x1800045 Int BE Pri
!#A N4983 N4984
!#3 N4985 P3150 LDD 5 -1 Int BE Pri
!#3 N4986 P3151 LD 1 -1 Int BE Pri
!#3 N4987 P3152 MEMBAR
!#3 N4988 P3153 BLD 9 -1 FP BE Pri
!#3 N4989 P3153 BLD 10 -1 FP BE Pri
!#A N4988 N4989
!#3 N4990 P3153 BLD 11 -1 FP BE Pri
!#3 N4991 P3154 MEMBAR
!#3 N4992 P3155 BLD 0 -1 FP BE Pri
!#3 N4993 P3155 BLD 1 -1 FP BE Pri
!#A N4992 N4993
!#3 N4994 P3155 BLD 2 -1 FP BE Pri
!#3 N4995 P3156 MEMBAR
!#3 N4996 P3157 LDD 20 -1 Int BE Pri
!#3 N4997 P3158 LDD 18 -1 Int BE Pri
!#3 N4998 P3158 LDD 19 -1 Int BE Pri
!#A N4997 N4998
!#3 N4999 P3159 MEMBAR
!#3 N5000 P3160 BSTC 12 0x41000019 FP BE Pri
!#3 N5001 P3160 BSTC 13 0x4100001a FP BE Pri
!#A N5000 N5001
!#3 N5002 P3160 BSTC 14 0x4100001b FP BE Pri
!#3 N5003 P3161 MEMBAR
!#3 N5004 P3162 DWST 12 0x1800046 Int BE Pri
!#3 N5005 P3162 DWST 13 0x1800047 Int BE Pri
!#A N5004 N5005
!#3 N5006 P3163 ST_BINIT 7 0x1800048 Int BE Pri
!#3 N5007 P3164 MEMBAR
!#3 N5008 P3165 PREFETCH 15 Int BE Pri
!#3 N5009 P3166 DWLD 23 -1,0x0 Int BE Pri
!#3 N5010 P3166 CASX 23 -1,0x0 N5009 0x1800049 Int BE Pri
!#3 N5011 P3167 LD 4 -1 Int BE Pri
!#3 N5012 P3167 CAS 4 -1 N5011 0x180004a Int BE Pri
!#3 N5013 P3168 DWLD 9 -1 Int BE Pri
!#3 N5014 P3168 DWLD 10 -1 Int BE Pri
!#A N5013 N5014
!#3 N5015 P3169 MEMBAR
!#3 N5016 P3170 BLD 12 -1 FP BE Pri
!#3 N5017 P3170 BLD 13 -1 FP BE Pri
!#A N5016 N5017
!#3 N5018 P3170 BLD 14 -1 FP BE Pri
!#3 N5019 P3171 MEMBAR
!#3 N5020 P3172 BST 3 0x4100001c FP BE Pri
!#3 N5021 P3172 BST 4 0x4100001d FP BE Pri
!#A N5020 N5021
!#3 N5022 P3172 BST 5 0x4100001e FP BE Pri
!#3 N5023 P3173 MEMBAR
!#3 N5024 P3174 BST 0 0x4100001f FP BE Pri
!#3 N5025 P3174 BST 1 0x41000020 FP BE Pri
!#A N5024 N5025
!#3 N5026 P3174 BST 2 0x41000021 FP BE Pri
!#3 N5027 P3175 MEMBAR
!#3 N5028 P3176 REPLACEMENT 6 Int BE Pri
!#3 N5029 P3177 LD 4 -1 Int BE Pri
!#3 N5030 P3178 MEMBAR
!#3 N5031 P3179 BSTC 12 0x41000022 FP BE Pri
!#3 N5032 P3179 BSTC 13 0x41000023 FP BE Pri
!#A N5031 N5032
!#3 N5033 P3179 BSTC 14 0x41000024 FP BE Pri
!#3 N5034 P3180 MEMBAR
!#3 N5035 P3181 SWAP 2 0xffffffff 0x180004b Int BE Pri
!#3 N5036 P3182 LD 5 -1 Int LE Pri
!#3 N5037 P3182 CAS 5 -1 N5036 0x180004c Int LE Pri
!#3 N5038 P3183 MEMBAR
!#3 N5039 P3184 BLD 18 -1 FP BE Pri
!#3 N5040 P3184 BLD 19 -1 FP BE Pri
!#A N5039 N5040
!#3 N5041 P3184 BLD 20 -1 FP BE Pri
!#3 N5042 P3185 MEMBAR
!#3 N5043 P3186 LDD 9 -1 Int BE Pri
!#3 N5044 P3186 LDD 10 -1 Int BE Pri
!#A N5043 N5044
!#3 N5045 P3187 DWST_BINIT 12 0x180004d Int BE Pri
!#3 N5046 P3187 DWST_BINIT 13 0x180004e Int BE Pri
!#A N5045 N5046
!#3 N5047 P3188 MEMBAR
!#3 N5048 P3189 LD 22 -1 Int BE Pri
!#3 N5049 P3189 CAS 22 -1 N5048 0x180004f Int BE Pri
!#3 N5050 P3190 LD 2 -1 Int BE Pri
!#3 N5051 P3191 MEMBAR
!#3 N5052 P3192 BLD 6 -1 FP BE Pri
!#3 N5053 P3192 BLD 7 -1 FP BE Pri
!#A N5052 N5053
!#3 N5054 P3192 BLD 8 -1 FP BE Pri
!#3 N5055 P3193 MEMBAR
!#3 N5056 P3194 BSTC 9 0x41000025 FP BE Pri
!#3 N5057 P3194 BSTC 10 0x41000026 FP BE Pri
!#A N5056 N5057
!#3 N5058 P3194 BSTC 11 0x41000027 FP BE Pri
!#3 N5059 P3195 MEMBAR
!#3 N5060 P3196 LD 1 -1 Int BE Pri
!#3 N5061 P3197 REPLACEMENT 9 Int BE Pri
!#3 N5062 P3198 DWST 0 0x1800050 Int BE Pri
!#3 N5063 P3198 DWST 1 0x1800051 Int BE Pri
!#A N5062 N5063
!#3 N5064 P3199 LD 19 -1 Int BE Pri
!#3 N5065 P3199 CAS 19 -1 N5064 0x1800052 Int BE Pri
!#3 N5066 P3200 DWST_BINIT 2 0x1800053 Int BE Pri
!#3 N5067 P3201 MEMBAR
!#3 N5068 P3202 DWST 6 0x1800054 Int BE Pri
!#3 N5069 P3202 DWST 7 0x1800055 Int BE Pri
!#A N5068 N5069
!#3 N5070 P3203 MEMBAR
!#3 N5071 P3204 BST 15 0x41000028 FP BE Pri
!#3 N5072 P3204 BST 16 0x41000029 FP BE Pri
!#A N5071 N5072
!#3 N5073 P3204 BST 17 0x4100002a FP BE Pri
!#3 N5074 P3205 MEMBAR
!#3 N5075 P3206 ST 16 0x1800056 Int BE Pri
!#3 N5076 P3207 LD 15 -1 Int BE Pri
!#3 N5077 P3207 CAS 15 -1 N5076 0x1800057 Int BE Pri
!#3 N5078 P3208 LD 13 -1 Int BE Pri
!#3 N5079 P3209 DWLD 15 -1 Int BE Pri
!#3 N5080 P3209 DWLD 16 -1 Int BE Pri
!#A N5079 N5080
!#3 N5081 P3209 CASX 15 -1 N5079 0x1800058 Int BE Pri
!#3 N5082 P3209 CASX 16 -1 N5080 0x1800059 Int BE Pri
!#A N5081 N5082
!#3 N5083 P3210 DWST_BINIT 0 0x180005a Int BE Pri
!#3 N5084 P3210 DWST_BINIT 1 0x180005b Int BE Pri
!#A N5083 N5084
!#3 N5085 P3211 MEMBAR
!#3 N5086 P3212 DWST 21 0x180005c Int BE Pri
!#3 N5087 P3212 DWST 22 0x180005d Int BE Pri
!#A N5086 N5087
!#3 N5088 P3213 DWLD 12 -1 Int BE Pri
!#3 N5089 P3213 DWLD 13 -1 Int BE Pri
!#A N5088 N5089
!#3 N5090 P3214 SWAP 11 0xffffffff 0x180005e Int BE Pri
!#3 N5091 P3215 MEMBAR
!#3 N5092 P3216 BLD 0 -1 FP BE Pri
!#3 N5093 P3216 BLD 1 -1 FP BE Pri
!#A N5092 N5093
!#3 N5094 P3216 BLD 2 -1 FP BE Pri
!#3 N5095 P3217 MEMBAR
!#3 N5096 P3218 BLD 21 -1 FP BE Pri
!#3 N5097 P3218 BLD 22 -1 FP BE Pri
!#A N5096 N5097
!#3 N5098 P3218 BLD 23 -1 FP BE Pri
!#3 N5099 P3219 MEMBAR
!#3 N5100 P3220 BST 18 0x4100002b FP BE Pri
!#3 N5101 P3220 BST 19 0x4100002c FP BE Pri
!#A N5100 N5101
!#3 N5102 P3220 BST 20 0x4100002d FP BE Pri
!#3 N5103 P3221 MEMBAR
!#3 N5104 P3222 PREFETCH 2 Int BE Pri
!#3 N5105 P3223 MEMBAR
!#3 N5106 P3224 BSTC 6 0x4100002e FP BE Pri
!#3 N5107 P3224 BSTC 7 0x4100002f FP BE Pri
!#A N5106 N5107
!#3 N5108 P3224 BSTC 8 0x41000030 FP BE Pri
!#3 N5109 P3225 MEMBAR
!#3 N5110 P3226 DWST 0 0x180005f Int BE Pri
!#3 N5111 P3226 DWST 1 0x1800060 Int BE Pri
!#A N5110 N5111
!#3 N5112 P3227 ST 13 0x1800061 Int BE Pri
!#3 N5113 P3228 LD 19 -1 Int BE Pri
!#3 N5114 P3228 CAS 19 -1 N5113 0x1800062 Int BE Pri
!#3 N5115 P3229 DWLD 0 -1 Int BE Pri
!#3 N5116 P3229 DWLD 1 -1 Int BE Pri
!#A N5115 N5116
!#3 N5117 P3230 DWLD 15 -1 Int BE Pri
!#3 N5118 P3230 DWLD 16 -1 Int BE Pri
!#A N5117 N5118
!#3 N5119 P3230 CASX 15 -1 N5117 0x1800063 Int BE Pri
!#3 N5120 P3230 CASX 16 -1 N5118 0x1800064 Int BE Pri
!#A N5119 N5120
!#3 N5121 P3231 DWLD 0 -1 Int BE Pri
!#3 N5122 P3231 DWLD 1 -1 Int BE Pri
!#A N5121 N5122
!#3 N5123 P3231 CASX 0 -1 N5121 0x1800065 Int BE Pri
!#3 N5124 P3231 CASX 1 -1 N5122 0x1800066 Int BE Pri
!#A N5123 N5124
!#3 N5125 P3232 LD 22 -1 Int BE Pri
!#3 N5126 P3233 DWST 21 0x1800067 Int BE Pri
!#3 N5127 P3233 DWST 22 0x1800068 Int BE Pri
!#A N5126 N5127
!#3 N5128 P3234 LDD 21 -1 Int BE Pri
!#3 N5129 P3234 LDD 22 -1 Int BE Pri
!#A N5128 N5129
!#3 N5130 P3235 MEMBAR
!#3 N5131 P3236 BLD 12 -1 FP BE Pri
!#3 N5132 P3236 BLD 13 -1 FP BE Pri
!#A N5131 N5132
!#3 N5133 P3236 BLD 14 -1 FP BE Pri
!#3 N5134 P3237 MEMBAR
!#3 N5135 P3238 DWLD 0 -1 Int BE Pri
!#3 N5136 P3238 DWLD 1 -1 Int BE Pri
!#A N5135 N5136
!#3 N5137 P3239 LDD 0 -1 Int BE Pri
!#3 N5138 P3239 LDD 1 -1 Int BE Pri
!#A N5137 N5138
!#3 N5139 P3240 LD 14 -1 Int BE Pri
!#3 N5140 P3241 LD 22 -1 Int BE Pri
!#3 N5141 P3241 CAS 22 -1 N5140 0x1800069 Int BE Pri
!#3 N5142 P3242 SWAP 1 0xffffffff 0x180006a Int BE Pri
!#3 N5143 P3243 LD 8 -1 Int BE Pri
!#3 N5144 P3244 ST_BINIT 6 0x180006b Int BE Pri
!#3 N5145 P3245 MEMBAR
!#3 N5146 P3246 LD 4 -1 Int BE Pri
!#3 N5147 P3246 CAS 4 -1 N5146 0x180006c Int BE Pri
!#3 N5148 P3247 DWST_BINIT 23 0x180006d Int BE Pri
!#3 N5149 P3248 MEMBAR
!#3 N5150 P3249 LDD 21 -1 Int BE Pri
!#3 N5151 P3249 LDD 22 -1 Int BE Pri
!#A N5150 N5151
!#3 N5152 P3250 ST 22 0x180006e Int BE Pri
!#3 N5153 P3251 LDD 6 -1 Int BE Pri
!#3 N5154 P3251 LDD 7 -1 Int BE Pri
!#A N5153 N5154
!#3 N5155 P3252 ST 3 0x180006f Int BE Pri
!#3 N5156 P3253 MEMBAR
!#3 N5157 P3254 BST 0 0x41000031 FP BE Pri
!#3 N5158 P3254 BST 1 0x41000032 FP BE Pri
!#A N5157 N5158
!#3 N5159 P3254 BST 2 0x41000033 FP BE Pri
!#3 N5160 P3255 MEMBAR
!#3 N5161 P3256 ST_BINIT 2 0x1800070 Int BE Pri
!#3 N5162 P3257 MEMBAR
!#3 N5163 P3258 LD 17 -1 Int BE Pri
!#3 N5164 P3259 MEMBAR
!#3 N5165 P3260 BST 18 0x41000034 FP BE Pri
!#3 N5166 P3260 BST 19 0x41000035 FP BE Pri
!#A N5165 N5166
!#3 N5167 P3260 BST 20 0x41000036 FP BE Pri
!#3 N5168 P3261 MEMBAR
!#3 N5169 P3262 LDD 0 -1 Int BE Pri
!#3 N5170 P3262 LDD 1 -1 Int BE Pri
!#A N5169 N5170
!#3 N5171 P3263 MEMBAR
!#3 N5172 P3264 BSTC 6 0x41000037 FP BE Pri
!#3 N5173 P3264 BSTC 7 0x41000038 FP BE Pri
!#A N5172 N5173
!#3 N5174 P3264 BSTC 8 0x41000039 FP BE Pri
!#3 N5175 P3265 MEMBAR
!#3 N5176 P3266 BST 0 0x4100003a FP BE Pri
!#3 N5177 P3266 BST 1 0x4100003b FP BE Pri
!#A N5176 N5177
!#3 N5178 P3266 BST 2 0x4100003c FP BE Pri
!#3 N5179 P3267 MEMBAR
!#3 N5180 P3268 DWST_BINIT 5 0x1800071 Int LE Pri
!#3 N5181 P3269 MEMBAR
!#3 N5182 P3270 DWST 15 0x1800072 Int BE Pri
!#3 N5183 P3270 DWST 16 0x1800073 Int BE Pri
!#A N5182 N5183
!#3 N5184 P3271 ST 13 0x1800074 Int BE Pri
!#3 N5185 P3272 REPLACEMENT 23 Int BE Pri
!#3 N5186 P3273 DWST 15 0x1800075 Int BE Pri
!#3 N5187 P3273 DWST 16 0x1800076 Int BE Pri
!#A N5186 N5187
!#3 N5188 P3274 REPLACEMENT 1 Int BE Pri
!#3 N5189 P3275 DWLD 6 -1 Int BE Pri
!#3 N5190 P3275 DWLD 7 -1 Int BE Pri
!#A N5189 N5190
!#3 N5191 P3275 CASX 6 -1 N5189 0x1800077 Int BE Pri
!#3 N5192 P3275 CASX 7 -1 N5190 0x1800078 Int BE Pri
!#A N5191 N5192
!#3 N5193 P3276 DWLD 9 -1 Int BE Pri
!#3 N5194 P3276 DWLD 10 -1 Int BE Pri
!#A N5193 N5194
!#3 N5195 P3277 SWAP 6 0xffffffff 0x1800079 Int BE Pri
!#3 N5196 P3278 MEMBAR
!#3 N5197 P3279 BLD 12 -1 FP BE Pri
!#3 N5198 P3279 BLD 13 -1 FP BE Pri
!#A N5197 N5198
!#3 N5199 P3279 BLD 14 -1 FP BE Pri
!#3 N5200 P3280 MEMBAR
!#3 N5201 P3281 ST_BINIT 9 0x180007a Int BE Pri
!#3 N5202 P3282 MEMBAR
!#3 N5203 P3283 LDD 2 -1 Int BE Pri
!#3 N5204 P3284 MEMBAR
!#3 N5205 P3285 BST 18 0x4100003d FP BE Pri
!#3 N5206 P3285 BST 19 0x4100003e FP BE Pri
!#A N5205 N5206
!#3 N5207 P3285 BST 20 0x4100003f FP BE Pri
!#3 N5208 P3286 MEMBAR
!#3 N5209 P3287 DWLD 15 -1 Int BE Pri
!#3 N5210 P3287 DWLD 16 -1 Int BE Pri
!#A N5209 N5210
!#3 N5211 P3287 CASX 15 -1 N5209 0x180007b Int BE Pri
!#3 N5212 P3287 CASX 16 -1 N5210 0x180007c Int BE Pri
!#A N5211 N5212
!#3 N5213 P3288 DWST_BINIT 0 0x180007d Int BE Pri
!#3 N5214 P3288 DWST_BINIT 1 0x180007e Int BE Pri
!#A N5213 N5214
!#3 N5215 P3289 MEMBAR
!#3 N5216 P3290 BST 9 0x41000040 FP BE Pri
!#3 N5217 P3290 BST 10 0x41000041 FP BE Pri
!#A N5216 N5217
!#3 N5218 P3290 BST 11 0x41000042 FP BE Pri
!#3 N5219 P3291 MEMBAR
!#3 N5220 P3292 ST 18 0x41000043 FP BE Pri
!#3 N5221 P3293 DWST_BINIT 3 0x180007f Int BE Pri
!#3 N5222 P3293 DWST_BINIT 4 0x1800080 Int BE Pri
!#A N5221 N5222
!#3 N5223 P3294 MEMBAR
!#3 N5224 P3295 LDD 14 -1 Int BE Pri
!#3 N5225 P3296 LD 16 -1 Int BE Pri
!#3 N5226 P3297 DWST_BINIT 12 0x1800081 Int BE Pri
!#3 N5227 P3297 DWST_BINIT 13 0x1800082 Int BE Pri
!#A N5226 N5227
!#3 N5228 P3298 MEMBAR
!#3 N5229 P3299 LD 20 -1 Int LE Pri
!#3 N5230 P3299 CAS 20 -1 N5229 0x1800083 Int LE Pri
!#3 N5231 P3300 ST 22 0x1800084 Int BE Pri
!#3 N5232 P3301 MEMBAR
!#3 N5233 P3302 BST 3 0x41000044 FP BE Pri
!#3 N5234 P3302 BST 4 0x41000045 FP BE Pri
!#A N5233 N5234
!#3 N5235 P3302 BST 5 0x41000046 FP BE Pri
!#3 N5236 P3303 MEMBAR
!#3 N5237 P3304 BSTC 0 0x41000047 FP BE Pri
!#3 N5238 P3304 BSTC 1 0x41000048 FP BE Pri
!#A N5237 N5238
!#3 N5239 P3304 BSTC 2 0x41000049 FP BE Pri
!#3 N5240 P3305 MEMBAR
!#3 N5241 P3306 REPLACEMENT 9 Int BE Pri
!#3 N5242 P3307 MEMBAR
!#3 N5243 P3308 BST 6 0x4100004a FP BE Pri
!#3 N5244 P3308 BST 7 0x4100004b FP BE Pri
!#A N5243 N5244
!#3 N5245 P3308 BST 8 0x4100004c FP BE Pri
!#3 N5246 P3309 MEMBAR
!#3 N5247 P3310 DWLD 18 -1 Int BE Pri
!#3 N5248 P3310 DWLD 19 -1 Int BE Pri
!#A N5247 N5248
!#3 N5249 P3310 CASX 18 -1 N5247 0x1800085 Int BE Pri
!#3 N5250 P3310 CASX 19 -1 N5248 0x1800086 Int BE Pri
!#A N5249 N5250
!#3 N5251 P3311 DWLD 9 -1 Int BE Pri
!#3 N5252 P3311 DWLD 10 -1 Int BE Pri
!#A N5251 N5252
!#3 N5253 P3311 CASX 9 -1 N5251 0x1800087 Int BE Pri
!#3 N5254 P3311 CASX 10 -1 N5252 0x1800088 Int BE Pri
!#A N5253 N5254
!#3 N5255 P3312 LDD 3 -1 Int BE Pri
!#3 N5256 P3312 LDD 4 -1 Int BE Pri
!#A N5255 N5256
!#3 N5257 P3313 PREFETCH 15 Int BE Pri
!#3 N5258 P3314 ST_BINIT 10 0x1800089 Int BE Pri
!#3 N5259 P3315 MEMBAR
!#3 N5260 P3316 DWST 15 0x180008a Int BE Pri
!#3 N5261 P3316 DWST 16 0x180008b Int BE Pri
!#A N5260 N5261
!#3 N5262 P3317 MEMBAR
!#3 N5263 P3318 BLD 0 -1 FP BE Pri
!#3 N5264 P3318 BLD 1 -1 FP BE Pri
!#A N5263 N5264
!#3 N5265 P3318 BLD 2 -1 FP BE Pri
!#3 N5266 P3319 MEMBAR
!#3 N5267 P3320 PREFETCH 1 Int BE Pri
!#3 N5268 P3321 REPLACEMENT 8 Int BE Pri
!#3 N5269 P3322 ST 9 0x180008c Int LE Pri
!#3 N5270 P3323 PREFETCH 16 Int BE Pri
!#3 N5271 P3324 ST_BINIT 19 0x180008d Int BE Pri
!#3 N5272 P3325 MEMBAR
!#3 N5273 P3326 ST_BINIT 6 0x180008e Int BE Pri
!#3 N5274 P3327 MEMBAR
!#3 N5275 P3328 LD 7 -1 Int BE Pri
!#3 N5276 P3328 CAS 7 -1 N5275 0x180008f Int BE Pri
!#3 N5277 P3329 PREFETCH 4 Int BE Pri
!#3 N5278 P3330 DWST_BINIT 17 0x1800090 Int BE Pri
!#3 N5279 P3331 MEMBAR
!#3 N5280 P3332 LDD 12 -1 Int LE Pri
!#3 N5281 P3332 LDD 13 -1 Int LE Pri
!#A N5280 N5281
!#3 N5282 P3333 MEMBAR
!#3 N5283 P3334 BST 6 0x4100004d FP BE Pri
!#3 N5284 P3334 BST 7 0x4100004e FP BE Pri
!#A N5283 N5284
!#3 N5285 P3334 BST 8 0x4100004f FP BE Pri
!#3 N5286 P3335 MEMBAR
!#3 N5287 P3336 LD 22 -1 Int BE Pri
!#3 N5288 P3337 MEMBAR
!#3 N5289 P3338 BLD 6 -1 FP BE Pri
!#3 N5290 P3338 BLD 7 -1 FP BE Pri
!#A N5289 N5290
!#3 N5291 P3338 BLD 8 -1 FP BE Pri
!#3 N5292 P3339 MEMBAR
!#3 N5293 P3340 SWAP 17 0xffffffff 0x1800091 Int BE Pri
!#3 N5294 P3341 SWAP 8 0xffffffff 0x1800092 Int BE Pri
!#3 N5295 P3342 SWAP 6 0xffffffff 0x1800093 Int BE Pri
!#3 N5296 P3343 ST_BINIT 21 0x1800094 Int BE Pri
!#3 N5297 P3344 MEMBAR
!#3 N5298 P3345 DWLD 8 -1 FP BE Pri
!#3 N5299 P3346 DWST 21 0x1800095 Int BE Pri
!#3 N5300 P3346 DWST 22 0x1800096 Int BE Pri
!#A N5299 N5300
!#3 N5301 P3347 LD 5 -1 Int BE Pri
!#3 N5302 P3348 SWAP 1 0xffffffff 0x1800097 Int BE Pri
!#3 N5303 P3349 LD 7 -1 Int BE Pri
!#3 N5304 P3349 CAS 7 -1 N5303 0x1800098 Int BE Pri
!#3 N5305 P3350 MEMBAR
!#3 N5306 P3351 BLD 3 -1 FP BE Pri
!#3 N5307 P3351 BLD 4 -1 FP BE Pri
!#A N5306 N5307
!#3 N5308 P3351 BLD 5 -1 FP BE Pri
!#3 N5309 P3352 MEMBAR
!#3 N5310 P3353 BST 12 0x41000050 FP BE Pri
!#3 N5311 P3353 BST 13 0x41000051 FP BE Pri
!#A N5310 N5311
!#3 N5312 P3353 BST 14 0x41000052 FP BE Pri
!#3 N5313 P3354 MEMBAR
!#3 N5314 P3355 PREFETCH 12 Int BE Pri
!#3 N5315 P3356 DWLD 21 -1 Int BE Pri
!#3 N5316 P3356 DWLD 22 -1 Int BE Pri
!#A N5315 N5316
!#3 N5317 P3356 CASX 21 -1 N5315 0x1800099 Int BE Pri
!#3 N5318 P3356 CASX 22 -1 N5316 0x180009a Int BE Pri
!#A N5317 N5318
!#3 N5319 P3357 SWAP 6 0xffffffff 0x180009b Int BE Pri
!#3 N5320 P3358 PREFETCH 8 Int LE Pri
!#3 N5321 P3359 DWST 20 0x180009c Int BE Pri
!#3 N5322 P3360 DWLD 3 -1 Int BE Pri
!#3 N5323 P3360 DWLD 4 -1 Int BE Pri
!#A N5322 N5323
!#3 N5324 P3360 CASX 3 -1 N5322 0x180009d Int BE Pri
!#3 N5325 P3360 CASX 4 -1 N5323 0x180009e Int BE Pri
!#A N5324 N5325
!#3 N5326 P3361 LD 9 -1 Int BE Pri
!#3 N5327 P3362 ST 7 0x180009f Int BE Pri
!#3 N5328 P3363 LDD 9 -1 Int BE Pri
!#3 N5329 P3363 LDD 10 -1 Int BE Pri
!#A N5328 N5329
!#3 N5330 P3364 ST_BINIT 15 0x18000a0 Int BE Pri
!#3 N5331 P3365 MEMBAR
!#3 N5332 P3366 LD 4 -1 Int BE Pri
!#3 N5333 P3366 CAS 4 -1 N5332 0x18000a1 Int BE Pri
!#3 N5334 P3367 MEMBAR
!#3 N5335 P3368 BLD 21 -1 FP BE Pri
!#3 N5336 P3368 BLD 22 -1 FP BE Pri
!#A N5335 N5336
!#3 N5337 P3368 BLD 23 -1 FP BE Pri
!#3 N5338 P3369 MEMBAR
!#3 N5339 P3370 BLD 6 -1 FP BE Pri
!#3 N5340 P3370 BLD 7 -1 FP BE Pri
!#A N5339 N5340
!#3 N5341 P3370 BLD 8 -1 FP BE Pri
!#3 N5342 P3371 MEMBAR
!#3 N5343 P3372 ST_BINIT 14 0x18000a2 Int BE Pri
!#3 N5344 P3373 MEMBAR
!#3 N5345 P3374 BSTC 15 0x41000053 FP BE Pri
!#3 N5346 P3374 BSTC 16 0x41000054 FP BE Pri
!#A N5345 N5346
!#3 N5347 P3374 BSTC 17 0x41000055 FP BE Pri
!#3 N5348 P3375 MEMBAR
!#3 N5349 P3376 BSTC 21 0x41000056 FP BE Pri
!#3 N5350 P3376 BSTC 22 0x41000057 FP BE Pri
!#A N5349 N5350
!#3 N5351 P3376 BSTC 23 0x41000058 FP BE Pri
!#3 N5352 P3377 MEMBAR
!#3 N5353 P3378 DWLD 3 -1 Int BE Pri
!#3 N5354 P3378 DWLD 4 -1 Int BE Pri
!#A N5353 N5354
!#3 N5355 P3378 CASX 3 -1 N5353 0x18000a3 Int BE Pri
!#3 N5356 P3378 CASX 4 -1 N5354 0x18000a4 Int BE Pri
!#A N5355 N5356
!#3 N5357 P3379 DWST 21 0x18000a5 Int BE Pri
!#3 N5358 P3379 DWST 22 0x18000a6 Int BE Pri
!#A N5357 N5358
!#3 N5359 P3380 LD 2 -1 Int BE Pri
!#3 N5360 P3380 CAS 2 -1 N5359 0x18000a7 Int BE Pri
!#3 N5361 P3381 SWAP 3 0xffffffff 0x18000a8 Int BE Pri
!#3 N5362 P3382 DWLD 21 -1 Int BE Pri
!#3 N5363 P3382 DWLD 22 -1 Int BE Pri
!#A N5362 N5363
!#3 N5364 P3383 MEMBAR
!#3 N5365 P3384 BST 18 0x41000059 FP BE Pri
!#3 N5366 P3384 BST 19 0x4100005a FP BE Pri
!#A N5365 N5366
!#3 N5367 P3384 BST 20 0x4100005b FP BE Pri
!#3 N5368 P3385 MEMBAR
!#3 N5369 P3386 LD 3 -1 Int BE Pri
!#3 N5370 P3386 CAS 3 -1 N5369 0x18000a9 Int BE Pri
!#3 N5371 P3387 LD 8 -1 Int BE Pri
!#3 N5372 P3387 CAS 8 -1 N5371 0x18000aa Int BE Pri
!#3 N5373 P3388 ST 8 0x4100005c FP BE Pri
!#3 N5374 P3389 LD 5 -1 Int BE Pri
!#3 N5375 P3390 ST_BINIT 12 0x18000ab Int BE Pri
!#3 N5376 P3391 MEMBAR
!#3 N5377 P3392 ST_BINIT 17 0x18000ac Int BE Pri
!#3 N5378 P3393 MEMBAR
!#3 N5379 P3394 PREFETCH 9 Int BE Pri
!#3 N5380 P3395 PREFETCH 8 Int BE Pri
!#3 N5381 P3396 MEMBAR
!#3 N5382 P3397 BST 21 0x4100005d FP BE Pri
!#3 N5383 P3397 BST 22 0x4100005e FP BE Pri
!#A N5382 N5383
!#3 N5384 P3397 BST 23 0x4100005f FP BE Pri
!#3 N5385 P3398 MEMBAR
!#3 N5386 P3399 PREFETCH 19 Int BE Pri
!#3 N5387 P3400 DWST_BINIT 2 0x18000ad Int BE Pri
!#3 N5388 P3401 MEMBAR
!#3 N5389 P3402 DWLD 6 -1 Int BE Pri
!#3 N5390 P3402 DWLD 7 -1 Int BE Pri
!#A N5389 N5390
!#3 N5391 P3402 CASX 6 -1 N5389 0x18000ae Int BE Pri
!#3 N5392 P3402 CASX 7 -1 N5390 0x18000af Int BE Pri
!#A N5391 N5392
!#3 N5393 P3403 LDD 3 -1 Int BE Pri
!#3 N5394 P3403 LDD 4 -1 Int BE Pri
!#A N5393 N5394
!#3 N5395 P3404 DWLD 12 -1 Int BE Pri
!#3 N5396 P3404 DWLD 13 -1 Int BE Pri
!#A N5395 N5396
!#3 N5397 P3404 CASX 12 -1 N5395 0x18000b0 Int BE Pri
!#3 N5398 P3404 CASX 13 -1 N5396 0x18000b1 Int BE Pri
!#A N5397 N5398
!#3 N5399 P3405 DWST 6 0x18000b2 Int BE Pri
!#3 N5400 P3405 DWST 7 0x18000b3 Int BE Pri
!#A N5399 N5400
!#3 N5401 P3406 LD 13 -1 FP BE Pri
!#3 N5402 P3407 DWLD 12 -1 Int BE Pri
!#3 N5403 P3407 DWLD 13 -1 Int BE Pri
!#A N5402 N5403
!#3 N5404 P3408 MEMBAR
!#3 N5405 P3409 BSTC 0 0x41000060 FP BE Pri
!#3 N5406 P3409 BSTC 1 0x41000061 FP BE Pri
!#A N5405 N5406
!#3 N5407 P3409 BSTC 2 0x41000062 FP BE Pri
!#3 N5408 P3410 MEMBAR
!#3 N5409 P3411 DWST 14 0x18000b4 Int BE Pri
!#3 N5410 P3412 ST_BINIT 13 0x18000b5 Int BE Pri
!#3 N5411 P3413 MEMBAR
!#3 N5412 P3414 LDD 17 -1 Int BE Pri
!#3 N5413 P3415 MEMBAR
!#3 N5414 P3416 BLD 15 -1 FP BE Pri
!#3 N5415 P3416 BLD 16 -1 FP BE Pri
!#A N5414 N5415
!#3 N5416 P3416 BLD 17 -1 FP BE Pri
!#3 N5417 P3417 MEMBAR
!#3 N5418 P3418 LDD 15 -1 Int BE Pri
!#3 N5419 P3418 LDD 16 -1 Int BE Pri
!#A N5418 N5419
!#3 N5420 P3419 LDD 3 -1 Int BE Pri
!#3 N5421 P3419 LDD 4 -1 Int BE Pri
!#A N5420 N5421
!#3 N5422 P3420 LD 9 -1 Int BE Pri
!#3 N5423 P3420 CAS 9 -1 N5422 0x18000b6 Int BE Pri
!#3 N5424 P3421 DWST_BINIT 18 0x18000b7 Int BE Pri
!#3 N5425 P3421 DWST_BINIT 19 0x18000b8 Int BE Pri
!#A N5424 N5425
!#3 N5426 P3422 MEMBAR
!#3 N5427 P3423 LD 16 -1 Int BE Pri
!#3 N5428 P3423 CAS 16 -1 N5427 0x18000b9 Int BE Pri
!#3 N5429 P3424 SWAP 9 0xffffffff 0x18000ba Int BE Pri
!#3 N5430 P3425 LD 21 -1 Int BE Pri
!#3 N5431 P3425 CAS 21 -1 N5430 0x18000bb Int BE Pri
!#3 N5432 P3426 DWST_BINIT 18 0x18000bc Int BE Pri
!#3 N5433 P3426 DWST_BINIT 19 0x18000bd Int BE Pri
!#A N5432 N5433
!#3 N5434 P3427 MEMBAR
!#3 N5435 P3428 BLD 15 -1 FP BE Pri
!#3 N5436 P3428 BLD 16 -1 FP BE Pri
!#A N5435 N5436
!#3 N5437 P3428 BLD 17 -1 FP BE Pri
!#3 N5438 P3429 MEMBAR
!#3 N5439 P3430 REPLACEMENT 19 Int BE Pri
!#3 N5440 P3431 ST 5 0x18000be Int BE Pri
!#3 N5441 P3432 ST_BINIT 10 0x18000bf Int BE Pri
!#3 N5442 P3433 MEMBAR
!#3 N5443 P3434 LD 12 -1 Int BE Pri
!#3 N5444 P3434 CAS 12 -1 N5443 0x18000c0 Int BE Pri
!#3 N5445 P3435 MEMBAR
!#3 N5446 P3436 BLD 9 -1 FP BE Pri
!#3 N5447 P3436 BLD 10 -1 FP BE Pri
!#A N5446 N5447
!#3 N5448 P3436 BLD 11 -1 FP BE Pri
!#3 N5449 P3437 MEMBAR
!#3 N5450 P3438 BLD 12 -1 FP BE Pri
!#3 N5451 P3438 BLD 13 -1 FP BE Pri
!#A N5450 N5451
!#3 N5452 P3438 BLD 14 -1 FP BE Pri
!#3 N5453 P3439 MEMBAR
!#3 N5454 P3440 PREFETCH 20 Int BE Pri
!#3 N5455 P3441 REPLACEMENT 23 Int BE Pri
!#3 N5456 P3442 DWST 15 0x18000c1 Int BE Pri
!#3 N5457 P3442 DWST 16 0x18000c2 Int BE Pri
!#A N5456 N5457
!#3 N5458 P3443 LD 19 -1 Int BE Pri
!#3 N5459 P3444 LDD 14 -1 Int BE Pri
!#3 N5460 P3445 MEMBAR
!#3 N5461 P3446 BSTC 9 0x41000063 FP BE Pri
!#3 N5462 P3446 BSTC 10 0x41000064 FP BE Pri
!#A N5461 N5462
!#3 N5463 P3446 BSTC 11 0x41000065 FP BE Pri
!#3 N5464 P3447 MEMBAR
!#3 N5465 P3448 BLD 21 -1 FP BE Pri
!#3 N5466 P3448 BLD 22 -1 FP BE Pri
!#A N5465 N5466
!#3 N5467 P3448 BLD 23 -1 FP BE Pri
!#3 N5468 P3449 MEMBAR
!#3 N5469 P3450 BST 15 0x41000066 FP BE Pri
!#3 N5470 P3450 BST 16 0x41000067 FP BE Pri
!#A N5469 N5470
!#3 N5471 P3450 BST 17 0x41000068 FP BE Pri
!#3 N5472 P3451 MEMBAR
!#3 N5473 P3452 ST 7 0x18000c3 Int BE Pri
!#3 N5474 P3453 DWLD 8 -1,0x0 Int BE Pri
!#3 N5475 P3453 CASX 8 -1,0x0 N5474 0x18000c4 Int BE Pri
!#3 N5476 P3454 ST_BINIT 15 0x18000c5 Int BE Pri
!#3 N5477 P3455 MEMBAR
!#3 N5478 P3456 BSTC 0 0x41000069 FP BE Pri
!#3 N5479 P3456 BSTC 1 0x4100006a FP BE Pri
!#A N5478 N5479
!#3 N5480 P3456 BSTC 2 0x4100006b FP BE Pri
!#3 N5481 P3457 MEMBAR
!#3 N5482 P3458 BLD 0 -1 FP BE Pri
!#3 N5483 P3458 BLD 1 -1 FP BE Pri
!#A N5482 N5483
!#3 N5484 P3458 BLD 2 -1 FP BE Pri
!#3 N5485 P3459 MEMBAR
!#3 N5486 P3460 LD 17 -1 Int BE Pri
!#3 N5487 P3461 DWLD 18 -1 Int BE Pri
!#3 N5488 P3461 DWLD 19 -1 Int BE Pri
!#A N5487 N5488
!#3 N5489 P3462 DWST_BINIT 17 0x18000c6 Int BE Pri
!#3 N5490 P3463 MEMBAR
!#3 N5491 P3464 DWST 15 0x18000c7 Int BE Pri
!#3 N5492 P3464 DWST 16 0x18000c8 Int BE Pri
!#A N5491 N5492
!#3 N5493 P3465 REPLACEMENT 18 Int BE Pri
!#3 N5494 P3466 ST 2 0x18000c9 Int LE Pri
!#3 N5495 P3467 DWLD 0 -1 Int BE Pri
!#3 N5496 P3467 DWLD 1 -1 Int BE Pri
!#A N5495 N5496
!#3 N5497 P3468 LD 2 -1 Int BE Pri
!#3 N5498 P3468 CAS 2 -1 N5497 0x18000ca Int BE Pri
!#3 N5499 P3469 ST 15 0x18000cb Int BE Pri
!#3 N5500 P3470 ST 14 0x18000cc Int BE Pri
!#3 N5501 P3471 MEMBAR
!#3 N5502 P3472 BLD 12 -1 FP BE Pri
!#3 N5503 P3472 BLD 13 -1 FP BE Pri
!#A N5502 N5503
!#3 N5504 P3472 BLD 14 -1 FP BE Pri
!#3 N5505 P3473 MEMBAR
!#3 N5506 P3474 PREFETCH 8 Int BE Pri
!#3 N5507 P3475 LD 11 -1 Int BE Pri
!#3 N5508 P3476 SWAP 13 0xffffffff 0x18000cd Int BE Pri
!#3 N5509 P3477 LD 7 -1 Int BE Pri
!#3 N5510 P3478 DWST 14 0x18000ce Int BE Pri
!#3 N5511 P3479 MEMBAR
!#3 N5512 P3480 BST 9 0x4100006c FP BE Pri
!#3 N5513 P3480 BST 10 0x4100006d FP BE Pri
!#A N5512 N5513
!#3 N5514 P3480 BST 11 0x4100006e FP BE Pri
!#3 N5515 P3481 MEMBAR
!#3 N5516 P3482 ST 23 0x18000cf Int BE Pri
!#3 N5517 P3483 DWST_BINIT 9 0x18000d0 Int BE Pri
!#3 N5518 P3483 DWST_BINIT 10 0x18000d1 Int BE Pri
!#A N5517 N5518
!#3 N5519 P3484 MEMBAR
!#3 N5520 P3485 BLD 12 -1 FP BE Pri
!#3 N5521 P3485 BLD 13 -1 FP BE Pri
!#A N5520 N5521
!#3 N5522 P3485 BLD 14 -1 FP BE Pri
!#3 N5523 P3486 MEMBAR
!#3 N5524 P3487 DWLD 12 -1 Int BE Pri
!#3 N5525 P3487 DWLD 13 -1 Int BE Pri
!#A N5524 N5525
!#3 N5526 P3487 CASX 12 -1 N5524 0x18000d2 Int BE Pri
!#3 N5527 P3487 CASX 13 -1 N5525 0x18000d3 Int BE Pri
!#A N5526 N5527
!#3 N5528 P3488 LDD 11 -1 Int BE Pri
!#3 N5529 P3489 LD 19 -1 Int BE Pri
!#3 N5530 P3490 MEMBAR
!#3 N5531 P3491 BLD 9 -1 FP BE Pri
!#3 N5532 P3491 BLD 10 -1 FP BE Pri
!#A N5531 N5532
!#3 N5533 P3491 BLD 11 -1 FP BE Pri
!#3 N5534 P3492 MEMBAR
!#3 N5535 P3493 BSTC 12 0x4100006f FP BE Pri
!#3 N5536 P3493 BSTC 13 0x41000070 FP BE Pri
!#A N5535 N5536
!#3 N5537 P3493 BSTC 14 0x41000071 FP BE Pri
!#3 N5538 P3494 MEMBAR
!#3 N5539 P3495 DWLD 0 -1 Int BE Pri
!#3 N5540 P3495 DWLD 1 -1 Int BE Pri
!#A N5539 N5540
!#3 N5541 P3496 MEMBAR
!#3 N5542 P3497 BST 15 0x41000072 FP BE Pri
!#3 N5543 P3497 BST 16 0x41000073 FP BE Pri
!#A N5542 N5543
!#3 N5544 P3497 BST 17 0x41000074 FP BE Pri
!#3 N5545 P3498 MEMBAR
!#3 N5546 P3499 DWLD 15 -1 FP BE Pri
!#3 N5547 P3499 DWLD 16 -1 FP BE Pri
!#A N5546 N5547
!#3 N5548 P3500 DWLD 6 -1 Int BE Pri
!#3 N5549 P3500 DWLD 7 -1 Int BE Pri
!#A N5548 N5549
!#3 N5550 P3501 ST 17 0x18000d4 Int BE Pri
!#3 N5551 P3502 LD 13 -1 Int BE Pri
!#3 N5552 P3502 CAS 13 -1 N5551 0x18000d5 Int BE Pri
!#3 N5553 P3503 ST_BINIT 13 0x18000d6 Int BE Pri
!#3 N5554 P3504 MEMBAR
!#3 N5555 P3505 ST_BINIT 18 0x18000d7 Int BE Pri
!#3 N5556 P3506 MEMBAR
!#3 N5557 P3507 BLD 18 -1 FP BE Pri
!#3 N5558 P3507 BLD 19 -1 FP BE Pri
!#A N5557 N5558
!#3 N5559 P3507 BLD 20 -1 FP BE Pri
!#3 N5560 P3508 MEMBAR
!#3 N5561 P3509 DWLD 3 -1 Int BE Pri
!#3 N5562 P3509 DWLD 4 -1 Int BE Pri
!#A N5561 N5562
!#3 N5563 P3510 DWLD 9 -1 Int BE Pri
!#3 N5564 P3510 DWLD 10 -1 Int BE Pri
!#A N5563 N5564
!#3 N5565 P3510 CASX 9 -1 N5563 0x18000d8 Int BE Pri
!#3 N5566 P3510 CASX 10 -1 N5564 0x18000d9 Int BE Pri
!#A N5565 N5566
!#3 N5567 P3511 MEMBAR
!#3 N5568 P3512 BLD 3 -1 FP BE Pri
!#3 N5569 P3512 BLD 4 -1 FP BE Pri
!#A N5568 N5569
!#3 N5570 P3512 BLD 5 -1 FP BE Pri
!#3 N5571 P3513 MEMBAR
!#3 N5572 P3514 ST 17 0x18000da Int LE Pri
!#3 N5573 P3515 ST_BINIT 13 0x18000db Int BE Pri
!#3 N5574 P3516 MEMBAR
!#3 N5575 P3517 ST 10 0x18000dc Int BE Pri
!#3 N5576 P3518 ST 12 0x18000dd Int BE Pri
!#3 N5577 P3519 ST_BINIT 6 0x18000de Int BE Pri
!#3 N5578 P3520 MEMBAR
!#3 N5579 P3521 SWAP 16 0xffffffff 0x18000df Int BE Pri
!#3 N5580 P3522 MEMBAR
!#3 N5581 P3523 BSTC 18 0x41000075 FP BE Pri
!#3 N5582 P3523 BSTC 19 0x41000076 FP BE Pri
!#A N5581 N5582
!#3 N5583 P3523 BSTC 20 0x41000077 FP BE Pri
!#3 N5584 P3524 MEMBAR
!#3 N5585 P3525 SWAP 6 0xffffffff 0x18000e0 Int BE Pri
!#3 N5586 P3526 SWAP 1 0xffffffff 0x18000e1 Int BE Pri
!#3 N5587 P3527 PREFETCH 10 Int BE Pri
!#3 N5588 P3528 ST 21 0x18000e2 Int BE Pri
!#3 N5589 P3529 DWLD 17 -1,0x0 Int BE Pri
!#3 N5590 P3529 CASX 17 -1,0x0 N5589 0x18000e3 Int BE Pri
!#3 N5591 P3530 SWAP 22 0xffffffff 0x18000e4 Int BE Pri
!#3 N5592 P3531 MEMBAR
!#3 N5593 P3532 BST 21 0x41000078 FP BE Pri
!#3 N5594 P3532 BST 22 0x41000079 FP BE Pri
!#A N5593 N5594
!#3 N5595 P3532 BST 23 0x4100007a FP BE Pri
!#3 N5596 P3533 MEMBAR
!#3 N5597 P3534 LD 20 -1 Int BE Pri
!#3 N5598 P3535 LD 19 -1 Int BE Pri
!#3 N5599 P3535 CAS 19 -1 N5598 0x18000e5 Int BE Pri
!#3 N5600 P3536 REPLACEMENT 4 Int BE Pri
!#3 N5601 P3537 ST 5 0x18000e6 Int BE Pri
!#3 N5602 P3538 DWLD 17 -1 Int BE Pri
!#3 N5603 P3539 LDD 6 -1 Int BE Pri
!#3 N5604 P3539 LDD 7 -1 Int BE Pri
!#A N5603 N5604
!#3 N5605 P3540 MEMBAR
!#3 N5606 P3541 BSTC 12 0x4100007b FP BE Pri
!#3 N5607 P3541 BSTC 13 0x4100007c FP BE Pri
!#A N5606 N5607
!#3 N5608 P3541 BSTC 14 0x4100007d FP BE Pri
!#3 N5609 P3542 MEMBAR
!#3 N5610 P3543 BST 3 0x4100007e FP BE Pri
!#3 N5611 P3543 BST 4 0x4100007f FP BE Pri
!#A N5610 N5611
!#3 N5612 P3543 BST 5 0x41000080 FP BE Pri
!#3 N5613 P3544 MEMBAR
!#3 N5614 P3545 PREFETCH 11 Int BE Pri
!#3 N5615 P3546 MEMBAR
!#3 N5616 P3547 BLD 9 -1 FP BE Pri
!#3 N5617 P3547 BLD 10 -1 FP BE Pri
!#A N5616 N5617
!#3 N5618 P3547 BLD 11 -1 FP BE Pri
!#3 N5619 P3548 MEMBAR
!#3 N5620 P3549 ST_BINIT 8 0x18000e7 Int BE Pri
!#3 N5621 P3550 MEMBAR
!#3 N5622 P3551 ST_BINIT 6 0x18000e8 Int BE Pri
!#3 N5623 P3552 MEMBAR
!#3 N5624 P3553 ST_BINIT 5 0x18000e9 Int BE Pri
!#3 N5625 P3554 MEMBAR
!#3 N5626 P3555 ST_BINIT 0 0x18000ea Int BE Pri
!#3 N5627 P3556 MEMBAR
!#3 N5628 P3557 LD 1 -1 Int BE Pri
!#3 N5629 P3557 CAS 1 -1 N5628 0x18000eb Int BE Pri
!#3 N5630 P3558 SWAP 13 0xffffffff 0x18000ec Int BE Pri
!#3 N5631 P3559 ST_BINIT 0 0x18000ed Int BE Pri
!#3 N5632 P3560 MEMBAR
!#3 N5633 P3561 BST 9 0x41000081 FP BE Pri
!#3 N5634 P3561 BST 10 0x41000082 FP BE Pri
!#A N5633 N5634
!#3 N5635 P3561 BST 11 0x41000083 FP BE Pri
!#3 N5636 P3562 MEMBAR
!#3 N5637 P3563 ST 16 0x18000ee Int BE Pri
!#3 N5638 P3564 PREFETCH 11 Int BE Pri
!#3 N5639 P3565 REPLACEMENT 12 Int BE Pri
!#3 N5640 P3566 ST_BINIT 22 0x18000ef Int BE Pri
!#3 N5641 P3567 MEMBAR
!#3 N5642 P3568 LD 15 -1 Int BE Pri
!#3 N5643 P3568 CAS 15 -1 N5642 0x18000f0 Int BE Pri
!#3 N5644 P3569 ST 15 0x18000f1 Int BE Pri
!#3 N5645 P3570 LD 4 -1 Int BE Pri
!#3 N5646 P3570 CAS 4 -1 N5645 0x18000f2 Int BE Pri
!#3 N5647 P3571 DWST_BINIT 14 0x18000f3 Int BE Pri
!#3 N5648 P3572 MEMBAR
!#3 N5649 P3573 BST 15 0x41000084 FP BE Pri
!#3 N5650 P3573 BST 16 0x41000085 FP BE Pri
!#A N5649 N5650
!#3 N5651 P3573 BST 17 0x41000086 FP BE Pri
!#3 N5652 P3574 MEMBAR
!#3 N5653 P3575 LD 2 -1 Int BE Pri
!#3 N5654 P3575 CAS 2 -1 N5653 0x18000f4 Int BE Pri
!#3 N5655 P3576 ST 1 0x18000f5 Int BE Pri
!#3 N5656 P3577 MEMBAR
!#3 N5657 P3578 BST 9 0x41000087 FP BE Pri
!#3 N5658 P3578 BST 10 0x41000088 FP BE Pri
!#A N5657 N5658
!#3 N5659 P3578 BST 11 0x41000089 FP BE Pri
!#3 N5660 P3579 MEMBAR
!#3 N5661 P3580 SWAP 13 0xffffffff 0x18000f6 Int BE Pri
!#3 N5662 P3581 SWAP 8 0xffffffff 0x18000f7 Int BE Pri
!#3 N5663 P3582 DWST 9 0x18000f8 Int BE Pri
!#3 N5664 P3582 DWST 10 0x18000f9 Int BE Pri
!#A N5663 N5664
!#3 N5665 P3583 ST_BINIT 7 0x18000fa Int BE Pri
!#3 N5666 P3584 MEMBAR
!#3 N5667 P3585 BST 12 0x4100008a FP BE Pri
!#3 N5668 P3585 BST 13 0x4100008b FP BE Pri
!#A N5667 N5668
!#3 N5669 P3585 BST 14 0x4100008c FP BE Pri
!#3 N5670 P3586 MEMBAR
!#3 N5671 P3587 BLD 6 -1 FP BE Pri
!#3 N5672 P3587 BLD 7 -1 FP BE Pri
!#A N5671 N5672
!#3 N5673 P3587 BLD 8 -1 FP BE Pri
!#3 N5674 P3588 MEMBAR
!#3 N5675 P3589 DWST 6 0x18000fb Int BE Pri
!#3 N5676 P3589 DWST 7 0x18000fc Int BE Pri
!#A N5675 N5676
!#3 N5677 P3590 DWST 18 0x18000fd Int BE Pri
!#3 N5678 P3590 DWST 19 0x18000fe Int BE Pri
!#A N5677 N5678
!#3 N5679 P3591 PREFETCH 4 Int BE Pri
!#3 N5680 P3592 DWST_BINIT 6 0x18000ff Int LE Pri
!#3 N5681 P3592 DWST_BINIT 7 0x1800100 Int LE Pri
!#A N5680 N5681
!#3 N5682 P3593 MEMBAR
!#3 N5683 P3594 LD 13 -1 Int BE Pri
!#3 N5684 P3595 MEMBAR
!#3 N5685 P3596 BSTC 21 0x4100008d FP BE Pri
!#3 N5686 P3596 BSTC 22 0x4100008e FP BE Pri
!#A N5685 N5686
!#3 N5687 P3596 BSTC 23 0x4100008f FP BE Pri
!#3 N5688 P3597 MEMBAR
!#3 N5689 P3598 ST 23 0x41000090 FP BE Pri
!#3 N5690 P3599 MEMBAR
!#3 N5691 P3600 BSTC 6 0x41000091 FP BE Pri
!#3 N5692 P3600 BSTC 7 0x41000092 FP BE Pri
!#A N5691 N5692
!#3 N5693 P3600 BSTC 8 0x41000093 FP BE Pri
!#3 N5694 P3601 MEMBAR
!#3 N5695 P3602 BLD 6 -1 FP BE Pri
!#3 N5696 P3602 BLD 7 -1 FP BE Pri
!#A N5695 N5696
!#3 N5697 P3602 BLD 8 -1 FP BE Pri
!#3 N5698 P3603 MEMBAR
!#3 N5699 P3604 BLD 12 -1 FP BE Pri
!#3 N5700 P3604 BLD 13 -1 FP BE Pri
!#A N5699 N5700
!#3 N5701 P3604 BLD 14 -1 FP BE Pri
!#3 N5702 P3605 MEMBAR
!#3 N5703 P3606 LD 18 -1 Int BE Pri
!#3 N5704 P3607 DWST_BINIT 17 0x1800101 Int BE Pri
!#3 N5705 P3608 MEMBAR
!#3 N5706 P3609 REPLACEMENT 17 Int BE Pri
!#3 N5707 P3610 DWLD 21 -1 Int BE Pri
!#3 N5708 P3610 DWLD 22 -1 Int BE Pri
!#A N5707 N5708
!#3 N5709 P3610 CASX 21 -1 N5707 0x1800102 Int BE Pri
!#3 N5710 P3610 CASX 22 -1 N5708 0x1800103 Int BE Pri
!#A N5709 N5710
!#3 N5711 P3611 PREFETCH 20 Int BE Pri
!#3 N5712 P3612 LD 8 -1 Int BE Pri
!#3 N5713 P3612 CAS 8 -1 N5712 0x1800104 Int BE Pri
!#3 N5714 P3613 MEMBAR
!#3 N5715 P3614 BST 18 0x41000094 FP BE Pri
!#3 N5716 P3614 BST 19 0x41000095 FP BE Pri
!#A N5715 N5716
!#3 N5717 P3614 BST 20 0x41000096 FP BE Pri
!#3 N5718 P3615 MEMBAR
!#3 N5719 P3616 PREFETCH 10 Int BE Pri
!#3 N5720 P3617 MEMBAR
!#3 N5721 P3618 BSTC 12 0x41000097 FP BE Pri
!#3 N5722 P3618 BSTC 13 0x41000098 FP BE Pri
!#A N5721 N5722
!#3 N5723 P3618 BSTC 14 0x41000099 FP BE Pri
!#3 N5724 P3619 MEMBAR
!#3 N5725 P3620 DWLD 0 -1 Int BE Pri
!#3 N5726 P3620 DWLD 1 -1 Int BE Pri
!#A N5725 N5726
!#3 N5727 P3621 DWST 17 0x1800105 Int BE Pri
!#3 N5728 P3622 DWLD 12 -1 FP BE Pri
!#3 N5729 P3622 DWLD 13 -1 FP BE Pri
!#A N5728 N5729
!#3 N5730 P3623 LD 0 -1 Int BE Pri
!#3 N5731 P3624 LD 3 -1 Int BE Pri
!#3 N5732 P3624 CAS 3 -1 N5731 0x1800106 Int BE Pri
!#3 N5733 P3625 MEMBAR
!#3 N5734 P3626 BSTC 3 0x4100009a FP BE Pri
!#3 N5735 P3626 BSTC 4 0x4100009b FP BE Pri
!#A N5734 N5735
!#3 N5736 P3626 BSTC 5 0x4100009c FP BE Pri
!#3 N5737 P3627 MEMBAR
!#3 N5738 P3628 LDD 2 -1 Int BE Pri
!#3 N5739 P3629 MEMBAR
!#3 N5740 P3630 BLD 3 -1 FP BE Pri
!#3 N5741 P3630 BLD 4 -1 FP BE Pri
!#A N5740 N5741
!#3 N5742 P3630 BLD 5 -1 FP BE Pri
!#3 N5743 P3631 MEMBAR
!#3 N5744 P3632 PREFETCH 20 Int BE Pri
!#3 N5745 P3633 DWLD 21 -1 Int BE Pri
!#3 N5746 P3633 DWLD 22 -1 Int BE Pri
!#A N5745 N5746
!#3 N5747 P3634 DWLD 0 -1 Int BE Pri
!#3 N5748 P3634 DWLD 1 -1 Int BE Pri
!#A N5747 N5748
!#3 N5749 P3635 DWLD 6 -1 Int BE Pri
!#3 N5750 P3635 DWLD 7 -1 Int BE Pri
!#A N5749 N5750
!#3 N5751 P3635 CASX 6 -1 N5749 0x1800107 Int BE Pri
!#3 N5752 P3635 CASX 7 -1 N5750 0x1800108 Int BE Pri
!#A N5751 N5752
!#3 N5753 P3636 PREFETCH 8 Int BE Pri
!#3 N5754 P3637 DWLD 6 -1 Int LE Pri
!#3 N5755 P3637 DWLD 7 -1 Int LE Pri
!#A N5754 N5755
!#3 N5756 P3637 CASX 6 -1 N5754 0x1800109 Int LE Pri
!#3 N5757 P3637 CASX 7 -1 N5755 0x180010a Int LE Pri
!#A N5756 N5757
!#3 N5758 P3638 MEMBAR
!#3 N5759 P3639 BLD 15 -1 FP BE Pri
!#3 N5760 P3639 BLD 16 -1 FP BE Pri
!#A N5759 N5760
!#3 N5761 P3639 BLD 17 -1 FP BE Pri
!#3 N5762 P3640 MEMBAR
!#3 N5763 P3641 SWAP 13 0xffffffff 0x180010b Int BE Pri
!#3 N5764 P3642 DWLD 5 -1,0x0 Int BE Pri
!#3 N5765 P3642 CASX 5 -1,0x0 N5764 0x180010c Int BE Pri
!#3 N5766 P3643 LD 22 -1 Int BE Pri
!#3 N5767 P3643 CAS 22 -1 N5766 0x180010d Int BE Pri
!#3 N5768 P3644 PREFETCH 1 Int BE Pri
!#3 N5769 P3645 DWLD 5 -1,0x0 Int BE Pri
!#3 N5770 P3645 CASX 5 -1,0x0 N5769 0x180010e Int BE Pri
!#3 N5771 P3646 ST 9 0x180010f Int BE Pri
!#3 N5772 P3647 MEMBAR
!#3 N5773 P3648 BLD 3 -1 FP BE Pri
!#3 N5774 P3648 BLD 4 -1 FP BE Pri
!#A N5773 N5774
!#3 N5775 P3648 BLD 5 -1 FP BE Pri
!#3 N5776 P3649 MEMBAR
!#3 N5777 P3650 LDD 23 -1 Int BE Pri
!#3 N5778 P3651 ST 19 0x1800110 Int BE Pri
!#3 N5779 P3652 LD 12 -1 Int BE Pri
!#3 N5780 P3653 LD 7 -1 Int BE Pri
!#3 N5781 P3653 CAS 7 -1 N5780 0x1800111 Int BE Pri
!#3 N5782 P3654 DWLD 6 -1 Int BE Pri
!#3 N5783 P3654 DWLD 7 -1 Int BE Pri
!#A N5782 N5783
!#3 N5784 P3654 CASX 6 -1 N5782 0x1800112 Int BE Pri
!#3 N5785 P3654 CASX 7 -1 N5783 0x1800113 Int BE Pri
!#A N5784 N5785
!#3 N5786 P3655 SWAP 12 0xffffffff 0x1800114 Int BE Pri
!#3 N5787 P3656 MEMBAR
!#3 N5788 P3657 BST 3 0x4100009d FP BE Pri
!#3 N5789 P3657 BST 4 0x4100009e FP BE Pri
!#A N5788 N5789
!#3 N5790 P3657 BST 5 0x4100009f FP BE Pri
!#3 N5791 P3658 MEMBAR
!#3 N5792 P3659 DWLD 18 -1 Int LE Pri
!#3 N5793 P3659 DWLD 19 -1 Int LE Pri
!#A N5792 N5793
!#3 N5794 P3660 ST 1 0x1800115 Int BE Pri
!#3 N5795 P3661 ST_BINIT 16 0x1800116 Int BE Pri
!#3 N5796 P3662 MEMBAR
!#3 N5797 P3663 SWAP 16 0xffffffff 0x1800117 Int BE Pri
!#3 N5798 P3664 MEMBAR
!#3 N5799 P3665 BLD 3 -1 FP BE Pri
!#3 N5800 P3665 BLD 4 -1 FP BE Pri
!#A N5799 N5800
!#3 N5801 P3665 BLD 5 -1 FP BE Pri
!#3 N5802 P3666 MEMBAR
!#3 N5803 P3667 BLD 15 -1 FP BE Pri
!#3 N5804 P3667 BLD 16 -1 FP BE Pri
!#A N5803 N5804
!#3 N5805 P3667 BLD 17 -1 FP BE Pri
!#3 N5806 P3668 MEMBAR
!#3 N5807 P3669 ST 15 0x1800118 Int BE Pri
!#3 N5808 P3670 MEMBAR
!#3 N5809 P3671 BLD 3 -1 FP BE Pri
!#3 N5810 P3671 BLD 4 -1 FP BE Pri
!#A N5809 N5810
!#3 N5811 P3671 BLD 5 -1 FP BE Pri
!#3 N5812 P3672 MEMBAR
!#3 N5813 P3673 ST 20 0x1800119 Int BE Pri
!#3 N5814 P3674 MEMBAR
!#3 N5815 P3675 BLD 9 -1 FP BE Pri
!#3 N5816 P3675 BLD 10 -1 FP BE Pri
!#A N5815 N5816
!#3 N5817 P3675 BLD 11 -1 FP BE Pri
!#3 N5818 P3676 MEMBAR
!#3 N5819 P3677 ST 8 0x180011a Int BE Pri
!#3 N5820 P3678 LD 11 -1 Int BE Pri
!#3 N5821 P3679 ST 11 0x180011b Int BE Pri
!#3 N5822 P3680 ST 17 0x180011c Int BE Pri
!#3 N5823 P3681 DWLD 15 -1 Int BE Pri
!#3 N5824 P3681 DWLD 16 -1 Int BE Pri
!#A N5823 N5824
!#3 N5825 P3681 CASX 15 -1 N5823 0x180011d Int BE Pri
!#3 N5826 P3681 CASX 16 -1 N5824 0x180011e Int BE Pri
!#A N5825 N5826
!#3 N5827 P3682 DWST_BINIT 23 0x180011f Int BE Pri
!#3 N5828 P3683 MEMBAR
!#3 N5829 P3684 BSTC 18 0x410000a0 FP BE Pri
!#3 N5830 P3684 BSTC 19 0x410000a1 FP BE Pri
!#A N5829 N5830
!#3 N5831 P3684 BSTC 20 0x410000a2 FP BE Pri
!#3 N5832 P3685 MEMBAR
!#3 N5833 P3686 DWLD 0 -1 Int BE Pri
!#3 N5834 P3686 DWLD 1 -1 Int BE Pri
!#A N5833 N5834
!#3 N5835 P3686 CASX 0 -1 N5833 0x1800120 Int BE Pri
!#3 N5836 P3686 CASX 1 -1 N5834 0x1800121 Int BE Pri
!#A N5835 N5836
!#3 N5837 P3687 PREFETCH 23 Int BE Pri
!#3 N5838 P3688 LD 11 -1 Int BE Pri
!#3 N5839 P3689 MEMBAR
!#3 N5840 P3690 BST 6 0x410000a3 FP BE Pri
!#3 N5841 P3690 BST 7 0x410000a4 FP BE Pri
!#A N5840 N5841
!#3 N5842 P3690 BST 8 0x410000a5 FP BE Pri
!#3 N5843 P3691 MEMBAR
!#3 N5844 P3692 SWAP 14 0xffffffff 0x1800122 Int BE Pri
!#3 N5845 P3693 DWLD 9 -1 Int BE Pri
!#3 N5846 P3693 DWLD 10 -1 Int BE Pri
!#A N5845 N5846
!#3 N5847 P3693 CASX 9 -1 N5845 0x1800123 Int BE Pri
!#3 N5848 P3693 CASX 10 -1 N5846 0x1800124 Int BE Pri
!#A N5847 N5848
!#3 N5849 P3694 MEMBAR
!#3 N5850 P3695 BSTC 0 0x410000a6 FP BE Pri
!#3 N5851 P3695 BSTC 1 0x410000a7 FP BE Pri
!#A N5850 N5851
!#3 N5852 P3695 BSTC 2 0x410000a8 FP BE Pri
!#3 N5853 P3696 MEMBAR
!#3 N5854 P3697 LD 11 -1 Int BE Pri
!#3 N5855 P3698 LD 11 -1 Int BE Pri
!#3 N5856 P3699 LD 19 -1 FP BE Pri
!#3 N5857 P3700 DWLD 0 -1 Int BE Pri
!#3 N5858 P3700 DWLD 1 -1 Int BE Pri
!#A N5857 N5858
!#3 N5859 P3701 ST 12 0x1800125 Int BE Pri
!#3 N5860 P3702 DWST_BINIT 0 0x1800126 Int BE Pri
!#3 N5861 P3702 DWST_BINIT 1 0x1800127 Int BE Pri
!#A N5860 N5861
!#3 N5862 P3703 MEMBAR
!#3 N5863 P3704 BLD 0 -1 FP BE Pri
!#3 N5864 P3704 BLD 1 -1 FP BE Pri
!#A N5863 N5864
!#3 N5865 P3704 BLD 2 -1 FP BE Pri
!#3 N5866 P3705 MEMBAR
!#3 N5867 P3706 DWST_BINIT 6 0x1800128 Int BE Pri
!#3 N5868 P3706 DWST_BINIT 7 0x1800129 Int BE Pri
!#A N5867 N5868
!#3 N5869 P3707 MEMBAR
!#3 N5870 P3708 DWLD 9 -1 Int BE Pri
!#3 N5871 P3708 DWLD 10 -1 Int BE Pri
!#A N5870 N5871
!#3 N5872 P3708 CASX 9 -1 N5870 0x180012a Int BE Pri
!#3 N5873 P3708 CASX 10 -1 N5871 0x180012b Int BE Pri
!#A N5872 N5873
!#3 N5874 P3709 LD 22 -1 Int BE Pri
!#3 N5875 P3710 MEMBAR
!#3 N5876 P3711 BSTC 12 0x410000a9 FP BE Pri
!#3 N5877 P3711 BSTC 13 0x410000aa FP BE Pri
!#A N5876 N5877
!#3 N5878 P3711 BSTC 14 0x410000ab FP BE Pri
!#3 N5879 P3712 MEMBAR
!#3 N5880 P3713 BLD 6 -1 FP BE Pri
!#3 N5881 P3713 BLD 7 -1 FP BE Pri
!#A N5880 N5881
!#3 N5882 P3713 BLD 8 -1 FP BE Pri
!#3 N5883 P3714 MEMBAR
!#3 N5884 P3715 ST_BINIT 13 0x180012c Int BE Pri
!#3 N5885 P3716 MEMBAR
!#3 N5886 P3717 PREFETCH 9 Int BE Pri
!#3 N5887 P3718 LD 13 -1 Int BE Pri
!#3 N5888 P3718 CAS 13 -1 N5887 0x180012d Int BE Pri
!#3 N5889 P3719 DWST_BINIT 14 0x180012e Int BE Pri
!#3 N5890 P3720 MEMBAR
!#3 N5891 P3721 REPLACEMENT 21 Int BE Pri
!#3 N5892 P3722 ST_BINIT 13 0x180012f Int BE Pri
!#3 N5893 P3723 MEMBAR
!#3 N5894 P3724 LD 3 -1 Int BE Pri
!#3 N5895 P3725 LD 23 -1 Int BE Pri
!#3 N5896 P3725 CAS 23 -1 N5895 0x1800130 Int BE Pri
!#3 N5897 P3726 MEMBAR
!#3 N5898 P3727 BSTC 18 0x410000ac FP BE Pri
!#3 N5899 P3727 BSTC 19 0x410000ad FP BE Pri
!#A N5898 N5899
!#3 N5900 P3727 BSTC 20 0x410000ae FP BE Pri
!#3 N5901 P3728 MEMBAR
!#3 N5902 P3729 LD 19 -1 Int BE Pri
!#3 N5903 P3730 PREFETCH 15 Int BE Pri
!#3 N5904 P3731 DWLD 12 -1 Int BE Pri
!#3 N5905 P3731 DWLD 13 -1 Int BE Pri
!#A N5904 N5905
!#3 N5906 P3731 CASX 12 -1 N5904 0x1800131 Int BE Pri
!#3 N5907 P3731 CASX 13 -1 N5905 0x1800132 Int BE Pri
!#A N5906 N5907
!#3 N5908 P3732 DWST_BINIT 15 0x1800133 Int BE Pri
!#3 N5909 P3732 DWST_BINIT 16 0x1800134 Int BE Pri
!#A N5908 N5909
!#3 N5910 P3733 MEMBAR
!#3 N5911 P3734 SWAP 15 0xffffffff 0x1800135 Int BE Pri
!#3 N5912 P3735 DWLD 6 -1 Int BE Pri
!#3 N5913 P3735 DWLD 7 -1 Int BE Pri
!#A N5912 N5913
!#3 N5914 P3735 CASX 6 -1 N5912 0x1800136 Int BE Pri
!#3 N5915 P3735 CASX 7 -1 N5913 0x1800137 Int BE Pri
!#A N5914 N5915
!#3 N5916 P3736 LD 16 -1 Int BE Pri
!#3 N5917 P3737 SWAP 3 0xffffffff 0x1800138 Int BE Pri
!#3 N5918 P3738 DWST_BINIT 11 0x1800139 Int BE Pri
!#3 N5919 P3739 MEMBAR
!#3 N5920 P3740 BLD 9 -1 FP BE Pri
!#3 N5921 P3740 BLD 10 -1 FP BE Pri
!#A N5920 N5921
!#3 N5922 P3740 BLD 11 -1 FP BE Pri
!#3 N5923 P3741 MEMBAR
!#3 N5924 P3742 BLD 0 -1 FP BE Pri
!#3 N5925 P3742 BLD 1 -1 FP BE Pri
!#A N5924 N5925
!#3 N5926 P3742 BLD 2 -1 FP BE Pri
!#3 N5927 P3743 MEMBAR
!#3 N5928 P3744 LDD 18 -1 Int BE Pri
!#3 N5929 P3744 LDD 19 -1 Int BE Pri
!#A N5928 N5929
!#3 N5930 P3745 DWST_BINIT 14 0x180013a Int BE Pri
!#3 N5931 P3746 MEMBAR
!#3 N5932 P3747 BSTC 12 0x410000af FP BE Pri
!#3 N5933 P3747 BSTC 13 0x410000b0 FP BE Pri
!#A N5932 N5933
!#3 N5934 P3747 BSTC 14 0x410000b1 FP BE Pri
!#3 N5935 P3748 MEMBAR
!#3 N5936 P3749 DWLD 20 -1 Int BE Pri
!#3 N5937 P3750 ST_BINIT 7 0x180013b Int BE Pri
!#3 N5938 P3751 MEMBAR
!#3 N5939 P3752 BLD 12 -1 FP BE Pri
!#3 N5940 P3752 BLD 13 -1 FP BE Pri
!#A N5939 N5940
!#3 N5941 P3752 BLD 14 -1 FP BE Pri
!#3 N5942 P3753 MEMBAR
!#3 N5943 P3754 LD 7 -1 Int BE Pri
!#3 N5944 P3755 PREFETCH 13 Int BE Pri
!#3 N5945 P3756 LDD 17 -1 Int BE Pri
!#3 N5946 P3757 REPLACEMENT 13 Int BE Pri
!#3 N5947 P3758 REPLACEMENT 5 Int BE Pri
!#3 N5948 P3759 MEMBAR
!#3 N5949 P3760 BLD 6 -1 FP BE Pri
!#3 N5950 P3760 BLD 7 -1 FP BE Pri
!#A N5949 N5950
!#3 N5951 P3760 BLD 8 -1 FP BE Pri
!#3 N5952 P3761 MEMBAR
!#3 N5953 P3762 DWST 14 0x180013c Int BE Pri
!#3 N5954 P3763 MEMBAR
!#3 N5955 P3764 BLD 15 -1 FP BE Pri
!#3 N5956 P3764 BLD 16 -1 FP BE Pri
!#A N5955 N5956
!#3 N5957 P3764 BLD 17 -1 FP BE Pri
!#3 N5958 P3765 MEMBAR
!#3 N5959 P3766 REPLACEMENT 21 Int BE Pri
!#3 N5960 P3767 DWST 5 0x180013d Int BE Pri
!#3 N5961 P3768 SWAP 1 0xffffffff 0x180013e Int BE Pri
!#3 N5962 P3769 MEMBAR
!#3 N5963 P3770 BSTC 18 0x410000b2 FP BE Pri
!#3 N5964 P3770 BSTC 19 0x410000b3 FP BE Pri
!#A N5963 N5964
!#3 N5965 P3770 BSTC 20 0x410000b4 FP BE Pri
!#3 N5966 P3771 MEMBAR
!#3 N5967 P3772 BSTC 15 0x410000b5 FP BE Pri
!#3 N5968 P3772 BSTC 16 0x410000b6 FP BE Pri
!#A N5967 N5968
!#3 N5969 P3772 BSTC 17 0x410000b7 FP BE Pri
!#3 N5970 P3773 MEMBAR
!#3 N5971 P3774 ST_BINIT 11 0x180013f Int BE Pri
!#3 N5972 P3775 MEMBAR
!#3 N5973 P3776 ST_BINIT 7 0x1800140 Int BE Pri
!#3 N5974 P3777 MEMBAR
!#3 N5975 P3778 BLD 9 -1 FP BE Pri
!#3 N5976 P3778 BLD 10 -1 FP BE Pri
!#A N5975 N5976
!#3 N5977 P3778 BLD 11 -1 FP BE Pri
!#3 N5978 P3779 MEMBAR
!#3 N5979 P3780 LDD 6 -1 Int BE Pri
!#3 N5980 P3780 LDD 7 -1 Int BE Pri
!#A N5979 N5980
!#3 N5981 P3781 DWST 5 0x1800141 Int BE Pri
!#3 N5982 P3782 MEMBAR
!#3 N5983 P3783 BLD 15 -1 FP BE Pri
!#3 N5984 P3783 BLD 16 -1 FP BE Pri
!#A N5983 N5984
!#3 N5985 P3783 BLD 17 -1 FP BE Pri
!#3 N5986 P3784 MEMBAR
!#3 N5987 P3785 ST_BINIT 4 0x1800142 Int LE Pri
!#3 N5988 P3786 MEMBAR
!#3 N5989 P3787 PREFETCH 13 Int BE Pri
!#3 N5990 P3788 SWAP 17 0xffffffff 0x1800143 Int BE Pri
!#3 N5991 P3789 DWLD 6 -1 Int BE Pri
!#3 N5992 P3789 DWLD 7 -1 Int BE Pri
!#A N5991 N5992
!#3 N5993 P3790 LDD 0 -1 Int BE Pri
!#3 N5994 P3790 LDD 1 -1 Int BE Pri
!#A N5993 N5994
!#3 N5995 P3791 LD 12 -1 Int BE Pri
!#3 N5996 P3792 DWLD 3 -1 Int BE Pri
!#3 N5997 P3792 DWLD 4 -1 Int BE Pri
!#A N5996 N5997
!#3 N5998 P3793 DWLD 3 -1 Int BE Pri
!#3 N5999 P3793 DWLD 4 -1 Int BE Pri
!#A N5998 N5999
!#3 N6000 P3794 LD 17 -1 Int BE Pri
!#3 N6001 P3794 CAS 17 -1 N6000 0x1800144 Int BE Pri
!#3 N6002 P3795 DWLD 0 -1 Int BE Pri
!#3 N6003 P3795 DWLD 1 -1 Int BE Pri
!#A N6002 N6003
!#3 N6004 P3795 CASX 0 -1 N6002 0x1800145 Int BE Pri
!#3 N6005 P3795 CASX 1 -1 N6003 0x1800146 Int BE Pri
!#A N6004 N6005
!#3 N6006 P3796 MEMBAR
!#3 N6007 P3797 BSTC 18 0x410000b8 FP BE Pri
!#3 N6008 P3797 BSTC 19 0x410000b9 FP BE Pri
!#A N6007 N6008
!#3 N6009 P3797 BSTC 20 0x410000ba FP BE Pri
!#3 N6010 P3798 MEMBAR
!#3 N6011 P3799 BST 3 0x410000bb FP BE Pri
!#3 N6012 P3799 BST 4 0x410000bc FP BE Pri
!#A N6011 N6012
!#3 N6013 P3799 BST 5 0x410000bd FP BE Pri
!#3 N6014 P3800 MEMBAR
!#3 N6015 P3801 ST_BINIT 17 0x1800147 Int BE Pri
!#3 N6016 P3802 MEMBAR
!#3 N6017 P3803 DWST_BINIT 8 0x1800148 Int BE Pri
!#3 N6018 P3804 MEMBAR
!#3 N6019 P3805 ST_BINIT 6 0x1800149 Int BE Pri
!#3 N6020 P3806 MEMBAR
!#3 N6021 P3807 LDD 0 -1 Int BE Pri
!#3 N6022 P3807 LDD 1 -1 Int BE Pri
!#A N6021 N6022
!#3 N6023 P3808 DWST_BINIT 18 0x180014a Int BE Pri
!#3 N6024 P3808 DWST_BINIT 19 0x180014b Int BE Pri
!#A N6023 N6024
!#3 N6025 P3809 MEMBAR
!#3 N6026 P3810 BSTC 15 0x410000be FP BE Pri
!#3 N6027 P3810 BSTC 16 0x410000bf FP BE Pri
!#A N6026 N6027
!#3 N6028 P3810 BSTC 17 0x410000c0 FP BE Pri
!#3 N6029 P3811 MEMBAR
!#3 N6030 P3812 ST 20 0x180014c Int BE Pri
!#3 N6031 P3813 MEMBAR
!#3 N6032 P3814 BSTC 18 0x410000c1 FP BE Pri
!#3 N6033 P3814 BSTC 19 0x410000c2 FP BE Pri
!#A N6032 N6033
!#3 N6034 P3814 BSTC 20 0x410000c3 FP BE Pri
!#3 N6035 P3815 MEMBAR
!#3 N6036 P3816 LD 14 -1 Int BE Pri
!#3 N6037 P3817 LD 5 -1 Int BE Pri
!#3 N6038 P3817 CAS 5 -1 N6037 0x180014d Int BE Pri
!#3 N6039 P3818 LD 6 -1 Int BE Pri
!#3 N6040 P3818 CAS 6 -1 N6039 0x180014e Int BE Pri
!#3 N6041 P3819 MEMBAR
!#3 N6042 P3820 BSTC 18 0x410000c4 FP BE Pri
!#3 N6043 P3820 BSTC 19 0x410000c5 FP BE Pri
!#A N6042 N6043
!#3 N6044 P3820 BSTC 20 0x410000c6 FP BE Pri
!#3 N6045 P3821 MEMBAR
!#3 N6046 P3822 DWLD 15 -1 Int BE Pri
!#3 N6047 P3822 DWLD 16 -1 Int BE Pri
!#A N6046 N6047
!#3 N6048 P3823 LDD 0 -1 Int BE Pri
!#3 N6049 P3823 LDD 1 -1 Int BE Pri
!#A N6048 N6049
!#3 N6050 P3824 MEMBAR
!#3 N6051 P3825 BST 9 0x410000c7 FP BE Pri
!#3 N6052 P3825 BST 10 0x410000c8 FP BE Pri
!#A N6051 N6052
!#3 N6053 P3825 BST 11 0x410000c9 FP BE Pri
!#3 N6054 P3826 MEMBAR
!#3 N6055 P3827 PREFETCH 2 Int BE Pri
!#3 N6056 P3828 DWST_BINIT 0 0x180014f Int BE Pri
!#3 N6057 P3828 DWST_BINIT 1 0x1800150 Int BE Pri
!#A N6056 N6057
!#3 N6058 P3829 MEMBAR
!#3 N6059 P3830 BST 21 0x410000ca FP BE Pri
!#3 N6060 P3830 BST 22 0x410000cb FP BE Pri
!#A N6059 N6060
!#3 N6061 P3830 BST 23 0x410000cc FP BE Pri
!#3 N6062 P3831 MEMBAR
!#3 N6063 P3832 DWST_BINIT 6 0x1800151 Int BE Pri
!#3 N6064 P3832 DWST_BINIT 7 0x1800152 Int BE Pri
!#A N6063 N6064
!#3 N6065 P3833 MEMBAR
!#3 N6066 P3834 DWLD 3 -1 Int BE Pri
!#3 N6067 P3834 DWLD 4 -1 Int BE Pri
!#A N6066 N6067
!#3 N6068 P3834 CASX 3 -1 N6066 0x1800153 Int BE Pri
!#3 N6069 P3834 CASX 4 -1 N6067 0x1800154 Int BE Pri
!#A N6068 N6069
!#3 N6070 P3835 ST_BINIT 3 0x1800155 Int BE Pri
!#3 N6071 P3836 MEMBAR
!#3 N6072 P3837 BST 21 0x410000cd FP BE Pri
!#3 N6073 P3837 BST 22 0x410000ce FP BE Pri
!#A N6072 N6073
!#3 N6074 P3837 BST 23 0x410000cf FP BE Pri
!#3 N6075 P3838 MEMBAR
!#3 N6076 P3839 DWST 3 0x1800156 Int BE Pri
!#3 N6077 P3839 DWST 4 0x1800157 Int BE Pri
!#A N6076 N6077
!#3 N6078 P3840 LDD 6 -1 Int BE Pri
!#3 N6079 P3840 LDD 7 -1 Int BE Pri
!#A N6078 N6079
!#3 N6080 P3841 DWST 11 0x1800158 Int BE Pri
!#3 N6081 P3842 MEMBAR
!#3 N6082 P3843 BSTC 21 0x410000d0 FP BE Pri
!#3 N6083 P3843 BSTC 22 0x410000d1 FP BE Pri
!#A N6082 N6083
!#3 N6084 P3843 BSTC 23 0x410000d2 FP BE Pri
!#3 N6085 P3844 MEMBAR
!#3 N6086 P3845 BLD 9 -1 FP BE Pri
!#3 N6087 P3845 BLD 10 -1 FP BE Pri
!#A N6086 N6087
!#3 N6088 P3845 BLD 11 -1 FP BE Pri
!#3 N6089 P3846 MEMBAR
!#3 N6090 P3847 BLD 12 -1 FP BE Pri
!#3 N6091 P3847 BLD 13 -1 FP BE Pri
!#A N6090 N6091
!#3 N6092 P3847 BLD 14 -1 FP BE Pri
!#3 N6093 P3848 MEMBAR
!#3 N6094 P3849 ST_BINIT 8 0x1800159 Int BE Pri
!#3 N6095 P3850 MEMBAR
!#3 N6096 P3851 DWST 18 0x180015a Int BE Pri
!#3 N6097 P3851 DWST 19 0x180015b Int BE Pri
!#A N6096 N6097
!#3 N6098 P3852 DWLD 0 -1 Int BE Pri
!#3 N6099 P3852 DWLD 1 -1 Int BE Pri
!#A N6098 N6099
!#3 N6100 P3852 CASX 0 -1 N6098 0x180015c Int BE Pri
!#3 N6101 P3852 CASX 1 -1 N6099 0x180015d Int BE Pri
!#A N6100 N6101
!#3 N6102 P3853 DWLD 17 -1,0x0 Int BE Pri
!#3 N6103 P3853 CASX 17 -1,0x0 N6102 0x180015e Int BE Pri
!#3 N6104 P3854 REPLACEMENT 6 Int BE Pri
!#3 N6105 P3855 MEMBAR
!#3 N6106 P3856 BSTC 9 0x410000d3 FP BE Pri
!#3 N6107 P3856 BSTC 10 0x410000d4 FP BE Pri
!#A N6106 N6107
!#3 N6108 P3856 BSTC 11 0x410000d5 FP BE Pri
!#3 N6109 P3857 MEMBAR
!#3 N6110 P3858 DWLD 18 -1 Int BE Pri
!#3 N6111 P3858 DWLD 19 -1 Int BE Pri
!#A N6110 N6111
!#3 N6112 P3859 DWST 21 0x410000d6 FP BE Pri
!#3 N6113 P3859 DWST 22 0x410000d7 FP BE Pri
!#A N6112 N6113
!#3 N6114 P3860 MEMBAR
!#3 N6115 P3861 BSTC 15 0x410000d8 FP BE Pri
!#3 N6116 P3861 BSTC 16 0x410000d9 FP BE Pri
!#A N6115 N6116
!#3 N6117 P3861 BSTC 17 0x410000da FP BE Pri
!#3 N6118 P3862 MEMBAR
!#3 N6119 P3863 DWLD 15 -1 Int BE Pri
!#3 N6120 P3863 DWLD 16 -1 Int BE Pri
!#A N6119 N6120
!#3 N6121 P3863 CASX 15 -1 N6119 0x180015f Int BE Pri
!#3 N6122 P3863 CASX 16 -1 N6120 0x1800160 Int BE Pri
!#A N6121 N6122
!#3 N6123 P3864 SWAP 1 0xffffffff 0x1800161 Int BE Pri
!#3 N6124 P3865 DWLD 18 -1 Int BE Pri
!#3 N6125 P3865 DWLD 19 -1 Int BE Pri
!#A N6124 N6125
!#3 N6126 P3865 CASX 18 -1 N6124 0x1800162 Int BE Pri
!#3 N6127 P3865 CASX 19 -1 N6125 0x1800163 Int BE Pri
!#A N6126 N6127
!#3 N6128 P3866 DWLD 18 -1 Int BE Pri
!#3 N6129 P3866 DWLD 19 -1 Int BE Pri
!#A N6128 N6129
!#3 N6130 P3866 CASX 18 -1 N6128 0x1800164 Int BE Pri
!#3 N6131 P3866 CASX 19 -1 N6129 0x1800165 Int BE Pri
!#A N6130 N6131
!#3 N6132 P3867 DWLD 12 -1 Int BE Pri
!#3 N6133 P3867 DWLD 13 -1 Int BE Pri
!#A N6132 N6133
!#3 N6134 P3868 MEMBAR
!#3 N6135 P3869 BST 12 0x410000db FP BE Pri
!#3 N6136 P3869 BST 13 0x410000dc FP BE Pri
!#A N6135 N6136
!#3 N6137 P3869 BST 14 0x410000dd FP BE Pri
!#3 N6138 P3870 MEMBAR
!#3 N6139 P3871 BLD 21 -1 FP BE Pri
!#3 N6140 P3871 BLD 22 -1 FP BE Pri
!#A N6139 N6140
!#3 N6141 P3871 BLD 23 -1 FP BE Pri
!#3 N6142 P3872 MEMBAR
!#3 N6143 P3873 LD 16 -1 Int BE Pri
!#3 N6144 P3874 MEMBAR
!#3 N6145 P3875 BSTC 12 0x410000de FP BE Pri
!#3 N6146 P3875 BSTC 13 0x410000df FP BE Pri
!#A N6145 N6146
!#3 N6147 P3875 BSTC 14 0x410000e0 FP BE Pri
!#3 N6148 P3876 MEMBAR
!#3 N6149 P3877 PREFETCH 22 Int BE Pri
!#3 N6150 P3878 MEMBAR
!#3 N6151 P3879 BSTC 21 0x410000e1 FP BE Pri
!#3 N6152 P3879 BSTC 22 0x410000e2 FP BE Pri
!#A N6151 N6152
!#3 N6153 P3879 BSTC 23 0x410000e3 FP BE Pri
!#3 N6154 P3880 MEMBAR
!#3 N6155 P3881 LDD 3 -1 Int BE Pri
!#3 N6156 P3881 LDD 4 -1 Int BE Pri
!#A N6155 N6156
!#3 N6157 P3882 MEMBAR
!#3 N6158 P3883 BLD 12 -1 FP BE Pri
!#3 N6159 P3883 BLD 13 -1 FP BE Pri
!#A N6158 N6159
!#3 N6160 P3883 BLD 14 -1 FP BE Pri
!#3 N6161 P3884 MEMBAR
!#3 N6162 P3885 BLD 21 -1 FP BE Pri
!#3 N6163 P3885 BLD 22 -1 FP BE Pri
!#A N6162 N6163
!#3 N6164 P3885 BLD 23 -1 FP BE Pri
!#3 N6165 P3886 MEMBAR
!#3 N6166 P3887 LD 0 -1 Int BE Pri
!#3 N6167 P3887 CAS 0 -1 N6166 0x1800166 Int BE Pri
!#3 N6168 P3888 DWLD 0 -1 Int BE Pri
!#3 N6169 P3888 DWLD 1 -1 Int BE Pri
!#A N6168 N6169
!#3 N6170 P3889 MEMBAR
!#3 N6171 P3890 BLD 6 -1 FP BE Pri
!#3 N6172 P3890 BLD 7 -1 FP BE Pri
!#A N6171 N6172
!#3 N6173 P3890 BLD 8 -1 FP BE Pri
!#3 N6174 P3891 MEMBAR
!#3 N6175 P3892 LD 20 -1 Int BE Pri
!#3 N6176 P3893 SWAP 15 0xffffffff 0x1800167 Int BE Pri
!#3 N6177 P3894 DWLD 20 -1,0x0 Int BE Pri
!#3 N6178 P3894 CASX 20 -1,0x0 N6177 0x1800168 Int BE Pri
!#3 N6179 P3895 ST 22 0x1800169 Int BE Pri
!#3 N6180 P3896 MEMBAR
!#3 N6181 P3897 BST 12 0x410000e4 FP BE Pri
!#3 N6182 P3897 BST 13 0x410000e5 FP BE Pri
!#A N6181 N6182
!#3 N6183 P3897 BST 14 0x410000e6 FP BE Pri
!#3 N6184 P3898 MEMBAR
!#3 N6185 P3899 LD 3 -1 Int BE Pri
!#3 N6186 P3900 DWLD 12 -1 Int BE Pri
!#3 N6187 P3900 DWLD 13 -1 Int BE Pri
!#A N6186 N6187
!#3 N6188 P3901 ST 9 0x180016a Int BE Pri
!#3 N6189 P3902 MEMBAR
!#3 N6190 P3903 BST 12 0x410000e7 FP BE Pri
!#3 N6191 P3903 BST 13 0x410000e8 FP BE Pri
!#A N6190 N6191
!#3 N6192 P3903 BST 14 0x410000e9 FP BE Pri
!#3 N6193 P3904 MEMBAR
!#3 N6194 P3905 SWAP 20 0xffffffff 0x180016b Int BE Pri
!#3 N6195 P3906 ST_BINIT 12 0x180016c Int BE Pri
!#3 N6196 P3907 MEMBAR
!#3 N6197 P3908 DWLD 0 -1 Int BE Pri
!#3 N6198 P3908 DWLD 1 -1 Int BE Pri
!#A N6197 N6198
!#3 N6199 P3908 CASX 0 -1 N6197 0x180016d Int BE Pri
!#3 N6200 P3908 CASX 1 -1 N6198 0x180016e Int BE Pri
!#A N6199 N6200
!#3 N6201 P3909 DWST_BINIT 2 0x180016f Int BE Pri
!#3 N6202 P3910 MEMBAR
!#3 N6203 P3911 ST 18 0x1800170 Int BE Pri
!#3 N6204 P3912 MEMBAR
!#3 N6205 P3913 BSTC 0 0x410000ea FP BE Pri
!#3 N6206 P3913 BSTC 1 0x410000eb FP BE Pri
!#A N6205 N6206
!#3 N6207 P3913 BSTC 2 0x410000ec FP BE Pri
!#3 N6208 P3914 MEMBAR
!#3 N6209 P3915 LD 13 -1 Int LE Pri
!#3 N6210 P3915 CAS 13 -1 N6209 0x1800171 Int LE Pri
!#3 N6211 P3916 SWAP 0 0xffffffff 0x1800172 Int BE Pri
!#3 N6212 P3917 MEMBAR
!#3 N6213 P3918 BLD 0 -1 FP BE Pri
!#3 N6214 P3918 BLD 1 -1 FP BE Pri
!#A N6213 N6214
!#3 N6215 P3918 BLD 2 -1 FP BE Pri
!#3 N6216 P3919 MEMBAR
!#3 N6217 P3920 LDD 5 -1 Int BE Pri
!#3 N6218 P3921 SWAP 20 0xffffffff 0x1800173 Int BE Pri
!#3 N6219 P3922 MEMBAR
!#3 N6220 P3923 BSTC 9 0x410000ed FP BE Pri
!#3 N6221 P3923 BSTC 10 0x410000ee FP BE Pri
!#A N6220 N6221
!#3 N6222 P3923 BSTC 11 0x410000ef FP BE Pri
!#3 N6223 P3924 MEMBAR
!#3 N6224 P3925 BSTC 21 0x410000f0 FP BE Pri
!#3 N6225 P3925 BSTC 22 0x410000f1 FP BE Pri
!#A N6224 N6225
!#3 N6226 P3925 BSTC 23 0x410000f2 FP BE Pri
!#3 N6227 P3926 MEMBAR
!#3 N6228 P3927 BLD 6 -1 FP BE Pri
!#3 N6229 P3927 BLD 7 -1 FP BE Pri
!#A N6228 N6229
!#3 N6230 P3927 BLD 8 -1 FP BE Pri
!#3 N6231 P3928 MEMBAR
!#3 N6232 P3929 REPLACEMENT 4 Int BE Pri
!#3 N6233 P3930 DWST_BINIT 3 0x1800174 Int BE Pri
!#3 N6234 P3930 DWST_BINIT 4 0x1800175 Int BE Pri
!#A N6233 N6234
!#3 N6235 P3931 MEMBAR
!#3 N6236 P3932 PREFETCH 23 Int BE Pri
!#3 N6237 P3933 DWLD 6 -1 Int BE Pri
!#3 N6238 P3933 DWLD 7 -1 Int BE Pri
!#A N6237 N6238
!#3 N6239 P3934 LD 3 -1 Int BE Pri
!#3 N6240 P3934 CAS 3 -1 N6239 0x1800176 Int BE Pri
!#3 N6241 P3935 LD 11 -1 Int BE Pri
!#3 N6242 P3936 LD 0 -1 Int LE Pri
!#3 N6243 P3937 ST 1 0x1800177 Int BE Pri
!#3 N6244 P3938 LD 17 -1 Int BE Pri
!#3 N6245 P3939 LD 5 -1 Int BE Pri
!#3 N6246 P3940 MEMBAR
!#3 N6247 P3941 BLD 6 -1 FP BE Pri
!#3 N6248 P3941 BLD 7 -1 FP BE Pri
!#A N6247 N6248
!#3 N6249 P3941 BLD 8 -1 FP BE Pri
!#3 N6250 P3942 MEMBAR
!#3 N6251 P3943 SWAP 0 0xffffffff 0x1800178 Int BE Pri
!#3 N6252 P3944 MEMBAR
!#3 N6253 P3945 BLD 21 -1 FP BE Pri
!#3 N6254 P3945 BLD 22 -1 FP BE Pri
!#A N6253 N6254
!#3 N6255 P3945 BLD 23 -1 FP BE Pri
!#3 N6256 P3946 MEMBAR
!#3 N6257 P3947 ST_BINIT 11 0x1800179 Int BE Pri
!#3 N6258 P3948 MEMBAR
!#3 N6259 P3949 DWST 12 0x180017a Int BE Pri
!#3 N6260 P3949 DWST 13 0x180017b Int BE Pri
!#A N6259 N6260
!#3 N6261 P3950 LD 17 -1 Int BE Pri
!#3 N6262 P3951 ST 12 0x180017c Int BE Pri
!#3 N6263 P3952 MEMBAR
!#3 N6264 P3953 BSTC 15 0x410000f3 FP BE Pri
!#3 N6265 P3953 BSTC 16 0x410000f4 FP BE Pri
!#A N6264 N6265
!#3 N6266 P3953 BSTC 17 0x410000f5 FP BE Pri
!#3 N6267 P3954 MEMBAR
!#3 N6268 P3955 LDD 18 -1 Int BE Pri
!#3 N6269 P3955 LDD 19 -1 Int BE Pri
!#A N6268 N6269
!#3 N6270 P3956 ST 18 0x180017d Int BE Pri
!#3 N6271 P3957 DWLD 18 -1 Int BE Pri
!#3 N6272 P3957 DWLD 19 -1 Int BE Pri
!#A N6271 N6272
!#3 N6273 P3958 MEMBAR
!#3 N6274 P3959 BLD 0 -1 FP BE Pri
!#3 N6275 P3959 BLD 1 -1 FP BE Pri
!#A N6274 N6275
!#3 N6276 P3959 BLD 2 -1 FP BE Pri
!#3 N6277 P3960 MEMBAR
!#3 N6278 P3961 ST_BINIT 20 0x180017e Int BE Pri
!#3 N6279 P3962 MEMBAR
!#3 N6280 P3963 LDD 23 -1 Int BE Pri
!#3 N6281 P3964 LDD 17 -1 Int BE Pri
!#3 N6282 P3965 SWAP 16 0xffffffff 0x180017f Int BE Pri
!#3 N6283 P3966 MEMBAR
!#3 N6284 P3967 BST 9 0x410000f6 FP BE Pri
!#3 N6285 P3967 BST 10 0x410000f7 FP BE Pri
!#A N6284 N6285
!#3 N6286 P3967 BST 11 0x410000f8 FP BE Pri
!#3 N6287 P3968 MEMBAR
!#3 N6288 P3969 LD 20 -1 Int BE Pri
!#3 N6289 P3969 CAS 20 -1 N6288 0x1800180 Int BE Pri
!#3 N6290 P3970 DWLD 2 -1 Int BE Pri
!#3 N6291 P3971 MEMBAR
!#3 N6292 P3972 BLD 3 -1 FP BE Pri
!#3 N6293 P3972 BLD 4 -1 FP BE Pri
!#A N6292 N6293
!#3 N6294 P3972 BLD 5 -1 FP BE Pri
!#3 N6295 P3973 MEMBAR
!#3 N6296 P3974 DWLD 0 -1 Int BE Pri
!#3 N6297 P3974 DWLD 1 -1 Int BE Pri
!#A N6296 N6297
!#3 N6298 P3975 SWAP 16 0xffffffff 0x1800181 Int BE Pri
!#3 N6299 P3976 LDD 8 -1 Int BE Pri
!#3 N6300 P3977 SWAP 19 0xffffffff 0x1800182 Int BE Pri
!#3 N6301 P3978 LD 1 -1 Int BE Pri
!#3 N6302 P3978 CAS 1 -1 N6301 0x1800183 Int BE Pri
!#3 N6303 P3979 ST_BINIT 6 0x1800184 Int BE Pri
!#3 N6304 P3980 MEMBAR
!#3 N6305 P3981 LDD 21 -1 Int BE Pri
!#3 N6306 P3981 LDD 22 -1 Int BE Pri
!#A N6305 N6306
!#3 N6307 P3982 MEMBAR
!#3 N6308 P3983 BST 0 0x410000f9 FP BE Pri
!#3 N6309 P3983 BST 1 0x410000fa FP BE Pri
!#A N6308 N6309
!#3 N6310 P3983 BST 2 0x410000fb FP BE Pri
!#3 N6311 P3984 MEMBAR
!#3 N6312 P3985 DWST_BINIT 11 0x1800185 Int BE Pri
!#3 N6313 P3986 MEMBAR
!#3 N6314 P3987 LDD 2 -1 Int BE Pri
!#3 N6315 P3988 LDD 9 -1 Int LE Pri
!#3 N6316 P3988 LDD 10 -1 Int LE Pri
!#A N6315 N6316
!#3 N6317 P3989 ST 23 0x1800186 Int BE Pri
!#3 N6318 P3990 DWST_BINIT 15 0x1800187 Int BE Pri
!#3 N6319 P3990 DWST_BINIT 16 0x1800188 Int BE Pri
!#A N6318 N6319
!#3 N6320 P3991 MEMBAR
!#3 N6321 P3992 BSTC 21 0x410000fc FP BE Pri
!#3 N6322 P3992 BSTC 22 0x410000fd FP BE Pri
!#A N6321 N6322
!#3 N6323 P3992 BSTC 23 0x410000fe FP BE Pri
!#3 N6324 P3993 MEMBAR
!#3 N6325 P3994 LDD 12 -1 Int BE Pri
!#3 N6326 P3994 LDD 13 -1 Int BE Pri
!#A N6325 N6326
!#3 N6327 P3995 LD 23 -1 Int BE Pri
!#3 N6328 P3996 MEMBAR
!#3 N6329 P3997 BSTC 21 0x410000ff FP BE Pri
!#3 N6330 P3997 BSTC 22 0x41000100 FP BE Pri
!#A N6329 N6330
!#3 N6331 P3997 BSTC 23 0x41000101 FP BE Pri
!#3 N6332 P3998 MEMBAR
!#3 N6333 P3999 ST_BINIT 1 0x1800189 Int BE Pri
!#3 N6334 P4000 MEMBAR
!#3 N6335 P4001 BSTC 15 0x41000102 FP BE Pri
!#3 N6336 P4001 BSTC 16 0x41000103 FP BE Pri
!#A N6335 N6336
!#3 N6337 P4001 BSTC 17 0x41000104 FP BE Pri
!#3 N6338 P4002 MEMBAR
!#3 N6339 P4003 DWST 9 0x180018a Int BE Pri
!#3 N6340 P4003 DWST 10 0x180018b Int BE Pri
!#A N6339 N6340
!#3 N6341 P4004 REPLACEMENT 12 Int BE Pri
!#3 N6342 P4005 MEMBAR
!#3 N6343 P4006 BLD 9 -1 FP BE Pri
!#3 N6344 P4006 BLD 10 -1 FP BE Pri
!#A N6343 N6344
!#3 N6345 P4006 BLD 11 -1 FP BE Pri
!#3 N6346 P4007 MEMBAR
!#3 N6347 P4008 LD 3 -1 Int BE Pri Loop_exit
!#3 N6348 P4009 MEMBAR
!#4 N6349 P4010 PREFETCH 22 Int LE Pri Loop_entry
!#4 N6350 P4011 MEMBAR
!#4 N6351 P4012 BLD 15 -1 FP BE Pri
!#4 N6352 P4012 BLD 16 -1 FP BE Pri
!#A N6351 N6352
!#4 N6353 P4012 BLD 17 -1 FP BE Pri
!#4 N6354 P4013 MEMBAR
!#4 N6355 P4014 SWAP 12 0xffffffff 0x2000001 Int BE Pri
!#4 N6356 P4015 DWLD 9 -1 Int LE Pri
!#4 N6357 P4015 DWLD 10 -1 Int LE Pri
!#A N6356 N6357
!#4 N6358 P4016 REPLACEMENT 3 Int BE Pri
!#4 N6359 P4017 ST 13 0x2000002 Int BE Pri
!#4 N6360 P4018 PREFETCH 2 Int BE Pri
!#4 N6361 P4019 MEMBAR
!#4 N6362 P4020 BSTC 3 0x41800001 FP BE Pri
!#4 N6363 P4020 BSTC 4 0x41800002 FP BE Pri
!#A N6362 N6363
!#4 N6364 P4020 BSTC 5 0x41800003 FP BE Pri
!#4 N6365 P4021 MEMBAR
!#4 N6366 P4022 SWAP 23 0xffffffff 0x2000003 Int BE Pri
!#4 N6367 P4023 MEMBAR
!#4 N6368 P4024 BLD 6 -1 FP BE Pri
!#4 N6369 P4024 BLD 7 -1 FP BE Pri
!#A N6368 N6369
!#4 N6370 P4024 BLD 8 -1 FP BE Pri
!#4 N6371 P4025 MEMBAR
!#4 N6372 P4026 BSTC 6 0x41800004 FP BE Pri
!#4 N6373 P4026 BSTC 7 0x41800005 FP BE Pri
!#A N6372 N6373
!#4 N6374 P4026 BSTC 8 0x41800006 FP BE Pri
!#4 N6375 P4027 MEMBAR
!#4 N6376 P4028 DWST 12 0x2000004 Int BE Pri
!#4 N6377 P4028 DWST 13 0x2000005 Int BE Pri
!#A N6376 N6377
!#4 N6378 P4029 DWST 17 0x2000006 Int BE Pri
!#4 N6379 P4030 DWLD 3 -1 Int BE Pri
!#4 N6380 P4030 DWLD 4 -1 Int BE Pri
!#A N6379 N6380
!#4 N6381 P4030 CASX 3 -1 N6379 0x2000007 Int BE Pri
!#4 N6382 P4030 CASX 4 -1 N6380 0x2000008 Int BE Pri
!#A N6381 N6382
!#4 N6383 P4031 ST_BINIT 16 0x2000009 Int BE Pri
!#4 N6384 P4032 MEMBAR
!#4 N6385 P4033 LDD 2 -1 Int BE Pri
!#4 N6386 P4034 DWLD 21 -1 Int BE Pri
!#4 N6387 P4034 DWLD 22 -1 Int BE Pri
!#A N6386 N6387
!#4 N6388 P4034 CASX 21 -1 N6386 0x200000a Int BE Pri
!#4 N6389 P4034 CASX 22 -1 N6387 0x200000b Int BE Pri
!#A N6388 N6389
!#4 N6390 P4035 ST 0 0x41800007 FP BE Pri
!#4 N6391 P4036 ST_BINIT 9 0x200000c Int LE Pri
!#4 N6392 P4037 MEMBAR
!#4 N6393 P4038 BLD 0 -1 FP BE Pri
!#4 N6394 P4038 BLD 1 -1 FP BE Pri
!#A N6393 N6394
!#4 N6395 P4038 BLD 2 -1 FP BE Pri
!#4 N6396 P4039 MEMBAR
!#4 N6397 P4040 ST 3 0x200000d Int BE Pri
!#4 N6398 P4041 MEMBAR
!#4 N6399 P4042 BLD 9 -1 FP BE Pri
!#4 N6400 P4042 BLD 10 -1 FP BE Pri
!#A N6399 N6400
!#4 N6401 P4042 BLD 11 -1 FP BE Pri
!#4 N6402 P4043 MEMBAR
!#4 N6403 P4044 PREFETCH 16 Int BE Pri
!#4 N6404 P4045 LD 15 -1 Int LE Pri
!#4 N6405 P4046 LD 9 -1 Int BE Pri
!#4 N6406 P4046 CAS 9 -1 N6405 0x200000e Int BE Pri
!#4 N6407 P4047 MEMBAR
!#4 N6408 P4048 BST 9 0x41800008 FP BE Pri
!#4 N6409 P4048 BST 10 0x41800009 FP BE Pri
!#A N6408 N6409
!#4 N6410 P4048 BST 11 0x4180000a FP BE Pri
!#4 N6411 P4049 MEMBAR
!#4 N6412 P4050 DWST 20 0x200000f Int LE Pri
!#4 N6413 P4051 ST_BINIT 16 0x2000010 Int BE Pri
!#4 N6414 P4052 MEMBAR
!#4 N6415 P4053 DWST 11 0x2000011 Int BE Pri
!#4 N6416 P4054 ST_BINIT 17 0x2000012 Int BE Pri
!#4 N6417 P4055 MEMBAR
!#4 N6418 P4056 LDD 14 -1 Int BE Pri
!#4 N6419 P4057 ST 6 0x2000013 Int LE Pri
!#4 N6420 P4058 DWST 20 0x2000014 Int BE Pri
!#4 N6421 P4059 MEMBAR
!#4 N6422 P4060 BSTC 18 0x4180000b FP BE Pri
!#4 N6423 P4060 BSTC 19 0x4180000c FP BE Pri
!#A N6422 N6423
!#4 N6424 P4060 BSTC 20 0x4180000d FP BE Pri
!#4 N6425 P4061 MEMBAR
!#4 N6426 P4062 ST_BINIT 5 0x2000015 Int BE Pri
!#4 N6427 P4063 MEMBAR
!#4 N6428 P4064 DWLD 0 -1 Int BE Pri
!#4 N6429 P4064 DWLD 1 -1 Int BE Pri
!#A N6428 N6429
!#4 N6430 P4064 CASX 0 -1 N6428 0x2000016 Int BE Pri
!#4 N6431 P4064 CASX 1 -1 N6429 0x2000017 Int BE Pri
!#A N6430 N6431
!#4 N6432 P4065 ST 11 0x2000018 Int BE Pri
!#4 N6433 P4066 LD 5 -1 Int LE Pri
!#4 N6434 P4067 LD 23 -1 Int LE Pri
!#4 N6435 P4068 LD 23 -1 Int BE Pri
!#4 N6436 P4069 MEMBAR
!#4 N6437 P4070 BST 6 0x4180000e FP BE Pri
!#4 N6438 P4070 BST 7 0x4180000f FP BE Pri
!#A N6437 N6438
!#4 N6439 P4070 BST 8 0x41800010 FP BE Pri
!#4 N6440 P4071 MEMBAR
!#4 N6441 P4072 DWLD 18 -1 Int BE Pri
!#4 N6442 P4072 DWLD 19 -1 Int BE Pri
!#A N6441 N6442
!#4 N6443 P4073 MEMBAR
!#4 N6444 P4074 BLD 6 -1 FP BE Pri
!#4 N6445 P4074 BLD 7 -1 FP BE Pri
!#A N6444 N6445
!#4 N6446 P4074 BLD 8 -1 FP BE Pri
!#4 N6447 P4075 MEMBAR
!#4 N6448 P4076 ST 16 0x2000019 Int BE Pri
!#4 N6449 P4077 PREFETCH 21 Int BE Pri
!#4 N6450 P4078 DWST 8 0x200001a Int BE Pri
!#4 N6451 P4079 MEMBAR
!#4 N6452 P4080 BLD 12 -1 FP BE Pri
!#4 N6453 P4080 BLD 13 -1 FP BE Pri
!#A N6452 N6453
!#4 N6454 P4080 BLD 14 -1 FP BE Pri
!#4 N6455 P4081 MEMBAR
!#4 N6456 P4082 DWST 6 0x200001b Int BE Pri
!#4 N6457 P4082 DWST 7 0x200001c Int BE Pri
!#A N6456 N6457
!#4 N6458 P4083 MEMBAR
!#4 N6459 P4084 BLD 3 -1 FP BE Pri
!#4 N6460 P4084 BLD 4 -1 FP BE Pri
!#A N6459 N6460
!#4 N6461 P4084 BLD 5 -1 FP BE Pri
!#4 N6462 P4085 MEMBAR
!#4 N6463 P4086 DWLD 9 -1 Int BE Pri
!#4 N6464 P4086 DWLD 10 -1 Int BE Pri
!#A N6463 N6464
!#4 N6465 P4086 CASX 9 -1 N6463 0x200001d Int BE Pri
!#4 N6466 P4086 CASX 10 -1 N6464 0x200001e Int BE Pri
!#A N6465 N6466
!#4 N6467 P4087 LD 18 -1 Int BE Pri
!#4 N6468 P4087 CAS 18 -1 N6467 0x200001f Int BE Pri
!#4 N6469 P4088 ST_BINIT 3 0x2000020 Int BE Pri
!#4 N6470 P4089 MEMBAR
!#4 N6471 P4090 BSTC 6 0x41800011 FP BE Pri
!#4 N6472 P4090 BSTC 7 0x41800012 FP BE Pri
!#A N6471 N6472
!#4 N6473 P4090 BSTC 8 0x41800013 FP BE Pri
!#4 N6474 P4091 MEMBAR
!#4 N6475 P4092 SWAP 6 0xffffffff 0x2000021 Int BE Pri
!#4 N6476 P4093 ST_BINIT 5 0x2000022 Int BE Pri
!#4 N6477 P4094 MEMBAR
!#4 N6478 P4095 REPLACEMENT 4 Int BE Pri
!#4 N6479 P4096 LDD 18 -1 Int BE Pri
!#4 N6480 P4096 LDD 19 -1 Int BE Pri
!#A N6479 N6480
!#4 N6481 P4097 LD 20 -1 Int BE Pri
!#4 N6482 P4097 CAS 20 -1 N6481 0x2000023 Int BE Pri
!#4 N6483 P4098 DWLD 8 -1,0x0 Int BE Pri
!#4 N6484 P4098 CASX 8 -1,0x0 N6483 0x2000024 Int BE Pri
!#4 N6485 P4099 LDD 18 -1 Int BE Pri
!#4 N6486 P4099 LDD 19 -1 Int BE Pri
!#A N6485 N6486
!#4 N6487 P4100 MEMBAR
!#4 N6488 P4101 BSTC 12 0x41800014 FP BE Pri
!#4 N6489 P4101 BSTC 13 0x41800015 FP BE Pri
!#A N6488 N6489
!#4 N6490 P4101 BSTC 14 0x41800016 FP BE Pri
!#4 N6491 P4102 MEMBAR
!#4 N6492 P4103 LDD 2 -1 Int BE Pri
!#4 N6493 P4104 LD 21 -1 Int BE Pri
!#4 N6494 P4104 CAS 21 -1 N6493 0x2000025 Int BE Pri
!#4 N6495 P4105 MEMBAR
!#4 N6496 P4106 BST 21 0x41800017 FP BE Pri
!#4 N6497 P4106 BST 22 0x41800018 FP BE Pri
!#A N6496 N6497
!#4 N6498 P4106 BST 23 0x41800019 FP BE Pri
!#4 N6499 P4107 MEMBAR
!#4 N6500 P4108 LD 10 -1 Int BE Pri
!#4 N6501 P4109 ST_BINIT 5 0x2000026 Int LE Pri
!#4 N6502 P4110 MEMBAR
!#4 N6503 P4111 BST 0 0x4180001a FP BE Pri
!#4 N6504 P4111 BST 1 0x4180001b FP BE Pri
!#A N6503 N6504
!#4 N6505 P4111 BST 2 0x4180001c FP BE Pri
!#4 N6506 P4112 MEMBAR
!#4 N6507 P4113 LD 4 -1 FP BE Pri
!#4 N6508 P4114 ST_BINIT 11 0x2000027 Int LE Pri
!#4 N6509 P4115 MEMBAR
!#4 N6510 P4116 ST 16 0x2000028 Int BE Pri
!#4 N6511 P4117 MEMBAR
!#4 N6512 P4118 BST 0 0x4180001d FP BE Pri
!#4 N6513 P4118 BST 1 0x4180001e FP BE Pri
!#A N6512 N6513
!#4 N6514 P4118 BST 2 0x4180001f FP BE Pri
!#4 N6515 P4119 MEMBAR
!#4 N6516 P4120 DWLD 23 -1 FP BE Pri
!#4 N6517 P4121 LD 7 -1 Int BE Pri
!#4 N6518 P4122 ST 18 0x2000029 Int BE Pri
!#4 N6519 P4123 LD 17 -1 FP BE Pri
!#4 N6520 P4124 LDD 2 -1 Int BE Pri
!#4 N6521 P4125 DWLD 3 -1 Int BE Pri
!#4 N6522 P4125 DWLD 4 -1 Int BE Pri
!#A N6521 N6522
!#4 N6523 P4125 CASX 3 -1 N6521 0x200002a Int BE Pri
!#4 N6524 P4125 CASX 4 -1 N6522 0x200002b Int BE Pri
!#A N6523 N6524
!#4 N6525 P4126 SWAP 4 0xffffffff 0x200002c Int BE Pri
!#4 N6526 P4127 MEMBAR
!#4 N6527 P4128 BSTC 3 0x41800020 FP BE Pri
!#4 N6528 P4128 BSTC 4 0x41800021 FP BE Pri
!#A N6527 N6528
!#4 N6529 P4128 BSTC 5 0x41800022 FP BE Pri
!#4 N6530 P4129 MEMBAR
!#4 N6531 P4130 ST 0 0x200002d Int BE Pri
!#4 N6532 P4131 LDD 18 -1 Int LE Pri
!#4 N6533 P4131 LDD 19 -1 Int LE Pri
!#A N6532 N6533
!#4 N6534 P4132 LDD 9 -1 Int BE Pri
!#4 N6535 P4132 LDD 10 -1 Int BE Pri
!#A N6534 N6535
!#4 N6536 P4133 PREFETCH 13 Int BE Pri
!#4 N6537 P4134 ST 19 0x200002e Int BE Pri
!#4 N6538 P4135 DWST 0 0x200002f Int BE Pri
!#4 N6539 P4135 DWST 1 0x2000030 Int BE Pri
!#A N6538 N6539
!#4 N6540 P4136 DWST 2 0x2000031 Int BE Pri
!#4 N6541 P4137 LD 21 -1 Int BE Pri
!#4 N6542 P4137 CAS 21 -1 N6541 0x2000032 Int BE Pri
!#4 N6543 P4138 DWLD 9 -1 Int BE Pri
!#4 N6544 P4138 DWLD 10 -1 Int BE Pri
!#A N6543 N6544
!#4 N6545 P4139 LD 15 -1 Int BE Pri
!#4 N6546 P4140 ST_BINIT 20 0x2000033 Int BE Pri
!#4 N6547 P4141 MEMBAR
!#4 N6548 P4142 PREFETCH 2 Int BE Pri
!#4 N6549 P4143 LDD 12 -1 Int BE Pri
!#4 N6550 P4143 LDD 13 -1 Int BE Pri
!#A N6549 N6550
!#4 N6551 P4144 DWLD 9 -1 FP BE Pri
!#4 N6552 P4144 DWLD 10 -1 FP BE Pri
!#A N6551 N6552
!#4 N6553 P4145 LD 18 -1 Int BE Pri
!#4 N6554 P4145 CAS 18 -1 N6553 0x2000034 Int BE Pri
!#4 N6555 P4146 LDD 12 -1 Int BE Pri
!#4 N6556 P4146 LDD 13 -1 Int BE Pri
!#A N6555 N6556
!#4 N6557 P4147 LDD 18 -1 Int BE Pri
!#4 N6558 P4147 LDD 19 -1 Int BE Pri
!#A N6557 N6558
!#4 N6559 P4148 DWST_BINIT 6 0x2000035 Int BE Pri
!#4 N6560 P4148 DWST_BINIT 7 0x2000036 Int BE Pri
!#A N6559 N6560
!#4 N6561 P4149 MEMBAR
!#4 N6562 P4150 BST 9 0x41800023 FP BE Pri
!#4 N6563 P4150 BST 10 0x41800024 FP BE Pri
!#A N6562 N6563
!#4 N6564 P4150 BST 11 0x41800025 FP BE Pri
!#4 N6565 P4151 MEMBAR
!#4 N6566 P4152 LD 20 -1 Int BE Pri
!#4 N6567 P4153 DWST_BINIT 21 0x2000037 Int BE Pri
!#4 N6568 P4153 DWST_BINIT 22 0x2000038 Int BE Pri
!#A N6567 N6568
!#4 N6569 P4154 MEMBAR
!#4 N6570 P4155 DWLD 3 -1 Int BE Pri
!#4 N6571 P4155 DWLD 4 -1 Int BE Pri
!#A N6570 N6571
!#4 N6572 P4155 CASX 3 -1 N6570 0x2000039 Int BE Pri
!#4 N6573 P4155 CASX 4 -1 N6571 0x200003a Int BE Pri
!#A N6572 N6573
!#4 N6574 P4156 DWST_BINIT 15 0x200003b Int BE Pri
!#4 N6575 P4156 DWST_BINIT 16 0x200003c Int BE Pri
!#A N6574 N6575
!#4 N6576 P4157 MEMBAR
!#4 N6577 P4158 PREFETCH 16 Int BE Pri
!#4 N6578 P4159 PREFETCH 4 Int BE Pri
!#4 N6579 P4160 LDD 12 -1 Int BE Pri
!#4 N6580 P4160 LDD 13 -1 Int BE Pri
!#A N6579 N6580
!#4 N6581 P4161 DWST_BINIT 21 0x200003d Int BE Pri
!#4 N6582 P4161 DWST_BINIT 22 0x200003e Int BE Pri
!#A N6581 N6582
!#4 N6583 P4162 MEMBAR
!#4 N6584 P4163 PREFETCH 18 Int BE Pri
!#4 N6585 P4164 ST 19 0x200003f Int BE Pri
!#4 N6586 P4165 DWST 15 0x2000040 Int BE Pri
!#4 N6587 P4165 DWST 16 0x2000041 Int BE Pri
!#A N6586 N6587
!#4 N6588 P4166 SWAP 23 0xffffffff 0x2000042 Int BE Pri
!#4 N6589 P4167 DWST_BINIT 11 0x2000043 Int BE Pri
!#4 N6590 P4168 MEMBAR
!#4 N6591 P4169 PREFETCH 7 Int BE Pri
!#4 N6592 P4170 LD 21 -1 Int BE Pri
!#4 N6593 P4171 MEMBAR
!#4 N6594 P4172 BST 18 0x41800026 FP BE Pri
!#4 N6595 P4172 BST 19 0x41800027 FP BE Pri
!#A N6594 N6595
!#4 N6596 P4172 BST 20 0x41800028 FP BE Pri
!#4 N6597 P4173 MEMBAR
!#4 N6598 P4174 LD 13 -1 FP BE Pri
!#4 N6599 P4175 DWLD 2 -1 Int BE Pri
!#4 N6600 P4176 DWST 12 0x2000044 Int BE Pri
!#4 N6601 P4176 DWST 13 0x2000045 Int BE Pri
!#A N6600 N6601
!#4 N6602 P4177 DWST 14 0x41800029 FP BE Pri
!#4 N6603 P4178 PREFETCH 22 Int BE Pri
!#4 N6604 P4179 LD 1 -1 Int LE Pri
!#4 N6605 P4180 LD 19 -1 Int BE Pri
!#4 N6606 P4181 REPLACEMENT 6 Int BE Pri
!#4 N6607 P4182 DWST_BINIT 12 0x2000046 Int BE Pri
!#4 N6608 P4182 DWST_BINIT 13 0x2000047 Int BE Pri
!#A N6607 N6608
!#4 N6609 P4183 MEMBAR
!#4 N6610 P4184 LD 22 -1 Int BE Pri
!#4 N6611 P4184 CAS 22 -1 N6610 0x2000048 Int BE Pri
!#4 N6612 P4185 SWAP 7 0xffffffff 0x2000049 Int BE Pri
!#4 N6613 P4186 PREFETCH 13 Int BE Pri
!#4 N6614 P4187 ST 23 0x200004a Int BE Pri
!#4 N6615 P4188 LD 15 -1 Int BE Pri
!#4 N6616 P4188 CAS 15 -1 N6615 0x200004b Int BE Pri
!#4 N6617 P4189 PREFETCH 15 Int BE Pri
!#4 N6618 P4190 DWLD 3 -1 Int BE Pri
!#4 N6619 P4190 DWLD 4 -1 Int BE Pri
!#A N6618 N6619
!#4 N6620 P4190 CASX 3 -1 N6618 0x200004c Int BE Pri
!#4 N6621 P4190 CASX 4 -1 N6619 0x200004d Int BE Pri
!#A N6620 N6621
!#4 N6622 P4191 DWLD 17 -1,0x0 Int BE Pri
!#4 N6623 P4191 CASX 17 -1,0x0 N6622 0x200004e Int BE Pri
!#4 N6624 P4192 MEMBAR
!#4 N6625 P4193 BLD 6 -1 FP BE Pri
!#4 N6626 P4193 BLD 7 -1 FP BE Pri
!#A N6625 N6626
!#4 N6627 P4193 BLD 8 -1 FP BE Pri
!#4 N6628 P4194 MEMBAR
!#4 N6629 P4195 DWLD 6 -1 Int BE Pri
!#4 N6630 P4195 DWLD 7 -1 Int BE Pri
!#A N6629 N6630
!#4 N6631 P4195 CASX 6 -1 N6629 0x200004f Int BE Pri
!#4 N6632 P4195 CASX 7 -1 N6630 0x2000050 Int BE Pri
!#A N6631 N6632
!#4 N6633 P4196 MEMBAR
!#4 N6634 P4197 BST 15 0x4180002a FP BE Pri
!#4 N6635 P4197 BST 16 0x4180002b FP BE Pri
!#A N6634 N6635
!#4 N6636 P4197 BST 17 0x4180002c FP BE Pri
!#4 N6637 P4198 MEMBAR
!#4 N6638 P4199 DWLD 17 -1,0x0 Int LE Pri
!#4 N6639 P4199 CASX 17 -1,0x0 N6638 0x2000051 Int LE Pri
!#4 N6640 P4200 DWST 15 0x2000052 Int BE Pri
!#4 N6641 P4200 DWST 16 0x2000053 Int BE Pri
!#A N6640 N6641
!#4 N6642 P4201 ST_BINIT 2 0x2000054 Int BE Pri
!#4 N6643 P4202 MEMBAR
!#4 N6644 P4203 LD 10 -1 Int BE Pri
!#4 N6645 P4203 CAS 10 -1 N6644 0x2000055 Int BE Pri
!#4 N6646 P4204 LD 22 -1 Int LE Pri
!#4 N6647 P4204 CAS 22 -1 N6646 0x2000056 Int LE Pri
!#4 N6648 P4205 DWLD 23 -1 FP BE Pri
!#4 N6649 P4206 ST 14 0x2000057 Int BE Pri
!#4 N6650 P4207 PREFETCH 12 Int BE Pri
!#4 N6651 P4208 DWST_BINIT 15 0x2000058 Int BE Pri
!#4 N6652 P4208 DWST_BINIT 16 0x2000059 Int BE Pri
!#A N6651 N6652
!#4 N6653 P4209 MEMBAR
!#4 N6654 P4210 BST 6 0x4180002d FP BE Pri
!#4 N6655 P4210 BST 7 0x4180002e FP BE Pri
!#A N6654 N6655
!#4 N6656 P4210 BST 8 0x4180002f FP BE Pri
!#4 N6657 P4211 MEMBAR
!#4 N6658 P4212 BLD 0 -1 FP BE Pri
!#4 N6659 P4212 BLD 1 -1 FP BE Pri
!#A N6658 N6659
!#4 N6660 P4212 BLD 2 -1 FP BE Pri
!#4 N6661 P4213 MEMBAR
!#4 N6662 P4214 SWAP 5 0xffffffff 0x200005a Int BE Pri
!#4 N6663 P4215 REPLACEMENT 1 Int BE Pri
!#4 N6664 P4216 LDD 6 -1 Int BE Pri
!#4 N6665 P4216 LDD 7 -1 Int BE Pri
!#A N6664 N6665
!#4 N6666 P4217 DWLD 9 -1 Int BE Pri
!#4 N6667 P4217 DWLD 10 -1 Int BE Pri
!#A N6666 N6667
!#4 N6668 P4218 DWLD 14 -1,0x0 Int BE Pri
!#4 N6669 P4218 CASX 14 -1,0x0 N6668 0x200005b Int BE Pri
!#4 N6670 P4219 MEMBAR
!#4 N6671 P4220 BSTC 18 0x41800030 FP BE Pri
!#4 N6672 P4220 BSTC 19 0x41800031 FP BE Pri
!#A N6671 N6672
!#4 N6673 P4220 BSTC 20 0x41800032 FP BE Pri
!#4 N6674 P4221 MEMBAR
!#4 N6675 P4222 ST_BINIT 19 0x200005c Int BE Pri
!#4 N6676 P4223 MEMBAR
!#4 N6677 P4224 DWST 9 0x200005d Int BE Pri
!#4 N6678 P4224 DWST 10 0x200005e Int BE Pri
!#A N6677 N6678
!#4 N6679 P4225 SWAP 12 0xffffffff 0x200005f Int BE Pri
!#4 N6680 P4226 DWLD 6 -1 Int BE Pri
!#4 N6681 P4226 DWLD 7 -1 Int BE Pri
!#A N6680 N6681
!#4 N6682 P4226 CASX 6 -1 N6680 0x2000060 Int BE Pri
!#4 N6683 P4226 CASX 7 -1 N6681 0x2000061 Int BE Pri
!#A N6682 N6683
!#4 N6684 P4227 MEMBAR
!#4 N6685 P4228 BST 18 0x41800033 FP BE Pri
!#4 N6686 P4228 BST 19 0x41800034 FP BE Pri
!#A N6685 N6686
!#4 N6687 P4228 BST 20 0x41800035 FP BE Pri
!#4 N6688 P4229 MEMBAR
!#4 N6689 P4230 ST 14 0x2000062 Int BE Pri
!#4 N6690 P4231 LD 18 -1 Int BE Pri
!#4 N6691 P4232 DWLD 2 -1 Int BE Pri
!#4 N6692 P4233 MEMBAR
!#4 N6693 P4234 BLD 15 -1 FP BE Pri
!#4 N6694 P4234 BLD 16 -1 FP BE Pri
!#A N6693 N6694
!#4 N6695 P4234 BLD 17 -1 FP BE Pri
!#4 N6696 P4235 MEMBAR
!#4 N6697 P4236 SWAP 1 0xffffffff 0x2000063 Int BE Pri
!#4 N6698 P4237 PREFETCH 23 Int BE Pri
!#4 N6699 P4238 DWLD 0 -1 Int BE Pri
!#4 N6700 P4238 DWLD 1 -1 Int BE Pri
!#A N6699 N6700
!#4 N6701 P4238 CASX 0 -1 N6699 0x2000064 Int BE Pri
!#4 N6702 P4238 CASX 1 -1 N6700 0x2000065 Int BE Pri
!#A N6701 N6702
!#4 N6703 P4239 LDD 21 -1 Int BE Pri
!#4 N6704 P4239 LDD 22 -1 Int BE Pri
!#A N6703 N6704
!#4 N6705 P4240 LD 13 -1 Int BE Pri
!#4 N6706 P4241 SWAP 22 0xffffffff 0x2000066 Int LE Pri
!#4 N6707 P4242 DWST_BINIT 8 0x2000067 Int BE Pri
!#4 N6708 P4243 MEMBAR
!#4 N6709 P4244 BST 3 0x41800036 FP BE Pri
!#4 N6710 P4244 BST 4 0x41800037 FP BE Pri
!#A N6709 N6710
!#4 N6711 P4244 BST 5 0x41800038 FP BE Pri
!#4 N6712 P4245 MEMBAR
!#4 N6713 P4246 ST 8 0x2000068 Int BE Pri
!#4 N6714 P4247 MEMBAR
!#4 N6715 P4248 BST 3 0x41800039 FP BE Pri
!#4 N6716 P4248 BST 4 0x4180003a FP BE Pri
!#A N6715 N6716
!#4 N6717 P4248 BST 5 0x4180003b FP BE Pri
!#4 N6718 P4249 MEMBAR
!#4 N6719 P4250 DWST_BINIT 20 0x2000069 Int BE Pri
!#4 N6720 P4251 MEMBAR
!#4 N6721 P4252 DWST 9 0x200006a Int BE Pri
!#4 N6722 P4252 DWST 10 0x200006b Int BE Pri
!#A N6721 N6722
!#4 N6723 P4253 PREFETCH 2 Int BE Pri
!#4 N6724 P4254 SWAP 13 0xffffffff 0x200006c Int BE Pri
!#4 N6725 P4255 PREFETCH 5 Int BE Pri
!#4 N6726 P4256 SWAP 0 0xffffffff 0x200006d Int BE Pri
!#4 N6727 P4257 LDD 23 -1 Int BE Pri
!#4 N6728 P4258 LDD 3 -1 Int BE Pri
!#4 N6729 P4258 LDD 4 -1 Int BE Pri
!#A N6728 N6729
!#4 N6730 P4259 MEMBAR
!#4 N6731 P4260 BLD 0 -1 FP BE Pri
!#4 N6732 P4260 BLD 1 -1 FP BE Pri
!#A N6731 N6732
!#4 N6733 P4260 BLD 2 -1 FP BE Pri
!#4 N6734 P4261 MEMBAR
!#4 N6735 P4262 SWAP 1 0xffffffff 0x200006e Int BE Pri
!#4 N6736 P4263 LD 22 -1 Int BE Pri
!#4 N6737 P4263 CAS 22 -1 N6736 0x200006f Int BE Pri
!#4 N6738 P4264 MEMBAR
!#4 N6739 P4265 BLD 18 -1 FP BE Pri
!#4 N6740 P4265 BLD 19 -1 FP BE Pri
!#A N6739 N6740
!#4 N6741 P4265 BLD 20 -1 FP BE Pri
!#4 N6742 P4266 MEMBAR
!#4 N6743 P4267 LD 13 -1 Int BE Pri
!#4 N6744 P4267 CAS 13 -1 N6743 0x2000070 Int BE Pri
!#4 N6745 P4268 DWST 11 0x2000071 Int BE Pri
!#4 N6746 P4269 MEMBAR
!#4 N6747 P4270 BSTC 3 0x4180003c FP BE Pri
!#4 N6748 P4270 BSTC 4 0x4180003d FP BE Pri
!#A N6747 N6748
!#4 N6749 P4270 BSTC 5 0x4180003e FP BE Pri
!#4 N6750 P4271 MEMBAR
!#4 N6751 P4272 DWLD 5 -1 Int BE Pri
!#4 N6752 P4273 LD 19 -1 Int BE Pri
!#4 N6753 P4273 CAS 19 -1 N6752 0x2000072 Int BE Pri
!#4 N6754 P4274 LD 21 -1 Int BE Pri
!#4 N6755 P4274 CAS 21 -1 N6754 0x2000073 Int BE Pri
!#4 N6756 P4275 ST_BINIT 16 0x2000074 Int BE Pri
!#4 N6757 P4276 MEMBAR
!#4 N6758 P4277 DWST_BINIT 5 0x2000075 Int BE Pri
!#4 N6759 P4278 MEMBAR
!#4 N6760 P4279 DWST 3 0x4180003f FP BE Pri
!#4 N6761 P4279 DWST 4 0x41800040 FP BE Pri
!#A N6760 N6761
!#4 N6762 P4280 LDD 0 -1 Int BE Pri
!#4 N6763 P4280 LDD 1 -1 Int BE Pri
!#A N6762 N6763
!#4 N6764 P4281 REPLACEMENT 5 Int BE Pri
!#4 N6765 P4282 DWST 6 0x2000076 Int BE Pri
!#4 N6766 P4282 DWST 7 0x2000077 Int BE Pri
!#A N6765 N6766
!#4 N6767 P4283 ST 11 0x2000078 Int BE Pri
!#4 N6768 P4284 MEMBAR
!#4 N6769 P4285 BST 0 0x41800041 FP BE Pri
!#4 N6770 P4285 BST 1 0x41800042 FP BE Pri
!#A N6769 N6770
!#4 N6771 P4285 BST 2 0x41800043 FP BE Pri
!#4 N6772 P4286 MEMBAR
!#4 N6773 P4287 DWLD 9 -1 Int BE Pri
!#4 N6774 P4287 DWLD 10 -1 Int BE Pri
!#A N6773 N6774
!#4 N6775 P4288 LDD 18 -1 Int BE Pri
!#4 N6776 P4288 LDD 19 -1 Int BE Pri
!#A N6775 N6776
!#4 N6777 P4289 PREFETCH 21 Int BE Pri
!#4 N6778 P4290 MEMBAR
!#4 N6779 P4291 BST 12 0x41800044 FP BE Pri
!#4 N6780 P4291 BST 13 0x41800045 FP BE Pri
!#A N6779 N6780
!#4 N6781 P4291 BST 14 0x41800046 FP BE Pri
!#4 N6782 P4292 MEMBAR
!#4 N6783 P4293 DWST 14 0x2000079 Int BE Pri
!#4 N6784 P4294 MEMBAR
!#4 N6785 P4295 BSTC 18 0x41800047 FP BE Pri
!#4 N6786 P4295 BSTC 19 0x41800048 FP BE Pri
!#A N6785 N6786
!#4 N6787 P4295 BSTC 20 0x41800049 FP BE Pri
!#4 N6788 P4296 MEMBAR
!#4 N6789 P4297 DWST_BINIT 12 0x200007a Int BE Pri
!#4 N6790 P4297 DWST_BINIT 13 0x200007b Int BE Pri
!#A N6789 N6790
!#4 N6791 P4298 MEMBAR
!#4 N6792 P4299 DWST 3 0x4180004a FP BE Pri
!#4 N6793 P4299 DWST 4 0x4180004b FP BE Pri
!#A N6792 N6793
!#4 N6794 P4300 MEMBAR
!#4 N6795 P4301 BST 21 0x4180004c FP BE Pri
!#4 N6796 P4301 BST 22 0x4180004d FP BE Pri
!#A N6795 N6796
!#4 N6797 P4301 BST 23 0x4180004e FP BE Pri
!#4 N6798 P4302 MEMBAR
!#4 N6799 P4303 DWST_BINIT 0 0x200007c Int BE Pri
!#4 N6800 P4303 DWST_BINIT 1 0x200007d Int BE Pri
!#A N6799 N6800
!#4 N6801 P4304 MEMBAR
!#4 N6802 P4305 LD 10 -1 Int BE Pri
!#4 N6803 P4305 CAS 10 -1 N6802 0x200007e Int BE Pri
!#4 N6804 P4306 LDD 12 -1 Int BE Pri
!#4 N6805 P4306 LDD 13 -1 Int BE Pri
!#A N6804 N6805
!#4 N6806 P4307 LDD 8 -1 Int BE Pri
!#4 N6807 P4308 MEMBAR
!#4 N6808 P4309 BSTC 0 0x4180004f FP BE Pri
!#4 N6809 P4309 BSTC 1 0x41800050 FP BE Pri
!#A N6808 N6809
!#4 N6810 P4309 BSTC 2 0x41800051 FP BE Pri
!#4 N6811 P4310 MEMBAR
!#4 N6812 P4311 BLD 18 -1 FP BE Pri
!#4 N6813 P4311 BLD 19 -1 FP BE Pri
!#A N6812 N6813
!#4 N6814 P4311 BLD 20 -1 FP BE Pri
!#4 N6815 P4312 MEMBAR
!#4 N6816 P4313 DWST 23 0x41800052 FP BE Pri
!#4 N6817 P4314 DWLD 21 -1 Int BE Pri
!#4 N6818 P4314 DWLD 22 -1 Int BE Pri
!#A N6817 N6818
!#4 N6819 P4314 CASX 21 -1 N6817 0x200007f Int BE Pri
!#4 N6820 P4314 CASX 22 -1 N6818 0x2000080 Int BE Pri
!#A N6819 N6820
!#4 N6821 P4315 LD 6 -1 Int BE Pri
!#4 N6822 P4315 CAS 6 -1 N6821 0x2000081 Int BE Pri
!#4 N6823 P4316 DWST_BINIT 3 0x2000082 Int BE Pri
!#4 N6824 P4316 DWST_BINIT 4 0x2000083 Int BE Pri
!#A N6823 N6824
!#4 N6825 P4317 MEMBAR
!#4 N6826 P4318 ST 18 0x2000084 Int BE Pri
!#4 N6827 P4319 DWLD 3 -1 Int LE Pri
!#4 N6828 P4319 DWLD 4 -1 Int LE Pri
!#A N6827 N6828
!#4 N6829 P4319 CASX 3 -1 N6827 0x2000085 Int LE Pri
!#4 N6830 P4319 CASX 4 -1 N6828 0x2000086 Int LE Pri
!#A N6829 N6830
!#4 N6831 P4320 REPLACEMENT 15 Int BE Pri
!#4 N6832 P4321 PREFETCH 15 Int BE Pri
!#4 N6833 P4322 LD 4 -1 Int BE Pri
!#4 N6834 P4322 CAS 4 -1 N6833 0x2000087 Int BE Pri
!#4 N6835 P4323 SWAP 13 0xffffffff 0x2000088 Int BE Pri
!#4 N6836 P4324 ST_BINIT 21 0x2000089 Int BE Pri
!#4 N6837 P4325 MEMBAR
!#4 N6838 P4326 DWLD 6 -1 Int BE Pri
!#4 N6839 P4326 DWLD 7 -1 Int BE Pri
!#A N6838 N6839
!#4 N6840 P4326 CASX 6 -1 N6838 0x200008a Int BE Pri
!#4 N6841 P4326 CASX 7 -1 N6839 0x200008b Int BE Pri
!#A N6840 N6841
!#4 N6842 P4327 ST_BINIT 0 0x200008c Int BE Pri
!#4 N6843 P4328 MEMBAR
!#4 N6844 P4329 PREFETCH 11 Int BE Pri
!#4 N6845 P4330 LDD 14 -1 Int BE Pri
!#4 N6846 P4331 DWST_BINIT 14 0x200008d Int BE Pri
!#4 N6847 P4332 MEMBAR
!#4 N6848 P4333 LD 19 -1 Int BE Pri
!#4 N6849 P4333 CAS 19 -1 N6848 0x200008e Int BE Pri
!#4 N6850 P4334 MEMBAR
!#4 N6851 P4335 BSTC 21 0x41800053 FP BE Pri
!#4 N6852 P4335 BSTC 22 0x41800054 FP BE Pri
!#A N6851 N6852
!#4 N6853 P4335 BSTC 23 0x41800055 FP BE Pri
!#4 N6854 P4336 MEMBAR
!#4 N6855 P4337 ST 5 0x200008f Int BE Pri
!#4 N6856 P4338 ST 8 0x41800056 FP BE Pri
!#4 N6857 P4339 LD 13 -1 Int BE Pri
!#4 N6858 P4340 PREFETCH 1 Int BE Pri
!#4 N6859 P4341 SWAP 6 0xffffffff 0x2000090 Int BE Pri
!#4 N6860 P4342 ST_BINIT 15 0x2000091 Int BE Pri
!#4 N6861 P4343 MEMBAR
!#4 N6862 P4344 BST 12 0x41800057 FP BE Pri
!#4 N6863 P4344 BST 13 0x41800058 FP BE Pri
!#A N6862 N6863
!#4 N6864 P4344 BST 14 0x41800059 FP BE Pri
!#4 N6865 P4345 MEMBAR
!#4 N6866 P4346 LD 13 -1 Int BE Pri
!#4 N6867 P4347 PREFETCH 16 Int BE Pri
!#4 N6868 P4348 MEMBAR
!#4 N6869 P4349 BST 18 0x4180005a FP BE Pri
!#4 N6870 P4349 BST 19 0x4180005b FP BE Pri
!#A N6869 N6870
!#4 N6871 P4349 BST 20 0x4180005c FP BE Pri
!#4 N6872 P4350 MEMBAR
!#4 N6873 P4351 PREFETCH 3 Int BE Pri
!#4 N6874 P4352 DWST 3 0x2000092 Int BE Pri
!#4 N6875 P4352 DWST 4 0x2000093 Int BE Pri
!#A N6874 N6875
!#4 N6876 P4353 PREFETCH 12 Int BE Pri
!#4 N6877 P4354 MEMBAR
!#4 N6878 P4355 BSTC 18 0x4180005d FP BE Pri
!#4 N6879 P4355 BSTC 19 0x4180005e FP BE Pri
!#A N6878 N6879
!#4 N6880 P4355 BSTC 20 0x4180005f FP BE Pri
!#4 N6881 P4356 MEMBAR
!#4 N6882 P4357 BLD 0 -1 FP BE Pri
!#4 N6883 P4357 BLD 1 -1 FP BE Pri
!#A N6882 N6883
!#4 N6884 P4357 BLD 2 -1 FP BE Pri
!#4 N6885 P4358 MEMBAR
!#4 N6886 P4359 ST 0 0x2000094 Int BE Pri
!#4 N6887 P4360 DWST_BINIT 11 0x2000095 Int BE Pri
!#4 N6888 P4361 MEMBAR
!#4 N6889 P4362 DWST 12 0x2000096 Int BE Pri
!#4 N6890 P4362 DWST 13 0x2000097 Int BE Pri
!#A N6889 N6890
!#4 N6891 P4363 LD 0 -1 Int BE Pri
!#4 N6892 P4363 CAS 0 -1 N6891 0x2000098 Int BE Pri
!#4 N6893 P4364 PREFETCH 0 Int BE Pri
!#4 N6894 P4365 MEMBAR
!#4 N6895 P4366 BSTC 3 0x41800060 FP BE Pri
!#4 N6896 P4366 BSTC 4 0x41800061 FP BE Pri
!#A N6895 N6896
!#4 N6897 P4366 BSTC 5 0x41800062 FP BE Pri
!#4 N6898 P4367 MEMBAR
!#4 N6899 P4368 BLD 3 -1 FP BE Pri
!#4 N6900 P4368 BLD 4 -1 FP BE Pri
!#A N6899 N6900
!#4 N6901 P4368 BLD 5 -1 FP BE Pri
!#4 N6902 P4369 MEMBAR
!#4 N6903 P4370 PREFETCH 2 Int BE Pri
!#4 N6904 P4371 ST 14 0x2000099 Int BE Pri
!#4 N6905 P4372 LD 9 -1 Int BE Pri
!#4 N6906 P4372 CAS 9 -1 N6905 0x200009a Int BE Pri
!#4 N6907 P4373 LD 3 -1 Int BE Pri
!#4 N6908 P4374 SWAP 15 0xffffffff 0x200009b Int BE Pri
!#4 N6909 P4375 DWLD 14 -1,0x0 Int BE Pri
!#4 N6910 P4375 CASX 14 -1,0x0 N6909 0x200009c Int BE Pri
!#4 N6911 P4376 MEMBAR
!#4 N6912 P4377 BST 12 0x41800063 FP BE Pri
!#4 N6913 P4377 BST 13 0x41800064 FP BE Pri
!#A N6912 N6913
!#4 N6914 P4377 BST 14 0x41800065 FP BE Pri
!#4 N6915 P4378 MEMBAR
!#4 N6916 P4379 DWLD 6 -1 Int BE Pri
!#4 N6917 P4379 DWLD 7 -1 Int BE Pri
!#A N6916 N6917
!#4 N6918 P4379 CASX 6 -1 N6916 0x200009d Int BE Pri
!#4 N6919 P4379 CASX 7 -1 N6917 0x200009e Int BE Pri
!#A N6918 N6919
!#4 N6920 P4380 DWST 23 0x200009f Int BE Pri
!#4 N6921 P4381 DWST_BINIT 12 0x20000a0 Int BE Pri
!#4 N6922 P4381 DWST_BINIT 13 0x20000a1 Int BE Pri
!#A N6921 N6922
!#4 N6923 P4382 MEMBAR
!#4 N6924 P4383 ST 2 0x20000a2 Int BE Pri
!#4 N6925 P4384 SWAP 20 0xffffffff 0x20000a3 Int BE Pri
!#4 N6926 P4385 PREFETCH 13 Int BE Pri
!#4 N6927 P4386 LDD 8 -1 Int BE Pri
!#4 N6928 P4387 LD 15 -1 Int BE Pri
!#4 N6929 P4387 CAS 15 -1 N6928 0x20000a4 Int BE Pri
!#4 N6930 P4388 MEMBAR
!#4 N6931 P4389 BSTC 12 0x41800066 FP BE Pri
!#4 N6932 P4389 BSTC 13 0x41800067 FP BE Pri
!#A N6931 N6932
!#4 N6933 P4389 BSTC 14 0x41800068 FP BE Pri
!#4 N6934 P4390 MEMBAR
!#4 N6935 P4391 REPLACEMENT 7 Int BE Pri
!#4 N6936 P4392 DWLD 21 -1 Int BE Pri
!#4 N6937 P4392 DWLD 22 -1 Int BE Pri
!#A N6936 N6937
!#4 N6938 P4392 CASX 21 -1 N6936 0x20000a5 Int BE Pri
!#4 N6939 P4392 CASX 22 -1 N6937 0x20000a6 Int BE Pri
!#A N6938 N6939
!#4 N6940 P4393 MEMBAR
!#4 N6941 P4394 BST 6 0x41800069 FP BE Pri
!#4 N6942 P4394 BST 7 0x4180006a FP BE Pri
!#A N6941 N6942
!#4 N6943 P4394 BST 8 0x4180006b FP BE Pri
!#4 N6944 P4395 MEMBAR
!#4 N6945 P4396 LDD 8 -1 Int LE Pri
!#4 N6946 P4397 LD 22 -1 Int BE Pri
!#4 N6947 P4398 ST_BINIT 11 0x20000a7 Int BE Pri
!#4 N6948 P4399 MEMBAR
!#4 N6949 P4400 DWST_BINIT 9 0x20000a8 Int BE Pri
!#4 N6950 P4400 DWST_BINIT 10 0x20000a9 Int BE Pri
!#A N6949 N6950
!#4 N6951 P4401 MEMBAR
!#4 N6952 P4402 REPLACEMENT 5 Int BE Pri
!#4 N6953 P4403 ST 6 0x20000aa Int BE Pri
!#4 N6954 P4404 DWST_BINIT 0 0x20000ab Int BE Pri
!#4 N6955 P4404 DWST_BINIT 1 0x20000ac Int BE Pri
!#A N6954 N6955
!#4 N6956 P4405 MEMBAR
!#4 N6957 P4406 BSTC 18 0x4180006c FP BE Pri
!#4 N6958 P4406 BSTC 19 0x4180006d FP BE Pri
!#A N6957 N6958
!#4 N6959 P4406 BSTC 20 0x4180006e FP BE Pri
!#4 N6960 P4407 MEMBAR
!#4 N6961 P4408 BLD 6 -1 FP BE Pri
!#4 N6962 P4408 BLD 7 -1 FP BE Pri
!#A N6961 N6962
!#4 N6963 P4408 BLD 8 -1 FP BE Pri
!#4 N6964 P4409 MEMBAR
!#4 N6965 P4410 DWLD 21 -1 Int BE Pri
!#4 N6966 P4410 DWLD 22 -1 Int BE Pri
!#A N6965 N6966
!#4 N6967 P4410 CASX 21 -1 N6965 0x20000ad Int BE Pri
!#4 N6968 P4410 CASX 22 -1 N6966 0x20000ae Int BE Pri
!#A N6967 N6968
!#4 N6969 P4411 ST 0 0x20000af Int BE Pri
!#4 N6970 P4412 SWAP 7 0xffffffff 0x20000b0 Int BE Pri
!#4 N6971 P4413 LDD 3 -1 Int BE Pri
!#4 N6972 P4413 LDD 4 -1 Int BE Pri
!#A N6971 N6972
!#4 N6973 P4414 MEMBAR
!#4 N6974 P4415 BST 0 0x4180006f FP BE Pri
!#4 N6975 P4415 BST 1 0x41800070 FP BE Pri
!#A N6974 N6975
!#4 N6976 P4415 BST 2 0x41800071 FP BE Pri
!#4 N6977 P4416 MEMBAR
!#4 N6978 P4417 DWLD 0 -1 Int BE Pri
!#4 N6979 P4417 DWLD 1 -1 Int BE Pri
!#A N6978 N6979
!#4 N6980 P4418 LD 11 -1 Int BE Pri
!#4 N6981 P4418 CAS 11 -1 N6980 0x20000b1 Int BE Pri
!#4 N6982 P4419 MEMBAR
!#4 N6983 P4420 BST 15 0x41800072 FP BE Pri
!#4 N6984 P4420 BST 16 0x41800073 FP BE Pri
!#A N6983 N6984
!#4 N6985 P4420 BST 17 0x41800074 FP BE Pri
!#4 N6986 P4421 MEMBAR
!#4 N6987 P4422 DWST 15 0x20000b2 Int BE Pri
!#4 N6988 P4422 DWST 16 0x20000b3 Int BE Pri
!#A N6987 N6988
!#4 N6989 P4423 LD 22 -1 Int BE Pri
!#4 N6990 P4424 DWST_BINIT 11 0x20000b4 Int BE Pri
!#4 N6991 P4425 MEMBAR
!#4 N6992 P4426 REPLACEMENT 20 Int BE Pri
!#4 N6993 P4427 LDD 14 -1 Int BE Pri
!#4 N6994 P4428 LD 22 -1 Int BE Pri
!#4 N6995 P4428 CAS 22 -1 N6994 0x20000b5 Int BE Pri
!#4 N6996 P4429 ST_BINIT 1 0x20000b6 Int BE Pri
!#4 N6997 P4430 MEMBAR
!#4 N6998 P4431 DWLD 0 -1 Int BE Pri
!#4 N6999 P4431 DWLD 1 -1 Int BE Pri
!#A N6998 N6999
!#4 N7000 P4431 CASX 0 -1 N6998 0x20000b7 Int BE Pri
!#4 N7001 P4431 CASX 1 -1 N6999 0x20000b8 Int BE Pri
!#A N7000 N7001
!#4 N7002 P4432 MEMBAR
!#4 N7003 P4433 BLD 9 -1 FP BE Pri
!#4 N7004 P4433 BLD 10 -1 FP BE Pri
!#A N7003 N7004
!#4 N7005 P4433 BLD 11 -1 FP BE Pri
!#4 N7006 P4434 MEMBAR
!#4 N7007 P4435 LD 21 -1 Int BE Pri
!#4 N7008 P4436 DWLD 14 -1,0x0 Int BE Pri
!#4 N7009 P4436 CASX 14 -1,0x0 N7008 0x20000b9 Int BE Pri
!#4 N7010 P4437 DWST_BINIT 0 0x20000ba Int BE Pri
!#4 N7011 P4437 DWST_BINIT 1 0x20000bb Int BE Pri
!#A N7010 N7011
!#4 N7012 P4438 MEMBAR
!#4 N7013 P4439 LD 8 -1 Int BE Pri
!#4 N7014 P4439 CAS 8 -1 N7013 0x20000bc Int BE Pri
!#4 N7015 P4440 DWLD 6 -1 Int BE Pri
!#4 N7016 P4440 DWLD 7 -1 Int BE Pri
!#A N7015 N7016
!#4 N7017 P4440 CASX 6 -1 N7015 0x20000bd Int BE Pri
!#4 N7018 P4440 CASX 7 -1 N7016 0x20000be Int BE Pri
!#A N7017 N7018
!#4 N7019 P4441 LD 12 -1 Int BE Pri
!#4 N7020 P4441 CAS 12 -1 N7019 0x20000bf Int BE Pri
!#4 N7021 P4442 LD 12 -1 Int BE Pri
!#4 N7022 P4443 DWLD 23 -1 Int BE Pri
!#4 N7023 P4444 DWLD 17 -1 Int BE Pri
!#4 N7024 P4445 MEMBAR
!#4 N7025 P4446 BST 0 0x41800075 FP BE Pri
!#4 N7026 P4446 BST 1 0x41800076 FP BE Pri
!#A N7025 N7026
!#4 N7027 P4446 BST 2 0x41800077 FP BE Pri
!#4 N7028 P4447 MEMBAR
!#4 N7029 P4448 LD 15 -1 Int BE Pri
!#4 N7030 P4449 LD 19 -1 Int LE Pri
!#4 N7031 P4450 PREFETCH 5 Int BE Pri
!#4 N7032 P4451 MEMBAR
!#4 N7033 P4452 BST 21 0x41800078 FP BE Pri
!#4 N7034 P4452 BST 22 0x41800079 FP BE Pri
!#A N7033 N7034
!#4 N7035 P4452 BST 23 0x4180007a FP BE Pri
!#4 N7036 P4453 MEMBAR
!#4 N7037 P4454 REPLACEMENT 0 Int BE Pri
!#4 N7038 P4455 LD 12 -1 Int BE Pri
!#4 N7039 P4456 SWAP 23 0xffffffff 0x20000c0 Int BE Pri
!#4 N7040 P4457 LD 7 -1 Int BE Pri
!#4 N7041 P4457 CAS 7 -1 N7040 0x20000c1 Int BE Pri
!#4 N7042 P4458 DWST_BINIT 3 0x20000c2 Int BE Pri
!#4 N7043 P4458 DWST_BINIT 4 0x20000c3 Int BE Pri
!#A N7042 N7043
!#4 N7044 P4459 MEMBAR
!#4 N7045 P4460 PREFETCH 22 Int BE Pri
!#4 N7046 P4461 LDD 9 -1 Int BE Pri
!#4 N7047 P4461 LDD 10 -1 Int BE Pri
!#A N7046 N7047
!#4 N7048 P4462 MEMBAR
!#4 N7049 P4463 BLD 12 -1 FP BE Pri
!#4 N7050 P4463 BLD 13 -1 FP BE Pri
!#A N7049 N7050
!#4 N7051 P4463 BLD 14 -1 FP BE Pri
!#4 N7052 P4464 MEMBAR
!#4 N7053 P4465 DWST 3 0x20000c4 Int BE Pri
!#4 N7054 P4465 DWST 4 0x20000c5 Int BE Pri
!#A N7053 N7054
!#4 N7055 P4466 LDD 9 -1 Int BE Pri
!#4 N7056 P4466 LDD 10 -1 Int BE Pri
!#A N7055 N7056
!#4 N7057 P4467 LDD 23 -1 Int BE Pri
!#4 N7058 P4468 SWAP 18 0xffffffff 0x20000c6 Int BE Pri
!#4 N7059 P4469 DWST_BINIT 18 0x20000c7 Int BE Pri
!#4 N7060 P4469 DWST_BINIT 19 0x20000c8 Int BE Pri
!#A N7059 N7060
!#4 N7061 P4470 MEMBAR
!#4 N7062 P4471 LD 21 -1 Int BE Pri
!#4 N7063 P4472 LD 21 -1 Int BE Pri
!#4 N7064 P4473 REPLACEMENT 1 Int BE Pri
!#4 N7065 P4474 MEMBAR
!#4 N7066 P4475 BST 3 0x4180007b FP BE Pri
!#4 N7067 P4475 BST 4 0x4180007c FP BE Pri
!#A N7066 N7067
!#4 N7068 P4475 BST 5 0x4180007d FP BE Pri
!#4 N7069 P4476 MEMBAR
!#4 N7070 P4477 PREFETCH 0 Int BE Pri
!#4 N7071 P4478 DWST 18 0x20000c9 Int BE Pri
!#4 N7072 P4478 DWST 19 0x20000ca Int BE Pri
!#A N7071 N7072
!#4 N7073 P4479 SWAP 20 0xffffffff 0x20000cb Int LE Pri
!#4 N7074 P4480 LDD 21 -1 Int BE Pri
!#4 N7075 P4480 LDD 22 -1 Int BE Pri
!#A N7074 N7075
!#4 N7076 P4481 REPLACEMENT 1 Int BE Pri
!#4 N7077 P4482 PREFETCH 19 Int BE Pri
!#4 N7078 P4483 SWAP 13 0xffffffff 0x20000cc Int BE Pri
!#4 N7079 P4484 SWAP 21 0xffffffff 0x20000cd Int BE Pri
!#4 N7080 P4485 DWST_BINIT 21 0x20000ce Int BE Pri
!#4 N7081 P4485 DWST_BINIT 22 0x20000cf Int BE Pri
!#A N7080 N7081
!#4 N7082 P4486 MEMBAR
!#4 N7083 P4487 SWAP 12 0xffffffff 0x20000d0 Int BE Pri
!#4 N7084 P4488 LDD 12 -1 Int BE Pri
!#4 N7085 P4488 LDD 13 -1 Int BE Pri
!#A N7084 N7085
!#4 N7086 P4489 MEMBAR
!#4 N7087 P4490 BST 18 0x4180007e FP BE Pri
!#4 N7088 P4490 BST 19 0x4180007f FP BE Pri
!#A N7087 N7088
!#4 N7089 P4490 BST 20 0x41800080 FP BE Pri
!#4 N7090 P4491 MEMBAR
!#4 N7091 P4492 DWLD 3 -1 Int BE Pri
!#4 N7092 P4492 DWLD 4 -1 Int BE Pri
!#A N7091 N7092
!#4 N7093 P4492 CASX 3 -1 N7091 0x20000d1 Int BE Pri
!#4 N7094 P4492 CASX 4 -1 N7092 0x20000d2 Int BE Pri
!#A N7093 N7094
!#4 N7095 P4493 PREFETCH 7 Int BE Pri
!#4 N7096 P4494 MEMBAR
!#4 N7097 P4495 BSTC 9 0x41800081 FP BE Pri
!#4 N7098 P4495 BSTC 10 0x41800082 FP BE Pri
!#A N7097 N7098
!#4 N7099 P4495 BSTC 11 0x41800083 FP BE Pri
!#4 N7100 P4496 MEMBAR
!#4 N7101 P4497 DWLD 18 -1 Int BE Pri
!#4 N7102 P4497 DWLD 19 -1 Int BE Pri
!#A N7101 N7102
!#4 N7103 P4498 DWST 9 0x20000d3 Int BE Pri
!#4 N7104 P4498 DWST 10 0x20000d4 Int BE Pri
!#A N7103 N7104
!#4 N7105 P4499 MEMBAR
!#4 N7106 P4500 BST 3 0x41800084 FP BE Pri
!#4 N7107 P4500 BST 4 0x41800085 FP BE Pri
!#A N7106 N7107
!#4 N7108 P4500 BST 5 0x41800086 FP BE Pri
!#4 N7109 P4501 MEMBAR
!#4 N7110 P4502 LD 17 -1 Int BE Pri
!#4 N7111 P4503 LDD 11 -1 Int BE Pri
!#4 N7112 P4504 SWAP 4 0xffffffff 0x20000d5 Int BE Pri
!#4 N7113 P4505 LD 0 -1 Int BE Pri
!#4 N7114 P4506 SWAP 14 0xffffffff 0x20000d6 Int BE Pri
!#4 N7115 P4507 ST 5 0x20000d7 Int LE Pri
!#4 N7116 P4508 DWST 14 0x41800087 FP BE Pri
!#4 N7117 P4509 LD 23 -1 Int BE Pri
!#4 N7118 P4510 REPLACEMENT 0 Int BE Pri
!#4 N7119 P4511 DWST_BINIT 9 0x20000d8 Int LE Pri
!#4 N7120 P4511 DWST_BINIT 10 0x20000d9 Int LE Pri
!#A N7119 N7120
!#4 N7121 P4512 MEMBAR
!#4 N7122 P4513 ST_BINIT 7 0x20000da Int BE Pri
!#4 N7123 P4514 MEMBAR
!#4 N7124 P4515 LDD 9 -1 Int LE Pri
!#4 N7125 P4515 LDD 10 -1 Int LE Pri
!#A N7124 N7125
!#4 N7126 P4516 DWLD 18 -1 Int BE Pri
!#4 N7127 P4516 DWLD 19 -1 Int BE Pri
!#A N7126 N7127
!#4 N7128 P4517 LD 5 -1 Int BE Pri
!#4 N7129 P4517 CAS 5 -1 N7128 0x20000db Int BE Pri
!#4 N7130 P4518 DWST 0 0x20000dc Int BE Pri
!#4 N7131 P4518 DWST 1 0x20000dd Int BE Pri
!#A N7130 N7131
!#4 N7132 P4519 LD 18 -1 Int BE Pri
!#4 N7133 P4520 DWST_BINIT 5 0x20000de Int BE Pri
!#4 N7134 P4521 MEMBAR
!#4 N7135 P4522 DWST 6 0x20000df Int BE Pri
!#4 N7136 P4522 DWST 7 0x20000e0 Int BE Pri
!#A N7135 N7136
!#4 N7137 P4523 MEMBAR
!#4 N7138 P4524 BSTC 15 0x41800088 FP BE Pri
!#4 N7139 P4524 BSTC 16 0x41800089 FP BE Pri
!#A N7138 N7139
!#4 N7140 P4524 BSTC 17 0x4180008a FP BE Pri
!#4 N7141 P4525 MEMBAR
!#4 N7142 P4526 LD 9 -1 Int BE Pri
!#4 N7143 P4527 MEMBAR
!#4 N7144 P4528 BST 3 0x4180008b FP BE Pri
!#4 N7145 P4528 BST 4 0x4180008c FP BE Pri
!#A N7144 N7145
!#4 N7146 P4528 BST 5 0x4180008d FP BE Pri
!#4 N7147 P4529 MEMBAR
!#4 N7148 P4530 LD 0 -1 Int BE Pri
!#4 N7149 P4531 MEMBAR
!#4 N7150 P4532 BLD 15 -1 FP BE Pri
!#4 N7151 P4532 BLD 16 -1 FP BE Pri
!#A N7150 N7151
!#4 N7152 P4532 BLD 17 -1 FP BE Pri
!#4 N7153 P4533 MEMBAR
!#4 N7154 P4534 DWLD 3 -1 Int BE Pri
!#4 N7155 P4534 DWLD 4 -1 Int BE Pri
!#A N7154 N7155
!#4 N7156 P4534 CASX 3 -1 N7154 0x20000e1 Int BE Pri
!#4 N7157 P4534 CASX 4 -1 N7155 0x20000e2 Int BE Pri
!#A N7156 N7157
!#4 N7158 P4535 LD 5 -1 Int BE Pri
!#4 N7159 P4535 CAS 5 -1 N7158 0x20000e3 Int BE Pri
!#4 N7160 P4536 LD 3 -1 Int BE Pri
!#4 N7161 P4537 ST 7 0x20000e4 Int BE Pri
!#4 N7162 P4538 LDD 15 -1 Int BE Pri
!#4 N7163 P4538 LDD 16 -1 Int BE Pri
!#A N7162 N7163
!#4 N7164 P4539 LDD 12 -1 Int LE Pri
!#4 N7165 P4539 LDD 13 -1 Int LE Pri
!#A N7164 N7165
!#4 N7166 P4540 MEMBAR
!#4 N7167 P4541 BLD 3 -1 FP BE Pri
!#4 N7168 P4541 BLD 4 -1 FP BE Pri
!#A N7167 N7168
!#4 N7169 P4541 BLD 5 -1 FP BE Pri
!#4 N7170 P4542 MEMBAR
!#4 N7171 P4543 DWLD 18 -1 Int BE Pri
!#4 N7172 P4543 DWLD 19 -1 Int BE Pri
!#A N7171 N7172
!#4 N7173 P4544 DWLD 3 -1 Int BE Pri
!#4 N7174 P4544 DWLD 4 -1 Int BE Pri
!#A N7173 N7174
!#4 N7175 P4544 CASX 3 -1 N7173 0x20000e5 Int BE Pri
!#4 N7176 P4544 CASX 4 -1 N7174 0x20000e6 Int BE Pri
!#A N7175 N7176
!#4 N7177 P4545 LD 9 -1 Int BE Pri
!#4 N7178 P4545 CAS 9 -1 N7177 0x20000e7 Int BE Pri
!#4 N7179 P4546 MEMBAR
!#4 N7180 P4547 BSTC 12 0x4180008e FP BE Pri
!#4 N7181 P4547 BSTC 13 0x4180008f FP BE Pri
!#A N7180 N7181
!#4 N7182 P4547 BSTC 14 0x41800090 FP BE Pri
!#4 N7183 P4548 MEMBAR
!#4 N7184 P4549 BLD 3 -1 FP BE Pri
!#4 N7185 P4549 BLD 4 -1 FP BE Pri
!#A N7184 N7185
!#4 N7186 P4549 BLD 5 -1 FP BE Pri
!#4 N7187 P4550 MEMBAR
!#4 N7188 P4551 LDD 15 -1 Int BE Pri
!#4 N7189 P4551 LDD 16 -1 Int BE Pri
!#A N7188 N7189
!#4 N7190 P4552 PREFETCH 2 Int BE Pri
!#4 N7191 P4553 MEMBAR
!#4 N7192 P4554 BST 6 0x41800091 FP BE Pri
!#4 N7193 P4554 BST 7 0x41800092 FP BE Pri
!#A N7192 N7193
!#4 N7194 P4554 BST 8 0x41800093 FP BE Pri
!#4 N7195 P4555 MEMBAR
!#4 N7196 P4556 LDD 9 -1 Int BE Pri
!#4 N7197 P4556 LDD 10 -1 Int BE Pri
!#A N7196 N7197
!#4 N7198 P4557 DWST_BINIT 14 0x20000e8 Int BE Pri
!#4 N7199 P4558 MEMBAR
!#4 N7200 P4559 LDD 11 -1 Int BE Pri
!#4 N7201 P4560 MEMBAR
!#4 N7202 P4561 BLD 3 -1 FP BE Pri
!#4 N7203 P4561 BLD 4 -1 FP BE Pri
!#A N7202 N7203
!#4 N7204 P4561 BLD 5 -1 FP BE Pri
!#4 N7205 P4562 MEMBAR
!#4 N7206 P4563 SWAP 14 0xffffffff 0x20000e9 Int BE Pri
!#4 N7207 P4564 MEMBAR
!#4 N7208 P4565 BSTC 21 0x41800094 FP BE Pri
!#4 N7209 P4565 BSTC 22 0x41800095 FP BE Pri
!#A N7208 N7209
!#4 N7210 P4565 BSTC 23 0x41800096 FP BE Pri
!#4 N7211 P4566 MEMBAR
!#4 N7212 P4567 LD 10 -1 Int BE Pri
!#4 N7213 P4567 CAS 10 -1 N7212 0x20000ea Int BE Pri
!#4 N7214 P4568 LD 7 -1 Int BE Pri
!#4 N7215 P4569 ST_BINIT 20 0x20000eb Int BE Pri
!#4 N7216 P4570 MEMBAR
!#4 N7217 P4571 ST_BINIT 19 0x20000ec Int BE Pri
!#4 N7218 P4572 MEMBAR
!#4 N7219 P4573 ST_BINIT 13 0x20000ed Int BE Pri
!#4 N7220 P4574 MEMBAR
!#4 N7221 P4575 LD 15 -1 Int BE Pri
!#4 N7222 P4575 CAS 15 -1 N7221 0x20000ee Int BE Pri
!#4 N7223 P4576 PREFETCH 7 Int BE Pri
!#4 N7224 P4577 LDD 6 -1 Int BE Pri
!#4 N7225 P4577 LDD 7 -1 Int BE Pri
!#A N7224 N7225
!#4 N7226 P4578 ST_BINIT 18 0x20000ef Int BE Pri
!#4 N7227 P4579 MEMBAR
!#4 N7228 P4580 REPLACEMENT 19 Int BE Pri
!#4 N7229 P4581 ST_BINIT 18 0x20000f0 Int BE Pri
!#4 N7230 P4582 MEMBAR
!#4 N7231 P4583 DWST_BINIT 11 0x20000f1 Int BE Pri
!#4 N7232 P4584 MEMBAR
!#4 N7233 P4585 BST 3 0x41800097 FP BE Pri
!#4 N7234 P4585 BST 4 0x41800098 FP BE Pri
!#A N7233 N7234
!#4 N7235 P4585 BST 5 0x41800099 FP BE Pri
!#4 N7236 P4586 MEMBAR
!#4 N7237 P4587 PREFETCH 4 Int BE Pri
!#4 N7238 P4588 DWLD 6 -1 Int LE Pri
!#4 N7239 P4588 DWLD 7 -1 Int LE Pri
!#A N7238 N7239
!#4 N7240 P4588 CASX 6 -1 N7238 0x20000f2 Int LE Pri
!#4 N7241 P4588 CASX 7 -1 N7239 0x20000f3 Int LE Pri
!#A N7240 N7241
!#4 N7242 P4589 SWAP 10 0xffffffff 0x20000f4 Int BE Pri
!#4 N7243 P4590 REPLACEMENT 1 Int BE Pri
!#4 N7244 P4591 ST 9 0x20000f5 Int BE Pri
!#4 N7245 P4592 MEMBAR
!#4 N7246 P4593 BST 9 0x4180009a FP BE Pri
!#4 N7247 P4593 BST 10 0x4180009b FP BE Pri
!#A N7246 N7247
!#4 N7248 P4593 BST 11 0x4180009c FP BE Pri
!#4 N7249 P4594 MEMBAR
!#4 N7250 P4595 DWST 18 0x20000f6 Int BE Pri
!#4 N7251 P4595 DWST 19 0x20000f7 Int BE Pri
!#A N7250 N7251
!#4 N7252 P4596 MEMBAR
!#4 N7253 P4597 BST 15 0x4180009d FP BE Pri
!#4 N7254 P4597 BST 16 0x4180009e FP BE Pri
!#A N7253 N7254
!#4 N7255 P4597 BST 17 0x4180009f FP BE Pri
!#4 N7256 P4598 MEMBAR
!#4 N7257 P4599 BLD 0 -1 FP BE Pri
!#4 N7258 P4599 BLD 1 -1 FP BE Pri
!#A N7257 N7258
!#4 N7259 P4599 BLD 2 -1 FP BE Pri
!#4 N7260 P4600 MEMBAR
!#4 N7261 P4601 PREFETCH 13 Int BE Pri
!#4 N7262 P4602 ST 6 0x20000f8 Int BE Pri
!#4 N7263 P4603 MEMBAR
!#4 N7264 P4604 BSTC 6 0x418000a0 FP BE Pri
!#4 N7265 P4604 BSTC 7 0x418000a1 FP BE Pri
!#A N7264 N7265
!#4 N7266 P4604 BSTC 8 0x418000a2 FP BE Pri
!#4 N7267 P4605 MEMBAR
!#4 N7268 P4606 BST 15 0x418000a3 FP BE Pri
!#4 N7269 P4606 BST 16 0x418000a4 FP BE Pri
!#A N7268 N7269
!#4 N7270 P4606 BST 17 0x418000a5 FP BE Pri
!#4 N7271 P4607 MEMBAR
!#4 N7272 P4608 BSTC 0 0x418000a6 FP BE Pri
!#4 N7273 P4608 BSTC 1 0x418000a7 FP BE Pri
!#A N7272 N7273
!#4 N7274 P4608 BSTC 2 0x418000a8 FP BE Pri
!#4 N7275 P4609 MEMBAR
!#4 N7276 P4610 ST_BINIT 7 0x20000f9 Int BE Pri
!#4 N7277 P4611 MEMBAR
!#4 N7278 P4612 DWST 20 0x20000fa Int BE Pri
!#4 N7279 P4613 LDD 6 -1 Int LE Pri
!#4 N7280 P4613 LDD 7 -1 Int LE Pri
!#A N7279 N7280
!#4 N7281 P4614 LD 8 -1 Int BE Pri
!#4 N7282 P4614 CAS 8 -1 N7281 0x20000fb Int BE Pri
!#4 N7283 P4615 LD 11 -1 Int BE Pri
!#4 N7284 P4615 CAS 11 -1 N7283 0x20000fc Int BE Pri
!#4 N7285 P4616 DWLD 2 -1 Int BE Pri
!#4 N7286 P4617 DWST 2 0x20000fd Int BE Pri
!#4 N7287 P4618 LDD 6 -1 Int BE Pri
!#4 N7288 P4618 LDD 7 -1 Int BE Pri
!#A N7287 N7288
!#4 N7289 P4619 ST_BINIT 6 0x20000fe Int BE Pri
!#4 N7290 P4620 MEMBAR
!#4 N7291 P4621 BSTC 15 0x418000a9 FP BE Pri
!#4 N7292 P4621 BSTC 16 0x418000aa FP BE Pri
!#A N7291 N7292
!#4 N7293 P4621 BSTC 17 0x418000ab FP BE Pri
!#4 N7294 P4622 MEMBAR
!#4 N7295 P4623 SWAP 11 0xffffffff 0x20000ff Int BE Pri
!#4 N7296 P4624 DWST_BINIT 6 0x2000100 Int BE Pri
!#4 N7297 P4624 DWST_BINIT 7 0x2000101 Int BE Pri
!#A N7296 N7297
!#4 N7298 P4625 MEMBAR
!#4 N7299 P4626 DWLD 18 -1 Int BE Pri
!#4 N7300 P4626 DWLD 19 -1 Int BE Pri
!#A N7299 N7300
!#4 N7301 P4626 CASX 18 -1 N7299 0x2000102 Int BE Pri
!#4 N7302 P4626 CASX 19 -1 N7300 0x2000103 Int BE Pri
!#A N7301 N7302
!#4 N7303 P4627 DWST_BINIT 6 0x2000104 Int BE Pri
!#4 N7304 P4627 DWST_BINIT 7 0x2000105 Int BE Pri
!#A N7303 N7304
!#4 N7305 P4628 MEMBAR
!#4 N7306 P4629 LD 4 -1 Int LE Pri
!#4 N7307 P4629 CAS 4 -1 N7306 0x2000106 Int LE Pri
!#4 N7308 P4630 LD 1 -1 Int BE Pri
!#4 N7309 P4631 MEMBAR
!#4 N7310 P4632 BLD 3 -1 FP BE Pri
!#4 N7311 P4632 BLD 4 -1 FP BE Pri
!#A N7310 N7311
!#4 N7312 P4632 BLD 5 -1 FP BE Pri
!#4 N7313 P4633 MEMBAR
!#4 N7314 P4634 DWST 12 0x418000ac FP BE Pri
!#4 N7315 P4634 DWST 13 0x418000ad FP BE Pri
!#A N7314 N7315
!#4 N7316 P4635 LDD 3 -1 Int BE Pri
!#4 N7317 P4635 LDD 4 -1 Int BE Pri
!#A N7316 N7317
!#4 N7318 P4636 DWLD 9 -1 FP BE Pri
!#4 N7319 P4636 DWLD 10 -1 FP BE Pri
!#A N7318 N7319
!#4 N7320 P4637 LD 15 -1 Int LE Pri
!#4 N7321 P4637 CAS 15 -1 N7320 0x2000107 Int LE Pri
!#4 N7322 P4638 ST_BINIT 9 0x2000108 Int BE Pri
!#4 N7323 P4639 MEMBAR
!#4 N7324 P4640 ST_BINIT 5 0x2000109 Int BE Pri
!#4 N7325 P4641 MEMBAR
!#4 N7326 P4642 BSTC 15 0x418000ae FP BE Pri
!#4 N7327 P4642 BSTC 16 0x418000af FP BE Pri
!#A N7326 N7327
!#4 N7328 P4642 BSTC 17 0x418000b0 FP BE Pri
!#4 N7329 P4643 MEMBAR
!#4 N7330 P4644 ST 0 0x200010a Int BE Pri
!#4 N7331 P4645 DWST_BINIT 0 0x200010b Int LE Pri
!#4 N7332 P4645 DWST_BINIT 1 0x200010c Int LE Pri
!#A N7331 N7332
!#4 N7333 P4646 MEMBAR
!#4 N7334 P4647 ST 3 0x200010d Int LE Pri
!#4 N7335 P4648 SWAP 14 0xffffffff 0x200010e Int BE Pri
!#4 N7336 P4649 ST_BINIT 0 0x200010f Int BE Pri
!#4 N7337 P4650 MEMBAR
!#4 N7338 P4651 PREFETCH 23 Int BE Pri
!#4 N7339 P4652 LD 23 -1 Int BE Pri
!#4 N7340 P4652 CAS 23 -1 N7339 0x2000110 Int BE Pri
!#4 N7341 P4653 LDD 17 -1 Int BE Pri
!#4 N7342 P4654 DWST_BINIT 20 0x2000111 Int BE Pri
!#4 N7343 P4655 MEMBAR
!#4 N7344 P4656 ST_BINIT 10 0x2000112 Int BE Pri
!#4 N7345 P4657 MEMBAR
!#4 N7346 P4658 DWLD 23 -1 Int BE Pri
!#4 N7347 P4659 DWST_BINIT 9 0x2000113 Int BE Pri
!#4 N7348 P4659 DWST_BINIT 10 0x2000114 Int BE Pri
!#A N7347 N7348
!#4 N7349 P4660 MEMBAR
!#4 N7350 P4661 BLD 12 -1 FP BE Pri
!#4 N7351 P4661 BLD 13 -1 FP BE Pri
!#A N7350 N7351
!#4 N7352 P4661 BLD 14 -1 FP BE Pri
!#4 N7353 P4662 MEMBAR
!#4 N7354 P4663 DWST 17 0x2000115 Int BE Pri
!#4 N7355 P4664 DWST 6 0x2000116 Int BE Pri
!#4 N7356 P4664 DWST 7 0x2000117 Int BE Pri
!#A N7355 N7356
!#4 N7357 P4665 DWLD 9 -1 Int BE Pri
!#4 N7358 P4665 DWLD 10 -1 Int BE Pri
!#A N7357 N7358
!#4 N7359 P4665 CASX 9 -1 N7357 0x2000118 Int BE Pri
!#4 N7360 P4665 CASX 10 -1 N7358 0x2000119 Int BE Pri
!#A N7359 N7360
!#4 N7361 P4666 LD 11 -1 Int BE Pri
!#4 N7362 P4667 LD 3 -1 Int BE Pri
!#4 N7363 P4667 CAS 3 -1 N7362 0x200011a Int BE Pri
!#4 N7364 P4668 ST 20 0x200011b Int BE Pri
!#4 N7365 P4669 MEMBAR
!#4 N7366 P4670 BSTC 3 0x418000b1 FP BE Pri
!#4 N7367 P4670 BSTC 4 0x418000b2 FP BE Pri
!#A N7366 N7367
!#4 N7368 P4670 BSTC 5 0x418000b3 FP BE Pri
!#4 N7369 P4671 MEMBAR
!#4 N7370 P4672 DWST 12 0x200011c Int BE Pri
!#4 N7371 P4672 DWST 13 0x200011d Int BE Pri
!#A N7370 N7371
!#4 N7372 P4673 LD 1 -1 Int BE Pri
!#4 N7373 P4674 LD 17 -1 Int BE Pri
!#4 N7374 P4675 DWLD 14 -1 Int BE Pri
!#4 N7375 P4676 LD 23 -1 Int BE Pri
!#4 N7376 P4676 CAS 23 -1 N7375 0x200011e Int BE Pri
!#4 N7377 P4677 DWST_BINIT 17 0x200011f Int BE Pri
!#4 N7378 P4678 MEMBAR
!#4 N7379 P4679 REPLACEMENT 11 Int BE Pri
!#4 N7380 P4680 LD 16 -1 Int BE Pri
!#4 N7381 P4681 DWST 2 0x2000120 Int BE Pri
!#4 N7382 P4682 MEMBAR
!#4 N7383 P4683 BSTC 21 0x418000b4 FP BE Pri
!#4 N7384 P4683 BSTC 22 0x418000b5 FP BE Pri
!#A N7383 N7384
!#4 N7385 P4683 BSTC 23 0x418000b6 FP BE Pri
!#4 N7386 P4684 MEMBAR
!#4 N7387 P4685 SWAP 13 0xffffffff 0x2000121 Int BE Pri
!#4 N7388 P4686 SWAP 9 0xffffffff 0x2000122 Int BE Pri
!#4 N7389 P4687 LD 12 -1 Int BE Pri
!#4 N7390 P4687 CAS 12 -1 N7389 0x2000123 Int BE Pri
!#4 N7391 P4688 MEMBAR
!#4 N7392 P4689 BLD 3 -1 FP BE Pri
!#4 N7393 P4689 BLD 4 -1 FP BE Pri
!#A N7392 N7393
!#4 N7394 P4689 BLD 5 -1 FP BE Pri
!#4 N7395 P4690 MEMBAR
!#4 N7396 P4691 ST_BINIT 21 0x2000124 Int BE Pri
!#4 N7397 P4692 MEMBAR
!#4 N7398 P4693 DWST 17 0x2000125 Int BE Pri
!#4 N7399 P4694 DWST 18 0x2000126 Int BE Pri
!#4 N7400 P4694 DWST 19 0x2000127 Int BE Pri
!#A N7399 N7400
!#4 N7401 P4695 PREFETCH 11 Int BE Pri
!#4 N7402 P4696 MEMBAR
!#4 N7403 P4697 BSTC 21 0x418000b7 FP BE Pri
!#4 N7404 P4697 BSTC 22 0x418000b8 FP BE Pri
!#A N7403 N7404
!#4 N7405 P4697 BSTC 23 0x418000b9 FP BE Pri
!#4 N7406 P4698 MEMBAR
!#4 N7407 P4699 ST 10 0x2000128 Int LE Pri
!#4 N7408 P4700 DWST_BINIT 14 0x2000129 Int BE Pri
!#4 N7409 P4701 MEMBAR
!#4 N7410 P4702 DWLD 15 -1 Int BE Pri
!#4 N7411 P4702 DWLD 16 -1 Int BE Pri
!#A N7410 N7411
!#4 N7412 P4702 CASX 15 -1 N7410 0x200012a Int BE Pri
!#4 N7413 P4702 CASX 16 -1 N7411 0x200012b Int BE Pri
!#A N7412 N7413
!#4 N7414 P4703 DWLD 21 -1 Int BE Pri
!#4 N7415 P4703 DWLD 22 -1 Int BE Pri
!#A N7414 N7415
!#4 N7416 P4704 DWST 18 0x200012c Int BE Pri
!#4 N7417 P4704 DWST 19 0x200012d Int BE Pri
!#A N7416 N7417
!#4 N7418 P4705 SWAP 12 0xffffffff 0x200012e Int BE Pri
!#4 N7419 P4706 REPLACEMENT 19 Int BE Pri
!#4 N7420 P4707 DWST 6 0x200012f Int BE Pri
!#4 N7421 P4707 DWST 7 0x2000130 Int BE Pri
!#A N7420 N7421
!#4 N7422 P4708 LDD 11 -1 Int BE Pri
!#4 N7423 P4709 DWLD 15 -1 Int BE Pri
!#4 N7424 P4709 DWLD 16 -1 Int BE Pri
!#A N7423 N7424
!#4 N7425 P4710 DWST_BINIT 9 0x2000131 Int LE Pri
!#4 N7426 P4710 DWST_BINIT 10 0x2000132 Int LE Pri
!#A N7425 N7426
!#4 N7427 P4711 MEMBAR
!#4 N7428 P4712 LDD 18 -1 Int BE Pri
!#4 N7429 P4712 LDD 19 -1 Int BE Pri
!#A N7428 N7429
!#4 N7430 P4713 LD 22 -1 Int BE Pri
!#4 N7431 P4713 CAS 22 -1 N7430 0x2000133 Int BE Pri
!#4 N7432 P4714 REPLACEMENT 0 Int BE Pri
!#4 N7433 P4715 MEMBAR
!#4 N7434 P4716 BST 18 0x418000ba FP BE Pri
!#4 N7435 P4716 BST 19 0x418000bb FP BE Pri
!#A N7434 N7435
!#4 N7436 P4716 BST 20 0x418000bc FP BE Pri
!#4 N7437 P4717 MEMBAR
!#4 N7438 P4718 PREFETCH 18 Int BE Pri
!#4 N7439 P4719 PREFETCH 13 Int BE Pri
!#4 N7440 P4720 DWST_BINIT 8 0x2000134 Int BE Pri
!#4 N7441 P4721 MEMBAR
!#4 N7442 P4722 DWLD 6 -1 Int BE Pri
!#4 N7443 P4722 DWLD 7 -1 Int BE Pri
!#A N7442 N7443
!#4 N7444 P4723 DWLD 14 -1,0x0 Int BE Pri
!#4 N7445 P4723 CASX 14 -1,0x0 N7444 0x2000135 Int BE Pri
!#4 N7446 P4724 ST 23 0x2000136 Int BE Pri
!#4 N7447 P4725 LD 19 -1 Int BE Pri
!#4 N7448 P4726 MEMBAR
!#4 N7449 P4727 BLD 3 -1 FP BE Pri
!#4 N7450 P4727 BLD 4 -1 FP BE Pri
!#A N7449 N7450
!#4 N7451 P4727 BLD 5 -1 FP BE Pri
!#4 N7452 P4728 MEMBAR
!#4 N7453 P4729 LD 5 -1 Int BE Pri
!#4 N7454 P4729 CAS 5 -1 N7453 0x2000137 Int BE Pri
!#4 N7455 P4730 LD 5 -1 Int BE Pri
!#4 N7456 P4730 CAS 5 -1 N7455 0x2000138 Int BE Pri
!#4 N7457 P4731 MEMBAR
!#4 N7458 P4732 BST 3 0x418000bd FP BE Pri
!#4 N7459 P4732 BST 4 0x418000be FP BE Pri
!#A N7458 N7459
!#4 N7460 P4732 BST 5 0x418000bf FP BE Pri
!#4 N7461 P4733 MEMBAR
!#4 N7462 P4734 LD 15 -1 Int BE Pri
!#4 N7463 P4735 MEMBAR
!#4 N7464 P4736 BST 0 0x418000c0 FP BE Pri
!#4 N7465 P4736 BST 1 0x418000c1 FP BE Pri
!#A N7464 N7465
!#4 N7466 P4736 BST 2 0x418000c2 FP BE Pri
!#4 N7467 P4737 MEMBAR
!#4 N7468 P4738 SWAP 6 0xffffffff 0x2000139 Int BE Pri
!#4 N7469 P4739 MEMBAR
!#4 N7470 P4740 BLD 21 -1 FP BE Pri
!#4 N7471 P4740 BLD 22 -1 FP BE Pri
!#A N7470 N7471
!#4 N7472 P4740 BLD 23 -1 FP BE Pri
!#4 N7473 P4741 MEMBAR
!#4 N7474 P4742 DWST 11 0x200013a Int BE Pri
!#4 N7475 P4743 LD 1 -1 Int BE Pri
!#4 N7476 P4743 CAS 1 -1 N7475 0x200013b Int BE Pri
!#4 N7477 P4744 MEMBAR
!#4 N7478 P4745 BSTC 3 0x418000c3 FP BE Pri
!#4 N7479 P4745 BSTC 4 0x418000c4 FP BE Pri
!#A N7478 N7479
!#4 N7480 P4745 BSTC 5 0x418000c5 FP BE Pri
!#4 N7481 P4746 MEMBAR
!#4 N7482 P4747 REPLACEMENT 0 Int BE Pri
!#4 N7483 P4748 SWAP 8 0xffffffff 0x200013c Int BE Pri
!#4 N7484 P4749 LD 12 -1 Int BE Pri
!#4 N7485 P4750 ST 16 0x200013d Int BE Pri
!#4 N7486 P4751 DWST 18 0x418000c6 FP BE Pri
!#4 N7487 P4751 DWST 19 0x418000c7 FP BE Pri
!#A N7486 N7487
!#4 N7488 P4752 DWLD 20 -1 Int BE Pri
!#4 N7489 P4753 DWLD 18 -1 Int BE Pri
!#4 N7490 P4753 DWLD 19 -1 Int BE Pri
!#A N7489 N7490
!#4 N7491 P4754 LD 19 -1 Int BE Pri
!#4 N7492 P4754 CAS 19 -1 N7491 0x200013e Int BE Pri
!#4 N7493 P4755 DWST_BINIT 12 0x200013f Int BE Pri
!#4 N7494 P4755 DWST_BINIT 13 0x2000140 Int BE Pri
!#A N7493 N7494
!#4 N7495 P4756 MEMBAR
!#4 N7496 P4757 LD 18 -1 Int BE Pri
!#4 N7497 P4758 LDD 2 -1 Int BE Pri
!#4 N7498 P4759 LD 5 -1 Int LE Pri
!#4 N7499 P4759 CAS 5 -1 N7498 0x2000141 Int LE Pri
!#4 N7500 P4760 LDD 14 -1 Int LE Pri
!#4 N7501 P4761 LD 0 -1 Int BE Pri
!#4 N7502 P4761 CAS 0 -1 N7501 0x2000142 Int BE Pri
!#4 N7503 P4762 DWLD 8 -1 Int LE Pri
!#4 N7504 P4763 LDD 3 -1 Int BE Pri
!#4 N7505 P4763 LDD 4 -1 Int BE Pri
!#A N7504 N7505
!#4 N7506 P4764 DWLD 6 -1 Int BE Pri
!#4 N7507 P4764 DWLD 7 -1 Int BE Pri
!#A N7506 N7507
!#4 N7508 P4764 CASX 6 -1 N7506 0x2000143 Int BE Pri
!#4 N7509 P4764 CASX 7 -1 N7507 0x2000144 Int BE Pri
!#A N7508 N7509
!#4 N7510 P4765 LDD 8 -1 Int BE Pri
!#4 N7511 P4766 DWST 12 0x418000c8 FP BE Pri
!#4 N7512 P4766 DWST 13 0x418000c9 FP BE Pri
!#A N7511 N7512
!#4 N7513 P4767 ST_BINIT 1 0x2000145 Int BE Pri
!#4 N7514 P4768 MEMBAR
!#4 N7515 P4769 SWAP 3 0xffffffff 0x2000146 Int BE Pri
!#4 N7516 P4770 ST 21 0x2000147 Int BE Pri
!#4 N7517 P4771 DWST_BINIT 12 0x2000148 Int BE Pri
!#4 N7518 P4771 DWST_BINIT 13 0x2000149 Int BE Pri
!#A N7517 N7518
!#4 N7519 P4772 MEMBAR
!#4 N7520 P4773 ST_BINIT 2 0x200014a Int BE Pri
!#4 N7521 P4774 MEMBAR
!#4 N7522 P4775 DWST_BINIT 18 0x200014b Int LE Pri
!#4 N7523 P4775 DWST_BINIT 19 0x200014c Int LE Pri
!#A N7522 N7523
!#4 N7524 P4776 MEMBAR
!#4 N7525 P4777 DWST_BINIT 3 0x200014d Int BE Pri
!#4 N7526 P4777 DWST_BINIT 4 0x200014e Int BE Pri
!#A N7525 N7526
!#4 N7527 P4778 MEMBAR
!#4 N7528 P4779 SWAP 1 0xffffffff 0x200014f Int BE Pri
!#4 N7529 P4780 LD 18 -1 Int BE Pri
!#4 N7530 P4780 CAS 18 -1 N7529 0x2000150 Int BE Pri
!#4 N7531 P4781 LDD 17 -1 Int BE Pri
!#4 N7532 P4782 DWST 3 0x2000151 Int BE Pri
!#4 N7533 P4782 DWST 4 0x2000152 Int BE Pri
!#A N7532 N7533
!#4 N7534 P4783 MEMBAR
!#4 N7535 P4784 BST 18 0x418000ca FP BE Pri
!#4 N7536 P4784 BST 19 0x418000cb FP BE Pri
!#A N7535 N7536
!#4 N7537 P4784 BST 20 0x418000cc FP BE Pri
!#4 N7538 P4785 MEMBAR
!#4 N7539 P4786 BSTC 0 0x418000cd FP BE Pri
!#4 N7540 P4786 BSTC 1 0x418000ce FP BE Pri
!#A N7539 N7540
!#4 N7541 P4786 BSTC 2 0x418000cf FP BE Pri
!#4 N7542 P4787 MEMBAR
!#4 N7543 P4788 DWLD 8 -1,0x0 Int LE Pri
!#4 N7544 P4788 CASX 8 -1,0x0 N7543 0x2000153 Int LE Pri
!#4 N7545 P4789 ST 4 0x418000d0 FP BE Pri
!#4 N7546 P4790 DWST 18 0x2000154 Int BE Pri
!#4 N7547 P4790 DWST 19 0x2000155 Int BE Pri
!#A N7546 N7547
!#4 N7548 P4791 REPLACEMENT 18 Int BE Pri
!#4 N7549 P4792 DWST_BINIT 15 0x2000156 Int BE Pri
!#4 N7550 P4792 DWST_BINIT 16 0x2000157 Int BE Pri
!#A N7549 N7550
!#4 N7551 P4793 MEMBAR
!#4 N7552 P4794 SWAP 8 0xffffffff 0x2000158 Int BE Pri
!#4 N7553 P4795 ST 23 0x2000159 Int BE Pri
!#4 N7554 P4796 LDD 3 -1 Int BE Pri
!#4 N7555 P4796 LDD 4 -1 Int BE Pri
!#A N7554 N7555
!#4 N7556 P4797 LDD 9 -1 Int BE Pri
!#4 N7557 P4797 LDD 10 -1 Int BE Pri
!#A N7556 N7557
!#4 N7558 P4798 PREFETCH 4 Int BE Pri
!#4 N7559 P4799 SWAP 11 0xffffffff 0x200015a Int BE Pri
!#4 N7560 P4800 LD 8 -1 Int BE Pri
!#4 N7561 P4800 CAS 8 -1 N7560 0x200015b Int BE Pri
!#4 N7562 P4801 ST 20 0x418000d1 FP BE Pri
!#4 N7563 P4802 LD 22 -1 Int BE Pri
!#4 N7564 P4802 CAS 22 -1 N7563 0x200015c Int BE Pri
!#4 N7565 P4803 ST 10 0x200015d Int BE Pri
!#4 N7566 P4804 DWLD 3 -1 Int BE Pri
!#4 N7567 P4804 DWLD 4 -1 Int BE Pri
!#A N7566 N7567
!#4 N7568 P4805 LD 7 -1 Int BE Pri
!#4 N7569 P4805 CAS 7 -1 N7568 0x200015e Int BE Pri
!#4 N7570 P4806 DWST_BINIT 12 0x200015f Int BE Pri
!#4 N7571 P4806 DWST_BINIT 13 0x2000160 Int BE Pri
!#A N7570 N7571
!#4 N7572 P4807 MEMBAR
!#4 N7573 P4808 SWAP 18 0xffffffff 0x2000161 Int BE Pri
!#4 N7574 P4809 ST 5 0x418000d2 FP BE Pri
!#4 N7575 P4810 LD 9 -1 FP BE Pri
!#4 N7576 P4811 MEMBAR
!#4 N7577 P4812 BLD 6 -1 FP BE Pri
!#4 N7578 P4812 BLD 7 -1 FP BE Pri
!#A N7577 N7578
!#4 N7579 P4812 BLD 8 -1 FP BE Pri
!#4 N7580 P4813 MEMBAR
!#4 N7581 P4814 ST 14 0x418000d3 FP BE Pri
!#4 N7582 P4815 MEMBAR
!#4 N7583 P4816 BLD 3 -1 FP BE Pri
!#4 N7584 P4816 BLD 4 -1 FP BE Pri
!#A N7583 N7584
!#4 N7585 P4816 BLD 5 -1 FP BE Pri
!#4 N7586 P4817 MEMBAR
!#4 N7587 P4818 DWST 6 0x2000162 Int LE Pri
!#4 N7588 P4818 DWST 7 0x2000163 Int LE Pri
!#A N7587 N7588
!#4 N7589 P4819 ST 21 0x418000d4 FP BE Pri
!#4 N7590 P4820 LD 6 -1 Int BE Pri
!#4 N7591 P4820 CAS 6 -1 N7590 0x2000164 Int BE Pri
!#4 N7592 P4821 LDD 17 -1 Int BE Pri
!#4 N7593 P4822 DWLD 8 -1 Int BE Pri
!#4 N7594 P4823 ST 8 0x2000165 Int BE Pri
!#4 N7595 P4824 LD 21 -1 Int BE Pri
!#4 N7596 P4825 LD 22 -1 Int BE Pri
!#4 N7597 P4825 CAS 22 -1 N7596 0x2000166 Int BE Pri
!#4 N7598 P4826 LDD 14 -1 Int BE Pri
!#4 N7599 P4827 DWST 15 0x2000167 Int BE Pri
!#4 N7600 P4827 DWST 16 0x2000168 Int BE Pri
!#A N7599 N7600
!#4 N7601 P4828 DWLD 15 -1 Int BE Pri
!#4 N7602 P4828 DWLD 16 -1 Int BE Pri
!#A N7601 N7602
!#4 N7603 P4829 DWST 14 0x2000169 Int BE Pri
!#4 N7604 P4830 DWST_BINIT 17 0x200016a Int LE Pri
!#4 N7605 P4831 MEMBAR
!#4 N7606 P4832 DWST_BINIT 9 0x200016b Int BE Pri
!#4 N7607 P4832 DWST_BINIT 10 0x200016c Int BE Pri
!#A N7606 N7607
!#4 N7608 P4833 MEMBAR
!#4 N7609 P4834 DWST 15 0x418000d5 FP BE Pri
!#4 N7610 P4834 DWST 16 0x418000d6 FP BE Pri
!#A N7609 N7610
!#4 N7611 P4835 DWST 20 0x200016d Int BE Pri
!#4 N7612 P4836 PREFETCH 20 Int BE Pri
!#4 N7613 P4837 REPLACEMENT 17 Int BE Pri
!#4 N7614 P4838 LD 5 -1 Int BE Pri
!#4 N7615 P4839 ST_BINIT 17 0x200016e Int BE Pri
!#4 N7616 P4840 MEMBAR
!#4 N7617 P4841 DWST 14 0x200016f Int BE Pri
!#4 N7618 P4842 ST 10 0x2000170 Int BE Pri
!#4 N7619 P4843 DWLD 18 -1 Int BE Pri
!#4 N7620 P4843 DWLD 19 -1 Int BE Pri
!#A N7619 N7620
!#4 N7621 P4844 ST 7 0x418000d7 FP BE Pri
!#4 N7622 P4845 DWLD 17 -1,0x0 Int BE Pri
!#4 N7623 P4845 CASX 17 -1,0x0 N7622 0x2000171 Int BE Pri
!#4 N7624 P4846 SWAP 2 0xffffffff 0x2000172 Int BE Pri
!#4 N7625 P4847 REPLACEMENT 9 Int BE Pri
!#4 N7626 P4848 DWST_BINIT 9 0x2000173 Int BE Pri
!#4 N7627 P4848 DWST_BINIT 10 0x2000174 Int BE Pri
!#A N7626 N7627
!#4 N7628 P4849 MEMBAR
!#4 N7629 P4850 DWST 20 0x2000175 Int BE Pri
!#4 N7630 P4851 ST 19 0x418000d8 FP BE Pri
!#4 N7631 P4852 DWST 3 0x2000176 Int BE Pri
!#4 N7632 P4852 DWST 4 0x2000177 Int BE Pri
!#A N7631 N7632
!#4 N7633 P4853 MEMBAR
!#4 N7634 P4854 BSTC 0 0x418000d9 FP BE Pri
!#4 N7635 P4854 BSTC 1 0x418000da FP BE Pri
!#A N7634 N7635
!#4 N7636 P4854 BSTC 2 0x418000db FP BE Pri
!#4 N7637 P4855 MEMBAR
!#4 N7638 P4856 DWLD 12 -1 Int BE Pri
!#4 N7639 P4856 DWLD 13 -1 Int BE Pri
!#A N7638 N7639
!#4 N7640 P4857 MEMBAR
!#4 N7641 P4858 BLD 3 -1 FP BE Pri
!#4 N7642 P4858 BLD 4 -1 FP BE Pri
!#A N7641 N7642
!#4 N7643 P4858 BLD 5 -1 FP BE Pri
!#4 N7644 P4859 MEMBAR
!#4 N7645 P4860 ST 17 0x2000178 Int BE Pri
!#4 N7646 P4861 LD 22 -1 Int BE Pri
!#4 N7647 P4861 CAS 22 -1 N7646 0x2000179 Int BE Pri
!#4 N7648 P4862 MEMBAR
!#4 N7649 P4863 BST 21 0x418000dc FP BE Pri
!#4 N7650 P4863 BST 22 0x418000dd FP BE Pri
!#A N7649 N7650
!#4 N7651 P4863 BST 23 0x418000de FP BE Pri
!#4 N7652 P4864 MEMBAR
!#4 N7653 P4865 SWAP 12 0xffffffff 0x200017a Int BE Pri
!#4 N7654 P4866 LD 4 -1 Int BE Pri
!#4 N7655 P4867 DWST_BINIT 15 0x200017b Int BE Pri
!#4 N7656 P4867 DWST_BINIT 16 0x200017c Int BE Pri
!#A N7655 N7656
!#4 N7657 P4868 MEMBAR
!#4 N7658 P4869 DWLD 2 -1,0x0 Int BE Pri
!#4 N7659 P4869 CASX 2 -1,0x0 N7658 0x200017d Int BE Pri
!#4 N7660 P4870 MEMBAR
!#4 N7661 P4871 BLD 12 -1 FP BE Pri
!#4 N7662 P4871 BLD 13 -1 FP BE Pri
!#A N7661 N7662
!#4 N7663 P4871 BLD 14 -1 FP BE Pri
!#4 N7664 P4872 MEMBAR
!#4 N7665 P4873 BLD 9 -1 FP BE Pri
!#4 N7666 P4873 BLD 10 -1 FP BE Pri
!#A N7665 N7666
!#4 N7667 P4873 BLD 11 -1 FP BE Pri
!#4 N7668 P4874 MEMBAR
!#4 N7669 P4875 PREFETCH 11 Int BE Pri
!#4 N7670 P4876 LDD 12 -1 Int BE Pri
!#4 N7671 P4876 LDD 13 -1 Int BE Pri
!#A N7670 N7671
!#4 N7672 P4877 MEMBAR
!#4 N7673 P4878 BST 6 0x418000df FP BE Pri
!#4 N7674 P4878 BST 7 0x418000e0 FP BE Pri
!#A N7673 N7674
!#4 N7675 P4878 BST 8 0x418000e1 FP BE Pri
!#4 N7676 P4879 MEMBAR
!#4 N7677 P4880 ST 14 0x200017e Int BE Pri
!#4 N7678 P4881 DWLD 5 -1,0x0 Int BE Pri
!#4 N7679 P4881 CASX 5 -1,0x0 N7678 0x200017f Int BE Pri
!#4 N7680 P4882 SWAP 16 0xffffffff 0x2000180 Int BE Pri
!#4 N7681 P4883 DWST_BINIT 6 0x2000181 Int LE Pri
!#4 N7682 P4883 DWST_BINIT 7 0x2000182 Int LE Pri
!#A N7681 N7682
!#4 N7683 P4884 MEMBAR
!#4 N7684 P4885 BSTC 6 0x418000e2 FP BE Pri
!#4 N7685 P4885 BSTC 7 0x418000e3 FP BE Pri
!#A N7684 N7685
!#4 N7686 P4885 BSTC 8 0x418000e4 FP BE Pri
!#4 N7687 P4886 MEMBAR
!#4 N7688 P4887 LD 17 -1 Int BE Pri
!#4 N7689 P4887 CAS 17 -1 N7688 0x2000183 Int BE Pri
!#4 N7690 P4888 ST_BINIT 22 0x2000184 Int BE Pri
!#4 N7691 P4889 MEMBAR
!#4 N7692 P4890 ST_BINIT 23 0x2000185 Int BE Pri
!#4 N7693 P4891 MEMBAR
!#4 N7694 P4892 BSTC 15 0x418000e5 FP BE Pri
!#4 N7695 P4892 BSTC 16 0x418000e6 FP BE Pri
!#A N7694 N7695
!#4 N7696 P4892 BSTC 17 0x418000e7 FP BE Pri
!#4 N7697 P4893 MEMBAR
!#4 N7698 P4894 SWAP 3 0xffffffff 0x2000186 Int BE Pri
!#4 N7699 P4895 MEMBAR
!#4 N7700 P4896 BST 21 0x418000e8 FP BE Pri
!#4 N7701 P4896 BST 22 0x418000e9 FP BE Pri
!#A N7700 N7701
!#4 N7702 P4896 BST 23 0x418000ea FP BE Pri
!#4 N7703 P4897 MEMBAR
!#4 N7704 P4898 DWLD 23 -1 Int BE Pri
!#4 N7705 P4899 MEMBAR
!#4 N7706 P4900 BST 12 0x418000eb FP BE Pri
!#4 N7707 P4900 BST 13 0x418000ec FP BE Pri
!#A N7706 N7707
!#4 N7708 P4900 BST 14 0x418000ed FP BE Pri
!#4 N7709 P4901 MEMBAR
!#4 N7710 P4902 DWLD 5 -1 Int BE Pri
!#4 N7711 P4903 SWAP 3 0xffffffff 0x2000187 Int BE Pri
!#4 N7712 P4904 MEMBAR
!#4 N7713 P4905 BST 3 0x418000ee FP BE Pri
!#4 N7714 P4905 BST 4 0x418000ef FP BE Pri
!#A N7713 N7714
!#4 N7715 P4905 BST 5 0x418000f0 FP BE Pri
!#4 N7716 P4906 MEMBAR
!#4 N7717 P4907 LD 17 -1 Int BE Pri
!#4 N7718 P4908 LD 4 -1 Int BE Pri
!#4 N7719 P4908 CAS 4 -1 N7718 0x2000188 Int BE Pri
!#4 N7720 P4909 DWST 21 0x2000189 Int BE Pri
!#4 N7721 P4909 DWST 22 0x200018a Int BE Pri
!#A N7720 N7721
!#4 N7722 P4910 MEMBAR
!#4 N7723 P4911 BST 15 0x418000f1 FP BE Pri
!#4 N7724 P4911 BST 16 0x418000f2 FP BE Pri
!#A N7723 N7724
!#4 N7725 P4911 BST 17 0x418000f3 FP BE Pri
!#4 N7726 P4912 MEMBAR
!#4 N7727 P4913 ST_BINIT 18 0x200018b Int BE Pri
!#4 N7728 P4914 MEMBAR
!#4 N7729 P4915 REPLACEMENT 10 Int BE Pri
!#4 N7730 P4916 DWLD 5 -1,0x0 Int BE Pri
!#4 N7731 P4916 CASX 5 -1,0x0 N7730 0x200018c Int BE Pri
!#4 N7732 P4917 ST 11 0x200018d Int BE Pri
!#4 N7733 P4918 PREFETCH 11 Int BE Pri
!#4 N7734 P4919 SWAP 7 0xffffffff 0x200018e Int BE Pri
!#4 N7735 P4920 DWST 21 0x200018f Int BE Pri
!#4 N7736 P4920 DWST 22 0x2000190 Int BE Pri
!#A N7735 N7736
!#4 N7737 P4921 LDD 0 -1 Int BE Pri
!#4 N7738 P4921 LDD 1 -1 Int BE Pri
!#A N7737 N7738
!#4 N7739 P4922 LDD 0 -1 Int BE Pri
!#4 N7740 P4922 LDD 1 -1 Int BE Pri
!#A N7739 N7740
!#4 N7741 P4923 ST 0 0x418000f4 FP BE Pri
!#4 N7742 P4924 LD 19 -1 Int BE Pri
!#4 N7743 P4925 SWAP 5 0xffffffff 0x2000191 Int BE Pri
!#4 N7744 P4926 ST 1 0x2000192 Int BE Pri
!#4 N7745 P4927 LD 10 -1 FP BE Pri
!#4 N7746 P4928 REPLACEMENT 7 Int BE Pri
!#4 N7747 P4929 PREFETCH 7 Int BE Pri
!#4 N7748 P4930 MEMBAR
!#4 N7749 P4931 BST 0 0x418000f5 FP BE Pri
!#4 N7750 P4931 BST 1 0x418000f6 FP BE Pri
!#A N7749 N7750
!#4 N7751 P4931 BST 2 0x418000f7 FP BE Pri
!#4 N7752 P4932 MEMBAR
!#4 N7753 P4933 ST 0 0x2000193 Int BE Pri
!#4 N7754 P4934 LD 18 -1 Int BE Pri
!#4 N7755 P4935 LDD 5 -1 Int BE Pri
!#4 N7756 P4936 ST_BINIT 6 0x2000194 Int LE Pri
!#4 N7757 P4937 MEMBAR
!#4 N7758 P4938 ST 20 0x2000195 Int BE Pri
!#4 N7759 P4939 PREFETCH 12 Int LE Pri
!#4 N7760 P4940 DWST 3 0x2000196 Int BE Pri
!#4 N7761 P4940 DWST 4 0x2000197 Int BE Pri
!#A N7760 N7761
!#4 N7762 P4941 DWLD 17 -1,0x0 Int BE Pri
!#4 N7763 P4941 CASX 17 -1,0x0 N7762 0x2000198 Int BE Pri
!#4 N7764 P4942 REPLACEMENT 9 Int BE Pri
!#4 N7765 P4943 LDD 21 -1 Int BE Pri
!#4 N7766 P4943 LDD 22 -1 Int BE Pri
!#A N7765 N7766
!#4 N7767 P4944 ST_BINIT 5 0x2000199 Int BE Pri
!#4 N7768 P4945 MEMBAR
!#4 N7769 P4946 BLD 9 -1 FP BE Pri
!#4 N7770 P4946 BLD 10 -1 FP BE Pri
!#A N7769 N7770
!#4 N7771 P4946 BLD 11 -1 FP BE Pri
!#4 N7772 P4947 MEMBAR
!#4 N7773 P4948 DWLD 21 -1 Int BE Pri
!#4 N7774 P4948 DWLD 22 -1 Int BE Pri
!#A N7773 N7774
!#4 N7775 P4949 SWAP 8 0xffffffff 0x200019a Int BE Pri
!#4 N7776 P4950 DWLD 15 -1 Int BE Pri
!#4 N7777 P4950 DWLD 16 -1 Int BE Pri
!#A N7776 N7777
!#4 N7778 P4951 LDD 6 -1 Int LE Pri
!#4 N7779 P4951 LDD 7 -1 Int LE Pri
!#A N7778 N7779
!#4 N7780 P4952 DWST_BINIT 12 0x200019b Int BE Pri
!#4 N7781 P4952 DWST_BINIT 13 0x200019c Int BE Pri
!#A N7780 N7781
!#4 N7782 P4953 MEMBAR
!#4 N7783 P4954 LDD 5 -1 Int BE Pri
!#4 N7784 P4955 DWST_BINIT 20 0x200019d Int BE Pri
!#4 N7785 P4956 MEMBAR
!#4 N7786 P4957 ST_BINIT 7 0x200019e Int BE Pri
!#4 N7787 P4958 MEMBAR
!#4 N7788 P4959 DWST 11 0x200019f Int BE Pri
!#4 N7789 P4960 SWAP 14 0xffffffff 0x20001a0 Int BE Pri
!#4 N7790 P4961 MEMBAR
!#4 N7791 P4962 BLD 9 -1 FP BE Pri
!#4 N7792 P4962 BLD 10 -1 FP BE Pri
!#A N7791 N7792
!#4 N7793 P4962 BLD 11 -1 FP BE Pri
!#4 N7794 P4963 MEMBAR
!#4 N7795 P4964 LD 2 -1 Int BE Pri
!#4 N7796 P4965 LD 0 -1 Int BE Pri
!#4 N7797 P4966 LDD 0 -1 Int BE Pri
!#4 N7798 P4966 LDD 1 -1 Int BE Pri
!#A N7797 N7798
!#4 N7799 P4967 MEMBAR
!#4 N7800 P4968 BSTC 9 0x418000f8 FP BE Pri
!#4 N7801 P4968 BSTC 10 0x418000f9 FP BE Pri
!#A N7800 N7801
!#4 N7802 P4968 BSTC 11 0x418000fa FP BE Pri
!#4 N7803 P4969 MEMBAR
!#4 N7804 P4970 BST 12 0x418000fb FP BE Pri
!#4 N7805 P4970 BST 13 0x418000fc FP BE Pri
!#A N7804 N7805
!#4 N7806 P4970 BST 14 0x418000fd FP BE Pri
!#4 N7807 P4971 MEMBAR
!#4 N7808 P4972 DWST_BINIT 0 0x20001a1 Int BE Pri
!#4 N7809 P4972 DWST_BINIT 1 0x20001a2 Int BE Pri
!#A N7808 N7809
!#4 N7810 P4973 MEMBAR
!#4 N7811 P4974 BSTC 3 0x418000fe FP BE Pri
!#4 N7812 P4974 BSTC 4 0x418000ff FP BE Pri
!#A N7811 N7812
!#4 N7813 P4974 BSTC 5 0x41800100 FP BE Pri
!#4 N7814 P4975 MEMBAR
!#4 N7815 P4976 BSTC 21 0x41800101 FP BE Pri
!#4 N7816 P4976 BSTC 22 0x41800102 FP BE Pri
!#A N7815 N7816
!#4 N7817 P4976 BSTC 23 0x41800103 FP BE Pri
!#4 N7818 P4977 MEMBAR
!#4 N7819 P4978 LD 12 -1 Int BE Pri
!#4 N7820 P4979 REPLACEMENT 18 Int BE Pri
!#4 N7821 P4980 ST 1 0x20001a3 Int BE Pri
!#4 N7822 P4981 MEMBAR
!#4 N7823 P4982 BLD 9 -1 FP BE Pri
!#4 N7824 P4982 BLD 10 -1 FP BE Pri
!#A N7823 N7824
!#4 N7825 P4982 BLD 11 -1 FP BE Pri
!#4 N7826 P4983 MEMBAR
!#4 N7827 P4984 PREFETCH 9 Int BE Pri
!#4 N7828 P4985 DWLD 6 -1 Int BE Pri
!#4 N7829 P4985 DWLD 7 -1 Int BE Pri
!#A N7828 N7829
!#4 N7830 P4985 CASX 6 -1 N7828 0x20001a4 Int BE Pri
!#4 N7831 P4985 CASX 7 -1 N7829 0x20001a5 Int BE Pri
!#A N7830 N7831
!#4 N7832 P4986 LD 10 -1 FP BE Pri
!#4 N7833 P4987 ST_BINIT 12 0x20001a6 Int BE Pri
!#4 N7834 P4988 MEMBAR
!#4 N7835 P4989 LD 14 -1 Int BE Pri
!#4 N7836 P4989 CAS 14 -1 N7835 0x20001a7 Int BE Pri
!#4 N7837 P4990 LDD 12 -1 Int BE Pri
!#4 N7838 P4990 LDD 13 -1 Int BE Pri
!#A N7837 N7838
!#4 N7839 P4991 SWAP 2 0xffffffff 0x20001a8 Int BE Pri
!#4 N7840 P4992 SWAP 8 0xffffffff 0x20001a9 Int BE Pri
!#4 N7841 P4993 LD 18 -1 Int BE Pri
!#4 N7842 P4993 CAS 18 -1 N7841 0x20001aa Int BE Pri
!#4 N7843 P4994 LD 3 -1 Int BE Pri
!#4 N7844 P4994 CAS 3 -1 N7843 0x20001ab Int BE Pri
!#4 N7845 P4995 ST_BINIT 2 0x20001ac Int BE Pri
!#4 N7846 P4996 MEMBAR
!#4 N7847 P4997 DWST_BINIT 0 0x20001ad Int BE Pri
!#4 N7848 P4997 DWST_BINIT 1 0x20001ae Int BE Pri
!#A N7847 N7848
!#4 N7849 P4998 MEMBAR
!#4 N7850 P4999 PREFETCH 17 Int BE Pri
!#4 N7851 P5000 LD 14 -1 Int BE Pri
!#4 N7852 P5000 CAS 14 -1 N7851 0x20001af Int BE Pri
!#4 N7853 P5001 MEMBAR
!#4 N7854 P5002 BLD 12 -1 FP BE Pri
!#4 N7855 P5002 BLD 13 -1 FP BE Pri
!#A N7854 N7855
!#4 N7856 P5002 BLD 14 -1 FP BE Pri
!#4 N7857 P5003 MEMBAR
!#4 N7858 P5004 LD 0 -1 Int BE Pri
!#4 N7859 P5005 MEMBAR
!#4 N7860 P5006 BLD 6 -1 FP BE Pri
!#4 N7861 P5006 BLD 7 -1 FP BE Pri
!#A N7860 N7861
!#4 N7862 P5006 BLD 8 -1 FP BE Pri
!#4 N7863 P5007 MEMBAR
!#4 N7864 P5008 DWST 0 0x20001b0 Int BE Pri
!#4 N7865 P5008 DWST 1 0x20001b1 Int BE Pri
!#A N7864 N7865
!#4 N7866 P5009 MEMBAR
!#4 N7867 P5010 BST 18 0x41800104 FP BE Pri
!#4 N7868 P5010 BST 19 0x41800105 FP BE Pri
!#A N7867 N7868
!#4 N7869 P5010 BST 20 0x41800106 FP BE Pri
!#4 N7870 P5011 MEMBAR
!#4 N7871 P5012 LD 3 -1 Int BE Pri Loop_exit
!#4 N7872 P5013 MEMBAR
!#5 N7873 P5014 ST 7 0x2800001 Int BE Pri Loop_entry
!#5 N7874 P5015 REPLACEMENT 5 Int BE Pri
!#5 N7875 P5016 SWAP 9 0xffffffff 0x2800002 Int BE Pri
!#5 N7876 P5017 DWLD 17 -1 Int BE Pri
!#5 N7877 P5018 MEMBAR
!#5 N7878 P5019 BST 6 0x42000001 FP BE Pri
!#5 N7879 P5019 BST 7 0x42000002 FP BE Pri
!#A N7878 N7879
!#5 N7880 P5019 BST 8 0x42000003 FP BE Pri
!#5 N7881 P5020 MEMBAR
!#5 N7882 P5021 SWAP 10 0xffffffff 0x2800003 Int BE Pri
!#5 N7883 P5022 REPLACEMENT 17 Int BE Pri
!#5 N7884 P5023 DWST 18 0x2800004 Int BE Pri
!#5 N7885 P5023 DWST 19 0x2800005 Int BE Pri
!#A N7884 N7885
!#5 N7886 P5024 DWST 9 0x2800006 Int BE Pri
!#5 N7887 P5024 DWST 10 0x2800007 Int BE Pri
!#A N7886 N7887
!#5 N7888 P5025 ST_BINIT 0 0x2800008 Int BE Pri
!#5 N7889 P5026 MEMBAR
!#5 N7890 P5027 LD 5 -1 Int BE Pri
!#5 N7891 P5027 CAS 5 -1 N7890 0x2800009 Int BE Pri
!#5 N7892 P5028 DWST 12 0x280000a Int BE Pri
!#5 N7893 P5028 DWST 13 0x280000b Int BE Pri
!#A N7892 N7893
!#5 N7894 P5029 DWST 2 0x280000c Int BE Pri
!#5 N7895 P5030 ST_BINIT 18 0x280000d Int BE Pri
!#5 N7896 P5031 MEMBAR
!#5 N7897 P5032 ST 9 0x280000e Int BE Pri
!#5 N7898 P5033 LDD 15 -1 Int BE Pri
!#5 N7899 P5033 LDD 16 -1 Int BE Pri
!#A N7898 N7899
!#5 N7900 P5034 ST 3 0x280000f Int BE Pri
!#5 N7901 P5035 ST 0 0x42000004 FP BE Pri
!#5 N7902 P5036 MEMBAR
!#5 N7903 P5037 BST 21 0x42000005 FP BE Pri
!#5 N7904 P5037 BST 22 0x42000006 FP BE Pri
!#A N7903 N7904
!#5 N7905 P5037 BST 23 0x42000007 FP BE Pri
!#5 N7906 P5038 MEMBAR
!#5 N7907 P5039 LDD 15 -1 Int LE Pri
!#5 N7908 P5039 LDD 16 -1 Int LE Pri
!#A N7907 N7908
!#5 N7909 P5040 DWST 9 0x2800010 Int BE Pri
!#5 N7910 P5040 DWST 10 0x2800011 Int BE Pri
!#A N7909 N7910
!#5 N7911 P5041 SWAP 7 0xffffffff 0x2800012 Int BE Pri
!#5 N7912 P5042 LD 6 -1 Int BE Pri
!#5 N7913 P5043 DWLD 3 -1 Int BE Pri
!#5 N7914 P5043 DWLD 4 -1 Int BE Pri
!#A N7913 N7914
!#5 N7915 P5044 MEMBAR
!#5 N7916 P5045 BLD 15 -1 FP BE Pri
!#5 N7917 P5045 BLD 16 -1 FP BE Pri
!#A N7916 N7917
!#5 N7918 P5045 BLD 17 -1 FP BE Pri
!#5 N7919 P5046 MEMBAR
!#5 N7920 P5047 REPLACEMENT 17 Int BE Pri
!#5 N7921 P5048 LD 17 -1 Int BE Pri
!#5 N7922 P5049 MEMBAR
!#5 N7923 P5050 BLD 12 -1 FP BE Pri
!#5 N7924 P5050 BLD 13 -1 FP BE Pri
!#A N7923 N7924
!#5 N7925 P5050 BLD 14 -1 FP BE Pri
!#5 N7926 P5051 MEMBAR
!#5 N7927 P5052 PREFETCH 7 Int BE Pri
!#5 N7928 P5053 LD 5 -1 Int BE Pri
!#5 N7929 P5054 ST_BINIT 1 0x2800013 Int BE Pri
!#5 N7930 P5055 MEMBAR
!#5 N7931 P5056 DWST_BINIT 17 0x2800014 Int BE Pri
!#5 N7932 P5057 MEMBAR
!#5 N7933 P5058 DWST 2 0x2800015 Int BE Pri
!#5 N7934 P5059 LD 18 -1 Int BE Pri
!#5 N7935 P5059 CAS 18 -1 N7934 0x2800016 Int BE Pri
!#5 N7936 P5060 DWLD 15 -1 Int BE Pri
!#5 N7937 P5060 DWLD 16 -1 Int BE Pri
!#A N7936 N7937
!#5 N7938 P5060 CASX 15 -1 N7936 0x2800017 Int BE Pri
!#5 N7939 P5060 CASX 16 -1 N7937 0x2800018 Int BE Pri
!#A N7938 N7939
!#5 N7940 P5061 PREFETCH 2 Int BE Pri
!#5 N7941 P5062 DWST_BINIT 0 0x2800019 Int BE Pri
!#5 N7942 P5062 DWST_BINIT 1 0x280001a Int BE Pri
!#A N7941 N7942
!#5 N7943 P5063 MEMBAR
!#5 N7944 P5064 BLD 3 -1 FP BE Pri
!#5 N7945 P5064 BLD 4 -1 FP BE Pri
!#A N7944 N7945
!#5 N7946 P5064 BLD 5 -1 FP BE Pri
!#5 N7947 P5065 MEMBAR
!#5 N7948 P5066 LD 18 -1 Int BE Pri
!#5 N7949 P5067 LDD 21 -1 Int BE Pri
!#5 N7950 P5067 LDD 22 -1 Int BE Pri
!#A N7949 N7950
!#5 N7951 P5068 DWST_BINIT 2 0x280001b Int BE Pri
!#5 N7952 P5069 MEMBAR
!#5 N7953 P5070 LDD 6 -1 Int BE Pri
!#5 N7954 P5070 LDD 7 -1 Int BE Pri
!#A N7953 N7954
!#5 N7955 P5071 ST_BINIT 15 0x280001c Int LE Pri
!#5 N7956 P5072 MEMBAR
!#5 N7957 P5073 LDD 3 -1 Int BE Pri
!#5 N7958 P5073 LDD 4 -1 Int BE Pri
!#A N7957 N7958
!#5 N7959 P5074 ST 15 0x280001d Int BE Pri
!#5 N7960 P5075 MEMBAR
!#5 N7961 P5076 BLD 9 -1 FP BE Pri
!#5 N7962 P5076 BLD 10 -1 FP BE Pri
!#A N7961 N7962
!#5 N7963 P5076 BLD 11 -1 FP BE Pri
!#5 N7964 P5077 MEMBAR
!#5 N7965 P5078 DWLD 14 -1 Int BE Pri
!#5 N7966 P5079 MEMBAR
!#5 N7967 P5080 BST 6 0x42000008 FP BE Pri
!#5 N7968 P5080 BST 7 0x42000009 FP BE Pri
!#A N7967 N7968
!#5 N7969 P5080 BST 8 0x4200000a FP BE Pri
!#5 N7970 P5081 MEMBAR
!#5 N7971 P5082 SWAP 23 0xffffffff 0x280001e Int BE Pri
!#5 N7972 P5083 LD 13 -1 Int BE Pri
!#5 N7973 P5083 CAS 13 -1 N7972 0x280001f Int BE Pri
!#5 N7974 P5084 LD 22 -1 Int BE Pri
!#5 N7975 P5084 CAS 22 -1 N7974 0x2800020 Int BE Pri
!#5 N7976 P5085 DWST_BINIT 9 0x2800021 Int LE Pri
!#5 N7977 P5085 DWST_BINIT 10 0x2800022 Int LE Pri
!#A N7976 N7977
!#5 N7978 P5086 MEMBAR
!#5 N7979 P5087 LDD 6 -1 Int BE Pri
!#5 N7980 P5087 LDD 7 -1 Int BE Pri
!#A N7979 N7980
!#5 N7981 P5088 ST 10 0x2800023 Int BE Pri
!#5 N7982 P5089 DWLD 23 -1 Int BE Pri
!#5 N7983 P5090 MEMBAR
!#5 N7984 P5091 BSTC 21 0x4200000b FP BE Pri
!#5 N7985 P5091 BSTC 22 0x4200000c FP BE Pri
!#A N7984 N7985
!#5 N7986 P5091 BSTC 23 0x4200000d FP BE Pri
!#5 N7987 P5092 MEMBAR
!#5 N7988 P5093 DWLD 9 -1 Int BE Pri
!#5 N7989 P5093 DWLD 10 -1 Int BE Pri
!#A N7988 N7989
!#5 N7990 P5093 CASX 9 -1 N7988 0x2800024 Int BE Pri
!#5 N7991 P5093 CASX 10 -1 N7989 0x2800025 Int BE Pri
!#A N7990 N7991
!#5 N7992 P5094 MEMBAR
!#5 N7993 P5095 BST 3 0x4200000e FP BE Pri
!#5 N7994 P5095 BST 4 0x4200000f FP BE Pri
!#A N7993 N7994
!#5 N7995 P5095 BST 5 0x42000010 FP BE Pri
!#5 N7996 P5096 MEMBAR
!#5 N7997 P5097 ST 9 0x2800026 Int BE Pri
!#5 N7998 P5098 REPLACEMENT 17 Int BE Pri
!#5 N7999 P5099 ST 13 0x2800027 Int BE Pri
!#5 N8000 P5100 DWST_BINIT 9 0x2800028 Int BE Pri
!#5 N8001 P5100 DWST_BINIT 10 0x2800029 Int BE Pri
!#A N8000 N8001
!#5 N8002 P5101 MEMBAR
!#5 N8003 P5102 BSTC 9 0x42000011 FP BE Pri
!#5 N8004 P5102 BSTC 10 0x42000012 FP BE Pri
!#A N8003 N8004
!#5 N8005 P5102 BSTC 11 0x42000013 FP BE Pri
!#5 N8006 P5103 MEMBAR
!#5 N8007 P5104 BST 0 0x42000014 FP BE Pri
!#5 N8008 P5104 BST 1 0x42000015 FP BE Pri
!#A N8007 N8008
!#5 N8009 P5104 BST 2 0x42000016 FP BE Pri
!#5 N8010 P5105 MEMBAR
!#5 N8011 P5106 PREFETCH 5 Int BE Pri
!#5 N8012 P5107 MEMBAR
!#5 N8013 P5108 BSTC 15 0x42000017 FP BE Pri
!#5 N8014 P5108 BSTC 16 0x42000018 FP BE Pri
!#A N8013 N8014
!#5 N8015 P5108 BSTC 17 0x42000019 FP BE Pri
!#5 N8016 P5109 MEMBAR
!#5 N8017 P5110 BSTC 21 0x4200001a FP BE Pri
!#5 N8018 P5110 BSTC 22 0x4200001b FP BE Pri
!#A N8017 N8018
!#5 N8019 P5110 BSTC 23 0x4200001c FP BE Pri
!#5 N8020 P5111 MEMBAR
!#5 N8021 P5112 LDD 3 -1 Int BE Pri
!#5 N8022 P5112 LDD 4 -1 Int BE Pri
!#A N8021 N8022
!#5 N8023 P5113 DWLD 18 -1 Int BE Pri
!#5 N8024 P5113 DWLD 19 -1 Int BE Pri
!#A N8023 N8024
!#5 N8025 P5114 DWST_BINIT 18 0x280002a Int BE Pri
!#5 N8026 P5114 DWST_BINIT 19 0x280002b Int BE Pri
!#A N8025 N8026
!#5 N8027 P5115 MEMBAR
!#5 N8028 P5116 ST 11 0x280002c Int BE Pri
!#5 N8029 P5117 LD 12 -1 Int BE Pri
!#5 N8030 P5118 LD 14 -1 Int BE Pri
!#5 N8031 P5119 MEMBAR
!#5 N8032 P5120 BSTC 12 0x4200001d FP BE Pri
!#5 N8033 P5120 BSTC 13 0x4200001e FP BE Pri
!#A N8032 N8033
!#5 N8034 P5120 BSTC 14 0x4200001f FP BE Pri
!#5 N8035 P5121 MEMBAR
!#5 N8036 P5122 DWST_BINIT 17 0x280002d Int BE Pri
!#5 N8037 P5123 MEMBAR
!#5 N8038 P5124 BLD 3 -1 FP BE Pri
!#5 N8039 P5124 BLD 4 -1 FP BE Pri
!#A N8038 N8039
!#5 N8040 P5124 BLD 5 -1 FP BE Pri
!#5 N8041 P5125 MEMBAR
!#5 N8042 P5126 BSTC 6 0x42000020 FP BE Pri
!#5 N8043 P5126 BSTC 7 0x42000021 FP BE Pri
!#A N8042 N8043
!#5 N8044 P5126 BSTC 8 0x42000022 FP BE Pri
!#5 N8045 P5127 MEMBAR
!#5 N8046 P5128 LD 0 -1 Int BE Pri
!#5 N8047 P5129 ST_BINIT 21 0x280002e Int BE Pri
!#5 N8048 P5130 MEMBAR
!#5 N8049 P5131 BST 21 0x42000023 FP BE Pri
!#5 N8050 P5131 BST 22 0x42000024 FP BE Pri
!#A N8049 N8050
!#5 N8051 P5131 BST 23 0x42000025 FP BE Pri
!#5 N8052 P5132 MEMBAR
!#5 N8053 P5133 DWST_BINIT 5 0x280002f Int BE Pri
!#5 N8054 P5134 MEMBAR
!#5 N8055 P5135 DWST 0 0x2800030 Int BE Pri
!#5 N8056 P5135 DWST 1 0x2800031 Int BE Pri
!#A N8055 N8056
!#5 N8057 P5136 LD 19 -1 FP BE Pri
!#5 N8058 P5137 LD 5 -1 Int BE Pri
!#5 N8059 P5138 LDD 17 -1 Int BE Pri
!#5 N8060 P5139 ST_BINIT 21 0x2800032 Int BE Pri
!#5 N8061 P5140 MEMBAR
!#5 N8062 P5141 DWST 11 0x2800033 Int LE Pri
!#5 N8063 P5142 ST 10 0x2800034 Int BE Pri
!#5 N8064 P5143 PREFETCH 17 Int BE Pri
!#5 N8065 P5144 DWLD 21 -1 Int BE Pri
!#5 N8066 P5144 DWLD 22 -1 Int BE Pri
!#A N8065 N8066
!#5 N8067 P5145 ST 11 0x2800035 Int BE Pri
!#5 N8068 P5146 ST_BINIT 10 0x2800036 Int BE Pri
!#5 N8069 P5147 MEMBAR
!#5 N8070 P5148 BSTC 18 0x42000026 FP BE Pri
!#5 N8071 P5148 BSTC 19 0x42000027 FP BE Pri
!#A N8070 N8071
!#5 N8072 P5148 BSTC 20 0x42000028 FP BE Pri
!#5 N8073 P5149 MEMBAR
!#5 N8074 P5150 SWAP 7 0xffffffff 0x2800037 Int BE Pri
!#5 N8075 P5151 REPLACEMENT 22 Int BE Pri
!#5 N8076 P5152 DWLD 6 -1 Int BE Pri
!#5 N8077 P5152 DWLD 7 -1 Int BE Pri
!#A N8076 N8077
!#5 N8078 P5153 MEMBAR
!#5 N8079 P5154 BSTC 0 0x42000029 FP BE Pri
!#5 N8080 P5154 BSTC 1 0x4200002a FP BE Pri
!#A N8079 N8080
!#5 N8081 P5154 BSTC 2 0x4200002b FP BE Pri
!#5 N8082 P5155 MEMBAR
!#5 N8083 P5156 LD 2 -1 Int BE Pri
!#5 N8084 P5157 DWLD 6 -1 Int BE Pri
!#5 N8085 P5157 DWLD 7 -1 Int BE Pri
!#A N8084 N8085
!#5 N8086 P5157 CASX 6 -1 N8084 0x2800038 Int BE Pri
!#5 N8087 P5157 CASX 7 -1 N8085 0x2800039 Int BE Pri
!#A N8086 N8087
!#5 N8088 P5158 DWST_BINIT 9 0x280003a Int BE Pri
!#5 N8089 P5158 DWST_BINIT 10 0x280003b Int BE Pri
!#A N8088 N8089
!#5 N8090 P5159 MEMBAR
!#5 N8091 P5160 DWLD 6 -1 Int BE Pri
!#5 N8092 P5160 DWLD 7 -1 Int BE Pri
!#A N8091 N8092
!#5 N8093 P5161 MEMBAR
!#5 N8094 P5162 BSTC 15 0x4200002c FP BE Pri
!#5 N8095 P5162 BSTC 16 0x4200002d FP BE Pri
!#A N8094 N8095
!#5 N8096 P5162 BSTC 17 0x4200002e FP BE Pri
!#5 N8097 P5163 MEMBAR
!#5 N8098 P5164 LD 4 -1 Int BE Pri
!#5 N8099 P5165 PREFETCH 19 Int BE Pri
!#5 N8100 P5166 LDD 6 -1 Int BE Pri
!#5 N8101 P5166 LDD 7 -1 Int BE Pri
!#A N8100 N8101
!#5 N8102 P5167 REPLACEMENT 0 Int BE Pri
!#5 N8103 P5168 PREFETCH 7 Int BE Pri
!#5 N8104 P5169 DWLD 14 -1,0x0 Int BE Pri
!#5 N8105 P5169 CASX 14 -1,0x0 N8104 0x280003c Int BE Pri
!#5 N8106 P5170 DWST_BINIT 6 0x280003d Int BE Pri
!#5 N8107 P5170 DWST_BINIT 7 0x280003e Int BE Pri
!#A N8106 N8107
!#5 N8108 P5171 MEMBAR
!#5 N8109 P5172 DWST 17 0x280003f Int BE Pri
!#5 N8110 P5173 DWLD 3 -1 Int BE Pri
!#5 N8111 P5173 DWLD 4 -1 Int BE Pri
!#A N8110 N8111
!#5 N8112 P5173 CASX 3 -1 N8110 0x2800040 Int BE Pri
!#5 N8113 P5173 CASX 4 -1 N8111 0x2800041 Int BE Pri
!#A N8112 N8113
!#5 N8114 P5174 DWST_BINIT 9 0x2800042 Int BE Pri
!#5 N8115 P5174 DWST_BINIT 10 0x2800043 Int BE Pri
!#A N8114 N8115
!#5 N8116 P5175 MEMBAR
!#5 N8117 P5176 ST_BINIT 22 0x2800044 Int BE Pri
!#5 N8118 P5177 MEMBAR
!#5 N8119 P5178 ST 4 0x2800045 Int BE Pri
!#5 N8120 P5179 MEMBAR
!#5 N8121 P5180 BST 9 0x4200002f FP BE Pri
!#5 N8122 P5180 BST 10 0x42000030 FP BE Pri
!#A N8121 N8122
!#5 N8123 P5180 BST 11 0x42000031 FP BE Pri
!#5 N8124 P5181 MEMBAR
!#5 N8125 P5182 DWST_BINIT 21 0x2800046 Int BE Pri
!#5 N8126 P5182 DWST_BINIT 22 0x2800047 Int BE Pri
!#A N8125 N8126
!#5 N8127 P5183 MEMBAR
!#5 N8128 P5184 DWST_BINIT 12 0x2800048 Int BE Pri
!#5 N8129 P5184 DWST_BINIT 13 0x2800049 Int BE Pri
!#A N8128 N8129
!#5 N8130 P5185 MEMBAR
!#5 N8131 P5186 DWLD 21 -1 Int BE Pri
!#5 N8132 P5186 DWLD 22 -1 Int BE Pri
!#A N8131 N8132
!#5 N8133 P5186 CASX 21 -1 N8131 0x280004a Int BE Pri
!#5 N8134 P5186 CASX 22 -1 N8132 0x280004b Int BE Pri
!#A N8133 N8134
!#5 N8135 P5187 DWST 9 0x280004c Int BE Pri
!#5 N8136 P5187 DWST 10 0x280004d Int BE Pri
!#A N8135 N8136
!#5 N8137 P5188 LD 2 -1 Int BE Pri
!#5 N8138 P5189 ST_BINIT 18 0x280004e Int BE Pri
!#5 N8139 P5190 MEMBAR
!#5 N8140 P5191 DWLD 6 -1 Int BE Pri
!#5 N8141 P5191 DWLD 7 -1 Int BE Pri
!#A N8140 N8141
!#5 N8142 P5192 PREFETCH 3 Int BE Pri
!#5 N8143 P5193 PREFETCH 11 Int BE Pri
!#5 N8144 P5194 DWST 12 0x280004f Int BE Pri
!#5 N8145 P5194 DWST 13 0x2800050 Int BE Pri
!#A N8144 N8145
!#5 N8146 P5195 DWST_BINIT 0 0x2800051 Int BE Pri
!#5 N8147 P5195 DWST_BINIT 1 0x2800052 Int BE Pri
!#A N8146 N8147
!#5 N8148 P5196 MEMBAR
!#5 N8149 P5197 PREFETCH 4 Int BE Pri
!#5 N8150 P5198 DWLD 15 -1 Int BE Pri
!#5 N8151 P5198 DWLD 16 -1 Int BE Pri
!#A N8150 N8151
!#5 N8152 P5198 CASX 15 -1 N8150 0x2800053 Int BE Pri
!#5 N8153 P5198 CASX 16 -1 N8151 0x2800054 Int BE Pri
!#A N8152 N8153
!#5 N8154 P5199 MEMBAR
!#5 N8155 P5200 BSTC 15 0x42000032 FP BE Pri
!#5 N8156 P5200 BSTC 16 0x42000033 FP BE Pri
!#A N8155 N8156
!#5 N8157 P5200 BSTC 17 0x42000034 FP BE Pri
!#5 N8158 P5201 MEMBAR
!#5 N8159 P5202 BLD 6 -1 FP BE Pri
!#5 N8160 P5202 BLD 7 -1 FP BE Pri
!#A N8159 N8160
!#5 N8161 P5202 BLD 8 -1 FP BE Pri
!#5 N8162 P5203 MEMBAR
!#5 N8163 P5204 DWLD 18 -1 FP BE Pri
!#5 N8164 P5204 DWLD 19 -1 FP BE Pri
!#A N8163 N8164
!#5 N8165 P5205 DWLD 12 -1 Int BE Pri
!#5 N8166 P5205 DWLD 13 -1 Int BE Pri
!#A N8165 N8166
!#5 N8167 P5206 ST_BINIT 12 0x2800055 Int BE Pri
!#5 N8168 P5207 MEMBAR
!#5 N8169 P5208 LD 3 -1 Int BE Pri
!#5 N8170 P5208 CAS 3 -1 N8169 0x2800056 Int BE Pri
!#5 N8171 P5209 PREFETCH 7 Int BE Pri
!#5 N8172 P5210 SWAP 8 0xffffffff 0x2800057 Int BE Pri
!#5 N8173 P5211 DWLD 15 -1 Int BE Pri
!#5 N8174 P5211 DWLD 16 -1 Int BE Pri
!#A N8173 N8174
!#5 N8175 P5211 CASX 15 -1 N8173 0x2800058 Int BE Pri
!#5 N8176 P5211 CASX 16 -1 N8174 0x2800059 Int BE Pri
!#A N8175 N8176
!#5 N8177 P5212 MEMBAR
!#5 N8178 P5213 BST 0 0x42000035 FP BE Pri
!#5 N8179 P5213 BST 1 0x42000036 FP BE Pri
!#A N8178 N8179
!#5 N8180 P5213 BST 2 0x42000037 FP BE Pri
!#5 N8181 P5214 MEMBAR
!#5 N8182 P5215 LD 1 -1 Int BE Pri
!#5 N8183 P5216 PREFETCH 2 Int BE Pri
!#5 N8184 P5217 DWLD 18 -1 Int BE Pri
!#5 N8185 P5217 DWLD 19 -1 Int BE Pri
!#A N8184 N8185
!#5 N8186 P5218 REPLACEMENT 2 Int BE Pri
!#5 N8187 P5219 PREFETCH 13 Int BE Pri
!#5 N8188 P5220 ST_BINIT 14 0x280005a Int LE Pri
!#5 N8189 P5221 MEMBAR
!#5 N8190 P5222 ST 3 0x280005b Int BE Pri
!#5 N8191 P5223 ST_BINIT 3 0x280005c Int BE Pri
!#5 N8192 P5224 MEMBAR
!#5 N8193 P5225 BST 12 0x42000038 FP BE Pri
!#5 N8194 P5225 BST 13 0x42000039 FP BE Pri
!#A N8193 N8194
!#5 N8195 P5225 BST 14 0x4200003a FP BE Pri
!#5 N8196 P5226 MEMBAR
!#5 N8197 P5227 LD 10 -1 Int BE Pri
!#5 N8198 P5227 CAS 10 -1 N8197 0x280005d Int BE Pri
!#5 N8199 P5228 DWST 8 0x280005e Int BE Pri
!#5 N8200 P5229 MEMBAR
!#5 N8201 P5230 BLD 9 -1 FP BE Pri
!#5 N8202 P5230 BLD 10 -1 FP BE Pri
!#A N8201 N8202
!#5 N8203 P5230 BLD 11 -1 FP BE Pri
!#5 N8204 P5231 MEMBAR
!#5 N8205 P5232 ST 2 0x280005f Int BE Pri
!#5 N8206 P5233 REPLACEMENT 15 Int BE Pri
!#5 N8207 P5234 MEMBAR
!#5 N8208 P5235 BLD 9 -1 FP BE Pri
!#5 N8209 P5235 BLD 10 -1 FP BE Pri
!#A N8208 N8209
!#5 N8210 P5235 BLD 11 -1 FP BE Pri
!#5 N8211 P5236 MEMBAR
!#5 N8212 P5237 PREFETCH 6 Int BE Pri
!#5 N8213 P5238 DWST 20 0x4200003b FP BE Pri
!#5 N8214 P5239 SWAP 9 0xffffffff 0x2800060 Int BE Pri
!#5 N8215 P5240 MEMBAR
!#5 N8216 P5241 BSTC 9 0x4200003c FP BE Pri
!#5 N8217 P5241 BSTC 10 0x4200003d FP BE Pri
!#A N8216 N8217
!#5 N8218 P5241 BSTC 11 0x4200003e FP BE Pri
!#5 N8219 P5242 MEMBAR
!#5 N8220 P5243 DWST 18 0x2800061 Int BE Pri
!#5 N8221 P5243 DWST 19 0x2800062 Int BE Pri
!#A N8220 N8221
!#5 N8222 P5244 ST 20 0x2800063 Int BE Pri
!#5 N8223 P5245 ST 18 0x2800064 Int BE Pri
!#5 N8224 P5246 LD 11 -1 Int BE Pri
!#5 N8225 P5247 PREFETCH 16 Int BE Pri
!#5 N8226 P5248 DWST_BINIT 8 0x2800065 Int BE Pri
!#5 N8227 P5249 MEMBAR
!#5 N8228 P5250 BSTC 9 0x4200003f FP BE Pri
!#5 N8229 P5250 BSTC 10 0x42000040 FP BE Pri
!#A N8228 N8229
!#5 N8230 P5250 BSTC 11 0x42000041 FP BE Pri
!#5 N8231 P5251 MEMBAR
!#5 N8232 P5252 DWST 21 0x42000042 FP BE Pri
!#5 N8233 P5252 DWST 22 0x42000043 FP BE Pri
!#A N8232 N8233
!#5 N8234 P5253 MEMBAR
!#5 N8235 P5254 BLD 3 -1 FP BE Pri
!#5 N8236 P5254 BLD 4 -1 FP BE Pri
!#A N8235 N8236
!#5 N8237 P5254 BLD 5 -1 FP BE Pri
!#5 N8238 P5255 MEMBAR
!#5 N8239 P5256 PREFETCH 14 Int BE Pri
!#5 N8240 P5257 MEMBAR
!#5 N8241 P5258 BLD 0 -1 FP BE Pri
!#5 N8242 P5258 BLD 1 -1 FP BE Pri
!#A N8241 N8242
!#5 N8243 P5258 BLD 2 -1 FP BE Pri
!#5 N8244 P5259 MEMBAR
!#5 N8245 P5260 SWAP 3 0xffffffff 0x2800066 Int BE Pri
!#5 N8246 P5261 DWST_BINIT 17 0x2800067 Int BE Pri
!#5 N8247 P5262 MEMBAR
!#5 N8248 P5263 BST 12 0x42000044 FP BE Pri
!#5 N8249 P5263 BST 13 0x42000045 FP BE Pri
!#A N8248 N8249
!#5 N8250 P5263 BST 14 0x42000046 FP BE Pri
!#5 N8251 P5264 MEMBAR
!#5 N8252 P5265 BST 9 0x42000047 FP BE Pri
!#5 N8253 P5265 BST 10 0x42000048 FP BE Pri
!#A N8252 N8253
!#5 N8254 P5265 BST 11 0x42000049 FP BE Pri
!#5 N8255 P5266 MEMBAR
!#5 N8256 P5267 LD 14 -1 Int BE Pri
!#5 N8257 P5267 CAS 14 -1 N8256 0x2800068 Int BE Pri
!#5 N8258 P5268 ST 21 0x2800069 Int BE Pri
!#5 N8259 P5269 MEMBAR
!#5 N8260 P5270 BSTC 9 0x4200004a FP BE Pri
!#5 N8261 P5270 BSTC 10 0x4200004b FP BE Pri
!#A N8260 N8261
!#5 N8262 P5270 BSTC 11 0x4200004c FP BE Pri
!#5 N8263 P5271 MEMBAR
!#5 N8264 P5272 REPLACEMENT 1 Int BE Pri
!#5 N8265 P5273 DWLD 12 -1 Int BE Pri
!#5 N8266 P5273 DWLD 13 -1 Int BE Pri
!#A N8265 N8266
!#5 N8267 P5274 PREFETCH 17 Int BE Pri
!#5 N8268 P5275 MEMBAR
!#5 N8269 P5276 BLD 9 -1 FP BE Pri
!#5 N8270 P5276 BLD 10 -1 FP BE Pri
!#A N8269 N8270
!#5 N8271 P5276 BLD 11 -1 FP BE Pri
!#5 N8272 P5277 MEMBAR
!#5 N8273 P5278 LD 8 -1 Int BE Pri
!#5 N8274 P5278 CAS 8 -1 N8273 0x280006a Int BE Pri
!#5 N8275 P5279 DWLD 15 -1 Int BE Pri
!#5 N8276 P5279 DWLD 16 -1 Int BE Pri
!#A N8275 N8276
!#5 N8277 P5280 DWST_BINIT 11 0x280006b Int BE Pri
!#5 N8278 P5281 MEMBAR
!#5 N8279 P5282 DWST 15 0x280006c Int BE Pri
!#5 N8280 P5282 DWST 16 0x280006d Int BE Pri
!#A N8279 N8280
!#5 N8281 P5283 PREFETCH 6 Int BE Pri
!#5 N8282 P5284 ST 4 0x280006e Int BE Pri
!#5 N8283 P5285 SWAP 7 0xffffffff 0x280006f Int BE Pri
!#5 N8284 P5286 LD 11 -1 Int BE Pri
!#5 N8285 P5287 DWLD 6 -1 Int BE Pri
!#5 N8286 P5287 DWLD 7 -1 Int BE Pri
!#A N8285 N8286
!#5 N8287 P5287 CASX 6 -1 N8285 0x2800070 Int BE Pri
!#5 N8288 P5287 CASX 7 -1 N8286 0x2800071 Int BE Pri
!#A N8287 N8288
!#5 N8289 P5288 MEMBAR
!#5 N8290 P5289 BSTC 9 0x4200004d FP BE Pri
!#5 N8291 P5289 BSTC 10 0x4200004e FP BE Pri
!#A N8290 N8291
!#5 N8292 P5289 BSTC 11 0x4200004f FP BE Pri
!#5 N8293 P5290 MEMBAR
!#5 N8294 P5291 BSTC 6 0x42000050 FP BE Pri
!#5 N8295 P5291 BSTC 7 0x42000051 FP BE Pri
!#A N8294 N8295
!#5 N8296 P5291 BSTC 8 0x42000052 FP BE Pri
!#5 N8297 P5292 MEMBAR
!#5 N8298 P5293 BST 18 0x42000053 FP BE Pri
!#5 N8299 P5293 BST 19 0x42000054 FP BE Pri
!#A N8298 N8299
!#5 N8300 P5293 BST 20 0x42000055 FP BE Pri
!#5 N8301 P5294 MEMBAR
!#5 N8302 P5295 ST 1 0x2800072 Int BE Pri
!#5 N8303 P5296 SWAP 17 0xffffffff 0x2800073 Int BE Pri
!#5 N8304 P5297 MEMBAR
!#5 N8305 P5298 BSTC 21 0x42000056 FP BE Pri
!#5 N8306 P5298 BSTC 22 0x42000057 FP BE Pri
!#A N8305 N8306
!#5 N8307 P5298 BSTC 23 0x42000058 FP BE Pri
!#5 N8308 P5299 MEMBAR
!#5 N8309 P5300 SWAP 22 0xffffffff 0x2800074 Int BE Pri
!#5 N8310 P5301 DWST 14 0x2800075 Int BE Pri
!#5 N8311 P5302 MEMBAR
!#5 N8312 P5303 BST 15 0x42000059 FP BE Pri
!#5 N8313 P5303 BST 16 0x4200005a FP BE Pri
!#A N8312 N8313
!#5 N8314 P5303 BST 17 0x4200005b FP BE Pri
!#5 N8315 P5304 MEMBAR
!#5 N8316 P5305 BLD 9 -1 FP BE Pri
!#5 N8317 P5305 BLD 10 -1 FP BE Pri
!#A N8316 N8317
!#5 N8318 P5305 BLD 11 -1 FP BE Pri
!#5 N8319 P5306 MEMBAR
!#5 N8320 P5307 DWLD 12 -1 Int BE Pri
!#5 N8321 P5307 DWLD 13 -1 Int BE Pri
!#A N8320 N8321
!#5 N8322 P5308 LDD 15 -1 Int BE Pri
!#5 N8323 P5308 LDD 16 -1 Int BE Pri
!#A N8322 N8323
!#5 N8324 P5309 DWST_BINIT 23 0x2800076 Int BE Pri
!#5 N8325 P5310 MEMBAR
!#5 N8326 P5311 BSTC 3 0x4200005c FP BE Pri
!#5 N8327 P5311 BSTC 4 0x4200005d FP BE Pri
!#A N8326 N8327
!#5 N8328 P5311 BSTC 5 0x4200005e FP BE Pri
!#5 N8329 P5312 MEMBAR
!#5 N8330 P5313 DWST 11 0x2800077 Int BE Pri
!#5 N8331 P5314 SWAP 19 0xffffffff 0x2800078 Int BE Pri
!#5 N8332 P5315 LDD 18 -1 Int BE Pri
!#5 N8333 P5315 LDD 19 -1 Int BE Pri
!#A N8332 N8333
!#5 N8334 P5316 LD 1 -1 Int BE Pri
!#5 N8335 P5316 CAS 1 -1 N8334 0x2800079 Int BE Pri
!#5 N8336 P5317 DWST_BINIT 9 0x280007a Int BE Pri
!#5 N8337 P5317 DWST_BINIT 10 0x280007b Int BE Pri
!#A N8336 N8337
!#5 N8338 P5318 MEMBAR
!#5 N8339 P5319 DWLD 23 -1 Int BE Pri
!#5 N8340 P5320 ST 7 0x280007c Int BE Pri
!#5 N8341 P5321 DWLD 20 -1 Int BE Pri
!#5 N8342 P5322 LD 22 -1 Int BE Pri
!#5 N8343 P5323 REPLACEMENT 10 Int BE Pri
!#5 N8344 P5324 ST_BINIT 8 0x280007d Int BE Pri
!#5 N8345 P5325 MEMBAR
!#5 N8346 P5326 DWLD 20 -1,0x0 Int BE Pri
!#5 N8347 P5326 CASX 20 -1,0x0 N8346 0x280007e Int BE Pri
!#5 N8348 P5327 LDD 6 -1 Int BE Pri
!#5 N8349 P5327 LDD 7 -1 Int BE Pri
!#A N8348 N8349
!#5 N8350 P5328 PREFETCH 4 Int BE Pri
!#5 N8351 P5329 ST 19 0x280007f Int LE Pri
!#5 N8352 P5330 ST_BINIT 22 0x2800080 Int BE Pri
!#5 N8353 P5331 MEMBAR
!#5 N8354 P5332 ST 10 0x2800081 Int BE Pri
!#5 N8355 P5333 LD 7 -1 Int BE Pri
!#5 N8356 P5334 SWAP 10 0xffffffff 0x2800082 Int BE Pri
!#5 N8357 P5335 MEMBAR
!#5 N8358 P5336 BST 9 0x4200005f FP BE Pri
!#5 N8359 P5336 BST 10 0x42000060 FP BE Pri
!#A N8358 N8359
!#5 N8360 P5336 BST 11 0x42000061 FP BE Pri
!#5 N8361 P5337 MEMBAR
!#5 N8362 P5338 DWLD 3 -1 Int BE Pri
!#5 N8363 P5338 DWLD 4 -1 Int BE Pri
!#A N8362 N8363
!#5 N8364 P5338 CASX 3 -1 N8362 0x2800083 Int BE Pri
!#5 N8365 P5338 CASX 4 -1 N8363 0x2800084 Int BE Pri
!#A N8364 N8365
!#5 N8366 P5339 ST_BINIT 2 0x2800085 Int BE Pri
!#5 N8367 P5340 MEMBAR
!#5 N8368 P5341 DWST 3 0x2800086 Int BE Pri
!#5 N8369 P5341 DWST 4 0x2800087 Int BE Pri
!#A N8368 N8369
!#5 N8370 P5342 LDD 9 -1 Int BE Pri
!#5 N8371 P5342 LDD 10 -1 Int BE Pri
!#A N8370 N8371
!#5 N8372 P5343 REPLACEMENT 13 Int BE Pri
!#5 N8373 P5344 LDD 0 -1 Int BE Pri
!#5 N8374 P5344 LDD 1 -1 Int BE Pri
!#A N8373 N8374
!#5 N8375 P5345 MEMBAR
!#5 N8376 P5346 BSTC 12 0x42000062 FP BE Pri
!#5 N8377 P5346 BSTC 13 0x42000063 FP BE Pri
!#A N8376 N8377
!#5 N8378 P5346 BSTC 14 0x42000064 FP BE Pri
!#5 N8379 P5347 MEMBAR
!#5 N8380 P5348 LDD 8 -1 Int BE Pri
!#5 N8381 P5349 ST 20 0x2800088 Int BE Pri
!#5 N8382 P5350 DWST_BINIT 21 0x2800089 Int BE Pri
!#5 N8383 P5350 DWST_BINIT 22 0x280008a Int BE Pri
!#A N8382 N8383
!#5 N8384 P5351 MEMBAR
!#5 N8385 P5352 ST_BINIT 22 0x280008b Int BE Pri
!#5 N8386 P5353 MEMBAR
!#5 N8387 P5354 PREFETCH 23 Int BE Pri
!#5 N8388 P5355 MEMBAR
!#5 N8389 P5356 BSTC 18 0x42000065 FP BE Pri
!#5 N8390 P5356 BSTC 19 0x42000066 FP BE Pri
!#A N8389 N8390
!#5 N8391 P5356 BSTC 20 0x42000067 FP BE Pri
!#5 N8392 P5357 MEMBAR
!#5 N8393 P5358 DWST_BINIT 21 0x280008c Int BE Pri
!#5 N8394 P5358 DWST_BINIT 22 0x280008d Int BE Pri
!#A N8393 N8394
!#5 N8395 P5359 MEMBAR
!#5 N8396 P5360 LD 2 -1 Int BE Pri
!#5 N8397 P5360 CAS 2 -1 N8396 0x280008e Int BE Pri
!#5 N8398 P5361 MEMBAR
!#5 N8399 P5362 BST 21 0x42000068 FP BE Pri
!#5 N8400 P5362 BST 22 0x42000069 FP BE Pri
!#A N8399 N8400
!#5 N8401 P5362 BST 23 0x4200006a FP BE Pri
!#5 N8402 P5363 MEMBAR
!#5 N8403 P5364 SWAP 4 0xffffffff 0x280008f Int BE Pri
!#5 N8404 P5365 ST_BINIT 18 0x2800090 Int BE Pri
!#5 N8405 P5366 MEMBAR
!#5 N8406 P5367 REPLACEMENT 23 Int BE Pri
!#5 N8407 P5368 REPLACEMENT 7 Int BE Pri
!#5 N8408 P5369 PREFETCH 19 Int BE Pri
!#5 N8409 P5370 LD 3 -1 Int BE Pri
!#5 N8410 P5370 CAS 3 -1 N8409 0x2800091 Int BE Pri
!#5 N8411 P5371 MEMBAR
!#5 N8412 P5372 BSTC 0 0x4200006b FP BE Pri
!#5 N8413 P5372 BSTC 1 0x4200006c FP BE Pri
!#A N8412 N8413
!#5 N8414 P5372 BSTC 2 0x4200006d FP BE Pri
!#5 N8415 P5373 MEMBAR
!#5 N8416 P5374 PREFETCH 2 Int BE Pri
!#5 N8417 P5375 ST_BINIT 22 0x2800092 Int BE Pri
!#5 N8418 P5376 MEMBAR
!#5 N8419 P5377 BLD 15 -1 FP BE Pri
!#5 N8420 P5377 BLD 16 -1 FP BE Pri
!#A N8419 N8420
!#5 N8421 P5377 BLD 17 -1 FP BE Pri
!#5 N8422 P5378 MEMBAR
!#5 N8423 P5379 BLD 3 -1 FP BE Pri
!#5 N8424 P5379 BLD 4 -1 FP BE Pri
!#A N8423 N8424
!#5 N8425 P5379 BLD 5 -1 FP BE Pri
!#5 N8426 P5380 MEMBAR
!#5 N8427 P5381 LD 15 -1 Int BE Pri
!#5 N8428 P5382 DWLD 12 -1 FP BE Pri
!#5 N8429 P5382 DWLD 13 -1 FP BE Pri
!#A N8428 N8429
!#5 N8430 P5383 LD 4 -1 Int LE Pri
!#5 N8431 P5383 CAS 4 -1 N8430 0x2800093 Int LE Pri
!#5 N8432 P5384 MEMBAR
!#5 N8433 P5385 BLD 18 -1 FP BE Pri
!#5 N8434 P5385 BLD 19 -1 FP BE Pri
!#A N8433 N8434
!#5 N8435 P5385 BLD 20 -1 FP BE Pri
!#5 N8436 P5386 MEMBAR
!#5 N8437 P5387 ST_BINIT 19 0x2800094 Int BE Pri
!#5 N8438 P5388 MEMBAR
!#5 N8439 P5389 BSTC 0 0x4200006e FP BE Pri
!#5 N8440 P5389 BSTC 1 0x4200006f FP BE Pri
!#A N8439 N8440
!#5 N8441 P5389 BSTC 2 0x42000070 FP BE Pri
!#5 N8442 P5390 MEMBAR
!#5 N8443 P5391 ST_BINIT 14 0x2800095 Int BE Pri
!#5 N8444 P5392 MEMBAR
!#5 N8445 P5393 SWAP 4 0xffffffff 0x2800096 Int BE Pri
!#5 N8446 P5394 DWLD 6 -1 Int BE Pri
!#5 N8447 P5394 DWLD 7 -1 Int BE Pri
!#A N8446 N8447
!#5 N8448 P5394 CASX 6 -1 N8446 0x2800097 Int BE Pri
!#5 N8449 P5394 CASX 7 -1 N8447 0x2800098 Int BE Pri
!#A N8448 N8449
!#5 N8450 P5395 DWST 3 0x42000071 FP BE Pri
!#5 N8451 P5395 DWST 4 0x42000072 FP BE Pri
!#A N8450 N8451
!#5 N8452 P5396 PREFETCH 16 Int BE Pri
!#5 N8453 P5397 LDD 3 -1 Int BE Pri
!#5 N8454 P5397 LDD 4 -1 Int BE Pri
!#A N8453 N8454
!#5 N8455 P5398 DWLD 12 -1 Int BE Pri
!#5 N8456 P5398 DWLD 13 -1 Int BE Pri
!#A N8455 N8456
!#5 N8457 P5398 CASX 12 -1 N8455 0x2800099 Int BE Pri
!#5 N8458 P5398 CASX 13 -1 N8456 0x280009a Int BE Pri
!#A N8457 N8458
!#5 N8459 P5399 LD 12 -1 Int BE Pri
!#5 N8460 P5400 ST 21 0x280009b Int BE Pri
!#5 N8461 P5401 SWAP 1 0xffffffff 0x280009c Int BE Pri
!#5 N8462 P5402 SWAP 19 0xffffffff 0x280009d Int BE Pri
!#5 N8463 P5403 ST_BINIT 2 0x280009e Int BE Pri
!#5 N8464 P5404 MEMBAR
!#5 N8465 P5405 DWLD 8 -1,0x0 Int BE Pri
!#5 N8466 P5405 CASX 8 -1,0x0 N8465 0x280009f Int BE Pri
!#5 N8467 P5406 ST 8 0x28000a0 Int BE Pri
!#5 N8468 P5407 SWAP 17 0xffffffff 0x28000a1 Int BE Pri
!#5 N8469 P5408 ST_BINIT 5 0x28000a2 Int BE Pri
!#5 N8470 P5409 MEMBAR
!#5 N8471 P5410 DWLD 3 -1 Int BE Pri
!#5 N8472 P5410 DWLD 4 -1 Int BE Pri
!#A N8471 N8472
!#5 N8473 P5411 LD 6 -1 Int LE Pri
!#5 N8474 P5412 ST_BINIT 1 0x28000a3 Int BE Pri
!#5 N8475 P5413 MEMBAR
!#5 N8476 P5414 DWLD 14 -1 FP BE Pri
!#5 N8477 P5415 LDD 20 -1 Int BE Pri
!#5 N8478 P5416 PREFETCH 10 Int BE Pri
!#5 N8479 P5417 LDD 8 -1 Int BE Pri
!#5 N8480 P5418 MEMBAR
!#5 N8481 P5419 BLD 21 -1 FP BE Pri
!#5 N8482 P5419 BLD 22 -1 FP BE Pri
!#A N8481 N8482
!#5 N8483 P5419 BLD 23 -1 FP BE Pri
!#5 N8484 P5420 MEMBAR
!#5 N8485 P5421 DWLD 15 -1 Int BE Pri
!#5 N8486 P5421 DWLD 16 -1 Int BE Pri
!#A N8485 N8486
!#5 N8487 P5422 SWAP 9 0xffffffff 0x28000a4 Int BE Pri
!#5 N8488 P5423 LDD 2 -1 Int BE Pri
!#5 N8489 P5424 PREFETCH 8 Int BE Pri
!#5 N8490 P5425 DWST_BINIT 5 0x28000a5 Int BE Pri
!#5 N8491 P5426 MEMBAR
!#5 N8492 P5427 DWST 5 0x28000a6 Int BE Pri
!#5 N8493 P5428 DWLD 20 -1,0x0 Int BE Pri
!#5 N8494 P5428 CASX 20 -1,0x0 N8493 0x28000a7 Int BE Pri
!#5 N8495 P5429 MEMBAR
!#5 N8496 P5430 BSTC 0 0x42000073 FP BE Pri
!#5 N8497 P5430 BSTC 1 0x42000074 FP BE Pri
!#A N8496 N8497
!#5 N8498 P5430 BSTC 2 0x42000075 FP BE Pri
!#5 N8499 P5431 MEMBAR
!#5 N8500 P5432 DWST_BINIT 11 0x28000a8 Int BE Pri
!#5 N8501 P5433 MEMBAR
!#5 N8502 P5434 LD 14 -1 Int BE Pri
!#5 N8503 P5435 ST_BINIT 3 0x28000a9 Int BE Pri
!#5 N8504 P5436 MEMBAR
!#5 N8505 P5437 DWST 6 0x28000aa Int BE Pri
!#5 N8506 P5437 DWST 7 0x28000ab Int BE Pri
!#A N8505 N8506
!#5 N8507 P5438 LDD 6 -1 Int LE Pri
!#5 N8508 P5438 LDD 7 -1 Int LE Pri
!#A N8507 N8508
!#5 N8509 P5439 DWLD 15 -1 Int BE Pri
!#5 N8510 P5439 DWLD 16 -1 Int BE Pri
!#A N8509 N8510
!#5 N8511 P5440 LDD 6 -1 Int BE Pri
!#5 N8512 P5440 LDD 7 -1 Int BE Pri
!#A N8511 N8512
!#5 N8513 P5441 LD 23 -1 Int BE Pri
!#5 N8514 P5441 CAS 23 -1 N8513 0x28000ac Int BE Pri
!#5 N8515 P5442 ST_BINIT 2 0x28000ad Int BE Pri
!#5 N8516 P5443 MEMBAR
!#5 N8517 P5444 ST 8 0x28000ae Int BE Pri
!#5 N8518 P5445 DWST 21 0x42000076 FP BE Pri
!#5 N8519 P5445 DWST 22 0x42000077 FP BE Pri
!#A N8518 N8519
!#5 N8520 P5446 PREFETCH 15 Int BE Pri
!#5 N8521 P5447 MEMBAR
!#5 N8522 P5448 BST 12 0x42000078 FP BE Pri
!#5 N8523 P5448 BST 13 0x42000079 FP BE Pri
!#A N8522 N8523
!#5 N8524 P5448 BST 14 0x4200007a FP BE Pri
!#5 N8525 P5449 MEMBAR
!#5 N8526 P5450 DWLD 6 -1 Int BE Pri
!#5 N8527 P5450 DWLD 7 -1 Int BE Pri
!#A N8526 N8527
!#5 N8528 P5451 ST_BINIT 21 0x28000af Int LE Pri
!#5 N8529 P5452 MEMBAR
!#5 N8530 P5453 LDD 12 -1 Int BE Pri
!#5 N8531 P5453 LDD 13 -1 Int BE Pri
!#A N8530 N8531
!#5 N8532 P5454 PREFETCH 19 Int BE Pri
!#5 N8533 P5455 DWLD 12 -1 FP BE Pri
!#5 N8534 P5455 DWLD 13 -1 FP BE Pri
!#A N8533 N8534
!#5 N8535 P5456 PREFETCH 14 Int BE Pri
!#5 N8536 P5457 LDD 20 -1 Int BE Pri
!#5 N8537 P5458 LD 19 -1 Int BE Pri
!#5 N8538 P5458 CAS 19 -1 N8537 0x28000b0 Int BE Pri
!#5 N8539 P5459 DWST 14 0x28000b1 Int BE Pri
!#5 N8540 P5460 LD 14 -1 Int BE Pri
!#5 N8541 P5460 CAS 14 -1 N8540 0x28000b2 Int BE Pri
!#5 N8542 P5461 DWST_BINIT 6 0x28000b3 Int LE Pri
!#5 N8543 P5461 DWST_BINIT 7 0x28000b4 Int LE Pri
!#A N8542 N8543
!#5 N8544 P5462 MEMBAR
!#5 N8545 P5463 ST_BINIT 5 0x28000b5 Int BE Pri
!#5 N8546 P5464 MEMBAR
!#5 N8547 P5465 LDD 21 -1 Int BE Pri
!#5 N8548 P5465 LDD 22 -1 Int BE Pri
!#A N8547 N8548
!#5 N8549 P5466 LD 19 -1 Int BE Pri
!#5 N8550 P5466 CAS 19 -1 N8549 0x28000b6 Int BE Pri
!#5 N8551 P5467 LD 13 -1 Int BE Pri
!#5 N8552 P5467 CAS 13 -1 N8551 0x28000b7 Int BE Pri
!#5 N8553 P5468 DWST 12 0x28000b8 Int BE Pri
!#5 N8554 P5468 DWST 13 0x28000b9 Int BE Pri
!#A N8553 N8554
!#5 N8555 P5469 LD 12 -1 Int BE Pri
!#5 N8556 P5470 PREFETCH 3 Int BE Pri
!#5 N8557 P5471 DWLD 17 -1,0x0 Int BE Pri
!#5 N8558 P5471 CASX 17 -1,0x0 N8557 0x28000ba Int BE Pri
!#5 N8559 P5472 SWAP 3 0xffffffff 0x28000bb Int BE Pri
!#5 N8560 P5473 LDD 11 -1 Int BE Pri
!#5 N8561 P5474 SWAP 12 0xffffffff 0x28000bc Int BE Pri
!#5 N8562 P5475 DWST_BINIT 18 0x28000bd Int BE Pri
!#5 N8563 P5475 DWST_BINIT 19 0x28000be Int BE Pri
!#A N8562 N8563
!#5 N8564 P5476 MEMBAR
!#5 N8565 P5477 LD 3 -1 Int BE Pri
!#5 N8566 P5477 CAS 3 -1 N8565 0x28000bf Int BE Pri
!#5 N8567 P5478 ST 20 0x28000c0 Int BE Pri
!#5 N8568 P5479 DWST_BINIT 20 0x28000c1 Int BE Pri
!#5 N8569 P5480 MEMBAR
!#5 N8570 P5481 ST_BINIT 22 0x28000c2 Int BE Pri
!#5 N8571 P5482 MEMBAR
!#5 N8572 P5483 BLD 6 -1 FP BE Pri
!#5 N8573 P5483 BLD 7 -1 FP BE Pri
!#A N8572 N8573
!#5 N8574 P5483 BLD 8 -1 FP BE Pri
!#5 N8575 P5484 MEMBAR
!#5 N8576 P5485 LD 14 -1 Int BE Pri
!#5 N8577 P5485 CAS 14 -1 N8576 0x28000c3 Int BE Pri
!#5 N8578 P5486 ST_BINIT 2 0x28000c4 Int BE Pri
!#5 N8579 P5487 MEMBAR
!#5 N8580 P5488 LDD 12 -1 Int BE Pri
!#5 N8581 P5488 LDD 13 -1 Int BE Pri
!#A N8580 N8581
!#5 N8582 P5489 REPLACEMENT 20 Int BE Pri
!#5 N8583 P5490 ST 3 0x28000c5 Int BE Pri
!#5 N8584 P5491 DWST 2 0x28000c6 Int BE Pri
!#5 N8585 P5492 MEMBAR
!#5 N8586 P5493 BLD 6 -1 FP BE Pri
!#5 N8587 P5493 BLD 7 -1 FP BE Pri
!#A N8586 N8587
!#5 N8588 P5493 BLD 8 -1 FP BE Pri
!#5 N8589 P5494 MEMBAR
!#5 N8590 P5495 SWAP 3 0xffffffff 0x28000c7 Int BE Pri
!#5 N8591 P5496 DWLD 5 -1,0x0 Int BE Pri
!#5 N8592 P5496 CASX 5 -1,0x0 N8591 0x28000c8 Int BE Pri
!#5 N8593 P5497 DWLD 14 -1 Int BE Pri
!#5 N8594 P5498 DWST_BINIT 18 0x28000c9 Int BE Pri
!#5 N8595 P5498 DWST_BINIT 19 0x28000ca Int BE Pri
!#A N8594 N8595
!#5 N8596 P5499 MEMBAR
!#5 N8597 P5500 BLD 12 -1 FP BE Pri
!#5 N8598 P5500 BLD 13 -1 FP BE Pri
!#A N8597 N8598
!#5 N8599 P5500 BLD 14 -1 FP BE Pri
!#5 N8600 P5501 MEMBAR
!#5 N8601 P5502 DWST_BINIT 0 0x28000cb Int BE Pri
!#5 N8602 P5502 DWST_BINIT 1 0x28000cc Int BE Pri
!#A N8601 N8602
!#5 N8603 P5503 MEMBAR
!#5 N8604 P5504 PREFETCH 22 Int BE Pri
!#5 N8605 P5505 ST_BINIT 15 0x28000cd Int BE Pri
!#5 N8606 P5506 MEMBAR
!#5 N8607 P5507 DWLD 2 -1,0x0 Int BE Pri
!#5 N8608 P5507 CASX 2 -1,0x0 N8607 0x28000ce Int BE Pri
!#5 N8609 P5508 MEMBAR
!#5 N8610 P5509 BST 12 0x4200007b FP BE Pri
!#5 N8611 P5509 BST 13 0x4200007c FP BE Pri
!#A N8610 N8611
!#5 N8612 P5509 BST 14 0x4200007d FP BE Pri
!#5 N8613 P5510 MEMBAR
!#5 N8614 P5511 SWAP 21 0xffffffff 0x28000cf Int BE Pri
!#5 N8615 P5512 LD 17 -1 Int BE Pri
!#5 N8616 P5512 CAS 17 -1 N8615 0x28000d0 Int BE Pri
!#5 N8617 P5513 ST_BINIT 11 0x28000d1 Int BE Pri
!#5 N8618 P5514 MEMBAR
!#5 N8619 P5515 LDD 0 -1 Int BE Pri
!#5 N8620 P5515 LDD 1 -1 Int BE Pri
!#A N8619 N8620
!#5 N8621 P5516 ST 7 0x28000d2 Int BE Pri
!#5 N8622 P5517 SWAP 19 0xffffffff 0x28000d3 Int BE Pri
!#5 N8623 P5518 MEMBAR
!#5 N8624 P5519 BSTC 0 0x4200007e FP BE Pri
!#5 N8625 P5519 BSTC 1 0x4200007f FP BE Pri
!#A N8624 N8625
!#5 N8626 P5519 BSTC 2 0x42000080 FP BE Pri
!#5 N8627 P5520 MEMBAR
!#5 N8628 P5521 ST 3 0x42000081 FP BE Pri
!#5 N8629 P5522 MEMBAR
!#5 N8630 P5523 BST 21 0x42000082 FP BE Pri
!#5 N8631 P5523 BST 22 0x42000083 FP BE Pri
!#A N8630 N8631
!#5 N8632 P5523 BST 23 0x42000084 FP BE Pri
!#5 N8633 P5524 MEMBAR
!#5 N8634 P5525 BST 3 0x42000085 FP BE Pri
!#5 N8635 P5525 BST 4 0x42000086 FP BE Pri
!#A N8634 N8635
!#5 N8636 P5525 BST 5 0x42000087 FP BE Pri
!#5 N8637 P5526 MEMBAR
!#5 N8638 P5527 LDD 9 -1 Int BE Pri
!#5 N8639 P5527 LDD 10 -1 Int BE Pri
!#A N8638 N8639
!#5 N8640 P5528 DWST 17 0x28000d4 Int BE Pri
!#5 N8641 P5529 LDD 18 -1 Int BE Pri
!#5 N8642 P5529 LDD 19 -1 Int BE Pri
!#A N8641 N8642
!#5 N8643 P5530 LD 8 -1 Int BE Pri
!#5 N8644 P5530 CAS 8 -1 N8643 0x28000d5 Int BE Pri
!#5 N8645 P5531 DWST 12 0x28000d6 Int BE Pri
!#5 N8646 P5531 DWST 13 0x28000d7 Int BE Pri
!#A N8645 N8646
!#5 N8647 P5532 SWAP 6 0xffffffff 0x28000d8 Int BE Pri
!#5 N8648 P5533 DWST_BINIT 5 0x28000d9 Int BE Pri
!#5 N8649 P5534 MEMBAR
!#5 N8650 P5535 SWAP 16 0xffffffff 0x28000da Int BE Pri
!#5 N8651 P5536 LDD 18 -1 Int BE Pri
!#5 N8652 P5536 LDD 19 -1 Int BE Pri
!#A N8651 N8652
!#5 N8653 P5537 PREFETCH 11 Int LE Pri
!#5 N8654 P5538 ST_BINIT 9 0x28000db Int BE Pri
!#5 N8655 P5539 MEMBAR
!#5 N8656 P5540 PREFETCH 9 Int BE Pri
!#5 N8657 P5541 SWAP 0 0xffffffff 0x28000dc Int BE Pri
!#5 N8658 P5542 DWLD 9 -1 Int BE Pri
!#5 N8659 P5542 DWLD 10 -1 Int BE Pri
!#A N8658 N8659
!#5 N8660 P5542 CASX 9 -1 N8658 0x28000dd Int BE Pri
!#5 N8661 P5542 CASX 10 -1 N8659 0x28000de Int BE Pri
!#A N8660 N8661
!#5 N8662 P5543 DWLD 3 -1 Int BE Pri
!#5 N8663 P5543 DWLD 4 -1 Int BE Pri
!#A N8662 N8663
!#5 N8664 P5543 CASX 3 -1 N8662 0x28000df Int BE Pri
!#5 N8665 P5543 CASX 4 -1 N8663 0x28000e0 Int BE Pri
!#A N8664 N8665
!#5 N8666 P5544 MEMBAR
!#5 N8667 P5545 BLD 21 -1 FP BE Pri
!#5 N8668 P5545 BLD 22 -1 FP BE Pri
!#A N8667 N8668
!#5 N8669 P5545 BLD 23 -1 FP BE Pri
!#5 N8670 P5546 MEMBAR
!#5 N8671 P5547 LD 17 -1 Int BE Pri
!#5 N8672 P5548 DWLD 15 -1 Int BE Pri
!#5 N8673 P5548 DWLD 16 -1 Int BE Pri
!#A N8672 N8673
!#5 N8674 P5549 MEMBAR
!#5 N8675 P5550 BLD 12 -1 FP BE Pri
!#5 N8676 P5550 BLD 13 -1 FP BE Pri
!#A N8675 N8676
!#5 N8677 P5550 BLD 14 -1 FP BE Pri
!#5 N8678 P5551 MEMBAR
!#5 N8679 P5552 SWAP 17 0xffffffff 0x28000e1 Int BE Pri
!#5 N8680 P5553 DWST_BINIT 9 0x28000e2 Int LE Pri
!#5 N8681 P5553 DWST_BINIT 10 0x28000e3 Int LE Pri
!#A N8680 N8681
!#5 N8682 P5554 MEMBAR
!#5 N8683 P5555 DWST_BINIT 8 0x28000e4 Int BE Pri
!#5 N8684 P5556 MEMBAR
!#5 N8685 P5557 LD 19 -1 Int BE Pri
!#5 N8686 P5558 DWLD 12 -1 Int BE Pri
!#5 N8687 P5558 DWLD 13 -1 Int BE Pri
!#A N8686 N8687
!#5 N8688 P5559 DWLD 11 -1 Int BE Pri
!#5 N8689 P5560 ST_BINIT 5 0x28000e5 Int BE Pri
!#5 N8690 P5561 MEMBAR
!#5 N8691 P5562 BLD 0 -1 FP BE Pri
!#5 N8692 P5562 BLD 1 -1 FP BE Pri
!#A N8691 N8692
!#5 N8693 P5562 BLD 2 -1 FP BE Pri
!#5 N8694 P5563 MEMBAR
!#5 N8695 P5564 ST_BINIT 2 0x28000e6 Int BE Pri
!#5 N8696 P5565 MEMBAR
!#5 N8697 P5566 DWST_BINIT 15 0x28000e7 Int BE Pri
!#5 N8698 P5566 DWST_BINIT 16 0x28000e8 Int BE Pri
!#A N8697 N8698
!#5 N8699 P5567 MEMBAR
!#5 N8700 P5568 LD 2 -1 FP BE Pri
!#5 N8701 P5569 ST_BINIT 22 0x28000e9 Int BE Pri
!#5 N8702 P5570 MEMBAR
!#5 N8703 P5571 SWAP 13 0xffffffff 0x28000ea Int LE Pri
!#5 N8704 P5572 LD 13 -1 Int LE Pri
!#5 N8705 P5572 CAS 13 -1 N8704 0x28000eb Int LE Pri
!#5 N8706 P5573 MEMBAR
!#5 N8707 P5574 BST 3 0x42000088 FP BE Pri
!#5 N8708 P5574 BST 4 0x42000089 FP BE Pri
!#A N8707 N8708
!#5 N8709 P5574 BST 5 0x4200008a FP BE Pri
!#5 N8710 P5575 MEMBAR
!#5 N8711 P5576 LD 3 -1 Int BE Pri
!#5 N8712 P5576 CAS 3 -1 N8711 0x28000ec Int BE Pri
!#5 N8713 P5577 MEMBAR
!#5 N8714 P5578 BSTC 18 0x4200008b FP BE Pri
!#5 N8715 P5578 BSTC 19 0x4200008c FP BE Pri
!#A N8714 N8715
!#5 N8716 P5578 BSTC 20 0x4200008d FP BE Pri
!#5 N8717 P5579 MEMBAR
!#5 N8718 P5580 DWST_BINIT 5 0x28000ed Int BE Pri
!#5 N8719 P5581 MEMBAR
!#5 N8720 P5582 ST_BINIT 5 0x28000ee Int BE Pri
!#5 N8721 P5583 MEMBAR
!#5 N8722 P5584 DWLD 12 -1 Int BE Pri
!#5 N8723 P5584 DWLD 13 -1 Int BE Pri
!#A N8722 N8723
!#5 N8724 P5585 MEMBAR
!#5 N8725 P5586 BSTC 0 0x4200008e FP BE Pri
!#5 N8726 P5586 BSTC 1 0x4200008f FP BE Pri
!#A N8725 N8726
!#5 N8727 P5586 BSTC 2 0x42000090 FP BE Pri
!#5 N8728 P5587 MEMBAR
!#5 N8729 P5588 PREFETCH 13 Int BE Pri
!#5 N8730 P5589 MEMBAR
!#5 N8731 P5590 BST 18 0x42000091 FP BE Pri
!#5 N8732 P5590 BST 19 0x42000092 FP BE Pri
!#A N8731 N8732
!#5 N8733 P5590 BST 20 0x42000093 FP BE Pri
!#5 N8734 P5591 MEMBAR
!#5 N8735 P5592 LD 1 -1 Int BE Pri
!#5 N8736 P5593 ST_BINIT 3 0x28000ef Int BE Pri
!#5 N8737 P5594 MEMBAR
!#5 N8738 P5595 LDD 9 -1 Int BE Pri
!#5 N8739 P5595 LDD 10 -1 Int BE Pri
!#A N8738 N8739
!#5 N8740 P5596 PREFETCH 22 Int BE Pri
!#5 N8741 P5597 ST 13 0x42000094 FP BE Pri
!#5 N8742 P5598 MEMBAR
!#5 N8743 P5599 BST 15 0x42000095 FP BE Pri
!#5 N8744 P5599 BST 16 0x42000096 FP BE Pri
!#A N8743 N8744
!#5 N8745 P5599 BST 17 0x42000097 FP BE Pri
!#5 N8746 P5600 MEMBAR
!#5 N8747 P5601 REPLACEMENT 8 Int BE Pri
!#5 N8748 P5602 PREFETCH 2 Int BE Pri
!#5 N8749 P5603 ST_BINIT 8 0x28000f0 Int BE Pri
!#5 N8750 P5604 MEMBAR
!#5 N8751 P5605 DWLD 0 -1 Int BE Pri
!#5 N8752 P5605 DWLD 1 -1 Int BE Pri
!#A N8751 N8752
!#5 N8753 P5605 CASX 0 -1 N8751 0x28000f1 Int BE Pri
!#5 N8754 P5605 CASX 1 -1 N8752 0x28000f2 Int BE Pri
!#A N8753 N8754
!#5 N8755 P5606 ST 23 0x28000f3 Int BE Pri
!#5 N8756 P5607 LD 13 -1 Int BE Pri
!#5 N8757 P5608 LD 3 -1 Int BE Pri
!#5 N8758 P5609 MEMBAR
!#5 N8759 P5610 BLD 3 -1 FP BE Pri
!#5 N8760 P5610 BLD 4 -1 FP BE Pri
!#A N8759 N8760
!#5 N8761 P5610 BLD 5 -1 FP BE Pri
!#5 N8762 P5611 MEMBAR
!#5 N8763 P5612 DWST 20 0x28000f4 Int BE Pri
!#5 N8764 P5613 DWST_BINIT 21 0x28000f5 Int BE Pri
!#5 N8765 P5613 DWST_BINIT 22 0x28000f6 Int BE Pri
!#A N8764 N8765
!#5 N8766 P5614 MEMBAR
!#5 N8767 P5615 DWLD 0 -1 Int BE Pri
!#5 N8768 P5615 DWLD 1 -1 Int BE Pri
!#A N8767 N8768
!#5 N8769 P5616 PREFETCH 1 Int BE Pri
!#5 N8770 P5617 LDD 0 -1 Int BE Pri
!#5 N8771 P5617 LDD 1 -1 Int BE Pri
!#A N8770 N8771
!#5 N8772 P5618 MEMBAR
!#5 N8773 P5619 BLD 6 -1 FP BE Pri
!#5 N8774 P5619 BLD 7 -1 FP BE Pri
!#A N8773 N8774
!#5 N8775 P5619 BLD 8 -1 FP BE Pri
!#5 N8776 P5620 MEMBAR
!#5 N8777 P5621 DWST_BINIT 3 0x28000f7 Int BE Pri
!#5 N8778 P5621 DWST_BINIT 4 0x28000f8 Int BE Pri
!#A N8777 N8778
!#5 N8779 P5622 MEMBAR
!#5 N8780 P5623 BST 15 0x42000098 FP BE Pri
!#5 N8781 P5623 BST 16 0x42000099 FP BE Pri
!#A N8780 N8781
!#5 N8782 P5623 BST 17 0x4200009a FP BE Pri
!#5 N8783 P5624 MEMBAR
!#5 N8784 P5625 DWLD 3 -1 Int BE Pri
!#5 N8785 P5625 DWLD 4 -1 Int BE Pri
!#A N8784 N8785
!#5 N8786 P5625 CASX 3 -1 N8784 0x28000f9 Int BE Pri
!#5 N8787 P5625 CASX 4 -1 N8785 0x28000fa Int BE Pri
!#A N8786 N8787
!#5 N8788 P5626 DWST_BINIT 3 0x28000fb Int BE Pri
!#5 N8789 P5626 DWST_BINIT 4 0x28000fc Int BE Pri
!#A N8788 N8789
!#5 N8790 P5627 MEMBAR
!#5 N8791 P5628 SWAP 0 0xffffffff 0x28000fd Int BE Pri
!#5 N8792 P5629 PREFETCH 8 Int BE Pri
!#5 N8793 P5630 DWLD 6 -1 Int BE Pri
!#5 N8794 P5630 DWLD 7 -1 Int BE Pri
!#A N8793 N8794
!#5 N8795 P5630 CASX 6 -1 N8793 0x28000fe Int BE Pri
!#5 N8796 P5630 CASX 7 -1 N8794 0x28000ff Int BE Pri
!#A N8795 N8796
!#5 N8797 P5631 SWAP 22 0xffffffff 0x2800100 Int BE Pri
!#5 N8798 P5632 PREFETCH 12 Int BE Pri
!#5 N8799 P5633 LD 15 -1 Int BE Pri
!#5 N8800 P5634 MEMBAR
!#5 N8801 P5635 BSTC 0 0x4200009b FP BE Pri
!#5 N8802 P5635 BSTC 1 0x4200009c FP BE Pri
!#A N8801 N8802
!#5 N8803 P5635 BSTC 2 0x4200009d FP BE Pri
!#5 N8804 P5636 MEMBAR
!#5 N8805 P5637 LD 14 -1 Int BE Pri
!#5 N8806 P5638 DWLD 3 -1 Int LE Pri
!#5 N8807 P5638 DWLD 4 -1 Int LE Pri
!#A N8806 N8807
!#5 N8808 P5639 MEMBAR
!#5 N8809 P5640 BLD 21 -1 FP BE Pri
!#5 N8810 P5640 BLD 22 -1 FP BE Pri
!#A N8809 N8810
!#5 N8811 P5640 BLD 23 -1 FP BE Pri
!#5 N8812 P5641 MEMBAR
!#5 N8813 P5642 ST 13 0x4200009e FP BE Pri
!#5 N8814 P5643 DWST 21 0x4200009f FP BE Pri
!#5 N8815 P5643 DWST 22 0x420000a0 FP BE Pri
!#A N8814 N8815
!#5 N8816 P5644 DWST_BINIT 0 0x2800101 Int BE Pri
!#5 N8817 P5644 DWST_BINIT 1 0x2800102 Int BE Pri
!#A N8816 N8817
!#5 N8818 P5645 MEMBAR
!#5 N8819 P5646 BLD 12 -1 FP BE Pri
!#5 N8820 P5646 BLD 13 -1 FP BE Pri
!#A N8819 N8820
!#5 N8821 P5646 BLD 14 -1 FP BE Pri
!#5 N8822 P5647 MEMBAR
!#5 N8823 P5648 DWST 20 0x2800103 Int BE Pri
!#5 N8824 P5649 LD 11 -1 Int BE Pri
!#5 N8825 P5649 CAS 11 -1 N8824 0x2800104 Int BE Pri
!#5 N8826 P5650 DWST_BINIT 17 0x2800105 Int BE Pri
!#5 N8827 P5651 MEMBAR
!#5 N8828 P5652 ST 22 0x2800106 Int BE Pri
!#5 N8829 P5653 ST_BINIT 18 0x2800107 Int BE Pri
!#5 N8830 P5654 MEMBAR
!#5 N8831 P5655 REPLACEMENT 4 Int BE Pri
!#5 N8832 P5656 REPLACEMENT 18 Int BE Pri
!#5 N8833 P5657 ST_BINIT 3 0x2800108 Int BE Pri
!#5 N8834 P5658 MEMBAR
!#5 N8835 P5659 BLD 3 -1 FP BE Pri
!#5 N8836 P5659 BLD 4 -1 FP BE Pri
!#A N8835 N8836
!#5 N8837 P5659 BLD 5 -1 FP BE Pri
!#5 N8838 P5660 MEMBAR
!#5 N8839 P5661 SWAP 11 0xffffffff 0x2800109 Int BE Pri
!#5 N8840 P5662 MEMBAR
!#5 N8841 P5663 BLD 15 -1 FP BE Pri
!#5 N8842 P5663 BLD 16 -1 FP BE Pri
!#A N8841 N8842
!#5 N8843 P5663 BLD 17 -1 FP BE Pri
!#5 N8844 P5664 MEMBAR
!#5 N8845 P5665 DWST 6 0x280010a Int BE Pri
!#5 N8846 P5665 DWST 7 0x280010b Int BE Pri
!#A N8845 N8846
!#5 N8847 P5666 LDD 0 -1 Int BE Pri
!#5 N8848 P5666 LDD 1 -1 Int BE Pri
!#A N8847 N8848
!#5 N8849 P5667 REPLACEMENT 9 Int BE Pri
!#5 N8850 P5668 LD 7 -1 FP BE Pri
!#5 N8851 P5669 MEMBAR
!#5 N8852 P5670 BLD 9 -1 FP BE Pri
!#5 N8853 P5670 BLD 10 -1 FP BE Pri
!#A N8852 N8853
!#5 N8854 P5670 BLD 11 -1 FP BE Pri
!#5 N8855 P5671 MEMBAR
!#5 N8856 P5672 DWST_BINIT 6 0x280010c Int BE Pri
!#5 N8857 P5672 DWST_BINIT 7 0x280010d Int BE Pri
!#A N8856 N8857
!#5 N8858 P5673 MEMBAR
!#5 N8859 P5674 DWST_BINIT 21 0x280010e Int BE Pri
!#5 N8860 P5674 DWST_BINIT 22 0x280010f Int BE Pri
!#A N8859 N8860
!#5 N8861 P5675 MEMBAR
!#5 N8862 P5676 DWLD 14 -1,0x0 Int BE Pri
!#5 N8863 P5676 CASX 14 -1,0x0 N8862 0x2800110 Int BE Pri
!#5 N8864 P5677 SWAP 21 0xffffffff 0x2800111 Int BE Pri
!#5 N8865 P5678 REPLACEMENT 19 Int BE Pri
!#5 N8866 P5679 LD 21 -1 Int LE Pri
!#5 N8867 P5680 DWLD 18 -1 Int BE Pri
!#5 N8868 P5680 DWLD 19 -1 Int BE Pri
!#A N8867 N8868
!#5 N8869 P5681 DWLD 21 -1 Int LE Pri
!#5 N8870 P5681 DWLD 22 -1 Int LE Pri
!#A N8869 N8870
!#5 N8871 P5681 CASX 21 -1 N8869 0x2800112 Int LE Pri
!#5 N8872 P5681 CASX 22 -1 N8870 0x2800113 Int LE Pri
!#A N8871 N8872
!#5 N8873 P5682 DWLD 3 -1 Int BE Pri
!#5 N8874 P5682 DWLD 4 -1 Int BE Pri
!#A N8873 N8874
!#5 N8875 P5682 CASX 3 -1 N8873 0x2800114 Int BE Pri
!#5 N8876 P5682 CASX 4 -1 N8874 0x2800115 Int BE Pri
!#A N8875 N8876
!#5 N8877 P5683 ST_BINIT 21 0x2800116 Int BE Pri
!#5 N8878 P5684 MEMBAR
!#5 N8879 P5685 LD 12 -1 Int BE Pri
!#5 N8880 P5686 MEMBAR
!#5 N8881 P5687 BST 9 0x420000a1 FP BE Pri
!#5 N8882 P5687 BST 10 0x420000a2 FP BE Pri
!#A N8881 N8882
!#5 N8883 P5687 BST 11 0x420000a3 FP BE Pri
!#5 N8884 P5688 MEMBAR
!#5 N8885 P5689 LD 13 -1 Int BE Pri
!#5 N8886 P5690 DWST 15 0x2800117 Int BE Pri
!#5 N8887 P5690 DWST 16 0x2800118 Int BE Pri
!#A N8886 N8887
!#5 N8888 P5691 MEMBAR
!#5 N8889 P5692 BLD 21 -1 FP BE Pri
!#5 N8890 P5692 BLD 22 -1 FP BE Pri
!#A N8889 N8890
!#5 N8891 P5692 BLD 23 -1 FP BE Pri
!#5 N8892 P5693 MEMBAR
!#5 N8893 P5694 BLD 15 -1 FP BE Pri
!#5 N8894 P5694 BLD 16 -1 FP BE Pri
!#A N8893 N8894
!#5 N8895 P5694 BLD 17 -1 FP BE Pri
!#5 N8896 P5695 MEMBAR
!#5 N8897 P5696 LD 6 -1 Int BE Pri
!#5 N8898 P5696 CAS 6 -1 N8897 0x2800119 Int BE Pri
!#5 N8899 P5697 DWLD 5 -1,0x0 Int BE Pri
!#5 N8900 P5697 CASX 5 -1,0x0 N8899 0x280011a Int BE Pri
!#5 N8901 P5698 MEMBAR
!#5 N8902 P5699 BSTC 18 0x420000a4 FP BE Pri
!#5 N8903 P5699 BSTC 19 0x420000a5 FP BE Pri
!#A N8902 N8903
!#5 N8904 P5699 BSTC 20 0x420000a6 FP BE Pri
!#5 N8905 P5700 MEMBAR
!#5 N8906 P5701 LDD 15 -1 Int BE Pri
!#5 N8907 P5701 LDD 16 -1 Int BE Pri
!#A N8906 N8907
!#5 N8908 P5702 MEMBAR
!#5 N8909 P5703 BST 12 0x420000a7 FP BE Pri
!#5 N8910 P5703 BST 13 0x420000a8 FP BE Pri
!#A N8909 N8910
!#5 N8911 P5703 BST 14 0x420000a9 FP BE Pri
!#5 N8912 P5704 MEMBAR
!#5 N8913 P5705 DWST_BINIT 8 0x280011b Int BE Pri
!#5 N8914 P5706 MEMBAR
!#5 N8915 P5707 LD 23 -1 Int BE Pri
!#5 N8916 P5707 CAS 23 -1 N8915 0x280011c Int BE Pri
!#5 N8917 P5708 MEMBAR
!#5 N8918 P5709 BLD 0 -1 FP BE Pri
!#5 N8919 P5709 BLD 1 -1 FP BE Pri
!#A N8918 N8919
!#5 N8920 P5709 BLD 2 -1 FP BE Pri
!#5 N8921 P5710 MEMBAR
!#5 N8922 P5711 BST 0 0x420000aa FP BE Pri
!#5 N8923 P5711 BST 1 0x420000ab FP BE Pri
!#A N8922 N8923
!#5 N8924 P5711 BST 2 0x420000ac FP BE Pri
!#5 N8925 P5712 MEMBAR
!#5 N8926 P5713 DWLD 15 -1 Int BE Pri
!#5 N8927 P5713 DWLD 16 -1 Int BE Pri
!#A N8926 N8927
!#5 N8928 P5713 CASX 15 -1 N8926 0x280011d Int BE Pri
!#5 N8929 P5713 CASX 16 -1 N8927 0x280011e Int BE Pri
!#A N8928 N8929
!#5 N8930 P5714 LD 20 -1 Int BE Pri
!#5 N8931 P5714 CAS 20 -1 N8930 0x280011f Int BE Pri
!#5 N8932 P5715 LD 4 -1 Int BE Pri
!#5 N8933 P5716 SWAP 7 0xffffffff 0x2800120 Int BE Pri
!#5 N8934 P5717 PREFETCH 8 Int BE Pri
!#5 N8935 P5718 MEMBAR
!#5 N8936 P5719 BST 9 0x420000ad FP BE Pri
!#5 N8937 P5719 BST 10 0x420000ae FP BE Pri
!#A N8936 N8937
!#5 N8938 P5719 BST 11 0x420000af FP BE Pri
!#5 N8939 P5720 MEMBAR
!#5 N8940 P5721 LDD 2 -1 Int BE Pri
!#5 N8941 P5722 ST 9 0x2800121 Int BE Pri
!#5 N8942 P5723 REPLACEMENT 2 Int BE Pri
!#5 N8943 P5724 DWST 15 0x2800122 Int BE Pri
!#5 N8944 P5724 DWST 16 0x2800123 Int BE Pri
!#A N8943 N8944
!#5 N8945 P5725 DWLD 5 -1,0x0 Int BE Pri
!#5 N8946 P5725 CASX 5 -1,0x0 N8945 0x2800124 Int BE Pri
!#5 N8947 P5726 ST_BINIT 12 0x2800125 Int BE Pri
!#5 N8948 P5727 MEMBAR
!#5 N8949 P5728 DWLD 6 -1 Int BE Pri
!#5 N8950 P5728 DWLD 7 -1 Int BE Pri
!#A N8949 N8950
!#5 N8951 P5729 DWST_BINIT 5 0x2800126 Int BE Pri
!#5 N8952 P5730 MEMBAR
!#5 N8953 P5731 PREFETCH 1 Int BE Pri
!#5 N8954 P5732 REPLACEMENT 9 Int BE Pri
!#5 N8955 P5733 ST 15 0x2800127 Int BE Pri
!#5 N8956 P5734 MEMBAR
!#5 N8957 P5735 BST 3 0x420000b0 FP BE Pri
!#5 N8958 P5735 BST 4 0x420000b1 FP BE Pri
!#A N8957 N8958
!#5 N8959 P5735 BST 5 0x420000b2 FP BE Pri
!#5 N8960 P5736 MEMBAR
!#5 N8961 P5737 LD 0 -1 Int BE Pri
!#5 N8962 P5737 CAS 0 -1 N8961 0x2800128 Int BE Pri
!#5 N8963 P5738 ST_BINIT 16 0x2800129 Int BE Pri
!#5 N8964 P5739 MEMBAR
!#5 N8965 P5740 BLD 15 -1 FP BE Pri
!#5 N8966 P5740 BLD 16 -1 FP BE Pri
!#A N8965 N8966
!#5 N8967 P5740 BLD 17 -1 FP BE Pri
!#5 N8968 P5741 MEMBAR
!#5 N8969 P5742 ST 9 0x280012a Int BE Pri
!#5 N8970 P5743 LD 14 -1 Int BE Pri
!#5 N8971 P5743 CAS 14 -1 N8970 0x280012b Int BE Pri
!#5 N8972 P5744 LD 11 -1 Int BE Pri
!#5 N8973 P5744 CAS 11 -1 N8972 0x280012c Int BE Pri
!#5 N8974 P5745 DWLD 2 -1,0x0 Int BE Pri
!#5 N8975 P5745 CASX 2 -1,0x0 N8974 0x280012d Int BE Pri
!#5 N8976 P5746 ST 18 0x280012e Int BE Pri
!#5 N8977 P5747 PREFETCH 1 Int BE Pri
!#5 N8978 P5748 MEMBAR
!#5 N8979 P5749 BSTC 0 0x420000b3 FP BE Pri
!#5 N8980 P5749 BSTC 1 0x420000b4 FP BE Pri
!#A N8979 N8980
!#5 N8981 P5749 BSTC 2 0x420000b5 FP BE Pri
!#5 N8982 P5750 MEMBAR
!#5 N8983 P5751 DWLD 2 -1 Int BE Pri
!#5 N8984 P5752 MEMBAR
!#5 N8985 P5753 BSTC 21 0x420000b6 FP BE Pri
!#5 N8986 P5753 BSTC 22 0x420000b7 FP BE Pri
!#A N8985 N8986
!#5 N8987 P5753 BSTC 23 0x420000b8 FP BE Pri
!#5 N8988 P5754 MEMBAR
!#5 N8989 P5755 DWLD 23 -1,0x0 Int BE Pri
!#5 N8990 P5755 CASX 23 -1,0x0 N8989 0x280012f Int BE Pri
!#5 N8991 P5756 DWLD 15 -1 Int BE Pri
!#5 N8992 P5756 DWLD 16 -1 Int BE Pri
!#A N8991 N8992
!#5 N8993 P5756 CASX 15 -1 N8991 0x2800130 Int BE Pri
!#5 N8994 P5756 CASX 16 -1 N8992 0x2800131 Int BE Pri
!#A N8993 N8994
!#5 N8995 P5757 ST_BINIT 22 0x2800132 Int BE Pri
!#5 N8996 P5758 MEMBAR
!#5 N8997 P5759 DWLD 6 -1 Int BE Pri
!#5 N8998 P5759 DWLD 7 -1 Int BE Pri
!#A N8997 N8998
!#5 N8999 P5759 CASX 6 -1 N8997 0x2800133 Int BE Pri
!#5 N9000 P5759 CASX 7 -1 N8998 0x2800134 Int BE Pri
!#A N8999 N9000
!#5 N9001 P5760 DWLD 9 -1 Int BE Pri
!#5 N9002 P5760 DWLD 10 -1 Int BE Pri
!#A N9001 N9002
!#5 N9003 P5761 DWLD 0 -1 Int BE Pri
!#5 N9004 P5761 DWLD 1 -1 Int BE Pri
!#A N9003 N9004
!#5 N9005 P5762 LD 13 -1 Int BE Pri
!#5 N9006 P5763 MEMBAR
!#5 N9007 P5764 BST 6 0x420000b9 FP BE Pri
!#5 N9008 P5764 BST 7 0x420000ba FP BE Pri
!#A N9007 N9008
!#5 N9009 P5764 BST 8 0x420000bb FP BE Pri
!#5 N9010 P5765 MEMBAR
!#5 N9011 P5766 BLD 3 -1 FP BE Pri
!#5 N9012 P5766 BLD 4 -1 FP BE Pri
!#A N9011 N9012
!#5 N9013 P5766 BLD 5 -1 FP BE Pri
!#5 N9014 P5767 MEMBAR
!#5 N9015 P5768 LD 20 -1 Int BE Pri
!#5 N9016 P5769 DWST_BINIT 18 0x2800135 Int BE Pri
!#5 N9017 P5769 DWST_BINIT 19 0x2800136 Int BE Pri
!#A N9016 N9017
!#5 N9018 P5770 MEMBAR
!#5 N9019 P5771 SWAP 16 0xffffffff 0x2800137 Int BE Pri
!#5 N9020 P5772 SWAP 22 0xffffffff 0x2800138 Int BE Pri
!#5 N9021 P5773 ST 16 0x2800139 Int BE Pri
!#5 N9022 P5774 DWST_BINIT 18 0x280013a Int BE Pri
!#5 N9023 P5774 DWST_BINIT 19 0x280013b Int BE Pri
!#A N9022 N9023
!#5 N9024 P5775 MEMBAR
!#5 N9025 P5776 LDD 15 -1 Int BE Pri
!#5 N9026 P5776 LDD 16 -1 Int BE Pri
!#A N9025 N9026
!#5 N9027 P5777 DWST 2 0x420000bc FP BE Pri
!#5 N9028 P5778 DWST_BINIT 3 0x280013c Int BE Pri
!#5 N9029 P5778 DWST_BINIT 4 0x280013d Int BE Pri
!#A N9028 N9029
!#5 N9030 P5779 MEMBAR
!#5 N9031 P5780 LDD 6 -1 Int BE Pri
!#5 N9032 P5780 LDD 7 -1 Int BE Pri
!#A N9031 N9032
!#5 N9033 P5781 LD 2 -1 Int BE Pri
!#5 N9034 P5782 ST 0 0x280013e Int LE Pri
!#5 N9035 P5783 MEMBAR
!#5 N9036 P5784 BSTC 21 0x420000bd FP BE Pri
!#5 N9037 P5784 BSTC 22 0x420000be FP BE Pri
!#A N9036 N9037
!#5 N9038 P5784 BSTC 23 0x420000bf FP BE Pri
!#5 N9039 P5785 MEMBAR
!#5 N9040 P5786 ST_BINIT 2 0x280013f Int BE Pri
!#5 N9041 P5787 MEMBAR
!#5 N9042 P5788 LD 14 -1 Int BE Pri
!#5 N9043 P5788 CAS 14 -1 N9042 0x2800140 Int BE Pri
!#5 N9044 P5789 MEMBAR
!#5 N9045 P5790 BLD 15 -1 FP BE Pri
!#5 N9046 P5790 BLD 16 -1 FP BE Pri
!#A N9045 N9046
!#5 N9047 P5790 BLD 17 -1 FP BE Pri
!#5 N9048 P5791 MEMBAR
!#5 N9049 P5792 DWST 3 0x2800141 Int BE Pri
!#5 N9050 P5792 DWST 4 0x2800142 Int BE Pri
!#A N9049 N9050
!#5 N9051 P5793 MEMBAR
!#5 N9052 P5794 BSTC 0 0x420000c0 FP BE Pri
!#5 N9053 P5794 BSTC 1 0x420000c1 FP BE Pri
!#A N9052 N9053
!#5 N9054 P5794 BSTC 2 0x420000c2 FP BE Pri
!#5 N9055 P5795 MEMBAR
!#5 N9056 P5796 DWLD 11 -1,0x0 Int BE Pri
!#5 N9057 P5796 CASX 11 -1,0x0 N9056 0x2800143 Int BE Pri
!#5 N9058 P5797 SWAP 15 0xffffffff 0x2800144 Int BE Pri
!#5 N9059 P5798 ST_BINIT 22 0x2800145 Int BE Pri
!#5 N9060 P5799 MEMBAR
!#5 N9061 P5800 LD 7 -1 Int BE Pri
!#5 N9062 P5800 CAS 7 -1 N9061 0x2800146 Int BE Pri
!#5 N9063 P5801 DWST_BINIT 0 0x2800147 Int BE Pri
!#5 N9064 P5801 DWST_BINIT 1 0x2800148 Int BE Pri
!#A N9063 N9064
!#5 N9065 P5802 MEMBAR
!#5 N9066 P5803 LD 17 -1 Int BE Pri
!#5 N9067 P5803 CAS 17 -1 N9066 0x2800149 Int BE Pri
!#5 N9068 P5804 MEMBAR
!#5 N9069 P5805 BSTC 12 0x420000c3 FP BE Pri
!#5 N9070 P5805 BSTC 13 0x420000c4 FP BE Pri
!#A N9069 N9070
!#5 N9071 P5805 BSTC 14 0x420000c5 FP BE Pri
!#5 N9072 P5806 MEMBAR
!#5 N9073 P5807 DWST_BINIT 5 0x280014a Int BE Pri
!#5 N9074 P5808 MEMBAR
!#5 N9075 P5809 ST_BINIT 21 0x280014b Int BE Pri
!#5 N9076 P5810 MEMBAR
!#5 N9077 P5811 REPLACEMENT 2 Int BE Pri
!#5 N9078 P5812 LD 8 -1 Int BE Pri
!#5 N9079 P5812 CAS 8 -1 N9078 0x280014c Int BE Pri
!#5 N9080 P5813 LD 14 -1 Int BE Pri
!#5 N9081 P5814 ST 17 0x280014d Int BE Pri
!#5 N9082 P5815 MEMBAR
!#5 N9083 P5816 BST 6 0x420000c6 FP BE Pri
!#5 N9084 P5816 BST 7 0x420000c7 FP BE Pri
!#A N9083 N9084
!#5 N9085 P5816 BST 8 0x420000c8 FP BE Pri
!#5 N9086 P5817 MEMBAR
!#5 N9087 P5818 BST 18 0x420000c9 FP BE Pri
!#5 N9088 P5818 BST 19 0x420000ca FP BE Pri
!#A N9087 N9088
!#5 N9089 P5818 BST 20 0x420000cb FP BE Pri
!#5 N9090 P5819 MEMBAR
!#5 N9091 P5820 SWAP 9 0xffffffff 0x280014e Int BE Pri
!#5 N9092 P5821 DWLD 12 -1 Int BE Pri
!#5 N9093 P5821 DWLD 13 -1 Int BE Pri
!#A N9092 N9093
!#5 N9094 P5821 CASX 12 -1 N9092 0x280014f Int BE Pri
!#5 N9095 P5821 CASX 13 -1 N9093 0x2800150 Int BE Pri
!#A N9094 N9095
!#5 N9096 P5822 ST 7 0x2800151 Int BE Pri
!#5 N9097 P5823 REPLACEMENT 3 Int BE Pri
!#5 N9098 P5824 LDD 3 -1 Int BE Pri
!#5 N9099 P5824 LDD 4 -1 Int BE Pri
!#A N9098 N9099
!#5 N9100 P5825 MEMBAR
!#5 N9101 P5826 BLD 12 -1 FP BE Pri
!#5 N9102 P5826 BLD 13 -1 FP BE Pri
!#A N9101 N9102
!#5 N9103 P5826 BLD 14 -1 FP BE Pri
!#5 N9104 P5827 MEMBAR
!#5 N9105 P5828 ST_BINIT 8 0x2800152 Int BE Pri
!#5 N9106 P5829 MEMBAR
!#5 N9107 P5830 REPLACEMENT 9 Int BE Pri
!#5 N9108 P5831 ST_BINIT 6 0x2800153 Int BE Pri
!#5 N9109 P5832 MEMBAR
!#5 N9110 P5833 REPLACEMENT 10 Int BE Pri
!#5 N9111 P5834 SWAP 17 0xffffffff 0x2800154 Int BE Pri
!#5 N9112 P5835 MEMBAR
!#5 N9113 P5836 BST 0 0x420000cc FP BE Pri
!#5 N9114 P5836 BST 1 0x420000cd FP BE Pri
!#A N9113 N9114
!#5 N9115 P5836 BST 2 0x420000ce FP BE Pri
!#5 N9116 P5837 MEMBAR
!#5 N9117 P5838 DWLD 0 -1 Int LE Pri
!#5 N9118 P5838 DWLD 1 -1 Int LE Pri
!#A N9117 N9118
!#5 N9119 P5839 ST 8 0x2800155 Int BE Pri
!#5 N9120 P5840 ST 17 0x2800156 Int BE Pri
!#5 N9121 P5841 DWLD 3 -1 Int BE Pri
!#5 N9122 P5841 DWLD 4 -1 Int BE Pri
!#A N9121 N9122
!#5 N9123 P5841 CASX 3 -1 N9121 0x2800157 Int BE Pri
!#5 N9124 P5841 CASX 4 -1 N9122 0x2800158 Int BE Pri
!#A N9123 N9124
!#5 N9125 P5842 DWLD 17 -1,0x0 Int LE Pri
!#5 N9126 P5842 CASX 17 -1,0x0 N9125 0x2800159 Int LE Pri
!#5 N9127 P5843 MEMBAR
!#5 N9128 P5844 BST 18 0x420000cf FP BE Pri
!#5 N9129 P5844 BST 19 0x420000d0 FP BE Pri
!#A N9128 N9129
!#5 N9130 P5844 BST 20 0x420000d1 FP BE Pri
!#5 N9131 P5845 MEMBAR
!#5 N9132 P5846 PREFETCH 11 Int BE Pri
!#5 N9133 P5847 MEMBAR
!#5 N9134 P5848 BSTC 0 0x420000d2 FP BE Pri
!#5 N9135 P5848 BSTC 1 0x420000d3 FP BE Pri
!#A N9134 N9135
!#5 N9136 P5848 BSTC 2 0x420000d4 FP BE Pri
!#5 N9137 P5849 MEMBAR
!#5 N9138 P5850 PREFETCH 18 Int BE Pri
!#5 N9139 P5851 LD 21 -1 Int BE Pri
!#5 N9140 P5851 CAS 21 -1 N9139 0x280015a Int BE Pri
!#5 N9141 P5852 ST 7 0x280015b Int BE Pri
!#5 N9142 P5853 MEMBAR
!#5 N9143 P5854 BSTC 0 0x420000d5 FP BE Pri
!#5 N9144 P5854 BSTC 1 0x420000d6 FP BE Pri
!#A N9143 N9144
!#5 N9145 P5854 BSTC 2 0x420000d7 FP BE Pri
!#5 N9146 P5855 MEMBAR
!#5 N9147 P5856 BLD 18 -1 FP BE Pri
!#5 N9148 P5856 BLD 19 -1 FP BE Pri
!#A N9147 N9148
!#5 N9149 P5856 BLD 20 -1 FP BE Pri
!#5 N9150 P5857 MEMBAR
!#5 N9151 P5858 DWLD 6 -1 Int BE Pri
!#5 N9152 P5858 DWLD 7 -1 Int BE Pri
!#A N9151 N9152
!#5 N9153 P5858 CASX 6 -1 N9151 0x280015c Int BE Pri
!#5 N9154 P5858 CASX 7 -1 N9152 0x280015d Int BE Pri
!#A N9153 N9154
!#5 N9155 P5859 LD 16 -1 Int BE Pri
!#5 N9156 P5860 LDD 9 -1 Int LE Pri
!#5 N9157 P5860 LDD 10 -1 Int LE Pri
!#A N9156 N9157
!#5 N9158 P5861 REPLACEMENT 17 Int BE Pri
!#5 N9159 P5862 REPLACEMENT 16 Int BE Pri
!#5 N9160 P5863 ST 17 0x280015e Int BE Pri
!#5 N9161 P5864 PREFETCH 14 Int BE Pri
!#5 N9162 P5865 SWAP 13 0xffffffff 0x280015f Int BE Pri
!#5 N9163 P5866 PREFETCH 11 Int BE Pri
!#5 N9164 P5867 DWST 18 0x2800160 Int BE Pri
!#5 N9165 P5867 DWST 19 0x2800161 Int BE Pri
!#A N9164 N9165
!#5 N9166 P5868 PREFETCH 17 Int BE Pri
!#5 N9167 P5869 ST_BINIT 0 0x2800162 Int BE Pri
!#5 N9168 P5870 MEMBAR
!#5 N9169 P5871 BSTC 15 0x420000d8 FP BE Pri
!#5 N9170 P5871 BSTC 16 0x420000d9 FP BE Pri
!#A N9169 N9170
!#5 N9171 P5871 BSTC 17 0x420000da FP BE Pri
!#5 N9172 P5872 MEMBAR
!#5 N9173 P5873 DWST 5 0x2800163 Int BE Pri
!#5 N9174 P5874 SWAP 1 0xffffffff 0x2800164 Int BE Pri
!#5 N9175 P5875 ST_BINIT 22 0x2800165 Int BE Pri
!#5 N9176 P5876 MEMBAR
!#5 N9177 P5877 ST 5 0x2800166 Int BE Pri
!#5 N9178 P5878 MEMBAR
!#5 N9179 P5879 BLD 18 -1 FP BE Pri
!#5 N9180 P5879 BLD 19 -1 FP BE Pri
!#A N9179 N9180
!#5 N9181 P5879 BLD 20 -1 FP BE Pri
!#5 N9182 P5880 MEMBAR
!#5 N9183 P5881 BSTC 3 0x420000db FP BE Pri
!#5 N9184 P5881 BSTC 4 0x420000dc FP BE Pri
!#A N9183 N9184
!#5 N9185 P5881 BSTC 5 0x420000dd FP BE Pri
!#5 N9186 P5882 MEMBAR
!#5 N9187 P5883 BLD 18 -1 FP BE Pri
!#5 N9188 P5883 BLD 19 -1 FP BE Pri
!#A N9187 N9188
!#5 N9189 P5883 BLD 20 -1 FP BE Pri
!#5 N9190 P5884 MEMBAR
!#5 N9191 P5885 LD 13 -1 Int BE Pri
!#5 N9192 P5885 CAS 13 -1 N9191 0x2800167 Int BE Pri
!#5 N9193 P5886 LDD 15 -1 Int BE Pri
!#5 N9194 P5886 LDD 16 -1 Int BE Pri
!#A N9193 N9194
!#5 N9195 P5887 LDD 8 -1 Int BE Pri
!#5 N9196 P5888 MEMBAR
!#5 N9197 P5889 BST 3 0x420000de FP BE Pri
!#5 N9198 P5889 BST 4 0x420000df FP BE Pri
!#A N9197 N9198
!#5 N9199 P5889 BST 5 0x420000e0 FP BE Pri
!#5 N9200 P5890 MEMBAR
!#5 N9201 P5891 DWST_BINIT 5 0x2800168 Int BE Pri
!#5 N9202 P5892 MEMBAR
!#5 N9203 P5893 PREFETCH 15 Int BE Pri
!#5 N9204 P5894 LD 21 -1 Int BE Pri
!#5 N9205 P5894 CAS 21 -1 N9204 0x2800169 Int BE Pri
!#5 N9206 P5895 ST 1 0x280016a Int LE Pri
!#5 N9207 P5896 MEMBAR
!#5 N9208 P5897 BST 0 0x420000e1 FP BE Pri
!#5 N9209 P5897 BST 1 0x420000e2 FP BE Pri
!#A N9208 N9209
!#5 N9210 P5897 BST 2 0x420000e3 FP BE Pri
!#5 N9211 P5898 MEMBAR
!#5 N9212 P5899 ST 4 0x280016b Int BE Pri
!#5 N9213 P5900 LD 17 -1 Int BE Pri
!#5 N9214 P5900 CAS 17 -1 N9213 0x280016c Int BE Pri
!#5 N9215 P5901 DWST 17 0x280016d Int BE Pri
!#5 N9216 P5902 DWLD 14 -1 Int BE Pri
!#5 N9217 P5903 LD 21 -1 Int BE Pri
!#5 N9218 P5904 SWAP 4 0xffffffff 0x280016e Int BE Pri
!#5 N9219 P5905 SWAP 4 0xffffffff 0x280016f Int BE Pri
!#5 N9220 P5906 MEMBAR
!#5 N9221 P5907 BLD 15 -1 FP BE Pri
!#5 N9222 P5907 BLD 16 -1 FP BE Pri
!#A N9221 N9222
!#5 N9223 P5907 BLD 17 -1 FP BE Pri
!#5 N9224 P5908 MEMBAR
!#5 N9225 P5909 BST 3 0x420000e4 FP BE Pri
!#5 N9226 P5909 BST 4 0x420000e5 FP BE Pri
!#A N9225 N9226
!#5 N9227 P5909 BST 5 0x420000e6 FP BE Pri
!#5 N9228 P5910 MEMBAR
!#5 N9229 P5911 DWLD 21 -1 Int BE Pri
!#5 N9230 P5911 DWLD 22 -1 Int BE Pri
!#A N9229 N9230
!#5 N9231 P5911 CASX 21 -1 N9229 0x2800170 Int BE Pri
!#5 N9232 P5911 CASX 22 -1 N9230 0x2800171 Int BE Pri
!#A N9231 N9232
!#5 N9233 P5912 ST 13 0x2800172 Int BE Pri
!#5 N9234 P5913 MEMBAR
!#5 N9235 P5914 BSTC 3 0x420000e7 FP BE Pri
!#5 N9236 P5914 BSTC 4 0x420000e8 FP BE Pri
!#A N9235 N9236
!#5 N9237 P5914 BSTC 5 0x420000e9 FP BE Pri
!#5 N9238 P5915 MEMBAR
!#5 N9239 P5916 LD 21 -1 Int BE Pri
!#5 N9240 P5917 DWST_BINIT 14 0x2800173 Int BE Pri
!#5 N9241 P5918 MEMBAR
!#5 N9242 P5919 ST 0 0x2800174 Int BE Pri
!#5 N9243 P5920 PREFETCH 4 Int BE Pri
!#5 N9244 P5921 PREFETCH 3 Int BE Pri
!#5 N9245 P5922 LD 20 -1 Int BE Pri
!#5 N9246 P5922 CAS 20 -1 N9245 0x2800175 Int BE Pri
!#5 N9247 P5923 SWAP 2 0xffffffff 0x2800176 Int BE Pri
!#5 N9248 P5924 SWAP 15 0xffffffff 0x2800177 Int BE Pri
!#5 N9249 P5925 DWST 17 0x2800178 Int BE Pri
!#5 N9250 P5926 ST 17 0x420000ea FP BE Pri
!#5 N9251 P5927 MEMBAR
!#5 N9252 P5928 BLD 12 -1 FP BE Pri
!#5 N9253 P5928 BLD 13 -1 FP BE Pri
!#A N9252 N9253
!#5 N9254 P5928 BLD 14 -1 FP BE Pri
!#5 N9255 P5929 MEMBAR
!#5 N9256 P5930 ST_BINIT 21 0x2800179 Int BE Pri
!#5 N9257 P5931 MEMBAR
!#5 N9258 P5932 BSTC 12 0x420000eb FP BE Pri
!#5 N9259 P5932 BSTC 13 0x420000ec FP BE Pri
!#A N9258 N9259
!#5 N9260 P5932 BSTC 14 0x420000ed FP BE Pri
!#5 N9261 P5933 MEMBAR
!#5 N9262 P5934 DWLD 21 -1 Int BE Pri
!#5 N9263 P5934 DWLD 22 -1 Int BE Pri
!#A N9262 N9263
!#5 N9264 P5934 CASX 21 -1 N9262 0x280017a Int BE Pri
!#5 N9265 P5934 CASX 22 -1 N9263 0x280017b Int BE Pri
!#A N9264 N9265
!#5 N9266 P5935 PREFETCH 8 Int BE Pri
!#5 N9267 P5936 ST_BINIT 10 0x280017c Int BE Pri
!#5 N9268 P5937 MEMBAR
!#5 N9269 P5938 ST 20 0x280017d Int BE Pri
!#5 N9270 P5939 DWLD 15 -1 FP BE Pri
!#5 N9271 P5939 DWLD 16 -1 FP BE Pri
!#A N9270 N9271
!#5 N9272 P5940 SWAP 13 0xffffffff 0x280017e Int BE Pri
!#5 N9273 P5941 ST 10 0x280017f Int BE Pri
!#5 N9274 P5942 MEMBAR
!#5 N9275 P5943 BSTC 6 0x420000ee FP BE Pri
!#5 N9276 P5943 BSTC 7 0x420000ef FP BE Pri
!#A N9275 N9276
!#5 N9277 P5943 BSTC 8 0x420000f0 FP BE Pri
!#5 N9278 P5944 MEMBAR
!#5 N9279 P5945 LDD 0 -1 Int BE Pri
!#5 N9280 P5945 LDD 1 -1 Int BE Pri
!#A N9279 N9280
!#5 N9281 P5946 ST_BINIT 17 0x2800180 Int BE Pri
!#5 N9282 P5947 MEMBAR
!#5 N9283 P5948 DWST 5 0x2800181 Int BE Pri
!#5 N9284 P5949 DWST 3 0x2800182 Int LE Pri
!#5 N9285 P5949 DWST 4 0x2800183 Int LE Pri
!#A N9284 N9285
!#5 N9286 P5950 SWAP 14 0xffffffff 0x2800184 Int BE Pri
!#5 N9287 P5951 MEMBAR
!#5 N9288 P5952 BST 21 0x420000f1 FP BE Pri
!#5 N9289 P5952 BST 22 0x420000f2 FP BE Pri
!#A N9288 N9289
!#5 N9290 P5952 BST 23 0x420000f3 FP BE Pri
!#5 N9291 P5953 MEMBAR
!#5 N9292 P5954 BSTC 18 0x420000f4 FP BE Pri
!#5 N9293 P5954 BSTC 19 0x420000f5 FP BE Pri
!#A N9292 N9293
!#5 N9294 P5954 BSTC 20 0x420000f6 FP BE Pri
!#5 N9295 P5955 MEMBAR
!#5 N9296 P5956 PREFETCH 18 Int BE Pri
!#5 N9297 P5957 DWLD 23 -1,0x0 Int BE Pri
!#5 N9298 P5957 CASX 23 -1,0x0 N9297 0x2800185 Int BE Pri
!#5 N9299 P5958 REPLACEMENT 22 Int BE Pri
!#5 N9300 P5959 PREFETCH 17 Int BE Pri
!#5 N9301 P5960 DWLD 14 -1,0x0 Int BE Pri
!#5 N9302 P5960 CASX 14 -1,0x0 N9301 0x2800186 Int BE Pri
!#5 N9303 P5961 LD 2 -1 Int BE Pri
!#5 N9304 P5962 DWLD 8 -1,0x0 Int BE Pri
!#5 N9305 P5962 CASX 8 -1,0x0 N9304 0x2800187 Int BE Pri
!#5 N9306 P5963 MEMBAR
!#5 N9307 P5964 BSTC 21 0x420000f7 FP BE Pri
!#5 N9308 P5964 BSTC 22 0x420000f8 FP BE Pri
!#A N9307 N9308
!#5 N9309 P5964 BSTC 23 0x420000f9 FP BE Pri
!#5 N9310 P5965 MEMBAR
!#5 N9311 P5966 DWST_BINIT 12 0x2800188 Int BE Pri
!#5 N9312 P5966 DWST_BINIT 13 0x2800189 Int BE Pri
!#A N9311 N9312
!#5 N9313 P5967 MEMBAR
!#5 N9314 P5968 LD 3 -1 Int BE Pri
!#5 N9315 P5968 CAS 3 -1 N9314 0x280018a Int BE Pri
!#5 N9316 P5969 MEMBAR
!#5 N9317 P5970 BLD 6 -1 FP BE Pri
!#5 N9318 P5970 BLD 7 -1 FP BE Pri
!#A N9317 N9318
!#5 N9319 P5970 BLD 8 -1 FP BE Pri
!#5 N9320 P5971 MEMBAR
!#5 N9321 P5972 DWLD 20 -1 Int BE Pri
!#5 N9322 P5973 DWST_BINIT 0 0x280018b Int BE Pri
!#5 N9323 P5973 DWST_BINIT 1 0x280018c Int BE Pri
!#A N9322 N9323
!#5 N9324 P5974 MEMBAR
!#5 N9325 P5975 DWLD 2 -1 Int BE Pri
!#5 N9326 P5976 REPLACEMENT 12 Int BE Pri
!#5 N9327 P5977 LDD 18 -1 Int BE Pri
!#5 N9328 P5977 LDD 19 -1 Int BE Pri
!#A N9327 N9328
!#5 N9329 P5978 ST_BINIT 1 0x280018d Int BE Pri
!#5 N9330 P5979 MEMBAR
!#5 N9331 P5980 LDD 14 -1 Int BE Pri
!#5 N9332 P5981 SWAP 12 0xffffffff 0x280018e Int BE Pri
!#5 N9333 P5982 ST 23 0x280018f Int BE Pri
!#5 N9334 P5983 DWLD 0 -1 Int BE Pri
!#5 N9335 P5983 DWLD 1 -1 Int BE Pri
!#A N9334 N9335
!#5 N9336 P5983 CASX 0 -1 N9334 0x2800190 Int BE Pri
!#5 N9337 P5983 CASX 1 -1 N9335 0x2800191 Int BE Pri
!#A N9336 N9337
!#5 N9338 P5984 MEMBAR
!#5 N9339 P5985 BLD 12 -1 FP BE Pri
!#5 N9340 P5985 BLD 13 -1 FP BE Pri
!#A N9339 N9340
!#5 N9341 P5985 BLD 14 -1 FP BE Pri
!#5 N9342 P5986 MEMBAR
!#5 N9343 P5987 DWLD 0 -1 Int LE Pri
!#5 N9344 P5987 DWLD 1 -1 Int LE Pri
!#A N9343 N9344
!#5 N9345 P5988 ST_BINIT 7 0x2800192 Int LE Pri
!#5 N9346 P5989 MEMBAR
!#5 N9347 P5990 DWST_BINIT 21 0x2800193 Int BE Pri
!#5 N9348 P5990 DWST_BINIT 22 0x2800194 Int BE Pri
!#A N9347 N9348
!#5 N9349 P5991 MEMBAR
!#5 N9350 P5992 LD 21 -1 Int BE Pri
!#5 N9351 P5992 CAS 21 -1 N9350 0x2800195 Int BE Pri
!#5 N9352 P5993 MEMBAR
!#5 N9353 P5994 BST 15 0x420000fa FP BE Pri
!#5 N9354 P5994 BST 16 0x420000fb FP BE Pri
!#A N9353 N9354
!#5 N9355 P5994 BST 17 0x420000fc FP BE Pri
!#5 N9356 P5995 MEMBAR
!#5 N9357 P5996 BST 3 0x420000fd FP BE Pri
!#5 N9358 P5996 BST 4 0x420000fe FP BE Pri
!#A N9357 N9358
!#5 N9359 P5996 BST 5 0x420000ff FP BE Pri
!#5 N9360 P5997 MEMBAR
!#5 N9361 P5998 LD 14 -1 Int BE Pri
!#5 N9362 P5998 CAS 14 -1 N9361 0x2800196 Int BE Pri
!#5 N9363 P5999 LD 22 -1 Int BE Pri
!#5 N9364 P6000 ST 19 0x2800197 Int BE Pri
!#5 N9365 P6001 ST_BINIT 14 0x2800198 Int BE Pri
!#5 N9366 P6002 MEMBAR
!#5 N9367 P6003 DWLD 17 -1,0x0 Int BE Pri
!#5 N9368 P6003 CASX 17 -1,0x0 N9367 0x2800199 Int BE Pri
!#5 N9369 P6004 DWST_BINIT 3 0x280019a Int LE Pri
!#5 N9370 P6004 DWST_BINIT 4 0x280019b Int LE Pri
!#A N9369 N9370
!#5 N9371 P6005 MEMBAR
!#5 N9372 P6006 LD 1 -1 FP BE Pri
!#5 N9373 P6007 PREFETCH 11 Int BE Pri
!#5 N9374 P6008 ST_BINIT 20 0x280019c Int BE Pri
!#5 N9375 P6009 MEMBAR
!#5 N9376 P6010 DWLD 3 -1 Int BE Pri
!#5 N9377 P6010 DWLD 4 -1 Int BE Pri
!#A N9376 N9377
!#5 N9378 P6011 MEMBAR
!#5 N9379 P6012 BST 15 0x42000100 FP BE Pri
!#5 N9380 P6012 BST 16 0x42000101 FP BE Pri
!#A N9379 N9380
!#5 N9381 P6012 BST 17 0x42000102 FP BE Pri
!#5 N9382 P6013 MEMBAR
!#5 N9383 P6014 MEMBAR
!#6 N9384 P6015 LD 6 -1 Int BE Pri Loop_entry
!#6 N9385 P6015 CAS 6 -1 N9384 0x3000001 Int BE Pri Loop_entry
!#6 N9386 P6016 LDD 3 -1 Int BE Pri
!#6 N9387 P6016 LDD 4 -1 Int BE Pri
!#A N9386 N9387
!#6 N9388 P6017 DWST 17 0x3000002 Int BE Pri
!#6 N9389 P6018 SWAP 10 0xffffffff 0x3000003 Int LE Pri
!#6 N9390 P6019 DWST 3 0x3000004 Int BE Pri
!#6 N9391 P6019 DWST 4 0x3000005 Int BE Pri
!#A N9390 N9391
!#6 N9392 P6020 DWLD 3 -1 Int BE Pri
!#6 N9393 P6020 DWLD 4 -1 Int BE Pri
!#A N9392 N9393
!#6 N9394 P6020 CASX 3 -1 N9392 0x3000006 Int BE Pri
!#6 N9395 P6020 CASX 4 -1 N9393 0x3000007 Int BE Pri
!#A N9394 N9395
!#6 N9396 P6021 LD 11 -1 FP BE Pri
!#6 N9397 P6022 PREFETCH 0 Int BE Pri
!#6 N9398 P6023 DWLD 15 -1 Int LE Pri
!#6 N9399 P6023 DWLD 16 -1 Int LE Pri
!#A N9398 N9399
!#6 N9400 P6024 LD 16 -1 Int BE Pri
!#6 N9401 P6025 LDD 3 -1 Int BE Pri
!#6 N9402 P6025 LDD 4 -1 Int BE Pri
!#A N9401 N9402
!#6 N9403 P6026 REPLACEMENT 17 Int BE Pri
!#6 N9404 P6027 LDD 6 -1 Int BE Pri
!#6 N9405 P6027 LDD 7 -1 Int BE Pri
!#A N9404 N9405
!#6 N9406 P6028 MEMBAR
!#6 N9407 P6029 BST 6 0x42800001 FP BE Pri
!#6 N9408 P6029 BST 7 0x42800002 FP BE Pri
!#A N9407 N9408
!#6 N9409 P6029 BST 8 0x42800003 FP BE Pri
!#6 N9410 P6030 MEMBAR
!#6 N9411 P6031 ST_BINIT 17 0x3000008 Int BE Pri
!#6 N9412 P6032 MEMBAR
!#6 N9413 P6033 BST 18 0x42800004 FP BE Pri
!#6 N9414 P6033 BST 19 0x42800005 FP BE Pri
!#A N9413 N9414
!#6 N9415 P6033 BST 20 0x42800006 FP BE Pri
!#6 N9416 P6034 MEMBAR
!#6 N9417 P6035 DWST_BINIT 6 0x3000009 Int BE Pri
!#6 N9418 P6035 DWST_BINIT 7 0x300000a Int BE Pri
!#A N9417 N9418
!#6 N9419 P6036 MEMBAR
!#6 N9420 P6037 SWAP 8 0xffffffff 0x300000b Int BE Pri
!#6 N9421 P6038 SWAP 0 0xffffffff 0x300000c Int BE Pri
!#6 N9422 P6039 ST_BINIT 4 0x300000d Int BE Pri
!#6 N9423 P6040 MEMBAR
!#6 N9424 P6041 BSTC 6 0x42800007 FP BE Pri
!#6 N9425 P6041 BSTC 7 0x42800008 FP BE Pri
!#A N9424 N9425
!#6 N9426 P6041 BSTC 8 0x42800009 FP BE Pri
!#6 N9427 P6042 MEMBAR
!#6 N9428 P6043 ST_BINIT 16 0x300000e Int BE Pri
!#6 N9429 P6044 MEMBAR
!#6 N9430 P6045 LD 2 -1 Int BE Pri
!#6 N9431 P6046 SWAP 3 0xffffffff 0x300000f Int BE Pri
!#6 N9432 P6047 LDD 8 -1 Int BE Pri
!#6 N9433 P6048 ST 13 0x3000010 Int BE Pri
!#6 N9434 P6049 DWST_BINIT 3 0x3000011 Int BE Pri
!#6 N9435 P6049 DWST_BINIT 4 0x3000012 Int BE Pri
!#A N9434 N9435
!#6 N9436 P6050 MEMBAR
!#6 N9437 P6051 SWAP 14 0xffffffff 0x3000013 Int BE Pri
!#6 N9438 P6052 MEMBAR
!#6 N9439 P6053 BLD 0 -1 FP BE Pri
!#6 N9440 P6053 BLD 1 -1 FP BE Pri
!#A N9439 N9440
!#6 N9441 P6053 BLD 2 -1 FP BE Pri
!#6 N9442 P6054 MEMBAR
!#6 N9443 P6055 LDD 8 -1 Int LE Pri
!#6 N9444 P6056 ST 18 0x3000014 Int LE Pri
!#6 N9445 P6057 SWAP 12 0xffffffff 0x3000015 Int BE Pri
!#6 N9446 P6058 SWAP 19 0xffffffff 0x3000016 Int BE Pri
!#6 N9447 P6059 SWAP 3 0xffffffff 0x3000017 Int BE Pri
!#6 N9448 P6060 ST_BINIT 17 0x3000018 Int BE Pri
!#6 N9449 P6061 MEMBAR
!#6 N9450 P6062 BLD 0 -1 FP BE Pri
!#6 N9451 P6062 BLD 1 -1 FP BE Pri
!#A N9450 N9451
!#6 N9452 P6062 BLD 2 -1 FP BE Pri
!#6 N9453 P6063 MEMBAR
!#6 N9454 P6064 LD 1 -1 Int BE Pri
!#6 N9455 P6065 LDD 14 -1 Int BE Pri
!#6 N9456 P6066 DWLD 0 -1 Int BE Pri
!#6 N9457 P6066 DWLD 1 -1 Int BE Pri
!#A N9456 N9457
!#6 N9458 P6067 DWST 2 0x3000019 Int LE Pri
!#6 N9459 P6068 MEMBAR
!#6 N9460 P6069 BSTC 3 0x4280000a FP BE Pri
!#6 N9461 P6069 BSTC 4 0x4280000b FP BE Pri
!#A N9460 N9461
!#6 N9462 P6069 BSTC 5 0x4280000c FP BE Pri
!#6 N9463 P6070 MEMBAR
!#6 N9464 P6071 DWST 14 0x300001a Int BE Pri
!#6 N9465 P6072 DWST 2 0x300001b Int BE Pri
!#6 N9466 P6073 DWST_BINIT 21 0x300001c Int BE Pri
!#6 N9467 P6073 DWST_BINIT 22 0x300001d Int BE Pri
!#A N9466 N9467
!#6 N9468 P6074 MEMBAR
!#6 N9469 P6075 ST_BINIT 22 0x300001e Int BE Pri
!#6 N9470 P6076 MEMBAR
!#6 N9471 P6077 PREFETCH 5 Int BE Pri
!#6 N9472 P6078 MEMBAR
!#6 N9473 P6079 BLD 12 -1 FP BE Pri
!#6 N9474 P6079 BLD 13 -1 FP BE Pri
!#A N9473 N9474
!#6 N9475 P6079 BLD 14 -1 FP BE Pri
!#6 N9476 P6080 MEMBAR
!#6 N9477 P6081 ST_BINIT 22 0x300001f Int BE Pri
!#6 N9478 P6082 MEMBAR
!#6 N9479 P6083 DWLD 12 -1 Int BE Pri
!#6 N9480 P6083 DWLD 13 -1 Int BE Pri
!#A N9479 N9480
!#6 N9481 P6084 ST 21 0x3000020 Int LE Pri
!#6 N9482 P6085 MEMBAR
!#6 N9483 P6086 BLD 9 -1 FP BE Pri
!#6 N9484 P6086 BLD 10 -1 FP BE Pri
!#A N9483 N9484
!#6 N9485 P6086 BLD 11 -1 FP BE Pri
!#6 N9486 P6087 MEMBAR
!#6 N9487 P6088 DWST_BINIT 17 0x3000021 Int BE Pri
!#6 N9488 P6089 MEMBAR
!#6 N9489 P6090 ST 23 0x4280000d FP BE Pri
!#6 N9490 P6091 REPLACEMENT 9 Int BE Pri
!#6 N9491 P6092 MEMBAR
!#6 N9492 P6093 BLD 15 -1 FP BE Pri
!#6 N9493 P6093 BLD 16 -1 FP BE Pri
!#A N9492 N9493
!#6 N9494 P6093 BLD 17 -1 FP BE Pri
!#6 N9495 P6094 MEMBAR
!#6 N9496 P6095 PREFETCH 21 Int BE Pri
!#6 N9497 P6096 SWAP 14 0xffffffff 0x3000022 Int BE Pri
!#6 N9498 P6097 LD 9 -1 FP BE Pri
!#6 N9499 P6098 ST_BINIT 8 0x3000023 Int BE Pri
!#6 N9500 P6099 MEMBAR
!#6 N9501 P6100 DWST_BINIT 0 0x3000024 Int BE Pri
!#6 N9502 P6100 DWST_BINIT 1 0x3000025 Int BE Pri
!#A N9501 N9502
!#6 N9503 P6101 MEMBAR
!#6 N9504 P6102 LD 11 -1 Int BE Pri
!#6 N9505 P6103 LDD 21 -1 Int BE Pri
!#6 N9506 P6103 LDD 22 -1 Int BE Pri
!#A N9505 N9506
!#6 N9507 P6104 SWAP 12 0xffffffff 0x3000026 Int BE Pri
!#6 N9508 P6105 DWST 2 0x3000027 Int BE Pri
!#6 N9509 P6106 MEMBAR
!#6 N9510 P6107 BST 6 0x4280000e FP BE Pri
!#6 N9511 P6107 BST 7 0x4280000f FP BE Pri
!#A N9510 N9511
!#6 N9512 P6107 BST 8 0x42800010 FP BE Pri
!#6 N9513 P6108 MEMBAR
!#6 N9514 P6109 BLD 12 -1 FP BE Pri
!#6 N9515 P6109 BLD 13 -1 FP BE Pri
!#A N9514 N9515
!#6 N9516 P6109 BLD 14 -1 FP BE Pri
!#6 N9517 P6110 MEMBAR
!#6 N9518 P6111 DWST 18 0x3000028 Int BE Pri
!#6 N9519 P6111 DWST 19 0x3000029 Int BE Pri
!#A N9518 N9519
!#6 N9520 P6112 DWST 3 0x300002a Int BE Pri
!#6 N9521 P6112 DWST 4 0x300002b Int BE Pri
!#A N9520 N9521
!#6 N9522 P6113 SWAP 8 0xffffffff 0x300002c Int BE Pri
!#6 N9523 P6114 DWST_BINIT 14 0x300002d Int BE Pri
!#6 N9524 P6115 MEMBAR
!#6 N9525 P6116 DWST_BINIT 20 0x300002e Int BE Pri
!#6 N9526 P6117 MEMBAR
!#6 N9527 P6118 BST 6 0x42800011 FP BE Pri
!#6 N9528 P6118 BST 7 0x42800012 FP BE Pri
!#A N9527 N9528
!#6 N9529 P6118 BST 8 0x42800013 FP BE Pri
!#6 N9530 P6119 MEMBAR
!#6 N9531 P6120 DWLD 6 -1 Int BE Pri
!#6 N9532 P6120 DWLD 7 -1 Int BE Pri
!#A N9531 N9532
!#6 N9533 P6121 DWST_BINIT 3 0x300002f Int BE Pri
!#6 N9534 P6121 DWST_BINIT 4 0x3000030 Int BE Pri
!#A N9533 N9534
!#6 N9535 P6122 MEMBAR
!#6 N9536 P6123 ST_BINIT 0 0x3000031 Int BE Pri
!#6 N9537 P6124 MEMBAR
!#6 N9538 P6125 LDD 6 -1 Int BE Pri
!#6 N9539 P6125 LDD 7 -1 Int BE Pri
!#A N9538 N9539
!#6 N9540 P6126 MEMBAR
!#6 N9541 P6127 BSTC 9 0x42800014 FP BE Pri
!#6 N9542 P6127 BSTC 10 0x42800015 FP BE Pri
!#A N9541 N9542
!#6 N9543 P6127 BSTC 11 0x42800016 FP BE Pri
!#6 N9544 P6128 MEMBAR
!#6 N9545 P6129 LDD 3 -1 Int BE Pri
!#6 N9546 P6129 LDD 4 -1 Int BE Pri
!#A N9545 N9546
!#6 N9547 P6130 MEMBAR
!#6 N9548 P6131 BST 21 0x42800017 FP BE Pri
!#6 N9549 P6131 BST 22 0x42800018 FP BE Pri
!#A N9548 N9549
!#6 N9550 P6131 BST 23 0x42800019 FP BE Pri
!#6 N9551 P6132 MEMBAR
!#6 N9552 P6133 LD 18 -1 Int BE Pri
!#6 N9553 P6133 CAS 18 -1 N9552 0x3000032 Int BE Pri
!#6 N9554 P6134 ST_BINIT 2 0x3000033 Int BE Pri
!#6 N9555 P6135 MEMBAR
!#6 N9556 P6136 LD 13 -1 Int BE Pri
!#6 N9557 P6136 CAS 13 -1 N9556 0x3000034 Int BE Pri
!#6 N9558 P6137 LDD 0 -1 Int BE Pri
!#6 N9559 P6137 LDD 1 -1 Int BE Pri
!#A N9558 N9559
!#6 N9560 P6138 DWST 23 0x3000035 Int LE Pri
!#6 N9561 P6139 DWST 0 0x3000036 Int BE Pri
!#6 N9562 P6139 DWST 1 0x3000037 Int BE Pri
!#A N9561 N9562
!#6 N9563 P6140 DWST_BINIT 0 0x3000038 Int BE Pri
!#6 N9564 P6140 DWST_BINIT 1 0x3000039 Int BE Pri
!#A N9563 N9564
!#6 N9565 P6141 MEMBAR
!#6 N9566 P6142 BLD 3 -1 FP BE Pri
!#6 N9567 P6142 BLD 4 -1 FP BE Pri
!#A N9566 N9567
!#6 N9568 P6142 BLD 5 -1 FP BE Pri
!#6 N9569 P6143 MEMBAR
!#6 N9570 P6144 DWST_BINIT 15 0x300003a Int BE Pri
!#6 N9571 P6144 DWST_BINIT 16 0x300003b Int BE Pri
!#A N9570 N9571
!#6 N9572 P6145 MEMBAR
!#6 N9573 P6146 PREFETCH 16 Int BE Pri
!#6 N9574 P6147 MEMBAR
!#6 N9575 P6148 BSTC 12 0x4280001a FP BE Pri
!#6 N9576 P6148 BSTC 13 0x4280001b FP BE Pri
!#A N9575 N9576
!#6 N9577 P6148 BSTC 14 0x4280001c FP BE Pri
!#6 N9578 P6149 MEMBAR
!#6 N9579 P6150 DWLD 11 -1,0x0 Int BE Pri
!#6 N9580 P6150 CASX 11 -1,0x0 N9579 0x300003c Int BE Pri
!#6 N9581 P6151 LD 16 -1 Int BE Pri
!#6 N9582 P6151 CAS 16 -1 N9581 0x300003d Int BE Pri
!#6 N9583 P6152 ST_BINIT 7 0x300003e Int BE Pri
!#6 N9584 P6153 MEMBAR
!#6 N9585 P6154 LD 14 -1 Int BE Pri
!#6 N9586 P6155 DWST 12 0x300003f Int BE Pri
!#6 N9587 P6155 DWST 13 0x3000040 Int BE Pri
!#A N9586 N9587
!#6 N9588 P6156 MEMBAR
!#6 N9589 P6157 BSTC 6 0x4280001d FP BE Pri
!#6 N9590 P6157 BSTC 7 0x4280001e FP BE Pri
!#A N9589 N9590
!#6 N9591 P6157 BSTC 8 0x4280001f FP BE Pri
!#6 N9592 P6158 MEMBAR
!#6 N9593 P6159 LDD 3 -1 Int BE Pri
!#6 N9594 P6159 LDD 4 -1 Int BE Pri
!#A N9593 N9594
!#6 N9595 P6160 MEMBAR
!#6 N9596 P6161 BST 18 0x42800020 FP BE Pri
!#6 N9597 P6161 BST 19 0x42800021 FP BE Pri
!#A N9596 N9597
!#6 N9598 P6161 BST 20 0x42800022 FP BE Pri
!#6 N9599 P6162 MEMBAR
!#6 N9600 P6163 DWLD 0 -1 Int BE Pri
!#6 N9601 P6163 DWLD 1 -1 Int BE Pri
!#A N9600 N9601
!#6 N9602 P6163 CASX 0 -1 N9600 0x3000041 Int BE Pri
!#6 N9603 P6163 CASX 1 -1 N9601 0x3000042 Int BE Pri
!#A N9602 N9603
!#6 N9604 P6164 DWST_BINIT 9 0x3000043 Int BE Pri
!#6 N9605 P6164 DWST_BINIT 10 0x3000044 Int BE Pri
!#A N9604 N9605
!#6 N9606 P6165 MEMBAR
!#6 N9607 P6166 PREFETCH 22 Int BE Pri
!#6 N9608 P6167 MEMBAR
!#6 N9609 P6168 BST 12 0x42800023 FP BE Pri
!#6 N9610 P6168 BST 13 0x42800024 FP BE Pri
!#A N9609 N9610
!#6 N9611 P6168 BST 14 0x42800025 FP BE Pri
!#6 N9612 P6169 MEMBAR
!#6 N9613 P6170 ST 0 0x3000045 Int BE Pri
!#6 N9614 P6171 MEMBAR
!#6 N9615 P6172 BLD 3 -1 FP BE Pri
!#6 N9616 P6172 BLD 4 -1 FP BE Pri
!#A N9615 N9616
!#6 N9617 P6172 BLD 5 -1 FP BE Pri
!#6 N9618 P6173 MEMBAR
!#6 N9619 P6174 LD 16 -1 Int BE Pri
!#6 N9620 P6174 CAS 16 -1 N9619 0x3000046 Int BE Pri
!#6 N9621 P6175 DWLD 8 -1,0x0 Int BE Pri
!#6 N9622 P6175 CASX 8 -1,0x0 N9621 0x3000047 Int BE Pri
!#6 N9623 P6176 REPLACEMENT 6 Int BE Pri
!#6 N9624 P6177 MEMBAR
!#6 N9625 P6178 BSTC 12 0x42800026 FP BE Pri
!#6 N9626 P6178 BSTC 13 0x42800027 FP BE Pri
!#A N9625 N9626
!#6 N9627 P6178 BSTC 14 0x42800028 FP BE Pri
!#6 N9628 P6179 MEMBAR
!#6 N9629 P6180 BLD 6 -1 FP BE Pri
!#6 N9630 P6180 BLD 7 -1 FP BE Pri
!#A N9629 N9630
!#6 N9631 P6180 BLD 8 -1 FP BE Pri
!#6 N9632 P6181 MEMBAR
!#6 N9633 P6182 DWST_BINIT 15 0x3000048 Int BE Pri
!#6 N9634 P6182 DWST_BINIT 16 0x3000049 Int BE Pri
!#A N9633 N9634
!#6 N9635 P6183 MEMBAR
!#6 N9636 P6184 DWLD 3 -1 Int BE Pri
!#6 N9637 P6184 DWLD 4 -1 Int BE Pri
!#A N9636 N9637
!#6 N9638 P6185 PREFETCH 9 Int BE Pri
!#6 N9639 P6186 PREFETCH 10 Int BE Pri
!#6 N9640 P6187 ST 17 0x300004a Int BE Pri
!#6 N9641 P6188 MEMBAR
!#6 N9642 P6189 BST 12 0x42800029 FP BE Pri
!#6 N9643 P6189 BST 13 0x4280002a FP BE Pri
!#A N9642 N9643
!#6 N9644 P6189 BST 14 0x4280002b FP BE Pri
!#6 N9645 P6190 MEMBAR
!#6 N9646 P6191 SWAP 6 0xffffffff 0x300004b Int BE Pri
!#6 N9647 P6192 SWAP 3 0xffffffff 0x300004c Int BE Pri
!#6 N9648 P6193 LD 11 -1 Int BE Pri
!#6 N9649 P6193 CAS 11 -1 N9648 0x300004d Int BE Pri
!#6 N9650 P6194 ST_BINIT 7 0x300004e Int BE Pri
!#6 N9651 P6195 MEMBAR
!#6 N9652 P6196 BSTC 15 0x4280002c FP BE Pri
!#6 N9653 P6196 BSTC 16 0x4280002d FP BE Pri
!#A N9652 N9653
!#6 N9654 P6196 BSTC 17 0x4280002e FP BE Pri
!#6 N9655 P6197 MEMBAR
!#6 N9656 P6198 LDD 12 -1 Int BE Pri
!#6 N9657 P6198 LDD 13 -1 Int BE Pri
!#A N9656 N9657
!#6 N9658 P6199 DWLD 12 -1 Int BE Pri
!#6 N9659 P6199 DWLD 13 -1 Int BE Pri
!#A N9658 N9659
!#6 N9660 P6199 CASX 12 -1 N9658 0x300004f Int BE Pri
!#6 N9661 P6199 CASX 13 -1 N9659 0x3000050 Int BE Pri
!#A N9660 N9661
!#6 N9662 P6200 REPLACEMENT 23 Int BE Pri
!#6 N9663 P6201 ST 7 0x3000051 Int BE Pri
!#6 N9664 P6202 ST 9 0x3000052 Int BE Pri
!#6 N9665 P6203 PREFETCH 16 Int BE Pri
!#6 N9666 P6204 LD 1 -1 Int BE Pri
!#6 N9667 P6204 CAS 1 -1 N9666 0x3000053 Int BE Pri
!#6 N9668 P6205 ST_BINIT 2 0x3000054 Int BE Pri
!#6 N9669 P6206 MEMBAR
!#6 N9670 P6207 ST 4 0x3000055 Int BE Pri
!#6 N9671 P6208 MEMBAR
!#6 N9672 P6209 BSTC 0 0x4280002f FP BE Pri
!#6 N9673 P6209 BSTC 1 0x42800030 FP BE Pri
!#A N9672 N9673
!#6 N9674 P6209 BSTC 2 0x42800031 FP BE Pri
!#6 N9675 P6210 MEMBAR
!#6 N9676 P6211 SWAP 22 0xffffffff 0x3000056 Int BE Pri
!#6 N9677 P6212 MEMBAR
!#6 N9678 P6213 BSTC 15 0x42800032 FP BE Pri
!#6 N9679 P6213 BSTC 16 0x42800033 FP BE Pri
!#A N9678 N9679
!#6 N9680 P6213 BSTC 17 0x42800034 FP BE Pri
!#6 N9681 P6214 MEMBAR
!#6 N9682 P6215 DWST 12 0x3000057 Int BE Pri
!#6 N9683 P6215 DWST 13 0x3000058 Int BE Pri
!#A N9682 N9683
!#6 N9684 P6216 MEMBAR
!#6 N9685 P6217 BST 21 0x42800035 FP BE Pri
!#6 N9686 P6217 BST 22 0x42800036 FP BE Pri
!#A N9685 N9686
!#6 N9687 P6217 BST 23 0x42800037 FP BE Pri
!#6 N9688 P6218 MEMBAR
!#6 N9689 P6219 PREFETCH 17 Int BE Pri
!#6 N9690 P6220 MEMBAR
!#6 N9691 P6221 BST 3 0x42800038 FP BE Pri
!#6 N9692 P6221 BST 4 0x42800039 FP BE Pri
!#A N9691 N9692
!#6 N9693 P6221 BST 5 0x4280003a FP BE Pri
!#6 N9694 P6222 MEMBAR
!#6 N9695 P6223 REPLACEMENT 14 Int BE Pri
!#6 N9696 P6224 DWST_BINIT 0 0x3000059 Int BE Pri
!#6 N9697 P6224 DWST_BINIT 1 0x300005a Int BE Pri
!#A N9696 N9697
!#6 N9698 P6225 MEMBAR
!#6 N9699 P6226 BLD 12 -1 FP BE Pri
!#6 N9700 P6226 BLD 13 -1 FP BE Pri
!#A N9699 N9700
!#6 N9701 P6226 BLD 14 -1 FP BE Pri
!#6 N9702 P6227 MEMBAR
!#6 N9703 P6228 LD 22 -1 Int BE Pri
!#6 N9704 P6228 CAS 22 -1 N9703 0x300005b Int BE Pri
!#6 N9705 P6229 PREFETCH 5 Int BE Pri
!#6 N9706 P6230 MEMBAR
!#6 N9707 P6231 BSTC 0 0x4280003b FP BE Pri
!#6 N9708 P6231 BSTC 1 0x4280003c FP BE Pri
!#A N9707 N9708
!#6 N9709 P6231 BSTC 2 0x4280003d FP BE Pri
!#6 N9710 P6232 MEMBAR
!#6 N9711 P6233 LD 1 -1 Int BE Pri
!#6 N9712 P6234 LDD 15 -1 Int BE Pri
!#6 N9713 P6234 LDD 16 -1 Int BE Pri
!#A N9712 N9713
!#6 N9714 P6235 LD 12 -1 Int BE Pri
!#6 N9715 P6236 DWLD 15 -1 Int BE Pri
!#6 N9716 P6236 DWLD 16 -1 Int BE Pri
!#A N9715 N9716
!#6 N9717 P6237 LD 9 -1 FP BE Pri
!#6 N9718 P6238 DWLD 5 -1 Int BE Pri
!#6 N9719 P6239 ST_BINIT 13 0x300005c Int BE Pri
!#6 N9720 P6240 MEMBAR
!#6 N9721 P6241 BLD 12 -1 FP BE Pri
!#6 N9722 P6241 BLD 13 -1 FP BE Pri
!#A N9721 N9722
!#6 N9723 P6241 BLD 14 -1 FP BE Pri
!#6 N9724 P6242 MEMBAR
!#6 N9725 P6243 DWST_BINIT 18 0x300005d Int BE Pri
!#6 N9726 P6243 DWST_BINIT 19 0x300005e Int BE Pri
!#A N9725 N9726
!#6 N9727 P6244 MEMBAR
!#6 N9728 P6245 DWST_BINIT 17 0x300005f Int BE Pri
!#6 N9729 P6246 MEMBAR
!#6 N9730 P6247 LD 0 -1 Int BE Pri
!#6 N9731 P6247 CAS 0 -1 N9730 0x3000060 Int BE Pri
!#6 N9732 P6248 LD 2 -1 Int BE Pri
!#6 N9733 P6249 LD 18 -1 Int LE Pri
!#6 N9734 P6249 CAS 18 -1 N9733 0x3000061 Int LE Pri
!#6 N9735 P6250 ST 1 0x4280003e FP BE Pri
!#6 N9736 P6251 MEMBAR
!#6 N9737 P6252 BLD 12 -1 FP BE Pri
!#6 N9738 P6252 BLD 13 -1 FP BE Pri
!#A N9737 N9738
!#6 N9739 P6252 BLD 14 -1 FP BE Pri
!#6 N9740 P6253 MEMBAR
!#6 N9741 P6254 DWST_BINIT 8 0x3000062 Int BE Pri
!#6 N9742 P6255 MEMBAR
!#6 N9743 P6256 SWAP 6 0xffffffff 0x3000063 Int BE Pri
!#6 N9744 P6257 MEMBAR
!#6 N9745 P6258 BSTC 6 0x4280003f FP BE Pri
!#6 N9746 P6258 BSTC 7 0x42800040 FP BE Pri
!#A N9745 N9746
!#6 N9747 P6258 BSTC 8 0x42800041 FP BE Pri
!#6 N9748 P6259 MEMBAR
!#6 N9749 P6260 BLD 3 -1 FP BE Pri
!#6 N9750 P6260 BLD 4 -1 FP BE Pri
!#A N9749 N9750
!#6 N9751 P6260 BLD 5 -1 FP BE Pri
!#6 N9752 P6261 MEMBAR
!#6 N9753 P6262 BLD 15 -1 FP BE Pri
!#6 N9754 P6262 BLD 16 -1 FP BE Pri
!#A N9753 N9754
!#6 N9755 P6262 BLD 17 -1 FP BE Pri
!#6 N9756 P6263 MEMBAR
!#6 N9757 P6264 ST_BINIT 20 0x3000064 Int BE Pri
!#6 N9758 P6265 MEMBAR
!#6 N9759 P6266 ST_BINIT 0 0x3000065 Int BE Pri
!#6 N9760 P6267 MEMBAR
!#6 N9761 P6268 ST_BINIT 10 0x3000066 Int BE Pri
!#6 N9762 P6269 MEMBAR
!#6 N9763 P6270 DWLD 17 -1 Int BE Pri
!#6 N9764 P6271 PREFETCH 11 Int BE Pri
!#6 N9765 P6272 LD 7 -1 Int BE Pri
!#6 N9766 P6272 CAS 7 -1 N9765 0x3000067 Int BE Pri
!#6 N9767 P6273 MEMBAR
!#6 N9768 P6274 BSTC 12 0x42800042 FP BE Pri
!#6 N9769 P6274 BSTC 13 0x42800043 FP BE Pri
!#A N9768 N9769
!#6 N9770 P6274 BSTC 14 0x42800044 FP BE Pri
!#6 N9771 P6275 MEMBAR
!#6 N9772 P6276 LD 4 -1 Int BE Pri
!#6 N9773 P6276 CAS 4 -1 N9772 0x3000068 Int BE Pri
!#6 N9774 P6277 MEMBAR
!#6 N9775 P6278 BSTC 12 0x42800045 FP BE Pri
!#6 N9776 P6278 BSTC 13 0x42800046 FP BE Pri
!#A N9775 N9776
!#6 N9777 P6278 BSTC 14 0x42800047 FP BE Pri
!#6 N9778 P6279 MEMBAR
!#6 N9779 P6280 BST 3 0x42800048 FP BE Pri
!#6 N9780 P6280 BST 4 0x42800049 FP BE Pri
!#A N9779 N9780
!#6 N9781 P6280 BST 5 0x4280004a FP BE Pri
!#6 N9782 P6281 MEMBAR
!#6 N9783 P6282 LDD 12 -1 Int BE Pri
!#6 N9784 P6282 LDD 13 -1 Int BE Pri
!#A N9783 N9784
!#6 N9785 P6283 MEMBAR
!#6 N9786 P6284 BSTC 6 0x4280004b FP BE Pri
!#6 N9787 P6284 BSTC 7 0x4280004c FP BE Pri
!#A N9786 N9787
!#6 N9788 P6284 BSTC 8 0x4280004d FP BE Pri
!#6 N9789 P6285 MEMBAR
!#6 N9790 P6286 DWLD 6 -1 Int BE Pri
!#6 N9791 P6286 DWLD 7 -1 Int BE Pri
!#A N9790 N9791
!#6 N9792 P6287 DWLD 9 -1 FP BE Pri
!#6 N9793 P6287 DWLD 10 -1 FP BE Pri
!#A N9792 N9793
!#6 N9794 P6288 SWAP 7 0xffffffff 0x3000069 Int BE Pri
!#6 N9795 P6289 LD 18 -1 Int LE Pri
!#6 N9796 P6289 CAS 18 -1 N9795 0x300006a Int LE Pri
!#6 N9797 P6290 DWLD 8 -1 FP BE Pri
!#6 N9798 P6291 PREFETCH 13 Int BE Pri
!#6 N9799 P6292 MEMBAR
!#6 N9800 P6293 BSTC 12 0x4280004e FP BE Pri
!#6 N9801 P6293 BSTC 13 0x4280004f FP BE Pri
!#A N9800 N9801
!#6 N9802 P6293 BSTC 14 0x42800050 FP BE Pri
!#6 N9803 P6294 MEMBAR
!#6 N9804 P6295 ST 7 0x300006b Int BE Pri
!#6 N9805 P6296 LDD 8 -1 Int BE Pri
!#6 N9806 P6297 MEMBAR
!#6 N9807 P6298 BSTC 3 0x42800051 FP BE Pri
!#6 N9808 P6298 BSTC 4 0x42800052 FP BE Pri
!#A N9807 N9808
!#6 N9809 P6298 BSTC 5 0x42800053 FP BE Pri
!#6 N9810 P6299 MEMBAR
!#6 N9811 P6300 BSTC 9 0x42800054 FP BE Pri
!#6 N9812 P6300 BSTC 10 0x42800055 FP BE Pri
!#A N9811 N9812
!#6 N9813 P6300 BSTC 11 0x42800056 FP BE Pri
!#6 N9814 P6301 MEMBAR
!#6 N9815 P6302 DWST 15 0x300006c Int BE Pri
!#6 N9816 P6302 DWST 16 0x300006d Int BE Pri
!#A N9815 N9816
!#6 N9817 P6303 DWST_BINIT 15 0x300006e Int BE Pri
!#6 N9818 P6303 DWST_BINIT 16 0x300006f Int BE Pri
!#A N9817 N9818
!#6 N9819 P6304 MEMBAR
!#6 N9820 P6305 DWST 9 0x3000070 Int BE Pri
!#6 N9821 P6305 DWST 10 0x3000071 Int BE Pri
!#A N9820 N9821
!#6 N9822 P6306 SWAP 6 0xffffffff 0x3000072 Int BE Pri
!#6 N9823 P6307 DWST_BINIT 2 0x3000073 Int LE Pri
!#6 N9824 P6308 MEMBAR
!#6 N9825 P6309 SWAP 3 0xffffffff 0x3000074 Int BE Pri
!#6 N9826 P6310 MEMBAR
!#6 N9827 P6311 BSTC 3 0x42800057 FP BE Pri
!#6 N9828 P6311 BSTC 4 0x42800058 FP BE Pri
!#A N9827 N9828
!#6 N9829 P6311 BSTC 5 0x42800059 FP BE Pri
!#6 N9830 P6312 MEMBAR
!#6 N9831 P6313 LD 12 -1 Int BE Pri
!#6 N9832 P6314 DWLD 14 -1 FP BE Pri
!#6 N9833 P6315 DWLD 12 -1 Int BE Pri
!#6 N9834 P6315 DWLD 13 -1 Int BE Pri
!#A N9833 N9834
!#6 N9835 P6316 ST 1 0x3000075 Int LE Pri
!#6 N9836 P6317 ST 9 0x3000076 Int BE Pri
!#6 N9837 P6318 PREFETCH 9 Int BE Pri
!#6 N9838 P6319 MEMBAR
!#6 N9839 P6320 BST 12 0x4280005a FP BE Pri
!#6 N9840 P6320 BST 13 0x4280005b FP BE Pri
!#A N9839 N9840
!#6 N9841 P6320 BST 14 0x4280005c FP BE Pri
!#6 N9842 P6321 MEMBAR
!#6 N9843 P6322 BLD 21 -1 FP BE Pri
!#6 N9844 P6322 BLD 22 -1 FP BE Pri
!#A N9843 N9844
!#6 N9845 P6322 BLD 23 -1 FP BE Pri
!#6 N9846 P6323 MEMBAR
!#6 N9847 P6324 BST 21 0x4280005d FP BE Pri
!#6 N9848 P6324 BST 22 0x4280005e FP BE Pri
!#A N9847 N9848
!#6 N9849 P6324 BST 23 0x4280005f FP BE Pri
!#6 N9850 P6325 MEMBAR
!#6 N9851 P6326 LD 0 -1 Int BE Pri
!#6 N9852 P6326 CAS 0 -1 N9851 0x3000077 Int BE Pri
!#6 N9853 P6327 DWLD 8 -1,0x0 Int BE Pri
!#6 N9854 P6327 CASX 8 -1,0x0 N9853 0x3000078 Int BE Pri
!#6 N9855 P6328 MEMBAR
!#6 N9856 P6329 BST 9 0x42800060 FP BE Pri
!#6 N9857 P6329 BST 10 0x42800061 FP BE Pri
!#A N9856 N9857
!#6 N9858 P6329 BST 11 0x42800062 FP BE Pri
!#6 N9859 P6330 MEMBAR
!#6 N9860 P6331 DWST_BINIT 12 0x3000079 Int BE Pri
!#6 N9861 P6331 DWST_BINIT 13 0x300007a Int BE Pri
!#A N9860 N9861
!#6 N9862 P6332 MEMBAR
!#6 N9863 P6333 LDD 6 -1 Int BE Pri
!#6 N9864 P6333 LDD 7 -1 Int BE Pri
!#A N9863 N9864
!#6 N9865 P6334 DWLD 6 -1 Int BE Pri
!#6 N9866 P6334 DWLD 7 -1 Int BE Pri
!#A N9865 N9866
!#6 N9867 P6335 LDD 15 -1 Int BE Pri
!#6 N9868 P6335 LDD 16 -1 Int BE Pri
!#A N9867 N9868
!#6 N9869 P6336 MEMBAR
!#6 N9870 P6337 BSTC 18 0x42800063 FP BE Pri
!#6 N9871 P6337 BSTC 19 0x42800064 FP BE Pri
!#A N9870 N9871
!#6 N9872 P6337 BSTC 20 0x42800065 FP BE Pri
!#6 N9873 P6338 MEMBAR
!#6 N9874 P6339 DWST 12 0x300007b Int BE Pri
!#6 N9875 P6339 DWST 13 0x300007c Int BE Pri
!#A N9874 N9875
!#6 N9876 P6340 LD 22 -1 Int BE Pri
!#6 N9877 P6341 LD 14 -1 Int BE Pri
!#6 N9878 P6341 CAS 14 -1 N9877 0x300007d Int BE Pri
!#6 N9879 P6342 REPLACEMENT 3 Int BE Pri
!#6 N9880 P6343 LD 19 -1 Int BE Pri
!#6 N9881 P6343 CAS 19 -1 N9880 0x300007e Int BE Pri
!#6 N9882 P6344 MEMBAR
!#6 N9883 P6345 BSTC 9 0x42800066 FP BE Pri
!#6 N9884 P6345 BSTC 10 0x42800067 FP BE Pri
!#A N9883 N9884
!#6 N9885 P6345 BSTC 11 0x42800068 FP BE Pri
!#6 N9886 P6346 MEMBAR
!#6 N9887 P6347 ST_BINIT 11 0x300007f Int LE Pri
!#6 N9888 P6348 MEMBAR
!#6 N9889 P6349 DWST_BINIT 0 0x3000080 Int BE Pri
!#6 N9890 P6349 DWST_BINIT 1 0x3000081 Int BE Pri
!#A N9889 N9890
!#6 N9891 P6350 MEMBAR
!#6 N9892 P6351 LD 16 -1 Int BE Pri
!#6 N9893 P6351 CAS 16 -1 N9892 0x3000082 Int BE Pri
!#6 N9894 P6352 DWST_BINIT 6 0x3000083 Int BE Pri
!#6 N9895 P6352 DWST_BINIT 7 0x3000084 Int BE Pri
!#A N9894 N9895
!#6 N9896 P6353 MEMBAR
!#6 N9897 P6354 DWST 0 0x3000085 Int BE Pri
!#6 N9898 P6354 DWST 1 0x3000086 Int BE Pri
!#A N9897 N9898
!#6 N9899 P6355 MEMBAR
!#6 N9900 P6356 BLD 21 -1 FP BE Pri
!#6 N9901 P6356 BLD 22 -1 FP BE Pri
!#A N9900 N9901
!#6 N9902 P6356 BLD 23 -1 FP BE Pri
!#6 N9903 P6357 MEMBAR
!#6 N9904 P6358 REPLACEMENT 3 Int BE Pri
!#6 N9905 P6359 ST 5 0x3000087 Int BE Pri
!#6 N9906 P6360 DWLD 23 -1 Int BE Pri
!#6 N9907 P6361 MEMBAR
!#6 N9908 P6362 BLD 6 -1 FP BE Pri
!#6 N9909 P6362 BLD 7 -1 FP BE Pri
!#A N9908 N9909
!#6 N9910 P6362 BLD 8 -1 FP BE Pri
!#6 N9911 P6363 MEMBAR
!#6 N9912 P6364 DWST_BINIT 17 0x3000088 Int BE Pri
!#6 N9913 P6365 MEMBAR
!#6 N9914 P6366 LD 13 -1 Int BE Pri
!#6 N9915 P6367 LD 15 -1 Int BE Pri
!#6 N9916 P6368 LD 17 -1 Int BE Pri
!#6 N9917 P6368 CAS 17 -1 N9916 0x3000089 Int BE Pri
!#6 N9918 P6369 PREFETCH 20 Int BE Pri
!#6 N9919 P6370 MEMBAR
!#6 N9920 P6371 BSTC 9 0x42800069 FP BE Pri
!#6 N9921 P6371 BSTC 10 0x4280006a FP BE Pri
!#A N9920 N9921
!#6 N9922 P6371 BSTC 11 0x4280006b FP BE Pri
!#6 N9923 P6372 MEMBAR
!#6 N9924 P6373 PREFETCH 8 Int BE Pri
!#6 N9925 P6374 SWAP 23 0xffffffff 0x300008a Int BE Pri
!#6 N9926 P6375 PREFETCH 22 Int BE Pri
!#6 N9927 P6376 MEMBAR
!#6 N9928 P6377 BLD 9 -1 FP BE Pri
!#6 N9929 P6377 BLD 10 -1 FP BE Pri
!#A N9928 N9929
!#6 N9930 P6377 BLD 11 -1 FP BE Pri
!#6 N9931 P6378 MEMBAR
!#6 N9932 P6379 BSTC 21 0x4280006c FP BE Pri
!#6 N9933 P6379 BSTC 22 0x4280006d FP BE Pri
!#A N9932 N9933
!#6 N9934 P6379 BSTC 23 0x4280006e FP BE Pri
!#6 N9935 P6380 MEMBAR
!#6 N9936 P6381 BST 21 0x4280006f FP BE Pri
!#6 N9937 P6381 BST 22 0x42800070 FP BE Pri
!#A N9936 N9937
!#6 N9938 P6381 BST 23 0x42800071 FP BE Pri
!#6 N9939 P6382 MEMBAR
!#6 N9940 P6383 DWST_BINIT 6 0x300008b Int BE Pri
!#6 N9941 P6383 DWST_BINIT 7 0x300008c Int BE Pri
!#A N9940 N9941
!#6 N9942 P6384 MEMBAR
!#6 N9943 P6385 LD 1 -1 Int BE Pri
!#6 N9944 P6385 CAS 1 -1 N9943 0x300008d Int BE Pri
!#6 N9945 P6386 PREFETCH 18 Int BE Pri
!#6 N9946 P6387 LD 11 -1 Int BE Pri
!#6 N9947 P6387 CAS 11 -1 N9946 0x300008e Int BE Pri
!#6 N9948 P6388 DWLD 3 -1 Int BE Pri
!#6 N9949 P6388 DWLD 4 -1 Int BE Pri
!#A N9948 N9949
!#6 N9950 P6389 PREFETCH 4 Int BE Pri
!#6 N9951 P6390 DWLD 9 -1 Int BE Pri
!#6 N9952 P6390 DWLD 10 -1 Int BE Pri
!#A N9951 N9952
!#6 N9953 P6391 DWLD 18 -1 Int BE Pri
!#6 N9954 P6391 DWLD 19 -1 Int BE Pri
!#A N9953 N9954
!#6 N9955 P6392 MEMBAR
!#6 N9956 P6393 BST 0 0x42800072 FP BE Pri
!#6 N9957 P6393 BST 1 0x42800073 FP BE Pri
!#A N9956 N9957
!#6 N9958 P6393 BST 2 0x42800074 FP BE Pri
!#6 N9959 P6394 MEMBAR
!#6 N9960 P6395 PREFETCH 15 Int BE Pri
!#6 N9961 P6396 LD 5 -1 Int BE Pri
!#6 N9962 P6396 CAS 5 -1 N9961 0x300008f Int BE Pri
!#6 N9963 P6397 MEMBAR
!#6 N9964 P6398 BLD 18 -1 FP BE Pri
!#6 N9965 P6398 BLD 19 -1 FP BE Pri
!#A N9964 N9965
!#6 N9966 P6398 BLD 20 -1 FP BE Pri
!#6 N9967 P6399 MEMBAR
!#6 N9968 P6400 SWAP 11 0xffffffff 0x3000090 Int BE Pri
!#6 N9969 P6401 MEMBAR
!#6 N9970 P6402 BST 3 0x42800075 FP BE Pri
!#6 N9971 P6402 BST 4 0x42800076 FP BE Pri
!#A N9970 N9971
!#6 N9972 P6402 BST 5 0x42800077 FP BE Pri
!#6 N9973 P6403 MEMBAR
!#6 N9974 P6404 BLD 15 -1 FP BE Pri
!#6 N9975 P6404 BLD 16 -1 FP BE Pri
!#A N9974 N9975
!#6 N9976 P6404 BLD 17 -1 FP BE Pri
!#6 N9977 P6405 MEMBAR
!#6 N9978 P6406 DWST 5 0x3000091 Int BE Pri
!#6 N9979 P6407 LDD 15 -1 Int BE Pri
!#6 N9980 P6407 LDD 16 -1 Int BE Pri
!#A N9979 N9980
!#6 N9981 P6408 LD 23 -1 Int BE Pri
!#6 N9982 P6409 MEMBAR
!#6 N9983 P6410 BST 0 0x42800078 FP BE Pri
!#6 N9984 P6410 BST 1 0x42800079 FP BE Pri
!#A N9983 N9984
!#6 N9985 P6410 BST 2 0x4280007a FP BE Pri
!#6 N9986 P6411 MEMBAR
!#6 N9987 P6412 LD 0 -1 Int BE Pri
!#6 N9988 P6412 CAS 0 -1 N9987 0x3000092 Int BE Pri
!#6 N9989 P6413 LD 5 -1 Int BE Pri
!#6 N9990 P6414 ST_BINIT 15 0x3000093 Int BE Pri
!#6 N9991 P6415 MEMBAR
!#6 N9992 P6416 DWST 2 0x4280007b FP BE Pri
!#6 N9993 P6417 DWLD 8 -1 Int BE Pri
!#6 N9994 P6418 MEMBAR
!#6 N9995 P6419 BSTC 15 0x4280007c FP BE Pri
!#6 N9996 P6419 BSTC 16 0x4280007d FP BE Pri
!#A N9995 N9996
!#6 N9997 P6419 BSTC 17 0x4280007e FP BE Pri
!#6 N9998 P6420 MEMBAR
!#6 N9999 P6421 REPLACEMENT 15 Int BE Pri
!#6 N10000 P6422 DWST_BINIT 12 0x3000094 Int BE Pri
!#6 N10001 P6422 DWST_BINIT 13 0x3000095 Int BE Pri
!#A N10000 N10001
!#6 N10002 P6423 MEMBAR
!#6 N10003 P6424 ST 18 0x3000096 Int BE Pri
!#6 N10004 P6425 SWAP 23 0xffffffff 0x3000097 Int BE Pri
!#6 N10005 P6426 LD 13 -1 Int BE Pri
!#6 N10006 P6427 LD 23 -1 Int BE Pri
!#6 N10007 P6428 LD 8 -1 Int BE Pri
!#6 N10008 P6428 CAS 8 -1 N10007 0x3000098 Int BE Pri
!#6 N10009 P6429 DWST 18 0x4280007f FP BE Pri
!#6 N10010 P6429 DWST 19 0x42800080 FP BE Pri
!#A N10009 N10010
!#6 N10011 P6430 DWLD 15 -1 Int BE Pri
!#6 N10012 P6430 DWLD 16 -1 Int BE Pri
!#A N10011 N10012
!#6 N10013 P6430 CASX 15 -1 N10011 0x3000099 Int BE Pri
!#6 N10014 P6430 CASX 16 -1 N10012 0x300009a Int BE Pri
!#A N10013 N10014
!#6 N10015 P6431 ST 2 0x300009b Int BE Pri
!#6 N10016 P6432 LD 5 -1 Int BE Pri
!#6 N10017 P6433 LDD 3 -1 Int BE Pri
!#6 N10018 P6433 LDD 4 -1 Int BE Pri
!#A N10017 N10018
!#6 N10019 P6434 ST_BINIT 22 0x300009c Int BE Pri
!#6 N10020 P6435 MEMBAR
!#6 N10021 P6436 LD 8 -1 Int BE Pri
!#6 N10022 P6436 CAS 8 -1 N10021 0x300009d Int BE Pri
!#6 N10023 P6437 DWLD 21 -1 FP BE Pri
!#6 N10024 P6437 DWLD 22 -1 FP BE Pri
!#A N10023 N10024
!#6 N10025 P6438 SWAP 16 0xffffffff 0x300009e Int BE Pri
!#6 N10026 P6439 LD 5 -1 Int BE Pri
!#6 N10027 P6440 LD 6 -1 Int BE Pri
!#6 N10028 P6441 LDD 21 -1 Int BE Pri
!#6 N10029 P6441 LDD 22 -1 Int BE Pri
!#A N10028 N10029
!#6 N10030 P6442 LDD 0 -1 Int BE Pri
!#6 N10031 P6442 LDD 1 -1 Int BE Pri
!#A N10030 N10031
!#6 N10032 P6443 DWST 18 0x300009f Int BE Pri
!#6 N10033 P6443 DWST 19 0x30000a0 Int BE Pri
!#A N10032 N10033
!#6 N10034 P6444 DWLD 21 -1 Int BE Pri
!#6 N10035 P6444 DWLD 22 -1 Int BE Pri
!#A N10034 N10035
!#6 N10036 P6445 MEMBAR
!#6 N10037 P6446 BST 9 0x42800081 FP BE Pri
!#6 N10038 P6446 BST 10 0x42800082 FP BE Pri
!#A N10037 N10038
!#6 N10039 P6446 BST 11 0x42800083 FP BE Pri
!#6 N10040 P6447 MEMBAR
!#6 N10041 P6448 BLD 21 -1 FP BE Pri
!#6 N10042 P6448 BLD 22 -1 FP BE Pri
!#A N10041 N10042
!#6 N10043 P6448 BLD 23 -1 FP BE Pri
!#6 N10044 P6449 MEMBAR
!#6 N10045 P6450 BLD 18 -1 FP BE Pri
!#6 N10046 P6450 BLD 19 -1 FP BE Pri
!#A N10045 N10046
!#6 N10047 P6450 BLD 20 -1 FP BE Pri
!#6 N10048 P6451 MEMBAR
!#6 N10049 P6452 LDD 18 -1 Int BE Pri
!#6 N10050 P6452 LDD 19 -1 Int BE Pri
!#A N10049 N10050
!#6 N10051 P6453 MEMBAR
!#6 N10052 P6454 BLD 12 -1 FP BE Pri
!#6 N10053 P6454 BLD 13 -1 FP BE Pri
!#A N10052 N10053
!#6 N10054 P6454 BLD 14 -1 FP BE Pri
!#6 N10055 P6455 MEMBAR
!#6 N10056 P6456 BSTC 0 0x42800084 FP BE Pri
!#6 N10057 P6456 BSTC 1 0x42800085 FP BE Pri
!#A N10056 N10057
!#6 N10058 P6456 BSTC 2 0x42800086 FP BE Pri
!#6 N10059 P6457 MEMBAR
!#6 N10060 P6458 BST 9 0x42800087 FP BE Pri
!#6 N10061 P6458 BST 10 0x42800088 FP BE Pri
!#A N10060 N10061
!#6 N10062 P6458 BST 11 0x42800089 FP BE Pri
!#6 N10063 P6459 MEMBAR
!#6 N10064 P6460 ST 6 0x30000a1 Int BE Pri
!#6 N10065 P6461 DWLD 6 -1 Int BE Pri
!#6 N10066 P6461 DWLD 7 -1 Int BE Pri
!#A N10065 N10066
!#6 N10067 P6461 CASX 6 -1 N10065 0x30000a2 Int BE Pri
!#6 N10068 P6461 CASX 7 -1 N10066 0x30000a3 Int BE Pri
!#A N10067 N10068
!#6 N10069 P6462 LDD 9 -1 Int BE Pri
!#6 N10070 P6462 LDD 10 -1 Int BE Pri
!#A N10069 N10070
!#6 N10071 P6463 SWAP 19 0xffffffff 0x30000a4 Int BE Pri
!#6 N10072 P6464 REPLACEMENT 23 Int BE Pri
!#6 N10073 P6465 PREFETCH 19 Int BE Pri
!#6 N10074 P6466 ST_BINIT 16 0x30000a5 Int BE Pri
!#6 N10075 P6467 MEMBAR
!#6 N10076 P6468 LD 10 -1 Int BE Pri
!#6 N10077 P6468 CAS 10 -1 N10076 0x30000a6 Int BE Pri
!#6 N10078 P6469 DWST_BINIT 9 0x30000a7 Int BE Pri
!#6 N10079 P6469 DWST_BINIT 10 0x30000a8 Int BE Pri
!#A N10078 N10079
!#6 N10080 P6470 MEMBAR
!#6 N10081 P6471 DWST 3 0x30000a9 Int BE Pri
!#6 N10082 P6471 DWST 4 0x30000aa Int BE Pri
!#A N10081 N10082
!#6 N10083 P6472 PREFETCH 18 Int BE Pri
!#6 N10084 P6473 DWST 15 0x30000ab Int BE Pri
!#6 N10085 P6473 DWST 16 0x30000ac Int BE Pri
!#A N10084 N10085
!#6 N10086 P6474 DWST_BINIT 0 0x30000ad Int LE Pri
!#6 N10087 P6474 DWST_BINIT 1 0x30000ae Int LE Pri
!#A N10086 N10087
!#6 N10088 P6475 MEMBAR
!#6 N10089 P6476 DWLD 2 -1,0x0 Int BE Pri
!#6 N10090 P6476 CASX 2 -1,0x0 N10089 0x30000af Int BE Pri
!#6 N10091 P6477 DWST 5 0x4280008a FP BE Pri
!#6 N10092 P6478 DWLD 0 -1 Int BE Pri
!#6 N10093 P6478 DWLD 1 -1 Int BE Pri
!#A N10092 N10093
!#6 N10094 P6478 CASX 0 -1 N10092 0x30000b0 Int BE Pri
!#6 N10095 P6478 CASX 1 -1 N10093 0x30000b1 Int BE Pri
!#A N10094 N10095
!#6 N10096 P6479 DWLD 3 -1 Int BE Pri
!#6 N10097 P6479 DWLD 4 -1 Int BE Pri
!#A N10096 N10097
!#6 N10098 P6479 CASX 3 -1 N10096 0x30000b2 Int BE Pri
!#6 N10099 P6479 CASX 4 -1 N10097 0x30000b3 Int BE Pri
!#A N10098 N10099
!#6 N10100 P6480 MEMBAR
!#6 N10101 P6481 BSTC 12 0x4280008b FP BE Pri
!#6 N10102 P6481 BSTC 13 0x4280008c FP BE Pri
!#A N10101 N10102
!#6 N10103 P6481 BSTC 14 0x4280008d FP BE Pri
!#6 N10104 P6482 MEMBAR
!#6 N10105 P6483 ST_BINIT 17 0x30000b4 Int BE Pri
!#6 N10106 P6484 MEMBAR
!#6 N10107 P6485 LD 9 -1 Int BE Pri
!#6 N10108 P6486 MEMBAR
!#6 N10109 P6487 BSTC 0 0x4280008e FP BE Pri
!#6 N10110 P6487 BSTC 1 0x4280008f FP BE Pri
!#A N10109 N10110
!#6 N10111 P6487 BSTC 2 0x42800090 FP BE Pri
!#6 N10112 P6488 MEMBAR
!#6 N10113 P6489 LD 6 -1 Int BE Pri
!#6 N10114 P6490 ST_BINIT 9 0x30000b5 Int BE Pri
!#6 N10115 P6491 MEMBAR
!#6 N10116 P6492 ST 13 0x30000b6 Int BE Pri
!#6 N10117 P6493 DWLD 17 -1 Int BE Pri
!#6 N10118 P6494 ST_BINIT 17 0x30000b7 Int BE Pri
!#6 N10119 P6495 MEMBAR
!#6 N10120 P6496 BSTC 3 0x42800091 FP BE Pri
!#6 N10121 P6496 BSTC 4 0x42800092 FP BE Pri
!#A N10120 N10121
!#6 N10122 P6496 BSTC 5 0x42800093 FP BE Pri
!#6 N10123 P6497 MEMBAR
!#6 N10124 P6498 DWST 12 0x30000b8 Int BE Pri
!#6 N10125 P6498 DWST 13 0x30000b9 Int BE Pri
!#A N10124 N10125
!#6 N10126 P6499 LD 20 -1 Int BE Pri
!#6 N10127 P6499 CAS 20 -1 N10126 0x30000ba Int BE Pri
!#6 N10128 P6500 ST_BINIT 5 0x30000bb Int BE Pri
!#6 N10129 P6501 MEMBAR
!#6 N10130 P6502 BST 0 0x42800094 FP BE Pri
!#6 N10131 P6502 BST 1 0x42800095 FP BE Pri
!#A N10130 N10131
!#6 N10132 P6502 BST 2 0x42800096 FP BE Pri
!#6 N10133 P6503 MEMBAR
!#6 N10134 P6504 LD 23 -1 Int LE Pri
!#6 N10135 P6505 ST_BINIT 17 0x30000bc Int BE Pri
!#6 N10136 P6506 MEMBAR
!#6 N10137 P6507 BST 6 0x42800097 FP BE Pri
!#6 N10138 P6507 BST 7 0x42800098 FP BE Pri
!#A N10137 N10138
!#6 N10139 P6507 BST 8 0x42800099 FP BE Pri
!#6 N10140 P6508 MEMBAR
!#6 N10141 P6509 ST 19 0x30000bd Int BE Pri
!#6 N10142 P6510 MEMBAR
!#6 N10143 P6511 BST 9 0x4280009a FP BE Pri
!#6 N10144 P6511 BST 10 0x4280009b FP BE Pri
!#A N10143 N10144
!#6 N10145 P6511 BST 11 0x4280009c FP BE Pri
!#6 N10146 P6512 MEMBAR
!#6 N10147 P6513 LD 1 -1 Int BE Pri
!#6 N10148 P6514 LD 3 -1 Int BE Pri
!#6 N10149 P6515 DWST_BINIT 12 0x30000be Int BE Pri
!#6 N10150 P6515 DWST_BINIT 13 0x30000bf Int BE Pri
!#A N10149 N10150
!#6 N10151 P6516 MEMBAR
!#6 N10152 P6517 LDD 11 -1 Int BE Pri
!#6 N10153 P6518 DWLD 21 -1 Int BE Pri
!#6 N10154 P6518 DWLD 22 -1 Int BE Pri
!#A N10153 N10154
!#6 N10155 P6518 CASX 21 -1 N10153 0x30000c0 Int BE Pri
!#6 N10156 P6518 CASX 22 -1 N10154 0x30000c1 Int BE Pri
!#A N10155 N10156
!#6 N10157 P6519 PREFETCH 3 Int BE Pri
!#6 N10158 P6520 LD 10 -1 Int BE Pri
!#6 N10159 P6521 DWST 12 0x30000c2 Int BE Pri
!#6 N10160 P6521 DWST 13 0x30000c3 Int BE Pri
!#A N10159 N10160
!#6 N10161 P6522 DWST 0 0x30000c4 Int BE Pri
!#6 N10162 P6522 DWST 1 0x30000c5 Int BE Pri
!#A N10161 N10162
!#6 N10163 P6523 LD 0 -1 Int BE Pri
!#6 N10164 P6523 CAS 0 -1 N10163 0x30000c6 Int BE Pri
!#6 N10165 P6524 DWST_BINIT 14 0x30000c7 Int BE Pri
!#6 N10166 P6525 MEMBAR
!#6 N10167 P6526 SWAP 16 0xffffffff 0x30000c8 Int BE Pri
!#6 N10168 P6527 PREFETCH 11 Int LE Pri
!#6 N10169 P6528 LD 5 -1 Int BE Pri
!#6 N10170 P6528 CAS 5 -1 N10169 0x30000c9 Int BE Pri
!#6 N10171 P6529 DWLD 12 -1 Int BE Pri
!#6 N10172 P6529 DWLD 13 -1 Int BE Pri
!#A N10171 N10172
!#6 N10173 P6529 CASX 12 -1 N10171 0x30000ca Int BE Pri
!#6 N10174 P6529 CASX 13 -1 N10172 0x30000cb Int BE Pri
!#A N10173 N10174
!#6 N10175 P6530 PREFETCH 0 Int BE Pri
!#6 N10176 P6531 MEMBAR
!#6 N10177 P6532 BLD 18 -1 FP BE Pri
!#6 N10178 P6532 BLD 19 -1 FP BE Pri
!#A N10177 N10178
!#6 N10179 P6532 BLD 20 -1 FP BE Pri
!#6 N10180 P6533 MEMBAR
!#6 N10181 P6534 LDD 11 -1 Int BE Pri
!#6 N10182 P6535 MEMBAR
!#6 N10183 P6536 BLD 3 -1 FP BE Pri
!#6 N10184 P6536 BLD 4 -1 FP BE Pri
!#A N10183 N10184
!#6 N10185 P6536 BLD 5 -1 FP BE Pri
!#6 N10186 P6537 MEMBAR
!#6 N10187 P6538 DWST_BINIT 9 0x30000cc Int BE Pri
!#6 N10188 P6538 DWST_BINIT 10 0x30000cd Int BE Pri
!#A N10187 N10188
!#6 N10189 P6539 MEMBAR
!#6 N10190 P6540 ST 19 0x30000ce Int BE Pri
!#6 N10191 P6541 ST 0 0x30000cf Int BE Pri
!#6 N10192 P6542 PREFETCH 7 Int BE Pri
!#6 N10193 P6543 PREFETCH 23 Int BE Pri
!#6 N10194 P6544 DWST 23 0x30000d0 Int BE Pri
!#6 N10195 P6545 MEMBAR
!#6 N10196 P6546 BLD 9 -1 FP BE Pri
!#6 N10197 P6546 BLD 10 -1 FP BE Pri
!#A N10196 N10197
!#6 N10198 P6546 BLD 11 -1 FP BE Pri
!#6 N10199 P6547 MEMBAR
!#6 N10200 P6548 BLD 15 -1 FP BE Pri
!#6 N10201 P6548 BLD 16 -1 FP BE Pri
!#A N10200 N10201
!#6 N10202 P6548 BLD 17 -1 FP BE Pri
!#6 N10203 P6549 MEMBAR
!#6 N10204 P6550 DWST_BINIT 6 0x30000d1 Int BE Pri
!#6 N10205 P6550 DWST_BINIT 7 0x30000d2 Int BE Pri
!#A N10204 N10205
!#6 N10206 P6551 MEMBAR
!#6 N10207 P6552 PREFETCH 8 Int BE Pri
!#6 N10208 P6553 PREFETCH 8 Int BE Pri
!#6 N10209 P6554 REPLACEMENT 4 Int BE Pri
!#6 N10210 P6555 LDD 18 -1 Int BE Pri
!#6 N10211 P6555 LDD 19 -1 Int BE Pri
!#A N10210 N10211
!#6 N10212 P6556 ST_BINIT 2 0x30000d3 Int BE Pri
!#6 N10213 P6557 MEMBAR
!#6 N10214 P6558 BSTC 9 0x4280009d FP BE Pri
!#6 N10215 P6558 BSTC 10 0x4280009e FP BE Pri
!#A N10214 N10215
!#6 N10216 P6558 BSTC 11 0x4280009f FP BE Pri
!#6 N10217 P6559 MEMBAR
!#6 N10218 P6560 LDD 15 -1 Int BE Pri
!#6 N10219 P6560 LDD 16 -1 Int BE Pri
!#A N10218 N10219
!#6 N10220 P6561 LD 11 -1 Int BE Pri
!#6 N10221 P6562 DWST_BINIT 9 0x30000d4 Int BE Pri
!#6 N10222 P6562 DWST_BINIT 10 0x30000d5 Int BE Pri
!#A N10221 N10222
!#6 N10223 P6563 MEMBAR
!#6 N10224 P6564 BSTC 18 0x428000a0 FP BE Pri
!#6 N10225 P6564 BSTC 19 0x428000a1 FP BE Pri
!#A N10224 N10225
!#6 N10226 P6564 BSTC 20 0x428000a2 FP BE Pri
!#6 N10227 P6565 MEMBAR
!#6 N10228 P6566 ST 15 0x30000d6 Int BE Pri
!#6 N10229 P6567 MEMBAR
!#6 N10230 P6568 BSTC 12 0x428000a3 FP BE Pri
!#6 N10231 P6568 BSTC 13 0x428000a4 FP BE Pri
!#A N10230 N10231
!#6 N10232 P6568 BSTC 14 0x428000a5 FP BE Pri
!#6 N10233 P6569 MEMBAR
!#6 N10234 P6570 PREFETCH 8 Int BE Pri
!#6 N10235 P6571 PREFETCH 10 Int BE Pri
!#6 N10236 P6572 LD 23 -1 Int BE Pri
!#6 N10237 P6572 CAS 23 -1 N10236 0x30000d7 Int BE Pri
!#6 N10238 P6573 ST 18 0x30000d8 Int BE Pri
!#6 N10239 P6574 ST_BINIT 15 0x30000d9 Int BE Pri
!#6 N10240 P6575 MEMBAR
!#6 N10241 P6576 BLD 15 -1 FP BE Pri
!#6 N10242 P6576 BLD 16 -1 FP BE Pri
!#A N10241 N10242
!#6 N10243 P6576 BLD 17 -1 FP BE Pri
!#6 N10244 P6577 MEMBAR
!#6 N10245 P6578 DWST 21 0x30000da Int BE Pri
!#6 N10246 P6578 DWST 22 0x30000db Int BE Pri
!#A N10245 N10246
!#6 N10247 P6579 ST_BINIT 3 0x30000dc Int BE Pri
!#6 N10248 P6580 MEMBAR
!#6 N10249 P6581 DWLD 18 -1 Int BE Pri
!#6 N10250 P6581 DWLD 19 -1 Int BE Pri
!#A N10249 N10250
!#6 N10251 P6581 CASX 18 -1 N10249 0x30000dd Int BE Pri
!#6 N10252 P6581 CASX 19 -1 N10250 0x30000de Int BE Pri
!#A N10251 N10252
!#6 N10253 P6582 MEMBAR
!#6 N10254 P6583 BSTC 12 0x428000a6 FP BE Pri
!#6 N10255 P6583 BSTC 13 0x428000a7 FP BE Pri
!#A N10254 N10255
!#6 N10256 P6583 BSTC 14 0x428000a8 FP BE Pri
!#6 N10257 P6584 MEMBAR
!#6 N10258 P6585 PREFETCH 23 Int BE Pri
!#6 N10259 P6586 DWST_BINIT 23 0x30000df Int BE Pri
!#6 N10260 P6587 MEMBAR
!#6 N10261 P6588 REPLACEMENT 22 Int BE Pri
!#6 N10262 P6589 DWLD 15 -1 Int BE Pri
!#6 N10263 P6589 DWLD 16 -1 Int BE Pri
!#A N10262 N10263
!#6 N10264 P6589 CASX 15 -1 N10262 0x30000e0 Int BE Pri
!#6 N10265 P6589 CASX 16 -1 N10263 0x30000e1 Int BE Pri
!#A N10264 N10265
!#6 N10266 P6590 LDD 21 -1 Int BE Pri
!#6 N10267 P6590 LDD 22 -1 Int BE Pri
!#A N10266 N10267
!#6 N10268 P6591 ST 16 0x30000e2 Int BE Pri
!#6 N10269 P6592 LDD 20 -1 Int BE Pri
!#6 N10270 P6593 LD 12 -1 Int BE Pri
!#6 N10271 P6594 SWAP 11 0xffffffff 0x30000e3 Int BE Pri
!#6 N10272 P6595 MEMBAR
!#6 N10273 P6596 BSTC 3 0x428000a9 FP BE Pri
!#6 N10274 P6596 BSTC 4 0x428000aa FP BE Pri
!#A N10273 N10274
!#6 N10275 P6596 BSTC 5 0x428000ab FP BE Pri
!#6 N10276 P6597 MEMBAR
!#6 N10277 P6598 PREFETCH 8 Int BE Pri
!#6 N10278 P6599 LDD 8 -1 Int BE Pri
!#6 N10279 P6600 DWLD 15 -1 Int BE Pri
!#6 N10280 P6600 DWLD 16 -1 Int BE Pri
!#A N10279 N10280
!#6 N10281 P6601 DWLD 20 -1,0x0 Int BE Pri
!#6 N10282 P6601 CASX 20 -1,0x0 N10281 0x30000e4 Int BE Pri
!#6 N10283 P6602 ST 11 0x30000e5 Int BE Pri
!#6 N10284 P6603 DWST_BINIT 0 0x30000e6 Int BE Pri
!#6 N10285 P6603 DWST_BINIT 1 0x30000e7 Int BE Pri
!#A N10284 N10285
!#6 N10286 P6604 MEMBAR
!#6 N10287 P6605 LD 4 -1 Int BE Pri
!#6 N10288 P6605 CAS 4 -1 N10287 0x30000e8 Int BE Pri
!#6 N10289 P6606 DWLD 6 -1 Int BE Pri
!#6 N10290 P6606 DWLD 7 -1 Int BE Pri
!#A N10289 N10290
!#6 N10291 P6606 CASX 6 -1 N10289 0x30000e9 Int BE Pri
!#6 N10292 P6606 CASX 7 -1 N10290 0x30000ea Int BE Pri
!#A N10291 N10292
!#6 N10293 P6607 REPLACEMENT 11 Int BE Pri
!#6 N10294 P6608 DWLD 0 -1 Int BE Pri
!#6 N10295 P6608 DWLD 1 -1 Int BE Pri
!#A N10294 N10295
!#6 N10296 P6608 CASX 0 -1 N10294 0x30000eb Int BE Pri
!#6 N10297 P6608 CASX 1 -1 N10295 0x30000ec Int BE Pri
!#A N10296 N10297
!#6 N10298 P6609 DWLD 2 -1 Int BE Pri
!#6 N10299 P6610 LD 2 -1 Int BE Pri
!#6 N10300 P6610 CAS 2 -1 N10299 0x30000ed Int BE Pri
!#6 N10301 P6611 DWST_BINIT 21 0x30000ee Int BE Pri
!#6 N10302 P6611 DWST_BINIT 22 0x30000ef Int BE Pri
!#A N10301 N10302
!#6 N10303 P6612 MEMBAR
!#6 N10304 P6613 BLD 15 -1 FP BE Pri
!#6 N10305 P6613 BLD 16 -1 FP BE Pri
!#A N10304 N10305
!#6 N10306 P6613 BLD 17 -1 FP BE Pri
!#6 N10307 P6614 MEMBAR
!#6 N10308 P6615 LDD 9 -1 Int BE Pri
!#6 N10309 P6615 LDD 10 -1 Int BE Pri
!#A N10308 N10309
!#6 N10310 P6616 DWLD 3 -1 Int BE Pri
!#6 N10311 P6616 DWLD 4 -1 Int BE Pri
!#A N10310 N10311
!#6 N10312 P6617 DWLD 11 -1 Int BE Pri
!#6 N10313 P6618 MEMBAR
!#6 N10314 P6619 BLD 18 -1 FP BE Pri
!#6 N10315 P6619 BLD 19 -1 FP BE Pri
!#A N10314 N10315
!#6 N10316 P6619 BLD 20 -1 FP BE Pri
!#6 N10317 P6620 MEMBAR
!#6 N10318 P6621 ST 8 0x30000f0 Int BE Pri
!#6 N10319 P6622 DWST_BINIT 5 0x30000f1 Int BE Pri
!#6 N10320 P6623 MEMBAR
!#6 N10321 P6624 LD 14 -1 Int BE Pri
!#6 N10322 P6624 CAS 14 -1 N10321 0x30000f2 Int BE Pri
!#6 N10323 P6625 SWAP 12 0xffffffff 0x30000f3 Int LE Pri
!#6 N10324 P6626 ST 22 0x30000f4 Int BE Pri
!#6 N10325 P6627 LDD 8 -1 Int BE Pri
!#6 N10326 P6628 LDD 0 -1 Int LE Pri
!#6 N10327 P6628 LDD 1 -1 Int LE Pri
!#A N10326 N10327
!#6 N10328 P6629 MEMBAR
!#6 N10329 P6630 BSTC 18 0x428000ac FP BE Pri
!#6 N10330 P6630 BSTC 19 0x428000ad FP BE Pri
!#A N10329 N10330
!#6 N10331 P6630 BSTC 20 0x428000ae FP BE Pri
!#6 N10332 P6631 MEMBAR
!#6 N10333 P6632 BSTC 21 0x428000af FP BE Pri
!#6 N10334 P6632 BSTC 22 0x428000b0 FP BE Pri
!#A N10333 N10334
!#6 N10335 P6632 BSTC 23 0x428000b1 FP BE Pri
!#6 N10336 P6633 MEMBAR
!#6 N10337 P6634 PREFETCH 18 Int BE Pri
!#6 N10338 P6635 ST 9 0x30000f5 Int BE Pri
!#6 N10339 P6636 SWAP 10 0xffffffff 0x30000f6 Int BE Pri
!#6 N10340 P6637 MEMBAR
!#6 N10341 P6638 BSTC 0 0x428000b2 FP BE Pri
!#6 N10342 P6638 BSTC 1 0x428000b3 FP BE Pri
!#A N10341 N10342
!#6 N10343 P6638 BSTC 2 0x428000b4 FP BE Pri
!#6 N10344 P6639 MEMBAR
!#6 N10345 P6640 ST_BINIT 6 0x30000f7 Int BE Pri
!#6 N10346 P6641 MEMBAR
!#6 N10347 P6642 LD 21 -1 Int BE Pri
!#6 N10348 P6643 DWLD 17 -1 Int BE Pri
!#6 N10349 P6644 PREFETCH 9 Int BE Pri
!#6 N10350 P6645 DWLD 23 -1,0x0 Int LE Pri
!#6 N10351 P6645 CASX 23 -1,0x0 N10350 0x30000f8 Int LE Pri
!#6 N10352 P6646 LD 23 -1 Int BE Pri
!#6 N10353 P6646 CAS 23 -1 N10352 0x30000f9 Int BE Pri
!#6 N10354 P6647 PREFETCH 20 Int BE Pri
!#6 N10355 P6648 MEMBAR
!#6 N10356 P6649 BSTC 15 0x428000b5 FP BE Pri
!#6 N10357 P6649 BSTC 16 0x428000b6 FP BE Pri
!#A N10356 N10357
!#6 N10358 P6649 BSTC 17 0x428000b7 FP BE Pri
!#6 N10359 P6650 MEMBAR
!#6 N10360 P6651 BLD 12 -1 FP BE Pri
!#6 N10361 P6651 BLD 13 -1 FP BE Pri
!#A N10360 N10361
!#6 N10362 P6651 BLD 14 -1 FP BE Pri
!#6 N10363 P6652 MEMBAR
!#6 N10364 P6653 BSTC 15 0x428000b8 FP BE Pri
!#6 N10365 P6653 BSTC 16 0x428000b9 FP BE Pri
!#A N10364 N10365
!#6 N10366 P6653 BSTC 17 0x428000ba FP BE Pri
!#6 N10367 P6654 MEMBAR
!#6 N10368 P6655 ST_BINIT 9 0x30000fa Int BE Pri
!#6 N10369 P6656 MEMBAR
!#6 N10370 P6657 DWLD 14 -1,0x0 Int LE Pri
!#6 N10371 P6657 CASX 14 -1,0x0 N10370 0x30000fb Int LE Pri
!#6 N10372 P6658 PREFETCH 18 Int BE Pri
!#6 N10373 P6659 DWST 9 0x30000fc Int BE Pri
!#6 N10374 P6659 DWST 10 0x30000fd Int BE Pri
!#A N10373 N10374
!#6 N10375 P6660 MEMBAR
!#6 N10376 P6661 BSTC 18 0x428000bb FP BE Pri
!#6 N10377 P6661 BSTC 19 0x428000bc FP BE Pri
!#A N10376 N10377
!#6 N10378 P6661 BSTC 20 0x428000bd FP BE Pri
!#6 N10379 P6662 MEMBAR
!#6 N10380 P6663 LDD 3 -1 Int BE Pri
!#6 N10381 P6663 LDD 4 -1 Int BE Pri
!#A N10380 N10381
!#6 N10382 P6664 MEMBAR
!#6 N10383 P6665 BST 0 0x428000be FP BE Pri
!#6 N10384 P6665 BST 1 0x428000bf FP BE Pri
!#A N10383 N10384
!#6 N10385 P6665 BST 2 0x428000c0 FP BE Pri
!#6 N10386 P6666 MEMBAR
!#6 N10387 P6667 SWAP 19 0xffffffff 0x30000fe Int BE Pri
!#6 N10388 P6668 LDD 3 -1 Int BE Pri
!#6 N10389 P6668 LDD 4 -1 Int BE Pri
!#A N10388 N10389
!#6 N10390 P6669 DWST_BINIT 9 0x30000ff Int BE Pri
!#6 N10391 P6669 DWST_BINIT 10 0x3000100 Int BE Pri
!#A N10390 N10391
!#6 N10392 P6670 MEMBAR
!#6 N10393 P6671 DWLD 23 -1 Int BE Pri
!#6 N10394 P6672 DWLD 21 -1 Int BE Pri
!#6 N10395 P6672 DWLD 22 -1 Int BE Pri
!#A N10394 N10395
!#6 N10396 P6673 PREFETCH 20 Int BE Pri
!#6 N10397 P6674 LD 7 -1 Int BE Pri
!#6 N10398 P6675 DWST_BINIT 18 0x3000101 Int BE Pri
!#6 N10399 P6675 DWST_BINIT 19 0x3000102 Int BE Pri
!#A N10398 N10399
!#6 N10400 P6676 MEMBAR
!#6 N10401 P6677 SWAP 12 0xffffffff 0x3000103 Int BE Pri
!#6 N10402 P6678 SWAP 19 0xffffffff 0x3000104 Int BE Pri
!#6 N10403 P6679 DWLD 6 -1 Int BE Pri
!#6 N10404 P6679 DWLD 7 -1 Int BE Pri
!#A N10403 N10404
!#6 N10405 P6680 DWST_BINIT 8 0x3000105 Int BE Pri
!#6 N10406 P6681 MEMBAR
!#6 N10407 P6682 DWLD 12 -1 Int LE Pri
!#6 N10408 P6682 DWLD 13 -1 Int LE Pri
!#A N10407 N10408
!#6 N10409 P6682 CASX 12 -1 N10407 0x3000106 Int LE Pri
!#6 N10410 P6682 CASX 13 -1 N10408 0x3000107 Int LE Pri
!#A N10409 N10410
!#6 N10411 P6683 ST 13 0x3000108 Int BE Pri
!#6 N10412 P6684 ST_BINIT 6 0x3000109 Int BE Pri
!#6 N10413 P6685 MEMBAR
!#6 N10414 P6686 ST_BINIT 3 0x300010a Int BE Pri
!#6 N10415 P6687 MEMBAR
!#6 N10416 P6688 DWLD 15 -1 Int BE Pri
!#6 N10417 P6688 DWLD 16 -1 Int BE Pri
!#A N10416 N10417
!#6 N10418 P6688 CASX 15 -1 N10416 0x300010b Int BE Pri
!#6 N10419 P6688 CASX 16 -1 N10417 0x300010c Int BE Pri
!#A N10418 N10419
!#6 N10420 P6689 LDD 23 -1 Int BE Pri
!#6 N10421 P6690 ST_BINIT 4 0x300010d Int BE Pri
!#6 N10422 P6691 MEMBAR
!#6 N10423 P6692 SWAP 6 0xffffffff 0x300010e Int BE Pri
!#6 N10424 P6693 DWST_BINIT 23 0x300010f Int BE Pri
!#6 N10425 P6694 MEMBAR
!#6 N10426 P6695 PREFETCH 7 Int BE Pri
!#6 N10427 P6696 LDD 6 -1 Int BE Pri
!#6 N10428 P6696 LDD 7 -1 Int BE Pri
!#A N10427 N10428
!#6 N10429 P6697 LDD 3 -1 Int BE Pri
!#6 N10430 P6697 LDD 4 -1 Int BE Pri
!#A N10429 N10430
!#6 N10431 P6698 LD 16 -1 Int BE Pri
!#6 N10432 P6698 CAS 16 -1 N10431 0x3000110 Int BE Pri
!#6 N10433 P6699 LD 8 -1 Int BE Pri
!#6 N10434 P6699 CAS 8 -1 N10433 0x3000111 Int BE Pri
!#6 N10435 P6700 REPLACEMENT 10 Int BE Pri
!#6 N10436 P6701 MEMBAR
!#6 N10437 P6702 BST 6 0x428000c1 FP BE Pri
!#6 N10438 P6702 BST 7 0x428000c2 FP BE Pri
!#A N10437 N10438
!#6 N10439 P6702 BST 8 0x428000c3 FP BE Pri
!#6 N10440 P6703 MEMBAR
!#6 N10441 P6704 BLD 9 -1 FP BE Pri
!#6 N10442 P6704 BLD 10 -1 FP BE Pri
!#A N10441 N10442
!#6 N10443 P6704 BLD 11 -1 FP BE Pri
!#6 N10444 P6705 MEMBAR
!#6 N10445 P6706 LD 4 -1 Int BE Pri
!#6 N10446 P6707 MEMBAR
!#6 N10447 P6708 BST 9 0x428000c4 FP BE Pri
!#6 N10448 P6708 BST 10 0x428000c5 FP BE Pri
!#A N10447 N10448
!#6 N10449 P6708 BST 11 0x428000c6 FP BE Pri
!#6 N10450 P6709 MEMBAR
!#6 N10451 P6710 LD 4 -1 Int BE Pri
!#6 N10452 P6710 CAS 4 -1 N10451 0x3000112 Int BE Pri
!#6 N10453 P6711 LD 18 -1 Int BE Pri
!#6 N10454 P6712 SWAP 13 0xffffffff 0x3000113 Int BE Pri
!#6 N10455 P6713 DWLD 17 -1 Int BE Pri
!#6 N10456 P6714 ST 22 0x3000114 Int BE Pri
!#6 N10457 P6715 MEMBAR
!#6 N10458 P6716 BST 0 0x428000c7 FP BE Pri
!#6 N10459 P6716 BST 1 0x428000c8 FP BE Pri
!#A N10458 N10459
!#6 N10460 P6716 BST 2 0x428000c9 FP BE Pri
!#6 N10461 P6717 MEMBAR
!#6 N10462 P6718 BST 18 0x428000ca FP BE Pri
!#6 N10463 P6718 BST 19 0x428000cb FP BE Pri
!#A N10462 N10463
!#6 N10464 P6718 BST 20 0x428000cc FP BE Pri
!#6 N10465 P6719 MEMBAR
!#6 N10466 P6720 BST 0 0x428000cd FP BE Pri
!#6 N10467 P6720 BST 1 0x428000ce FP BE Pri
!#A N10466 N10467
!#6 N10468 P6720 BST 2 0x428000cf FP BE Pri
!#6 N10469 P6721 MEMBAR
!#6 N10470 P6722 DWST_BINIT 3 0x3000115 Int BE Pri
!#6 N10471 P6722 DWST_BINIT 4 0x3000116 Int BE Pri
!#A N10470 N10471
!#6 N10472 P6723 MEMBAR
!#6 N10473 P6724 LD 15 -1 Int BE Pri
!#6 N10474 P6724 CAS 15 -1 N10473 0x3000117 Int BE Pri
!#6 N10475 P6725 ST_BINIT 21 0x3000118 Int BE Pri
!#6 N10476 P6726 MEMBAR
!#6 N10477 P6727 REPLACEMENT 11 Int BE Pri
!#6 N10478 P6728 LDD 21 -1 Int BE Pri
!#6 N10479 P6728 LDD 22 -1 Int BE Pri
!#A N10478 N10479
!#6 N10480 P6729 ST 18 0x3000119 Int BE Pri
!#6 N10481 P6730 LD 22 -1 Int BE Pri
!#6 N10482 P6731 PREFETCH 1 Int BE Pri
!#6 N10483 P6732 LD 4 -1 Int BE Pri
!#6 N10484 P6733 LDD 12 -1 Int BE Pri
!#6 N10485 P6733 LDD 13 -1 Int BE Pri
!#A N10484 N10485
!#6 N10486 P6734 MEMBAR
!#6 N10487 P6735 BSTC 6 0x428000d0 FP BE Pri
!#6 N10488 P6735 BSTC 7 0x428000d1 FP BE Pri
!#A N10487 N10488
!#6 N10489 P6735 BSTC 8 0x428000d2 FP BE Pri
!#6 N10490 P6736 MEMBAR
!#6 N10491 P6737 SWAP 10 0xffffffff 0x300011a Int BE Pri
!#6 N10492 P6738 LD 23 -1 Int LE Pri
!#6 N10493 P6738 CAS 23 -1 N10492 0x300011b Int LE Pri
!#6 N10494 P6739 LDD 18 -1 Int BE Pri
!#6 N10495 P6739 LDD 19 -1 Int BE Pri
!#A N10494 N10495
!#6 N10496 P6740 SWAP 15 0xffffffff 0x300011c Int BE Pri
!#6 N10497 P6741 LDD 6 -1 Int BE Pri
!#6 N10498 P6741 LDD 7 -1 Int BE Pri
!#A N10497 N10498
!#6 N10499 P6742 DWST 9 0x300011d Int BE Pri
!#6 N10500 P6742 DWST 10 0x300011e Int BE Pri
!#A N10499 N10500
!#6 N10501 P6743 MEMBAR
!#6 N10502 P6744 BST 0 0x428000d3 FP BE Pri
!#6 N10503 P6744 BST 1 0x428000d4 FP BE Pri
!#A N10502 N10503
!#6 N10504 P6744 BST 2 0x428000d5 FP BE Pri
!#6 N10505 P6745 MEMBAR
!#6 N10506 P6746 LDD 3 -1 Int BE Pri
!#6 N10507 P6746 LDD 4 -1 Int BE Pri
!#A N10506 N10507
!#6 N10508 P6747 LDD 2 -1 Int BE Pri
!#6 N10509 P6748 PREFETCH 21 Int BE Pri
!#6 N10510 P6749 DWLD 18 -1 Int BE Pri
!#6 N10511 P6749 DWLD 19 -1 Int BE Pri
!#A N10510 N10511
!#6 N10512 P6750 PREFETCH 5 Int BE Pri
!#6 N10513 P6751 DWST_BINIT 20 0x300011f Int BE Pri
!#6 N10514 P6752 MEMBAR
!#6 N10515 P6753 PREFETCH 19 Int BE Pri
!#6 N10516 P6754 SWAP 15 0xffffffff 0x3000120 Int BE Pri
!#6 N10517 P6755 MEMBAR
!#6 N10518 P6756 BST 21 0x428000d6 FP BE Pri
!#6 N10519 P6756 BST 22 0x428000d7 FP BE Pri
!#A N10518 N10519
!#6 N10520 P6756 BST 23 0x428000d8 FP BE Pri
!#6 N10521 P6757 MEMBAR
!#6 N10522 P6758 LD 0 -1 Int BE Pri
!#6 N10523 P6758 CAS 0 -1 N10522 0x3000121 Int BE Pri
!#6 N10524 P6759 LD 0 -1 Int BE Pri
!#6 N10525 P6760 PREFETCH 15 Int BE Pri
!#6 N10526 P6761 MEMBAR
!#6 N10527 P6762 BLD 9 -1 FP BE Pri
!#6 N10528 P6762 BLD 10 -1 FP BE Pri
!#A N10527 N10528
!#6 N10529 P6762 BLD 11 -1 FP BE Pri
!#6 N10530 P6763 MEMBAR
!#6 N10531 P6764 BSTC 6 0x428000d9 FP BE Pri
!#6 N10532 P6764 BSTC 7 0x428000da FP BE Pri
!#A N10531 N10532
!#6 N10533 P6764 BSTC 8 0x428000db FP BE Pri
!#6 N10534 P6765 MEMBAR
!#6 N10535 P6766 ST_BINIT 5 0x3000122 Int BE Pri
!#6 N10536 P6767 MEMBAR
!#6 N10537 P6768 REPLACEMENT 6 Int BE Pri
!#6 N10538 P6769 ST_BINIT 19 0x3000123 Int BE Pri
!#6 N10539 P6770 MEMBAR
!#6 N10540 P6771 LDD 11 -1 Int BE Pri
!#6 N10541 P6772 MEMBAR
!#6 N10542 P6773 BLD 3 -1 FP BE Pri
!#6 N10543 P6773 BLD 4 -1 FP BE Pri
!#A N10542 N10543
!#6 N10544 P6773 BLD 5 -1 FP BE Pri
!#6 N10545 P6774 MEMBAR
!#6 N10546 P6775 LD 6 -1 Int BE Pri
!#6 N10547 P6775 CAS 6 -1 N10546 0x3000124 Int BE Pri
!#6 N10548 P6776 DWLD 8 -1 Int BE Pri
!#6 N10549 P6777 ST 6 0x3000125 Int BE Pri
!#6 N10550 P6778 MEMBAR
!#6 N10551 P6779 BLD 9 -1 FP BE Pri
!#6 N10552 P6779 BLD 10 -1 FP BE Pri
!#A N10551 N10552
!#6 N10553 P6779 BLD 11 -1 FP BE Pri
!#6 N10554 P6780 MEMBAR
!#6 N10555 P6781 LDD 2 -1 Int BE Pri
!#6 N10556 P6782 MEMBAR
!#6 N10557 P6783 BSTC 6 0x428000dc FP BE Pri
!#6 N10558 P6783 BSTC 7 0x428000dd FP BE Pri
!#A N10557 N10558
!#6 N10559 P6783 BSTC 8 0x428000de FP BE Pri
!#6 N10560 P6784 MEMBAR
!#6 N10561 P6785 REPLACEMENT 20 Int BE Pri
!#6 N10562 P6786 SWAP 17 0xffffffff 0x3000126 Int BE Pri
!#6 N10563 P6787 LD 3 -1 Int LE Pri
!#6 N10564 P6788 LD 17 -1 Int BE Pri
!#6 N10565 P6788 CAS 17 -1 N10564 0x3000127 Int BE Pri
!#6 N10566 P6789 MEMBAR
!#6 N10567 P6790 BLD 18 -1 FP BE Pri
!#6 N10568 P6790 BLD 19 -1 FP BE Pri
!#A N10567 N10568
!#6 N10569 P6790 BLD 20 -1 FP BE Pri
!#6 N10570 P6791 MEMBAR
!#6 N10571 P6792 BLD 6 -1 FP BE Pri
!#6 N10572 P6792 BLD 7 -1 FP BE Pri
!#A N10571 N10572
!#6 N10573 P6792 BLD 8 -1 FP BE Pri
!#6 N10574 P6793 MEMBAR
!#6 N10575 P6794 BST 6 0x428000df FP BE Pri
!#6 N10576 P6794 BST 7 0x428000e0 FP BE Pri
!#A N10575 N10576
!#6 N10577 P6794 BST 8 0x428000e1 FP BE Pri
!#6 N10578 P6795 MEMBAR
!#6 N10579 P6796 LD 8 -1 Int BE Pri
!#6 N10580 P6797 MEMBAR
!#6 N10581 P6798 BSTC 18 0x428000e2 FP BE Pri
!#6 N10582 P6798 BSTC 19 0x428000e3 FP BE Pri
!#A N10581 N10582
!#6 N10583 P6798 BSTC 20 0x428000e4 FP BE Pri
!#6 N10584 P6799 MEMBAR
!#6 N10585 P6800 DWLD 17 -1 Int BE Pri
!#6 N10586 P6801 DWLD 12 -1 FP BE Pri
!#6 N10587 P6801 DWLD 13 -1 FP BE Pri
!#A N10586 N10587
!#6 N10588 P6802 PREFETCH 11 Int BE Pri
!#6 N10589 P6803 PREFETCH 6 Int BE Pri
!#6 N10590 P6804 DWST_BINIT 18 0x3000128 Int BE Pri
!#6 N10591 P6804 DWST_BINIT 19 0x3000129 Int BE Pri
!#A N10590 N10591
!#6 N10592 P6805 MEMBAR
!#6 N10593 P6806 ST_BINIT 17 0x300012a Int BE Pri
!#6 N10594 P6807 MEMBAR
!#6 N10595 P6808 DWST 17 0x300012b Int BE Pri
!#6 N10596 P6809 LD 17 -1 Int BE Pri
!#6 N10597 P6810 DWST_BINIT 5 0x300012c Int BE Pri
!#6 N10598 P6811 MEMBAR
!#6 N10599 P6812 LD 17 -1 Int BE Pri
!#6 N10600 P6812 CAS 17 -1 N10599 0x300012d Int BE Pri
!#6 N10601 P6813 DWST_BINIT 0 0x300012e Int BE Pri
!#6 N10602 P6813 DWST_BINIT 1 0x300012f Int BE Pri
!#A N10601 N10602
!#6 N10603 P6814 MEMBAR
!#6 N10604 P6815 BLD 12 -1 FP BE Pri
!#6 N10605 P6815 BLD 13 -1 FP BE Pri
!#A N10604 N10605
!#6 N10606 P6815 BLD 14 -1 FP BE Pri
!#6 N10607 P6816 MEMBAR
!#6 N10608 P6817 DWLD 17 -1 Int BE Pri
!#6 N10609 P6818 DWST 11 0x3000130 Int BE Pri
!#6 N10610 P6819 SWAP 21 0xffffffff 0x3000131 Int BE Pri
!#6 N10611 P6820 DWST 9 0x3000132 Int BE Pri
!#6 N10612 P6820 DWST 10 0x3000133 Int BE Pri
!#A N10611 N10612
!#6 N10613 P6821 LDD 11 -1 Int BE Pri
!#6 N10614 P6822 LD 1 -1 Int BE Pri
!#6 N10615 P6822 CAS 1 -1 N10614 0x3000134 Int BE Pri
!#6 N10616 P6823 SWAP 4 0xffffffff 0x3000135 Int BE Pri
!#6 N10617 P6824 LD 22 -1 Int BE Pri
!#6 N10618 P6825 DWLD 0 -1 Int BE Pri
!#6 N10619 P6825 DWLD 1 -1 Int BE Pri
!#A N10618 N10619
!#6 N10620 P6825 CASX 0 -1 N10618 0x3000136 Int BE Pri
!#6 N10621 P6825 CASX 1 -1 N10619 0x3000137 Int BE Pri
!#A N10620 N10621
!#6 N10622 P6826 DWLD 8 -1 Int BE Pri
!#6 N10623 P6827 DWLD 0 -1 Int LE Pri
!#6 N10624 P6827 DWLD 1 -1 Int LE Pri
!#A N10623 N10624
!#6 N10625 P6827 CASX 0 -1 N10623 0x3000138 Int LE Pri
!#6 N10626 P6827 CASX 1 -1 N10624 0x3000139 Int LE Pri
!#A N10625 N10626
!#6 N10627 P6828 SWAP 0 0xffffffff 0x300013a Int BE Pri
!#6 N10628 P6829 LDD 15 -1 Int LE Pri
!#6 N10629 P6829 LDD 16 -1 Int LE Pri
!#A N10628 N10629
!#6 N10630 P6830 LD 0 -1 Int BE Pri
!#6 N10631 P6831 ST 17 0x300013b Int BE Pri
!#6 N10632 P6832 ST 1 0x300013c Int BE Pri
!#6 N10633 P6833 DWLD 0 -1 FP BE Pri
!#6 N10634 P6833 DWLD 1 -1 FP BE Pri
!#A N10633 N10634
!#6 N10635 P6834 ST_BINIT 15 0x300013d Int LE Pri
!#6 N10636 P6835 MEMBAR
!#6 N10637 P6836 DWLD 9 -1 Int BE Pri
!#6 N10638 P6836 DWLD 10 -1 Int BE Pri
!#A N10637 N10638
!#6 N10639 P6836 CASX 9 -1 N10637 0x300013e Int BE Pri
!#6 N10640 P6836 CASX 10 -1 N10638 0x300013f Int BE Pri
!#A N10639 N10640
!#6 N10641 P6837 MEMBAR
!#6 N10642 P6838 BSTC 3 0x428000e5 FP BE Pri
!#6 N10643 P6838 BSTC 4 0x428000e6 FP BE Pri
!#A N10642 N10643
!#6 N10644 P6838 BSTC 5 0x428000e7 FP BE Pri
!#6 N10645 P6839 MEMBAR
!#6 N10646 P6840 LD 8 -1 Int LE Pri
!#6 N10647 P6841 MEMBAR
!#6 N10648 P6842 BSTC 21 0x428000e8 FP BE Pri
!#6 N10649 P6842 BSTC 22 0x428000e9 FP BE Pri
!#A N10648 N10649
!#6 N10650 P6842 BSTC 23 0x428000ea FP BE Pri
!#6 N10651 P6843 MEMBAR
!#6 N10652 P6844 PREFETCH 9 Int BE Pri
!#6 N10653 P6845 DWLD 8 -1 Int BE Pri
!#6 N10654 P6846 ST 8 0x3000140 Int BE Pri
!#6 N10655 P6847 MEMBAR
!#6 N10656 P6848 BSTC 0 0x428000eb FP BE Pri
!#6 N10657 P6848 BSTC 1 0x428000ec FP BE Pri
!#A N10656 N10657
!#6 N10658 P6848 BSTC 2 0x428000ed FP BE Pri
!#6 N10659 P6849 MEMBAR
!#6 N10660 P6850 LD 19 -1 Int BE Pri
!#6 N10661 P6850 CAS 19 -1 N10660 0x3000141 Int BE Pri
!#6 N10662 P6851 DWST_BINIT 0 0x3000142 Int BE Pri
!#6 N10663 P6851 DWST_BINIT 1 0x3000143 Int BE Pri
!#A N10662 N10663
!#6 N10664 P6852 MEMBAR
!#6 N10665 P6853 PREFETCH 14 Int BE Pri
!#6 N10666 P6854 PREFETCH 22 Int BE Pri
!#6 N10667 P6855 MEMBAR
!#6 N10668 P6856 BSTC 12 0x428000ee FP BE Pri
!#6 N10669 P6856 BSTC 13 0x428000ef FP BE Pri
!#A N10668 N10669
!#6 N10670 P6856 BSTC 14 0x428000f0 FP BE Pri
!#6 N10671 P6857 MEMBAR
!#6 N10672 P6858 DWST 2 0x3000144 Int BE Pri
!#6 N10673 P6859 ST 18 0x3000145 Int BE Pri
!#6 N10674 P6860 ST_BINIT 9 0x3000146 Int BE Pri
!#6 N10675 P6861 MEMBAR
!#6 N10676 P6862 DWST 21 0x3000147 Int BE Pri
!#6 N10677 P6862 DWST 22 0x3000148 Int BE Pri
!#A N10676 N10677
!#6 N10678 P6863 DWST 8 0x3000149 Int BE Pri
!#6 N10679 P6864 DWLD 9 -1 Int BE Pri
!#6 N10680 P6864 DWLD 10 -1 Int BE Pri
!#A N10679 N10680
!#6 N10681 P6864 CASX 9 -1 N10679 0x300014a Int BE Pri
!#6 N10682 P6864 CASX 10 -1 N10680 0x300014b Int BE Pri
!#A N10681 N10682
!#6 N10683 P6865 DWLD 11 -1,0x0 Int BE Pri
!#6 N10684 P6865 CASX 11 -1,0x0 N10683 0x300014c Int BE Pri
!#6 N10685 P6866 SWAP 2 0xffffffff 0x300014d Int BE Pri
!#6 N10686 P6867 DWLD 23 -1,0x0 Int BE Pri
!#6 N10687 P6867 CASX 23 -1,0x0 N10686 0x300014e Int BE Pri
!#6 N10688 P6868 SWAP 7 0xffffffff 0x300014f Int BE Pri
!#6 N10689 P6869 ST 15 0x3000150 Int BE Pri
!#6 N10690 P6870 ST 13 0x428000f1 FP BE Pri
!#6 N10691 P6871 DWST_BINIT 15 0x3000151 Int BE Pri
!#6 N10692 P6871 DWST_BINIT 16 0x3000152 Int BE Pri
!#A N10691 N10692
!#6 N10693 P6872 MEMBAR
!#6 N10694 P6873 DWLD 12 -1 Int BE Pri
!#6 N10695 P6873 DWLD 13 -1 Int BE Pri
!#A N10694 N10695
!#6 N10696 P6874 SWAP 4 0xffffffff 0x3000153 Int BE Pri
!#6 N10697 P6875 DWLD 17 -1,0x0 Int BE Pri
!#6 N10698 P6875 CASX 17 -1,0x0 N10697 0x3000154 Int BE Pri
!#6 N10699 P6876 REPLACEMENT 18 Int BE Pri
!#6 N10700 P6877 MEMBAR
!#6 N10701 P6878 BST 18 0x428000f2 FP BE Pri
!#6 N10702 P6878 BST 19 0x428000f3 FP BE Pri
!#A N10701 N10702
!#6 N10703 P6878 BST 20 0x428000f4 FP BE Pri
!#6 N10704 P6879 MEMBAR
!#6 N10705 P6880 BSTC 21 0x428000f5 FP BE Pri
!#6 N10706 P6880 BSTC 22 0x428000f6 FP BE Pri
!#A N10705 N10706
!#6 N10707 P6880 BSTC 23 0x428000f7 FP BE Pri
!#6 N10708 P6881 MEMBAR
!#6 N10709 P6882 PREFETCH 0 Int BE Pri
!#6 N10710 P6883 DWST 15 0x3000155 Int BE Pri
!#6 N10711 P6883 DWST 16 0x3000156 Int BE Pri
!#A N10710 N10711
!#6 N10712 P6884 ST 12 0x3000157 Int BE Pri
!#6 N10713 P6885 REPLACEMENT 10 Int BE Pri
!#6 N10714 P6886 MEMBAR
!#6 N10715 P6887 BLD 21 -1 FP BE Pri
!#6 N10716 P6887 BLD 22 -1 FP BE Pri
!#A N10715 N10716
!#6 N10717 P6887 BLD 23 -1 FP BE Pri
!#6 N10718 P6888 MEMBAR
!#6 N10719 P6889 DWST 21 0x3000158 Int BE Pri
!#6 N10720 P6889 DWST 22 0x3000159 Int BE Pri
!#A N10719 N10720
!#6 N10721 P6890 DWLD 0 -1 Int BE Pri
!#6 N10722 P6890 DWLD 1 -1 Int BE Pri
!#A N10721 N10722
!#6 N10723 P6891 ST 23 0x300015a Int BE Pri
!#6 N10724 P6892 MEMBAR
!#6 N10725 P6893 BST 3 0x428000f8 FP BE Pri
!#6 N10726 P6893 BST 4 0x428000f9 FP BE Pri
!#A N10725 N10726
!#6 N10727 P6893 BST 5 0x428000fa FP BE Pri
!#6 N10728 P6894 MEMBAR
!#6 N10729 P6895 LD 8 -1 Int BE Pri
!#6 N10730 P6895 CAS 8 -1 N10729 0x300015b Int BE Pri
!#6 N10731 P6896 DWST_BINIT 6 0x300015c Int BE Pri
!#6 N10732 P6896 DWST_BINIT 7 0x300015d Int BE Pri
!#A N10731 N10732
!#6 N10733 P6897 MEMBAR
!#6 N10734 P6898 DWST_BINIT 12 0x300015e Int BE Pri
!#6 N10735 P6898 DWST_BINIT 13 0x300015f Int BE Pri
!#A N10734 N10735
!#6 N10736 P6899 MEMBAR
!#6 N10737 P6900 LD 18 -1 Int BE Pri
!#6 N10738 P6900 CAS 18 -1 N10737 0x3000160 Int BE Pri
!#6 N10739 P6901 PREFETCH 7 Int BE Pri
!#6 N10740 P6902 LD 13 -1 Int BE Pri
!#6 N10741 P6902 CAS 13 -1 N10740 0x3000161 Int BE Pri
!#6 N10742 P6903 REPLACEMENT 0 Int BE Pri
!#6 N10743 P6904 ST_BINIT 12 0x3000162 Int BE Pri
!#6 N10744 P6905 MEMBAR
!#6 N10745 P6906 LD 22 -1 FP BE Pri
!#6 N10746 P6907 DWLD 15 -1 Int BE Pri
!#6 N10747 P6907 DWLD 16 -1 Int BE Pri
!#A N10746 N10747
!#6 N10748 P6907 CASX 15 -1 N10746 0x3000163 Int BE Pri
!#6 N10749 P6907 CASX 16 -1 N10747 0x3000164 Int BE Pri
!#A N10748 N10749
!#6 N10750 P6908 MEMBAR
!#6 N10751 P6909 BST 15 0x428000fb FP BE Pri
!#6 N10752 P6909 BST 16 0x428000fc FP BE Pri
!#A N10751 N10752
!#6 N10753 P6909 BST 17 0x428000fd FP BE Pri
!#6 N10754 P6910 MEMBAR
!#6 N10755 P6911 ST 10 0x3000165 Int BE Pri
!#6 N10756 P6912 DWST_BINIT 21 0x3000166 Int BE Pri
!#6 N10757 P6912 DWST_BINIT 22 0x3000167 Int BE Pri
!#A N10756 N10757
!#6 N10758 P6913 MEMBAR
!#6 N10759 P6914 DWST_BINIT 9 0x3000168 Int BE Pri
!#6 N10760 P6914 DWST_BINIT 10 0x3000169 Int BE Pri
!#A N10759 N10760
!#6 N10761 P6915 MEMBAR
!#6 N10762 P6916 BST 9 0x428000fe FP BE Pri
!#6 N10763 P6916 BST 10 0x428000ff FP BE Pri
!#A N10762 N10763
!#6 N10764 P6916 BST 11 0x42800100 FP BE Pri
!#6 N10765 P6917 MEMBAR
!#6 N10766 P6918 DWLD 9 -1 Int BE Pri
!#6 N10767 P6918 DWLD 10 -1 Int BE Pri
!#A N10766 N10767
!#6 N10768 P6918 CASX 9 -1 N10766 0x300016a Int BE Pri
!#6 N10769 P6918 CASX 10 -1 N10767 0x300016b Int BE Pri
!#A N10768 N10769
!#6 N10770 P6919 MEMBAR
!#6 N10771 P6920 BSTC 6 0x42800101 FP BE Pri
!#6 N10772 P6920 BSTC 7 0x42800102 FP BE Pri
!#A N10771 N10772
!#6 N10773 P6920 BSTC 8 0x42800103 FP BE Pri
!#6 N10774 P6921 MEMBAR
!#6 N10775 P6922 LDD 0 -1 Int BE Pri
!#6 N10776 P6922 LDD 1 -1 Int BE Pri
!#A N10775 N10776
!#6 N10777 P6923 MEMBAR
!#6 N10778 P6924 BST 18 0x42800104 FP BE Pri
!#6 N10779 P6924 BST 19 0x42800105 FP BE Pri
!#A N10778 N10779
!#6 N10780 P6924 BST 20 0x42800106 FP BE Pri
!#6 N10781 P6925 MEMBAR
!#6 N10782 P6926 LDD 23 -1 Int BE Pri
!#6 N10783 P6927 LDD 9 -1 Int BE Pri
!#6 N10784 P6927 LDD 10 -1 Int BE Pri
!#A N10783 N10784
!#6 N10785 P6928 MEMBAR
!#6 N10786 P6929 BST 3 0x42800107 FP BE Pri
!#6 N10787 P6929 BST 4 0x42800108 FP BE Pri
!#A N10786 N10787
!#6 N10788 P6929 BST 5 0x42800109 FP BE Pri
!#6 N10789 P6930 MEMBAR
!#6 N10790 P6931 DWLD 21 -1 Int BE Pri
!#6 N10791 P6931 DWLD 22 -1 Int BE Pri
!#A N10790 N10791
!#6 N10792 P6932 ST 23 0x300016c Int BE Pri
!#6 N10793 P6933 MEMBAR
!#6 N10794 P6934 BST 12 0x4280010a FP BE Pri
!#6 N10795 P6934 BST 13 0x4280010b FP BE Pri
!#A N10794 N10795
!#6 N10796 P6934 BST 14 0x4280010c FP BE Pri
!#6 N10797 P6935 MEMBAR
!#6 N10798 P6936 ST 9 0x300016d Int BE Pri
!#6 N10799 P6937 DWST_BINIT 15 0x300016e Int BE Pri
!#6 N10800 P6937 DWST_BINIT 16 0x300016f Int BE Pri
!#A N10799 N10800
!#6 N10801 P6938 MEMBAR
!#6 N10802 P6939 LD 8 -1 Int BE Pri
!#6 N10803 P6939 CAS 8 -1 N10802 0x3000170 Int BE Pri
!#6 N10804 P6940 MEMBAR
!#6 N10805 P6941 BST 6 0x4280010d FP BE Pri
!#6 N10806 P6941 BST 7 0x4280010e FP BE Pri
!#A N10805 N10806
!#6 N10807 P6941 BST 8 0x4280010f FP BE Pri
!#6 N10808 P6942 MEMBAR
!#6 N10809 P6943 SWAP 20 0xffffffff 0x3000171 Int BE Pri
!#6 N10810 P6944 ST_BINIT 4 0x3000172 Int BE Pri
!#6 N10811 P6945 MEMBAR
!#6 N10812 P6946 DWST_BINIT 9 0x3000173 Int BE Pri
!#6 N10813 P6946 DWST_BINIT 10 0x3000174 Int BE Pri
!#A N10812 N10813
!#6 N10814 P6947 MEMBAR
!#6 N10815 P6948 DWLD 3 -1 Int BE Pri
!#6 N10816 P6948 DWLD 4 -1 Int BE Pri
!#A N10815 N10816
!#6 N10817 P6948 CASX 3 -1 N10815 0x3000175 Int BE Pri
!#6 N10818 P6948 CASX 4 -1 N10816 0x3000176 Int BE Pri
!#A N10817 N10818
!#6 N10819 P6949 LDD 18 -1 Int BE Pri
!#6 N10820 P6949 LDD 19 -1 Int BE Pri
!#A N10819 N10820
!#6 N10821 P6950 DWLD 5 -1,0x0 Int BE Pri
!#6 N10822 P6950 CASX 5 -1,0x0 N10821 0x3000177 Int BE Pri
!#6 N10823 P6951 ST_BINIT 16 0x3000178 Int BE Pri
!#6 N10824 P6952 MEMBAR
!#6 N10825 P6953 BLD 21 -1 FP BE Pri
!#6 N10826 P6953 BLD 22 -1 FP BE Pri
!#A N10825 N10826
!#6 N10827 P6953 BLD 23 -1 FP BE Pri
!#6 N10828 P6954 MEMBAR
!#6 N10829 P6955 PREFETCH 2 Int BE Pri
!#6 N10830 P6956 DWLD 6 -1 Int BE Pri
!#6 N10831 P6956 DWLD 7 -1 Int BE Pri
!#A N10830 N10831
!#6 N10832 P6956 CASX 6 -1 N10830 0x3000179 Int BE Pri
!#6 N10833 P6956 CASX 7 -1 N10831 0x300017a Int BE Pri
!#A N10832 N10833
!#6 N10834 P6957 LDD 8 -1 Int BE Pri
!#6 N10835 P6958 ST 18 0x300017b Int BE Pri
!#6 N10836 P6959 ST_BINIT 13 0x300017c Int BE Pri
!#6 N10837 P6960 MEMBAR
!#6 N10838 P6961 PREFETCH 21 Int BE Pri
!#6 N10839 P6962 MEMBAR
!#6 N10840 P6963 BLD 9 -1 FP BE Pri
!#6 N10841 P6963 BLD 10 -1 FP BE Pri
!#A N10840 N10841
!#6 N10842 P6963 BLD 11 -1 FP BE Pri
!#6 N10843 P6964 MEMBAR
!#6 N10844 P6965 LD 6 -1 Int BE Pri
!#6 N10845 P6966 MEMBAR
!#6 N10846 P6967 BLD 6 -1 FP BE Pri
!#6 N10847 P6967 BLD 7 -1 FP BE Pri
!#A N10846 N10847
!#6 N10848 P6967 BLD 8 -1 FP BE Pri
!#6 N10849 P6968 MEMBAR
!#6 N10850 P6969 DWST_BINIT 12 0x300017d Int LE Pri
!#6 N10851 P6969 DWST_BINIT 13 0x300017e Int LE Pri
!#A N10850 N10851
!#6 N10852 P6970 MEMBAR
!#6 N10853 P6971 DWST_BINIT 9 0x300017f Int BE Pri
!#6 N10854 P6971 DWST_BINIT 10 0x3000180 Int BE Pri
!#A N10853 N10854
!#6 N10855 P6972 MEMBAR
!#6 N10856 P6973 BSTC 18 0x42800110 FP BE Pri
!#6 N10857 P6973 BSTC 19 0x42800111 FP BE Pri
!#A N10856 N10857
!#6 N10858 P6973 BSTC 20 0x42800112 FP BE Pri
!#6 N10859 P6974 MEMBAR
!#6 N10860 P6975 DWLD 18 -1 Int BE Pri
!#6 N10861 P6975 DWLD 19 -1 Int BE Pri
!#A N10860 N10861
!#6 N10862 P6975 CASX 18 -1 N10860 0x3000181 Int BE Pri
!#6 N10863 P6975 CASX 19 -1 N10861 0x3000182 Int BE Pri
!#A N10862 N10863
!#6 N10864 P6976 MEMBAR
!#6 N10865 P6977 BST 15 0x42800113 FP BE Pri
!#6 N10866 P6977 BST 16 0x42800114 FP BE Pri
!#A N10865 N10866
!#6 N10867 P6977 BST 17 0x42800115 FP BE Pri
!#6 N10868 P6978 MEMBAR
!#6 N10869 P6979 ST 21 0x3000183 Int BE Pri
!#6 N10870 P6980 DWLD 21 -1 Int BE Pri
!#6 N10871 P6980 DWLD 22 -1 Int BE Pri
!#A N10870 N10871
!#6 N10872 P6980 CASX 21 -1 N10870 0x3000184 Int BE Pri
!#6 N10873 P6980 CASX 22 -1 N10871 0x3000185 Int BE Pri
!#A N10872 N10873
!#6 N10874 P6981 MEMBAR
!#6 N10875 P6982 BLD 9 -1 FP BE Pri
!#6 N10876 P6982 BLD 10 -1 FP BE Pri
!#A N10875 N10876
!#6 N10877 P6982 BLD 11 -1 FP BE Pri
!#6 N10878 P6983 MEMBAR
!#6 N10879 P6984 DWLD 5 -1,0x0 Int BE Pri
!#6 N10880 P6984 CASX 5 -1,0x0 N10879 0x3000186 Int BE Pri
!#6 N10881 P6985 REPLACEMENT 6 Int BE Pri
!#6 N10882 P6986 DWLD 12 -1 Int BE Pri
!#6 N10883 P6986 DWLD 13 -1 Int BE Pri
!#A N10882 N10883
!#6 N10884 P6986 CASX 12 -1 N10882 0x3000187 Int BE Pri
!#6 N10885 P6986 CASX 13 -1 N10883 0x3000188 Int BE Pri
!#A N10884 N10885
!#6 N10886 P6987 LD 14 -1 Int BE Pri
!#6 N10887 P6988 DWLD 15 -1 Int BE Pri
!#6 N10888 P6988 DWLD 16 -1 Int BE Pri
!#A N10887 N10888
!#6 N10889 P6988 CASX 15 -1 N10887 0x3000189 Int BE Pri
!#6 N10890 P6988 CASX 16 -1 N10888 0x300018a Int BE Pri
!#A N10889 N10890
!#6 N10891 P6989 DWLD 8 -1,0x0 Int BE Pri
!#6 N10892 P6989 CASX 8 -1,0x0 N10891 0x300018b Int BE Pri
!#6 N10893 P6990 DWLD 3 -1 Int BE Pri
!#6 N10894 P6990 DWLD 4 -1 Int BE Pri
!#A N10893 N10894
!#6 N10895 P6990 CASX 3 -1 N10893 0x300018c Int BE Pri
!#6 N10896 P6990 CASX 4 -1 N10894 0x300018d Int BE Pri
!#A N10895 N10896
!#6 N10897 P6991 DWLD 15 -1 Int BE Pri
!#6 N10898 P6991 DWLD 16 -1 Int BE Pri
!#A N10897 N10898
!#6 N10899 P6991 CASX 15 -1 N10897 0x300018e Int BE Pri
!#6 N10900 P6991 CASX 16 -1 N10898 0x300018f Int BE Pri
!#A N10899 N10900
!#6 N10901 P6992 DWST_BINIT 21 0x3000190 Int BE Pri
!#6 N10902 P6992 DWST_BINIT 22 0x3000191 Int BE Pri
!#A N10901 N10902
!#6 N10903 P6993 MEMBAR
!#6 N10904 P6994 PREFETCH 14 Int BE Pri
!#6 N10905 P6995 SWAP 19 0xffffffff 0x3000192 Int BE Pri
!#6 N10906 P6996 MEMBAR
!#6 N10907 P6997 BLD 3 -1 FP BE Pri
!#6 N10908 P6997 BLD 4 -1 FP BE Pri
!#A N10907 N10908
!#6 N10909 P6997 BLD 5 -1 FP BE Pri
!#6 N10910 P6998 MEMBAR
!#6 N10911 P6999 DWST_BINIT 3 0x3000193 Int BE Pri
!#6 N10912 P6999 DWST_BINIT 4 0x3000194 Int BE Pri
!#A N10911 N10912
!#6 N10913 P7000 MEMBAR
!#6 N10914 P7001 BST 3 0x42800116 FP BE Pri
!#6 N10915 P7001 BST 4 0x42800117 FP BE Pri
!#A N10914 N10915
!#6 N10916 P7001 BST 5 0x42800118 FP BE Pri
!#6 N10917 P7002 MEMBAR
!#6 N10918 P7003 BLD 18 -1 FP BE Pri
!#6 N10919 P7003 BLD 19 -1 FP BE Pri
!#A N10918 N10919
!#6 N10920 P7003 BLD 20 -1 FP BE Pri
!#6 N10921 P7004 MEMBAR
!#6 N10922 P7005 LDD 9 -1 Int BE Pri
!#6 N10923 P7005 LDD 10 -1 Int BE Pri
!#A N10922 N10923
!#6 N10924 P7006 SWAP 12 0xffffffff 0x3000195 Int BE Pri
!#6 N10925 P7007 ST_BINIT 17 0x3000196 Int BE Pri
!#6 N10926 P7008 MEMBAR
!#6 N10927 P7009 ST_BINIT 2 0x3000197 Int BE Pri
!#6 N10928 P7010 MEMBAR
!#6 N10929 P7011 DWST_BINIT 0 0x3000198 Int BE Pri
!#6 N10930 P7011 DWST_BINIT 1 0x3000199 Int BE Pri
!#A N10929 N10930
!#6 N10931 P7012 MEMBAR
!#6 N10932 P7013 BSTC 9 0x42800119 FP BE Pri
!#6 N10933 P7013 BSTC 10 0x4280011a FP BE Pri
!#A N10932 N10933
!#6 N10934 P7013 BSTC 11 0x4280011b FP BE Pri
!#6 N10935 P7014 MEMBAR
!#6 N10936 P7015 MEMBAR
!#7 N10937 P7016 DWLD 21 -1 Int BE Pri Loop_entry
!#7 N10938 P7016 DWLD 22 -1 Int BE Pri Loop_entry
!#A N10937 N10938
!#7 N10939 P7016 CASX 21 -1 N10937 0x3800001 Int BE Pri Loop_entry
!#7 N10940 P7016 CASX 22 -1 N10938 0x3800002 Int BE Pri Loop_entry
!#A N10939 N10940
!#7 N10941 P7017 DWST 5 0x3800003 Int BE Pri
!#7 N10942 P7018 PREFETCH 7 Int BE Pri
!#7 N10943 P7019 DWLD 3 -1 Int BE Pri
!#7 N10944 P7019 DWLD 4 -1 Int BE Pri
!#A N10943 N10944
!#7 N10945 P7019 CASX 3 -1 N10943 0x3800004 Int BE Pri
!#7 N10946 P7019 CASX 4 -1 N10944 0x3800005 Int BE Pri
!#A N10945 N10946
!#7 N10947 P7020 MEMBAR
!#7 N10948 P7021 BST 12 0x43000001 FP BE Pri
!#7 N10949 P7021 BST 13 0x43000002 FP BE Pri
!#A N10948 N10949
!#7 N10950 P7021 BST 14 0x43000003 FP BE Pri
!#7 N10951 P7022 MEMBAR
!#7 N10952 P7023 SWAP 7 0xffffffff 0x3800006 Int BE Pri
!#7 N10953 P7024 PREFETCH 7 Int BE Pri
!#7 N10954 P7025 DWLD 11 -1 Int BE Pri
!#7 N10955 P7026 LD 16 -1 Int BE Pri
!#7 N10956 P7027 MEMBAR
!#7 N10957 P7028 BSTC 12 0x43000004 FP BE Pri
!#7 N10958 P7028 BSTC 13 0x43000005 FP BE Pri
!#A N10957 N10958
!#7 N10959 P7028 BSTC 14 0x43000006 FP BE Pri
!#7 N10960 P7029 MEMBAR
!#7 N10961 P7030 LD 11 -1 Int BE Pri
!#7 N10962 P7030 CAS 11 -1 N10961 0x3800007 Int BE Pri
!#7 N10963 P7031 SWAP 21 0xffffffff 0x3800008 Int BE Pri
!#7 N10964 P7032 ST_BINIT 22 0x3800009 Int BE Pri
!#7 N10965 P7033 MEMBAR
!#7 N10966 P7034 SWAP 15 0xffffffff 0x380000a Int BE Pri
!#7 N10967 P7035 LDD 2 -1 Int BE Pri
!#7 N10968 P7036 DWLD 2 -1 Int BE Pri
!#7 N10969 P7037 ST_BINIT 14 0x380000b Int BE Pri
!#7 N10970 P7038 MEMBAR
!#7 N10971 P7039 BLD 12 -1 FP BE Pri
!#7 N10972 P7039 BLD 13 -1 FP BE Pri
!#A N10971 N10972
!#7 N10973 P7039 BLD 14 -1 FP BE Pri
!#7 N10974 P7040 MEMBAR
!#7 N10975 P7041 BST 6 0x43000007 FP BE Pri
!#7 N10976 P7041 BST 7 0x43000008 FP BE Pri
!#A N10975 N10976
!#7 N10977 P7041 BST 8 0x43000009 FP BE Pri
!#7 N10978 P7042 MEMBAR
!#7 N10979 P7043 DWLD 23 -1 FP BE Pri
!#7 N10980 P7044 MEMBAR
!#7 N10981 P7045 BST 3 0x4300000a FP BE Pri
!#7 N10982 P7045 BST 4 0x4300000b FP BE Pri
!#A N10981 N10982
!#7 N10983 P7045 BST 5 0x4300000c FP BE Pri
!#7 N10984 P7046 MEMBAR
!#7 N10985 P7047 ST_BINIT 5 0x380000c Int BE Pri
!#7 N10986 P7048 MEMBAR
!#7 N10987 P7049 DWLD 21 -1 Int BE Pri
!#7 N10988 P7049 DWLD 22 -1 Int BE Pri
!#A N10987 N10988
!#7 N10989 P7050 LD 2 -1 Int BE Pri
!#7 N10990 P7050 CAS 2 -1 N10989 0x380000d Int BE Pri
!#7 N10991 P7051 MEMBAR
!#7 N10992 P7052 BLD 15 -1 FP BE Pri
!#7 N10993 P7052 BLD 16 -1 FP BE Pri
!#A N10992 N10993
!#7 N10994 P7052 BLD 17 -1 FP BE Pri
!#7 N10995 P7053 MEMBAR
!#7 N10996 P7054 BST 12 0x4300000d FP BE Pri
!#7 N10997 P7054 BST 13 0x4300000e FP BE Pri
!#A N10996 N10997
!#7 N10998 P7054 BST 14 0x4300000f FP BE Pri
!#7 N10999 P7055 MEMBAR
!#7 N11000 P7056 ST 15 0x380000e Int LE Pri
!#7 N11001 P7057 DWST_BINIT 6 0x380000f Int BE Pri
!#7 N11002 P7057 DWST_BINIT 7 0x3800010 Int BE Pri
!#A N11001 N11002
!#7 N11003 P7058 MEMBAR
!#7 N11004 P7059 ST_BINIT 21 0x3800011 Int BE Pri
!#7 N11005 P7060 MEMBAR
!#7 N11006 P7061 DWST 6 0x3800012 Int LE Pri
!#7 N11007 P7061 DWST 7 0x3800013 Int LE Pri
!#A N11006 N11007
!#7 N11008 P7062 LD 6 -1 Int BE Pri
!#7 N11009 P7062 CAS 6 -1 N11008 0x3800014 Int BE Pri
!#7 N11010 P7063 SWAP 22 0xffffffff 0x3800015 Int BE Pri
!#7 N11011 P7064 DWST_BINIT 18 0x3800016 Int BE Pri
!#7 N11012 P7064 DWST_BINIT 19 0x3800017 Int BE Pri
!#A N11011 N11012
!#7 N11013 P7065 MEMBAR
!#7 N11014 P7066 LD 2 -1 Int BE Pri
!#7 N11015 P7067 LD 15 -1 Int BE Pri
!#7 N11016 P7067 CAS 15 -1 N11015 0x3800018 Int BE Pri
!#7 N11017 P7068 REPLACEMENT 21 Int BE Pri
!#7 N11018 P7069 DWLD 8 -1 Int BE Pri
!#7 N11019 P7070 PREFETCH 21 Int BE Pri
!#7 N11020 P7071 SWAP 7 0xffffffff 0x3800019 Int BE Pri
!#7 N11021 P7072 DWST 18 0x380001a Int BE Pri
!#7 N11022 P7072 DWST 19 0x380001b Int BE Pri
!#A N11021 N11022
!#7 N11023 P7073 ST_BINIT 0 0x380001c Int BE Pri
!#7 N11024 P7074 MEMBAR
!#7 N11025 P7075 ST 21 0x380001d Int LE Pri
!#7 N11026 P7076 ST 4 0x380001e Int BE Pri
!#7 N11027 P7077 LD 18 -1 Int BE Pri
!#7 N11028 P7077 CAS 18 -1 N11027 0x380001f Int BE Pri
!#7 N11029 P7078 DWLD 20 -1,0x0 Int BE Pri
!#7 N11030 P7078 CASX 20 -1,0x0 N11029 0x3800020 Int BE Pri
!#7 N11031 P7079 DWST 3 0x3800021 Int BE Pri
!#7 N11032 P7079 DWST 4 0x3800022 Int BE Pri
!#A N11031 N11032
!#7 N11033 P7080 DWLD 6 -1 Int LE Pri
!#7 N11034 P7080 DWLD 7 -1 Int LE Pri
!#A N11033 N11034
!#7 N11035 P7081 DWLD 3 -1 Int BE Pri
!#7 N11036 P7081 DWLD 4 -1 Int BE Pri
!#A N11035 N11036
!#7 N11037 P7081 CASX 3 -1 N11035 0x3800023 Int BE Pri
!#7 N11038 P7081 CASX 4 -1 N11036 0x3800024 Int BE Pri
!#A N11037 N11038
!#7 N11039 P7082 MEMBAR
!#7 N11040 P7083 BSTC 3 0x43000010 FP BE Pri
!#7 N11041 P7083 BSTC 4 0x43000011 FP BE Pri
!#A N11040 N11041
!#7 N11042 P7083 BSTC 5 0x43000012 FP BE Pri
!#7 N11043 P7084 MEMBAR
!#7 N11044 P7085 PREFETCH 5 Int BE Pri
!#7 N11045 P7086 SWAP 13 0xffffffff 0x3800025 Int BE Pri
!#7 N11046 P7087 SWAP 2 0xffffffff 0x3800026 Int BE Pri
!#7 N11047 P7088 MEMBAR
!#7 N11048 P7089 BLD 12 -1 FP BE Pri
!#7 N11049 P7089 BLD 13 -1 FP BE Pri
!#A N11048 N11049
!#7 N11050 P7089 BLD 14 -1 FP BE Pri
!#7 N11051 P7090 MEMBAR
!#7 N11052 P7091 SWAP 18 0xffffffff 0x3800027 Int BE Pri
!#7 N11053 P7092 DWST_BINIT 18 0x3800028 Int BE Pri
!#7 N11054 P7092 DWST_BINIT 19 0x3800029 Int BE Pri
!#A N11053 N11054
!#7 N11055 P7093 MEMBAR
!#7 N11056 P7094 PREFETCH 19 Int BE Pri
!#7 N11057 P7095 PREFETCH 11 Int BE Pri
!#7 N11058 P7096 MEMBAR
!#7 N11059 P7097 BLD 0 -1 FP BE Pri
!#7 N11060 P7097 BLD 1 -1 FP BE Pri
!#A N11059 N11060
!#7 N11061 P7097 BLD 2 -1 FP BE Pri
!#7 N11062 P7098 MEMBAR
!#7 N11063 P7099 ST_BINIT 14 0x380002a Int BE Pri
!#7 N11064 P7100 MEMBAR
!#7 N11065 P7101 DWST 15 0x380002b Int BE Pri
!#7 N11066 P7101 DWST 16 0x380002c Int BE Pri
!#A N11065 N11066
!#7 N11067 P7102 LD 3 -1 Int BE Pri
!#7 N11068 P7102 CAS 3 -1 N11067 0x380002d Int BE Pri
!#7 N11069 P7103 MEMBAR
!#7 N11070 P7104 BST 6 0x43000013 FP BE Pri
!#7 N11071 P7104 BST 7 0x43000014 FP BE Pri
!#A N11070 N11071
!#7 N11072 P7104 BST 8 0x43000015 FP BE Pri
!#7 N11073 P7105 MEMBAR
!#7 N11074 P7106 SWAP 13 0xffffffff 0x380002e Int BE Pri
!#7 N11075 P7107 REPLACEMENT 2 Int BE Pri
!#7 N11076 P7108 MEMBAR
!#7 N11077 P7109 BSTC 9 0x43000016 FP BE Pri
!#7 N11078 P7109 BSTC 10 0x43000017 FP BE Pri
!#A N11077 N11078
!#7 N11079 P7109 BSTC 11 0x43000018 FP BE Pri
!#7 N11080 P7110 MEMBAR
!#7 N11081 P7111 LDD 21 -1 Int BE Pri
!#7 N11082 P7111 LDD 22 -1 Int BE Pri
!#A N11081 N11082
!#7 N11083 P7112 REPLACEMENT 19 Int BE Pri
!#7 N11084 P7113 DWST 23 0x380002f Int BE Pri
!#7 N11085 P7114 DWLD 12 -1 Int LE Pri
!#7 N11086 P7114 DWLD 13 -1 Int LE Pri
!#A N11085 N11086
!#7 N11087 P7114 CASX 12 -1 N11085 0x3800030 Int LE Pri
!#7 N11088 P7114 CASX 13 -1 N11086 0x3800031 Int LE Pri
!#A N11087 N11088
!#7 N11089 P7115 ST 23 0x3800032 Int BE Pri
!#7 N11090 P7116 PREFETCH 7 Int BE Pri
!#7 N11091 P7117 LD 6 -1 Int BE Pri
!#7 N11092 P7118 SWAP 20 0xffffffff 0x3800033 Int BE Pri
!#7 N11093 P7119 MEMBAR
!#7 N11094 P7120 BSTC 21 0x43000019 FP BE Pri
!#7 N11095 P7120 BSTC 22 0x4300001a FP BE Pri
!#A N11094 N11095
!#7 N11096 P7120 BSTC 23 0x4300001b FP BE Pri
!#7 N11097 P7121 MEMBAR
!#7 N11098 P7122 DWST 9 0x3800034 Int BE Pri
!#7 N11099 P7122 DWST 10 0x3800035 Int BE Pri
!#A N11098 N11099
!#7 N11100 P7123 DWST 5 0x3800036 Int BE Pri
!#7 N11101 P7124 REPLACEMENT 13 Int BE Pri
!#7 N11102 P7125 MEMBAR
!#7 N11103 P7126 BST 18 0x4300001c FP BE Pri
!#7 N11104 P7126 BST 19 0x4300001d FP BE Pri
!#A N11103 N11104
!#7 N11105 P7126 BST 20 0x4300001e FP BE Pri
!#7 N11106 P7127 MEMBAR
!#7 N11107 P7128 PREFETCH 17 Int BE Pri
!#7 N11108 P7129 DWST_BINIT 23 0x3800037 Int BE Pri
!#7 N11109 P7130 MEMBAR
!#7 N11110 P7131 ST_BINIT 7 0x3800038 Int BE Pri
!#7 N11111 P7132 MEMBAR
!#7 N11112 P7133 BLD 21 -1 FP BE Pri
!#7 N11113 P7133 BLD 22 -1 FP BE Pri
!#A N11112 N11113
!#7 N11114 P7133 BLD 23 -1 FP BE Pri
!#7 N11115 P7134 MEMBAR
!#7 N11116 P7135 DWST 9 0x3800039 Int BE Pri
!#7 N11117 P7135 DWST 10 0x380003a Int BE Pri
!#A N11116 N11117
!#7 N11118 P7136 LD 23 -1 Int BE Pri
!#7 N11119 P7136 CAS 23 -1 N11118 0x380003b Int BE Pri
!#7 N11120 P7137 DWLD 3 -1 Int BE Pri
!#7 N11121 P7137 DWLD 4 -1 Int BE Pri
!#A N11120 N11121
!#7 N11122 P7138 LD 5 -1 Int BE Pri
!#7 N11123 P7139 LD 10 -1 Int BE Pri
!#7 N11124 P7139 CAS 10 -1 N11123 0x380003c Int BE Pri
!#7 N11125 P7140 LD 1 -1 Int BE Pri
!#7 N11126 P7140 CAS 1 -1 N11125 0x380003d Int BE Pri
!#7 N11127 P7141 DWST_BINIT 6 0x380003e Int BE Pri
!#7 N11128 P7141 DWST_BINIT 7 0x380003f Int BE Pri
!#A N11127 N11128
!#7 N11129 P7142 MEMBAR
!#7 N11130 P7143 ST_BINIT 4 0x3800040 Int BE Pri
!#7 N11131 P7144 MEMBAR
!#7 N11132 P7145 PREFETCH 15 Int BE Pri
!#7 N11133 P7146 ST 10 0x3800041 Int BE Pri
!#7 N11134 P7147 SWAP 14 0xffffffff 0x3800042 Int BE Pri
!#7 N11135 P7148 DWLD 15 -1 Int BE Pri
!#7 N11136 P7148 DWLD 16 -1 Int BE Pri
!#A N11135 N11136
!#7 N11137 P7148 CASX 15 -1 N11135 0x3800043 Int BE Pri
!#7 N11138 P7148 CASX 16 -1 N11136 0x3800044 Int BE Pri
!#A N11137 N11138
!#7 N11139 P7149 LD 22 -1 Int BE Pri
!#7 N11140 P7150 MEMBAR
!#7 N11141 P7151 BSTC 18 0x4300001f FP BE Pri
!#7 N11142 P7151 BSTC 19 0x43000020 FP BE Pri
!#A N11141 N11142
!#7 N11143 P7151 BSTC 20 0x43000021 FP BE Pri
!#7 N11144 P7152 MEMBAR
!#7 N11145 P7153 REPLACEMENT 9 Int BE Pri
!#7 N11146 P7154 LD 22 -1 Int BE Pri
!#7 N11147 P7154 CAS 22 -1 N11146 0x3800045 Int BE Pri
!#7 N11148 P7155 MEMBAR
!#7 N11149 P7156 BLD 6 -1 FP BE Pri
!#7 N11150 P7156 BLD 7 -1 FP BE Pri
!#A N11149 N11150
!#7 N11151 P7156 BLD 8 -1 FP BE Pri
!#7 N11152 P7157 MEMBAR
!#7 N11153 P7158 SWAP 22 0xffffffff 0x3800046 Int BE Pri
!#7 N11154 P7159 SWAP 16 0xffffffff 0x3800047 Int BE Pri
!#7 N11155 P7160 LDD 15 -1 Int BE Pri
!#7 N11156 P7160 LDD 16 -1 Int BE Pri
!#A N11155 N11156
!#7 N11157 P7161 DWLD 3 -1 Int BE Pri
!#7 N11158 P7161 DWLD 4 -1 Int BE Pri
!#A N11157 N11158
!#7 N11159 P7162 LD 5 -1 Int BE Pri
!#7 N11160 P7162 CAS 5 -1 N11159 0x3800048 Int BE Pri
!#7 N11161 P7163 SWAP 21 0xffffffff 0x3800049 Int BE Pri
!#7 N11162 P7164 DWST_BINIT 6 0x380004a Int BE Pri
!#7 N11163 P7164 DWST_BINIT 7 0x380004b Int BE Pri
!#A N11162 N11163
!#7 N11164 P7165 MEMBAR
!#7 N11165 P7166 BSTC 12 0x43000022 FP BE Pri
!#7 N11166 P7166 BSTC 13 0x43000023 FP BE Pri
!#A N11165 N11166
!#7 N11167 P7166 BSTC 14 0x43000024 FP BE Pri
!#7 N11168 P7167 MEMBAR
!#7 N11169 P7168 BSTC 3 0x43000025 FP BE Pri
!#7 N11170 P7168 BSTC 4 0x43000026 FP BE Pri
!#A N11169 N11170
!#7 N11171 P7168 BSTC 5 0x43000027 FP BE Pri
!#7 N11172 P7169 MEMBAR
!#7 N11173 P7170 DWLD 2 -1 Int BE Pri
!#7 N11174 P7171 DWLD 18 -1 Int BE Pri
!#7 N11175 P7171 DWLD 19 -1 Int BE Pri
!#A N11174 N11175
!#7 N11176 P7171 CASX 18 -1 N11174 0x380004c Int BE Pri
!#7 N11177 P7171 CASX 19 -1 N11175 0x380004d Int BE Pri
!#A N11176 N11177
!#7 N11178 P7172 DWLD 12 -1 Int BE Pri
!#7 N11179 P7172 DWLD 13 -1 Int BE Pri
!#A N11178 N11179
!#7 N11180 P7172 CASX 12 -1 N11178 0x380004e Int BE Pri
!#7 N11181 P7172 CASX 13 -1 N11179 0x380004f Int BE Pri
!#A N11180 N11181
!#7 N11182 P7173 LD 18 -1 Int BE Pri
!#7 N11183 P7173 CAS 18 -1 N11182 0x3800050 Int BE Pri
!#7 N11184 P7174 MEMBAR
!#7 N11185 P7175 BST 15 0x43000028 FP BE Pri
!#7 N11186 P7175 BST 16 0x43000029 FP BE Pri
!#A N11185 N11186
!#7 N11187 P7175 BST 17 0x4300002a FP BE Pri
!#7 N11188 P7176 MEMBAR
!#7 N11189 P7177 REPLACEMENT 9 Int BE Pri
!#7 N11190 P7178 MEMBAR
!#7 N11191 P7179 BST 12 0x4300002b FP BE Pri
!#7 N11192 P7179 BST 13 0x4300002c FP BE Pri
!#A N11191 N11192
!#7 N11193 P7179 BST 14 0x4300002d FP BE Pri
!#7 N11194 P7180 MEMBAR
!#7 N11195 P7181 BST 3 0x4300002e FP BE Pri
!#7 N11196 P7181 BST 4 0x4300002f FP BE Pri
!#A N11195 N11196
!#7 N11197 P7181 BST 5 0x43000030 FP BE Pri
!#7 N11198 P7182 MEMBAR
!#7 N11199 P7183 BSTC 9 0x43000031 FP BE Pri
!#7 N11200 P7183 BSTC 10 0x43000032 FP BE Pri
!#A N11199 N11200
!#7 N11201 P7183 BSTC 11 0x43000033 FP BE Pri
!#7 N11202 P7184 MEMBAR
!#7 N11203 P7185 LDD 8 -1 Int BE Pri
!#7 N11204 P7186 DWST 0 0x3800051 Int BE Pri
!#7 N11205 P7186 DWST 1 0x3800052 Int BE Pri
!#A N11204 N11205
!#7 N11206 P7187 MEMBAR
!#7 N11207 P7188 BST 12 0x43000034 FP BE Pri
!#7 N11208 P7188 BST 13 0x43000035 FP BE Pri
!#A N11207 N11208
!#7 N11209 P7188 BST 14 0x43000036 FP BE Pri
!#7 N11210 P7189 MEMBAR
!#7 N11211 P7190 ST_BINIT 9 0x3800053 Int BE Pri
!#7 N11212 P7191 MEMBAR
!#7 N11213 P7192 LD 15 -1 Int BE Pri
!#7 N11214 P7193 MEMBAR
!#7 N11215 P7194 BSTC 3 0x43000037 FP BE Pri
!#7 N11216 P7194 BSTC 4 0x43000038 FP BE Pri
!#A N11215 N11216
!#7 N11217 P7194 BSTC 5 0x43000039 FP BE Pri
!#7 N11218 P7195 MEMBAR
!#7 N11219 P7196 LD 4 -1 Int BE Pri
!#7 N11220 P7197 MEMBAR
!#7 N11221 P7198 BST 18 0x4300003a FP BE Pri
!#7 N11222 P7198 BST 19 0x4300003b FP BE Pri
!#A N11221 N11222
!#7 N11223 P7198 BST 20 0x4300003c FP BE Pri
!#7 N11224 P7199 MEMBAR
!#7 N11225 P7200 LD 3 -1 Int BE Pri
!#7 N11226 P7201 MEMBAR
!#7 N11227 P7202 BST 6 0x4300003d FP BE Pri
!#7 N11228 P7202 BST 7 0x4300003e FP BE Pri
!#A N11227 N11228
!#7 N11229 P7202 BST 8 0x4300003f FP BE Pri
!#7 N11230 P7203 MEMBAR
!#7 N11231 P7204 REPLACEMENT 18 Int BE Pri
!#7 N11232 P7205 DWST 20 0x3800054 Int BE Pri
!#7 N11233 P7206 PREFETCH 18 Int BE Pri
!#7 N11234 P7207 MEMBAR
!#7 N11235 P7208 BSTC 18 0x43000040 FP BE Pri
!#7 N11236 P7208 BSTC 19 0x43000041 FP BE Pri
!#A N11235 N11236
!#7 N11237 P7208 BSTC 20 0x43000042 FP BE Pri
!#7 N11238 P7209 MEMBAR
!#7 N11239 P7210 DWST 18 0x3800055 Int BE Pri
!#7 N11240 P7210 DWST 19 0x3800056 Int BE Pri
!#A N11239 N11240
!#7 N11241 P7211 MEMBAR
!#7 N11242 P7212 BST 15 0x43000043 FP BE Pri
!#7 N11243 P7212 BST 16 0x43000044 FP BE Pri
!#A N11242 N11243
!#7 N11244 P7212 BST 17 0x43000045 FP BE Pri
!#7 N11245 P7213 MEMBAR
!#7 N11246 P7214 PREFETCH 8 Int LE Pri
!#7 N11247 P7215 LD 19 -1 Int BE Pri
!#7 N11248 P7216 LD 19 -1 Int BE Pri
!#7 N11249 P7216 CAS 19 -1 N11248 0x3800057 Int BE Pri
!#7 N11250 P7217 ST 10 0x3800058 Int BE Pri
!#7 N11251 P7218 LD 7 -1 Int BE Pri
!#7 N11252 P7218 CAS 7 -1 N11251 0x3800059 Int BE Pri
!#7 N11253 P7219 DWLD 6 -1 Int BE Pri
!#7 N11254 P7219 DWLD 7 -1 Int BE Pri
!#A N11253 N11254
!#7 N11255 P7219 CASX 6 -1 N11253 0x380005a Int BE Pri
!#7 N11256 P7219 CASX 7 -1 N11254 0x380005b Int BE Pri
!#A N11255 N11256
!#7 N11257 P7220 ST_BINIT 15 0x380005c Int BE Pri
!#7 N11258 P7221 MEMBAR
!#7 N11259 P7222 SWAP 4 0xffffffff 0x380005d Int BE Pri
!#7 N11260 P7223 LD 18 -1 Int BE Pri
!#7 N11261 P7223 CAS 18 -1 N11260 0x380005e Int BE Pri
!#7 N11262 P7224 LDD 23 -1 Int BE Pri
!#7 N11263 P7225 DWLD 14 -1 Int BE Pri
!#7 N11264 P7226 SWAP 10 0xffffffff 0x380005f Int BE Pri
!#7 N11265 P7227 SWAP 13 0xffffffff 0x3800060 Int BE Pri
!#7 N11266 P7228 MEMBAR
!#7 N11267 P7229 BST 3 0x43000046 FP BE Pri
!#7 N11268 P7229 BST 4 0x43000047 FP BE Pri
!#A N11267 N11268
!#7 N11269 P7229 BST 5 0x43000048 FP BE Pri
!#7 N11270 P7230 MEMBAR
!#7 N11271 P7231 ST 14 0x3800061 Int LE Pri
!#7 N11272 P7232 MEMBAR
!#7 N11273 P7233 BSTC 3 0x43000049 FP BE Pri
!#7 N11274 P7233 BSTC 4 0x4300004a FP BE Pri
!#A N11273 N11274
!#7 N11275 P7233 BSTC 5 0x4300004b FP BE Pri
!#7 N11276 P7234 MEMBAR
!#7 N11277 P7235 ST_BINIT 16 0x3800062 Int BE Pri
!#7 N11278 P7236 MEMBAR
!#7 N11279 P7237 ST 13 0x3800063 Int BE Pri
!#7 N11280 P7238 MEMBAR
!#7 N11281 P7239 BSTC 9 0x4300004c FP BE Pri
!#7 N11282 P7239 BSTC 10 0x4300004d FP BE Pri
!#A N11281 N11282
!#7 N11283 P7239 BSTC 11 0x4300004e FP BE Pri
!#7 N11284 P7240 MEMBAR
!#7 N11285 P7241 BST 15 0x4300004f FP BE Pri
!#7 N11286 P7241 BST 16 0x43000050 FP BE Pri
!#A N11285 N11286
!#7 N11287 P7241 BST 17 0x43000051 FP BE Pri
!#7 N11288 P7242 MEMBAR
!#7 N11289 P7243 DWST_BINIT 9 0x3800064 Int BE Pri
!#7 N11290 P7243 DWST_BINIT 10 0x3800065 Int BE Pri
!#A N11289 N11290
!#7 N11291 P7244 MEMBAR
!#7 N11292 P7245 LD 20 -1 Int BE Pri
!#7 N11293 P7245 CAS 20 -1 N11292 0x3800066 Int BE Pri
!#7 N11294 P7246 PREFETCH 9 Int BE Pri
!#7 N11295 P7247 DWLD 18 -1 Int BE Pri
!#7 N11296 P7247 DWLD 19 -1 Int BE Pri
!#A N11295 N11296
!#7 N11297 P7247 CASX 18 -1 N11295 0x3800067 Int BE Pri
!#7 N11298 P7247 CASX 19 -1 N11296 0x3800068 Int BE Pri
!#A N11297 N11298
!#7 N11299 P7248 DWST_BINIT 14 0x3800069 Int LE Pri
!#7 N11300 P7249 MEMBAR
!#7 N11301 P7250 DWLD 12 -1 Int BE Pri
!#7 N11302 P7250 DWLD 13 -1 Int BE Pri
!#A N11301 N11302
!#7 N11303 P7250 CASX 12 -1 N11301 0x380006a Int BE Pri
!#7 N11304 P7250 CASX 13 -1 N11302 0x380006b Int BE Pri
!#A N11303 N11304
!#7 N11305 P7251 LD 16 -1 Int BE Pri
!#7 N11306 P7252 LD 22 -1 Int BE Pri
!#7 N11307 P7252 CAS 22 -1 N11306 0x380006c Int BE Pri
!#7 N11308 P7253 REPLACEMENT 0 Int BE Pri
!#7 N11309 P7254 ST_BINIT 2 0x380006d Int BE Pri
!#7 N11310 P7255 MEMBAR
!#7 N11311 P7256 LDD 11 -1 Int BE Pri
!#7 N11312 P7257 DWLD 15 -1 Int BE Pri
!#7 N11313 P7257 DWLD 16 -1 Int BE Pri
!#A N11312 N11313
!#7 N11314 P7258 PREFETCH 19 Int BE Pri
!#7 N11315 P7259 ST 2 0x380006e Int BE Pri
!#7 N11316 P7260 DWST 9 0x43000052 FP BE Pri
!#7 N11317 P7260 DWST 10 0x43000053 FP BE Pri
!#A N11316 N11317
!#7 N11318 P7261 MEMBAR
!#7 N11319 P7262 BSTC 18 0x43000054 FP BE Pri
!#7 N11320 P7262 BSTC 19 0x43000055 FP BE Pri
!#A N11319 N11320
!#7 N11321 P7262 BSTC 20 0x43000056 FP BE Pri
!#7 N11322 P7263 MEMBAR
!#7 N11323 P7264 DWLD 6 -1 Int BE Pri
!#7 N11324 P7264 DWLD 7 -1 Int BE Pri
!#A N11323 N11324
!#7 N11325 P7264 CASX 6 -1 N11323 0x380006f Int BE Pri
!#7 N11326 P7264 CASX 7 -1 N11324 0x3800070 Int BE Pri
!#A N11325 N11326
!#7 N11327 P7265 DWST 5 0x3800071 Int BE Pri
!#7 N11328 P7266 MEMBAR
!#7 N11329 P7267 BSTC 15 0x43000057 FP BE Pri
!#7 N11330 P7267 BSTC 16 0x43000058 FP BE Pri
!#A N11329 N11330
!#7 N11331 P7267 BSTC 17 0x43000059 FP BE Pri
!#7 N11332 P7268 MEMBAR
!#7 N11333 P7269 LD 12 -1 Int BE Pri
!#7 N11334 P7270 DWLD 9 -1 Int BE Pri
!#7 N11335 P7270 DWLD 10 -1 Int BE Pri
!#A N11334 N11335
!#7 N11336 P7271 REPLACEMENT 12 Int BE Pri
!#7 N11337 P7272 MEMBAR
!#7 N11338 P7273 BLD 15 -1 FP BE Pri
!#7 N11339 P7273 BLD 16 -1 FP BE Pri
!#A N11338 N11339
!#7 N11340 P7273 BLD 17 -1 FP BE Pri
!#7 N11341 P7274 MEMBAR
!#7 N11342 P7275 LD 16 -1 Int LE Pri
!#7 N11343 P7276 DWST 0 0x3800072 Int BE Pri
!#7 N11344 P7276 DWST 1 0x3800073 Int BE Pri
!#A N11343 N11344
!#7 N11345 P7277 DWST_BINIT 5 0x3800074 Int BE Pri
!#7 N11346 P7278 MEMBAR
!#7 N11347 P7279 DWLD 21 -1 Int BE Pri
!#7 N11348 P7279 DWLD 22 -1 Int BE Pri
!#A N11347 N11348
!#7 N11349 P7280 DWST_BINIT 6 0x3800075 Int BE Pri
!#7 N11350 P7280 DWST_BINIT 7 0x3800076 Int BE Pri
!#A N11349 N11350
!#7 N11351 P7281 MEMBAR
!#7 N11352 P7282 DWST_BINIT 21 0x3800077 Int BE Pri
!#7 N11353 P7282 DWST_BINIT 22 0x3800078 Int BE Pri
!#A N11352 N11353
!#7 N11354 P7283 MEMBAR
!#7 N11355 P7284 ST_BINIT 9 0x3800079 Int BE Pri
!#7 N11356 P7285 MEMBAR
!#7 N11357 P7286 DWLD 23 -1,0x0 Int BE Pri
!#7 N11358 P7286 CASX 23 -1,0x0 N11357 0x380007a Int BE Pri
!#7 N11359 P7287 DWLD 14 -1,0x0 Int BE Pri
!#7 N11360 P7287 CASX 14 -1,0x0 N11359 0x380007b Int BE Pri
!#7 N11361 P7288 MEMBAR
!#7 N11362 P7289 BLD 6 -1 FP BE Pri
!#7 N11363 P7289 BLD 7 -1 FP BE Pri
!#A N11362 N11363
!#7 N11364 P7289 BLD 8 -1 FP BE Pri
!#7 N11365 P7290 MEMBAR
!#7 N11366 P7291 BSTC 0 0x4300005a FP BE Pri
!#7 N11367 P7291 BSTC 1 0x4300005b FP BE Pri
!#A N11366 N11367
!#7 N11368 P7291 BSTC 2 0x4300005c FP BE Pri
!#7 N11369 P7292 MEMBAR
!#7 N11370 P7293 LDD 17 -1 Int BE Pri
!#7 N11371 P7294 DWLD 14 -1 Int BE Pri
!#7 N11372 P7295 DWST 21 0x380007c Int BE Pri
!#7 N11373 P7295 DWST 22 0x380007d Int BE Pri
!#A N11372 N11373
!#7 N11374 P7296 SWAP 22 0xffffffff 0x380007e Int BE Pri
!#7 N11375 P7297 SWAP 22 0xffffffff 0x380007f Int BE Pri
!#7 N11376 P7298 LD 8 -1 Int BE Pri
!#7 N11377 P7298 CAS 8 -1 N11376 0x3800080 Int BE Pri
!#7 N11378 P7299 DWLD 5 -1,0x0 Int BE Pri
!#7 N11379 P7299 CASX 5 -1,0x0 N11378 0x3800081 Int BE Pri
!#7 N11380 P7300 MEMBAR
!#7 N11381 P7301 BLD 0 -1 FP BE Pri
!#7 N11382 P7301 BLD 1 -1 FP BE Pri
!#A N11381 N11382
!#7 N11383 P7301 BLD 2 -1 FP BE Pri
!#7 N11384 P7302 MEMBAR
!#7 N11385 P7303 DWST_BINIT 20 0x3800082 Int LE Pri
!#7 N11386 P7304 MEMBAR
!#7 N11387 P7305 PREFETCH 10 Int BE Pri
!#7 N11388 P7306 ST 13 0x3800083 Int BE Pri
!#7 N11389 P7307 MEMBAR
!#7 N11390 P7308 BLD 12 -1 FP BE Pri
!#7 N11391 P7308 BLD 13 -1 FP BE Pri
!#A N11390 N11391
!#7 N11392 P7308 BLD 14 -1 FP BE Pri
!#7 N11393 P7309 MEMBAR
!#7 N11394 P7310 DWST 6 0x3800084 Int BE Pri
!#7 N11395 P7310 DWST 7 0x3800085 Int BE Pri
!#A N11394 N11395
!#7 N11396 P7311 LDD 9 -1 Int BE Pri
!#7 N11397 P7311 LDD 10 -1 Int BE Pri
!#A N11396 N11397
!#7 N11398 P7312 DWLD 12 -1 Int BE Pri
!#7 N11399 P7312 DWLD 13 -1 Int BE Pri
!#A N11398 N11399
!#7 N11400 P7313 LDD 18 -1 Int BE Pri
!#7 N11401 P7313 LDD 19 -1 Int BE Pri
!#A N11400 N11401
!#7 N11402 P7314 LD 19 -1 Int BE Pri
!#7 N11403 P7315 ST_BINIT 17 0x3800086 Int BE Pri
!#7 N11404 P7316 MEMBAR
!#7 N11405 P7317 BLD 0 -1 FP BE Pri
!#7 N11406 P7317 BLD 1 -1 FP BE Pri
!#A N11405 N11406
!#7 N11407 P7317 BLD 2 -1 FP BE Pri
!#7 N11408 P7318 MEMBAR
!#7 N11409 P7319 REPLACEMENT 14 Int BE Pri
!#7 N11410 P7320 DWST_BINIT 6 0x3800087 Int BE Pri
!#7 N11411 P7320 DWST_BINIT 7 0x3800088 Int BE Pri
!#A N11410 N11411
!#7 N11412 P7321 MEMBAR
!#7 N11413 P7322 ST 5 0x3800089 Int BE Pri
!#7 N11414 P7323 ST 6 0x380008a Int LE Pri
!#7 N11415 P7324 LD 5 -1 Int BE Pri
!#7 N11416 P7324 CAS 5 -1 N11415 0x380008b Int BE Pri
!#7 N11417 P7325 LD 14 -1 Int BE Pri
!#7 N11418 P7325 CAS 14 -1 N11417 0x380008c Int BE Pri
!#7 N11419 P7326 MEMBAR
!#7 N11420 P7327 BLD 15 -1 FP BE Pri
!#7 N11421 P7327 BLD 16 -1 FP BE Pri
!#A N11420 N11421
!#7 N11422 P7327 BLD 17 -1 FP BE Pri
!#7 N11423 P7328 MEMBAR
!#7 N11424 P7329 REPLACEMENT 9 Int BE Pri
!#7 N11425 P7330 MEMBAR
!#7 N11426 P7331 BLD 21 -1 FP BE Pri
!#7 N11427 P7331 BLD 22 -1 FP BE Pri
!#A N11426 N11427
!#7 N11428 P7331 BLD 23 -1 FP BE Pri
!#7 N11429 P7332 MEMBAR
!#7 N11430 P7333 PREFETCH 20 Int BE Pri
!#7 N11431 P7334 ST 3 0x380008d Int BE Pri
!#7 N11432 P7335 REPLACEMENT 23 Int BE Pri
!#7 N11433 P7336 LD 6 -1 Int LE Pri
!#7 N11434 P7336 CAS 6 -1 N11433 0x380008e Int LE Pri
!#7 N11435 P7337 ST_BINIT 21 0x380008f Int BE Pri
!#7 N11436 P7338 MEMBAR
!#7 N11437 P7339 ST 15 0x3800090 Int BE Pri
!#7 N11438 P7340 MEMBAR
!#7 N11439 P7341 BLD 21 -1 FP BE Pri
!#7 N11440 P7341 BLD 22 -1 FP BE Pri
!#A N11439 N11440
!#7 N11441 P7341 BLD 23 -1 FP BE Pri
!#7 N11442 P7342 MEMBAR
!#7 N11443 P7343 BLD 6 -1 FP BE Pri
!#7 N11444 P7343 BLD 7 -1 FP BE Pri
!#A N11443 N11444
!#7 N11445 P7343 BLD 8 -1 FP BE Pri
!#7 N11446 P7344 MEMBAR
!#7 N11447 P7345 DWST 21 0x3800091 Int BE Pri
!#7 N11448 P7345 DWST 22 0x3800092 Int BE Pri
!#A N11447 N11448
!#7 N11449 P7346 ST 15 0x3800093 Int BE Pri
!#7 N11450 P7347 MEMBAR
!#7 N11451 P7348 BSTC 21 0x4300005d FP BE Pri
!#7 N11452 P7348 BSTC 22 0x4300005e FP BE Pri
!#A N11451 N11452
!#7 N11453 P7348 BSTC 23 0x4300005f FP BE Pri
!#7 N11454 P7349 MEMBAR
!#7 N11455 P7350 PREFETCH 8 Int BE Pri
!#7 N11456 P7351 PREFETCH 7 Int BE Pri
!#7 N11457 P7352 DWST_BINIT 9 0x3800094 Int BE Pri
!#7 N11458 P7352 DWST_BINIT 10 0x3800095 Int BE Pri
!#A N11457 N11458
!#7 N11459 P7353 MEMBAR
!#7 N11460 P7354 LD 9 -1 Int BE Pri
!#7 N11461 P7355 LD 0 -1 Int BE Pri
!#7 N11462 P7356 DWST 20 0x3800096 Int BE Pri
!#7 N11463 P7357 SWAP 7 0xffffffff 0x3800097 Int BE Pri
!#7 N11464 P7358 MEMBAR
!#7 N11465 P7359 BST 0 0x43000060 FP BE Pri
!#7 N11466 P7359 BST 1 0x43000061 FP BE Pri
!#A N11465 N11466
!#7 N11467 P7359 BST 2 0x43000062 FP BE Pri
!#7 N11468 P7360 MEMBAR
!#7 N11469 P7361 BSTC 3 0x43000063 FP BE Pri
!#7 N11470 P7361 BSTC 4 0x43000064 FP BE Pri
!#A N11469 N11470
!#7 N11471 P7361 BSTC 5 0x43000065 FP BE Pri
!#7 N11472 P7362 MEMBAR
!#7 N11473 P7363 PREFETCH 18 Int BE Pri
!#7 N11474 P7364 LD 17 -1 Int BE Pri
!#7 N11475 P7365 LDD 12 -1 Int BE Pri
!#7 N11476 P7365 LDD 13 -1 Int BE Pri
!#A N11475 N11476
!#7 N11477 P7366 MEMBAR
!#7 N11478 P7367 BLD 12 -1 FP BE Pri
!#7 N11479 P7367 BLD 13 -1 FP BE Pri
!#A N11478 N11479
!#7 N11480 P7367 BLD 14 -1 FP BE Pri
!#7 N11481 P7368 MEMBAR
!#7 N11482 P7369 SWAP 19 0xffffffff 0x3800098 Int BE Pri
!#7 N11483 P7370 SWAP 15 0xffffffff 0x3800099 Int BE Pri
!#7 N11484 P7371 ST 16 0x380009a Int BE Pri
!#7 N11485 P7372 ST 3 0x380009b Int BE Pri
!#7 N11486 P7373 ST_BINIT 1 0x380009c Int BE Pri
!#7 N11487 P7374 MEMBAR
!#7 N11488 P7375 BSTC 21 0x43000066 FP BE Pri
!#7 N11489 P7375 BSTC 22 0x43000067 FP BE Pri
!#A N11488 N11489
!#7 N11490 P7375 BSTC 23 0x43000068 FP BE Pri
!#7 N11491 P7376 MEMBAR
!#7 N11492 P7377 LD 10 -1 Int BE Pri
!#7 N11493 P7377 CAS 10 -1 N11492 0x380009d Int BE Pri
!#7 N11494 P7378 MEMBAR
!#7 N11495 P7379 BST 21 0x43000069 FP BE Pri
!#7 N11496 P7379 BST 22 0x4300006a FP BE Pri
!#A N11495 N11496
!#7 N11497 P7379 BST 23 0x4300006b FP BE Pri
!#7 N11498 P7380 MEMBAR
!#7 N11499 P7381 SWAP 21 0xffffffff 0x380009e Int BE Pri
!#7 N11500 P7382 MEMBAR
!#7 N11501 P7383 BLD 9 -1 FP BE Pri
!#7 N11502 P7383 BLD 10 -1 FP BE Pri
!#A N11501 N11502
!#7 N11503 P7383 BLD 11 -1 FP BE Pri
!#7 N11504 P7384 MEMBAR
!#7 N11505 P7385 BSTC 9 0x4300006c FP BE Pri
!#7 N11506 P7385 BSTC 10 0x4300006d FP BE Pri
!#A N11505 N11506
!#7 N11507 P7385 BSTC 11 0x4300006e FP BE Pri
!#7 N11508 P7386 MEMBAR
!#7 N11509 P7387 DWST 8 0x380009f Int BE Pri
!#7 N11510 P7388 MEMBAR
!#7 N11511 P7389 BST 12 0x4300006f FP BE Pri
!#7 N11512 P7389 BST 13 0x43000070 FP BE Pri
!#A N11511 N11512
!#7 N11513 P7389 BST 14 0x43000071 FP BE Pri
!#7 N11514 P7390 MEMBAR
!#7 N11515 P7391 DWLD 23 -1 Int BE Pri
!#7 N11516 P7392 LDD 3 -1 Int BE Pri
!#7 N11517 P7392 LDD 4 -1 Int BE Pri
!#A N11516 N11517
!#7 N11518 P7393 ST 5 0x38000a0 Int BE Pri
!#7 N11519 P7394 DWLD 9 -1 Int BE Pri
!#7 N11520 P7394 DWLD 10 -1 Int BE Pri
!#A N11519 N11520
!#7 N11521 P7395 LD 6 -1 Int BE Pri
!#7 N11522 P7396 ST_BINIT 23 0x38000a1 Int BE Pri
!#7 N11523 P7397 MEMBAR
!#7 N11524 P7398 ST 6 0x38000a2 Int BE Pri
!#7 N11525 P7399 DWLD 9 -1 Int BE Pri
!#7 N11526 P7399 DWLD 10 -1 Int BE Pri
!#A N11525 N11526
!#7 N11527 P7399 CASX 9 -1 N11525 0x38000a3 Int BE Pri
!#7 N11528 P7399 CASX 10 -1 N11526 0x38000a4 Int BE Pri
!#A N11527 N11528
!#7 N11529 P7400 DWST 18 0x38000a5 Int BE Pri
!#7 N11530 P7400 DWST 19 0x38000a6 Int BE Pri
!#A N11529 N11530
!#7 N11531 P7401 LD 0 -1 Int BE Pri
!#7 N11532 P7401 CAS 0 -1 N11531 0x38000a7 Int BE Pri
!#7 N11533 P7402 DWLD 15 -1 Int BE Pri
!#7 N11534 P7402 DWLD 16 -1 Int BE Pri
!#A N11533 N11534
!#7 N11535 P7402 CASX 15 -1 N11533 0x38000a8 Int BE Pri
!#7 N11536 P7402 CASX 16 -1 N11534 0x38000a9 Int BE Pri
!#A N11535 N11536
!#7 N11537 P7403 ST_BINIT 6 0x38000aa Int BE Pri
!#7 N11538 P7404 MEMBAR
!#7 N11539 P7405 LDD 2 -1 Int BE Pri
!#7 N11540 P7406 ST_BINIT 11 0x38000ab Int BE Pri
!#7 N11541 P7407 MEMBAR
!#7 N11542 P7408 BST 3 0x43000072 FP BE Pri
!#7 N11543 P7408 BST 4 0x43000073 FP BE Pri
!#A N11542 N11543
!#7 N11544 P7408 BST 5 0x43000074 FP BE Pri
!#7 N11545 P7409 MEMBAR
!#7 N11546 P7410 BST 0 0x43000075 FP BE Pri
!#7 N11547 P7410 BST 1 0x43000076 FP BE Pri
!#A N11546 N11547
!#7 N11548 P7410 BST 2 0x43000077 FP BE Pri
!#7 N11549 P7411 MEMBAR
!#7 N11550 P7412 DWST 15 0x38000ac Int BE Pri
!#7 N11551 P7412 DWST 16 0x38000ad Int BE Pri
!#A N11550 N11551
!#7 N11552 P7413 PREFETCH 14 Int BE Pri
!#7 N11553 P7414 PREFETCH 10 Int LE Pri
!#7 N11554 P7415 LD 20 -1 Int BE Pri
!#7 N11555 P7415 CAS 20 -1 N11554 0x38000ae Int BE Pri
!#7 N11556 P7416 LD 20 -1 Int BE Pri
!#7 N11557 P7417 MEMBAR
!#7 N11558 P7418 BLD 21 -1 FP BE Pri
!#7 N11559 P7418 BLD 22 -1 FP BE Pri
!#A N11558 N11559
!#7 N11560 P7418 BLD 23 -1 FP BE Pri
!#7 N11561 P7419 MEMBAR
!#7 N11562 P7420 DWLD 0 -1 Int BE Pri
!#7 N11563 P7420 DWLD 1 -1 Int BE Pri
!#A N11562 N11563
!#7 N11564 P7421 DWLD 5 -1 FP BE Pri
!#7 N11565 P7422 DWLD 0 -1 Int BE Pri
!#7 N11566 P7422 DWLD 1 -1 Int BE Pri
!#A N11565 N11566
!#7 N11567 P7423 DWST_BINIT 12 0x38000af Int BE Pri
!#7 N11568 P7423 DWST_BINIT 13 0x38000b0 Int BE Pri
!#A N11567 N11568
!#7 N11569 P7424 MEMBAR
!#7 N11570 P7425 LDD 18 -1 Int BE Pri
!#7 N11571 P7425 LDD 19 -1 Int BE Pri
!#A N11570 N11571
!#7 N11572 P7426 LDD 3 -1 Int BE Pri
!#7 N11573 P7426 LDD 4 -1 Int BE Pri
!#A N11572 N11573
!#7 N11574 P7427 SWAP 18 0xffffffff 0x38000b1 Int BE Pri
!#7 N11575 P7428 SWAP 7 0xffffffff 0x38000b2 Int BE Pri
!#7 N11576 P7429 MEMBAR
!#7 N11577 P7430 BLD 3 -1 FP BE Pri
!#7 N11578 P7430 BLD 4 -1 FP BE Pri
!#A N11577 N11578
!#7 N11579 P7430 BLD 5 -1 FP BE Pri
!#7 N11580 P7431 MEMBAR
!#7 N11581 P7432 BSTC 6 0x43000078 FP BE Pri
!#7 N11582 P7432 BSTC 7 0x43000079 FP BE Pri
!#A N11581 N11582
!#7 N11583 P7432 BSTC 8 0x4300007a FP BE Pri
!#7 N11584 P7433 MEMBAR
!#7 N11585 P7434 LD 13 -1 Int BE Pri
!#7 N11586 P7435 SWAP 9 0xffffffff 0x38000b3 Int BE Pri
!#7 N11587 P7436 MEMBAR
!#7 N11588 P7437 BSTC 18 0x4300007b FP BE Pri
!#7 N11589 P7437 BSTC 19 0x4300007c FP BE Pri
!#A N11588 N11589
!#7 N11590 P7437 BSTC 20 0x4300007d FP BE Pri
!#7 N11591 P7438 MEMBAR
!#7 N11592 P7439 LDD 21 -1 Int BE Pri
!#7 N11593 P7439 LDD 22 -1 Int BE Pri
!#A N11592 N11593
!#7 N11594 P7440 LDD 23 -1 Int BE Pri
!#7 N11595 P7441 DWLD 20 -1,0x0 Int BE Pri
!#7 N11596 P7441 CASX 20 -1,0x0 N11595 0x38000b4 Int BE Pri
!#7 N11597 P7442 MEMBAR
!#7 N11598 P7443 BSTC 15 0x4300007e FP BE Pri
!#7 N11599 P7443 BSTC 16 0x4300007f FP BE Pri
!#A N11598 N11599
!#7 N11600 P7443 BSTC 17 0x43000080 FP BE Pri
!#7 N11601 P7444 MEMBAR
!#7 N11602 P7445 PREFETCH 9 Int BE Pri
!#7 N11603 P7446 MEMBAR
!#7 N11604 P7447 BST 3 0x43000081 FP BE Pri
!#7 N11605 P7447 BST 4 0x43000082 FP BE Pri
!#A N11604 N11605
!#7 N11606 P7447 BST 5 0x43000083 FP BE Pri
!#7 N11607 P7448 MEMBAR
!#7 N11608 P7449 ST 1 0x38000b5 Int BE Pri
!#7 N11609 P7450 LDD 3 -1 Int BE Pri
!#7 N11610 P7450 LDD 4 -1 Int BE Pri
!#A N11609 N11610
!#7 N11611 P7451 LD 21 -1 Int BE Pri
!#7 N11612 P7451 CAS 21 -1 N11611 0x38000b6 Int BE Pri
!#7 N11613 P7452 SWAP 17 0xffffffff 0x38000b7 Int BE Pri
!#7 N11614 P7453 DWST 6 0x38000b8 Int BE Pri
!#7 N11615 P7453 DWST 7 0x38000b9 Int BE Pri
!#A N11614 N11615
!#7 N11616 P7454 LD 10 -1 Int BE Pri
!#7 N11617 P7455 REPLACEMENT 20 Int BE Pri
!#7 N11618 P7456 PREFETCH 16 Int BE Pri
!#7 N11619 P7457 DWLD 20 -1,0x0 Int BE Pri
!#7 N11620 P7457 CASX 20 -1,0x0 N11619 0x38000ba Int BE Pri
!#7 N11621 P7458 MEMBAR
!#7 N11622 P7459 BST 9 0x43000084 FP BE Pri
!#7 N11623 P7459 BST 10 0x43000085 FP BE Pri
!#A N11622 N11623
!#7 N11624 P7459 BST 11 0x43000086 FP BE Pri
!#7 N11625 P7460 MEMBAR
!#7 N11626 P7461 LDD 15 -1 Int BE Pri
!#7 N11627 P7461 LDD 16 -1 Int BE Pri
!#A N11626 N11627
!#7 N11628 P7462 DWLD 5 -1,0x0 Int BE Pri
!#7 N11629 P7462 CASX 5 -1,0x0 N11628 0x38000bb Int BE Pri
!#7 N11630 P7463 ST 3 0x38000bc Int BE Pri
!#7 N11631 P7464 LD 23 -1 Int BE Pri
!#7 N11632 P7465 LDD 9 -1 Int BE Pri
!#7 N11633 P7465 LDD 10 -1 Int BE Pri
!#A N11632 N11633
!#7 N11634 P7466 DWLD 0 -1 Int BE Pri
!#7 N11635 P7466 DWLD 1 -1 Int BE Pri
!#A N11634 N11635
!#7 N11636 P7466 CASX 0 -1 N11634 0x38000bd Int BE Pri
!#7 N11637 P7466 CASX 1 -1 N11635 0x38000be Int BE Pri
!#A N11636 N11637
!#7 N11638 P7467 MEMBAR
!#7 N11639 P7468 BSTC 3 0x43000087 FP BE Pri
!#7 N11640 P7468 BSTC 4 0x43000088 FP BE Pri
!#A N11639 N11640
!#7 N11641 P7468 BSTC 5 0x43000089 FP BE Pri
!#7 N11642 P7469 MEMBAR
!#7 N11643 P7470 LDD 12 -1 Int BE Pri
!#7 N11644 P7470 LDD 13 -1 Int BE Pri
!#A N11643 N11644
!#7 N11645 P7471 LDD 3 -1 Int BE Pri
!#7 N11646 P7471 LDD 4 -1 Int BE Pri
!#A N11645 N11646
!#7 N11647 P7472 LDD 15 -1 Int BE Pri
!#7 N11648 P7472 LDD 16 -1 Int BE Pri
!#A N11647 N11648
!#7 N11649 P7473 SWAP 11 0xffffffff 0x38000bf Int BE Pri
!#7 N11650 P7474 LD 21 -1 Int BE Pri
!#7 N11651 P7475 REPLACEMENT 16 Int BE Pri
!#7 N11652 P7476 LDD 18 -1 Int BE Pri
!#7 N11653 P7476 LDD 19 -1 Int BE Pri
!#A N11652 N11653
!#7 N11654 P7477 ST_BINIT 0 0x38000c0 Int LE Pri
!#7 N11655 P7478 MEMBAR
!#7 N11656 P7479 ST_BINIT 2 0x38000c1 Int BE Pri
!#7 N11657 P7480 MEMBAR
!#7 N11658 P7481 PREFETCH 18 Int BE Pri
!#7 N11659 P7482 SWAP 22 0xffffffff 0x38000c2 Int BE Pri
!#7 N11660 P7483 DWST 23 0x38000c3 Int BE Pri
!#7 N11661 P7484 LD 5 -1 Int BE Pri
!#7 N11662 P7485 REPLACEMENT 20 Int BE Pri
!#7 N11663 P7486 DWLD 21 -1 Int BE Pri
!#7 N11664 P7486 DWLD 22 -1 Int BE Pri
!#A N11663 N11664
!#7 N11665 P7486 CASX 21 -1 N11663 0x38000c4 Int BE Pri
!#7 N11666 P7486 CASX 22 -1 N11664 0x38000c5 Int BE Pri
!#A N11665 N11666
!#7 N11667 P7487 DWLD 5 -1 Int BE Pri
!#7 N11668 P7488 LDD 9 -1 Int BE Pri
!#7 N11669 P7488 LDD 10 -1 Int BE Pri
!#A N11668 N11669
!#7 N11670 P7489 LD 1 -1 Int BE Pri
!#7 N11671 P7490 DWLD 6 -1 Int BE Pri
!#7 N11672 P7490 DWLD 7 -1 Int BE Pri
!#A N11671 N11672
!#7 N11673 P7491 DWST 12 0x4300008a FP BE Pri
!#7 N11674 P7491 DWST 13 0x4300008b FP BE Pri
!#A N11673 N11674
!#7 N11675 P7492 MEMBAR
!#7 N11676 P7493 BST 12 0x4300008c FP BE Pri
!#7 N11677 P7493 BST 13 0x4300008d FP BE Pri
!#A N11676 N11677
!#7 N11678 P7493 BST 14 0x4300008e FP BE Pri
!#7 N11679 P7494 MEMBAR
!#7 N11680 P7495 DWST 6 0x38000c6 Int BE Pri
!#7 N11681 P7495 DWST 7 0x38000c7 Int BE Pri
!#A N11680 N11681
!#7 N11682 P7496 REPLACEMENT 15 Int BE Pri
!#7 N11683 P7497 DWST_BINIT 2 0x38000c8 Int BE Pri
!#7 N11684 P7498 MEMBAR
!#7 N11685 P7499 LD 15 -1 Int BE Pri
!#7 N11686 P7500 SWAP 21 0xffffffff 0x38000c9 Int BE Pri
!#7 N11687 P7501 PREFETCH 22 Int BE Pri
!#7 N11688 P7502 LDD 15 -1 Int BE Pri
!#7 N11689 P7502 LDD 16 -1 Int BE Pri
!#A N11688 N11689
!#7 N11690 P7503 PREFETCH 21 Int BE Pri
!#7 N11691 P7504 SWAP 5 0xffffffff 0x38000ca Int BE Pri
!#7 N11692 P7505 MEMBAR
!#7 N11693 P7506 BST 18 0x4300008f FP BE Pri
!#7 N11694 P7506 BST 19 0x43000090 FP BE Pri
!#A N11693 N11694
!#7 N11695 P7506 BST 20 0x43000091 FP BE Pri
!#7 N11696 P7507 MEMBAR
!#7 N11697 P7508 DWST_BINIT 15 0x38000cb Int BE Pri
!#7 N11698 P7508 DWST_BINIT 16 0x38000cc Int BE Pri
!#A N11697 N11698
!#7 N11699 P7509 MEMBAR
!#7 N11700 P7510 DWLD 3 -1 FP BE Pri
!#7 N11701 P7510 DWLD 4 -1 FP BE Pri
!#A N11700 N11701
!#7 N11702 P7511 DWST 6 0x38000cd Int BE Pri
!#7 N11703 P7511 DWST 7 0x38000ce Int BE Pri
!#A N11702 N11703
!#7 N11704 P7512 DWST 6 0x38000cf Int BE Pri
!#7 N11705 P7512 DWST 7 0x38000d0 Int BE Pri
!#A N11704 N11705
!#7 N11706 P7513 DWST 21 0x38000d1 Int LE Pri
!#7 N11707 P7513 DWST 22 0x38000d2 Int LE Pri
!#A N11706 N11707
!#7 N11708 P7514 MEMBAR
!#7 N11709 P7515 BLD 0 -1 FP BE Pri
!#7 N11710 P7515 BLD 1 -1 FP BE Pri
!#A N11709 N11710
!#7 N11711 P7515 BLD 2 -1 FP BE Pri
!#7 N11712 P7516 MEMBAR
!#7 N11713 P7517 DWST_BINIT 15 0x38000d3 Int BE Pri
!#7 N11714 P7517 DWST_BINIT 16 0x38000d4 Int BE Pri
!#A N11713 N11714
!#7 N11715 P7518 MEMBAR
!#7 N11716 P7519 DWST 15 0x38000d5 Int BE Pri
!#7 N11717 P7519 DWST 16 0x38000d6 Int BE Pri
!#A N11716 N11717
!#7 N11718 P7520 PREFETCH 6 Int BE Pri
!#7 N11719 P7521 MEMBAR
!#7 N11720 P7522 BST 12 0x43000092 FP BE Pri
!#7 N11721 P7522 BST 13 0x43000093 FP BE Pri
!#A N11720 N11721
!#7 N11722 P7522 BST 14 0x43000094 FP BE Pri
!#7 N11723 P7523 MEMBAR
!#7 N11724 P7524 ST 11 0x38000d7 Int BE Pri
!#7 N11725 P7525 MEMBAR
!#7 N11726 P7526 BSTC 12 0x43000095 FP BE Pri
!#7 N11727 P7526 BSTC 13 0x43000096 FP BE Pri
!#A N11726 N11727
!#7 N11728 P7526 BSTC 14 0x43000097 FP BE Pri
!#7 N11729 P7527 MEMBAR
!#7 N11730 P7528 DWLD 23 -1 Int BE Pri
!#7 N11731 P7529 DWLD 14 -1 Int BE Pri
!#7 N11732 P7530 DWLD 3 -1 Int BE Pri
!#7 N11733 P7530 DWLD 4 -1 Int BE Pri
!#A N11732 N11733
!#7 N11734 P7530 CASX 3 -1 N11732 0x38000d8 Int BE Pri
!#7 N11735 P7530 CASX 4 -1 N11733 0x38000d9 Int BE Pri
!#A N11734 N11735
!#7 N11736 P7531 LD 20 -1 FP BE Pri
!#7 N11737 P7532 DWLD 21 -1 Int BE Pri
!#7 N11738 P7532 DWLD 22 -1 Int BE Pri
!#A N11737 N11738
!#7 N11739 P7533 LD 1 -1 Int BE Pri
!#7 N11740 P7533 CAS 1 -1 N11739 0x38000da Int BE Pri
!#7 N11741 P7534 REPLACEMENT 5 Int BE Pri
!#7 N11742 P7535 SWAP 21 0xffffffff 0x38000db Int BE Pri
!#7 N11743 P7536 DWST_BINIT 11 0x38000dc Int BE Pri
!#7 N11744 P7537 MEMBAR
!#7 N11745 P7538 LD 18 -1 Int BE Pri
!#7 N11746 P7538 CAS 18 -1 N11745 0x38000dd Int BE Pri
!#7 N11747 P7539 MEMBAR
!#7 N11748 P7540 BSTC 21 0x43000098 FP BE Pri
!#7 N11749 P7540 BSTC 22 0x43000099 FP BE Pri
!#A N11748 N11749
!#7 N11750 P7540 BSTC 23 0x4300009a FP BE Pri
!#7 N11751 P7541 MEMBAR
!#7 N11752 P7542 DWLD 9 -1 Int BE Pri
!#7 N11753 P7542 DWLD 10 -1 Int BE Pri
!#A N11752 N11753
!#7 N11754 P7543 DWLD 11 -1,0x0 Int BE Pri
!#7 N11755 P7543 CASX 11 -1,0x0 N11754 0x38000de Int BE Pri
!#7 N11756 P7544 MEMBAR
!#7 N11757 P7545 BSTC 3 0x4300009b FP BE Pri
!#7 N11758 P7545 BSTC 4 0x4300009c FP BE Pri
!#A N11757 N11758
!#7 N11759 P7545 BSTC 5 0x4300009d FP BE Pri
!#7 N11760 P7546 MEMBAR
!#7 N11761 P7547 PREFETCH 7 Int BE Pri
!#7 N11762 P7548 DWST_BINIT 14 0x38000df Int BE Pri
!#7 N11763 P7549 MEMBAR
!#7 N11764 P7550 REPLACEMENT 0 Int BE Pri
!#7 N11765 P7551 DWLD 17 -1 FP BE Pri
!#7 N11766 P7552 LD 23 -1 Int BE Pri
!#7 N11767 P7552 CAS 23 -1 N11766 0x38000e0 Int BE Pri
!#7 N11768 P7553 PREFETCH 15 Int BE Pri
!#7 N11769 P7554 PREFETCH 8 Int BE Pri
!#7 N11770 P7555 DWLD 18 -1 Int BE Pri
!#7 N11771 P7555 DWLD 19 -1 Int BE Pri
!#A N11770 N11771
!#7 N11772 P7556 MEMBAR
!#7 N11773 P7557 BLD 12 -1 FP BE Pri
!#7 N11774 P7557 BLD 13 -1 FP BE Pri
!#A N11773 N11774
!#7 N11775 P7557 BLD 14 -1 FP BE Pri
!#7 N11776 P7558 MEMBAR
!#7 N11777 P7559 ST 14 0x38000e1 Int BE Pri
!#7 N11778 P7560 DWST 6 0x4300009e FP BE Pri
!#7 N11779 P7560 DWST 7 0x4300009f FP BE Pri
!#A N11778 N11779
!#7 N11780 P7561 SWAP 8 0xffffffff 0x38000e2 Int BE Pri
!#7 N11781 P7562 SWAP 15 0xffffffff 0x38000e3 Int BE Pri
!#7 N11782 P7563 DWLD 3 -1 Int BE Pri
!#7 N11783 P7563 DWLD 4 -1 Int BE Pri
!#A N11782 N11783
!#7 N11784 P7563 CASX 3 -1 N11782 0x38000e4 Int BE Pri
!#7 N11785 P7563 CASX 4 -1 N11783 0x38000e5 Int BE Pri
!#A N11784 N11785
!#7 N11786 P7564 SWAP 2 0xffffffff 0x38000e6 Int BE Pri
!#7 N11787 P7565 MEMBAR
!#7 N11788 P7566 BST 3 0x430000a0 FP BE Pri
!#7 N11789 P7566 BST 4 0x430000a1 FP BE Pri
!#A N11788 N11789
!#7 N11790 P7566 BST 5 0x430000a2 FP BE Pri
!#7 N11791 P7567 MEMBAR
!#7 N11792 P7568 DWLD 12 -1 Int BE Pri
!#7 N11793 P7568 DWLD 13 -1 Int BE Pri
!#A N11792 N11793
!#7 N11794 P7569 MEMBAR
!#7 N11795 P7570 BLD 18 -1 FP BE Pri
!#7 N11796 P7570 BLD 19 -1 FP BE Pri
!#A N11795 N11796
!#7 N11797 P7570 BLD 20 -1 FP BE Pri
!#7 N11798 P7571 MEMBAR
!#7 N11799 P7572 DWST_BINIT 21 0x38000e7 Int BE Pri
!#7 N11800 P7572 DWST_BINIT 22 0x38000e8 Int BE Pri
!#A N11799 N11800
!#7 N11801 P7573 MEMBAR
!#7 N11802 P7574 BST 15 0x430000a3 FP BE Pri
!#7 N11803 P7574 BST 16 0x430000a4 FP BE Pri
!#A N11802 N11803
!#7 N11804 P7574 BST 17 0x430000a5 FP BE Pri
!#7 N11805 P7575 MEMBAR
!#7 N11806 P7576 ST 1 0x38000e9 Int BE Pri
!#7 N11807 P7577 LD 1 -1 Int BE Pri
!#7 N11808 P7577 CAS 1 -1 N11807 0x38000ea Int BE Pri
!#7 N11809 P7578 LDD 3 -1 Int BE Pri
!#7 N11810 P7578 LDD 4 -1 Int BE Pri
!#A N11809 N11810
!#7 N11811 P7579 LDD 3 -1 Int BE Pri
!#7 N11812 P7579 LDD 4 -1 Int BE Pri
!#A N11811 N11812
!#7 N11813 P7580 LD 8 -1 Int BE Pri
!#7 N11814 P7581 DWST_BINIT 21 0x38000eb Int BE Pri
!#7 N11815 P7581 DWST_BINIT 22 0x38000ec Int BE Pri
!#A N11814 N11815
!#7 N11816 P7582 MEMBAR
!#7 N11817 P7583 REPLACEMENT 11 Int BE Pri
!#7 N11818 P7584 LDD 2 -1 Int BE Pri
!#7 N11819 P7585 REPLACEMENT 23 Int BE Pri
!#7 N11820 P7586 DWST 8 0x38000ed Int BE Pri
!#7 N11821 P7587 ST_BINIT 13 0x38000ee Int BE Pri
!#7 N11822 P7588 MEMBAR
!#7 N11823 P7589 PREFETCH 14 Int BE Pri
!#7 N11824 P7590 ST 16 0x38000ef Int BE Pri
!#7 N11825 P7591 DWST_BINIT 3 0x38000f0 Int BE Pri
!#7 N11826 P7591 DWST_BINIT 4 0x38000f1 Int BE Pri
!#A N11825 N11826
!#7 N11827 P7592 MEMBAR
!#7 N11828 P7593 DWLD 18 -1 Int BE Pri
!#7 N11829 P7593 DWLD 19 -1 Int BE Pri
!#A N11828 N11829
!#7 N11830 P7594 ST_BINIT 2 0x38000f2 Int BE Pri
!#7 N11831 P7595 MEMBAR
!#7 N11832 P7596 LD 17 -1 Int BE Pri
!#7 N11833 P7596 CAS 17 -1 N11832 0x38000f3 Int BE Pri
!#7 N11834 P7597 DWLD 6 -1 Int BE Pri
!#7 N11835 P7597 DWLD 7 -1 Int BE Pri
!#A N11834 N11835
!#7 N11836 P7598 LD 21 -1 Int BE Pri
!#7 N11837 P7599 REPLACEMENT 0 Int BE Pri
!#7 N11838 P7600 ST 10 0x38000f4 Int BE Pri
!#7 N11839 P7601 LD 20 -1 Int BE Pri
!#7 N11840 P7602 DWST_BINIT 9 0x38000f5 Int BE Pri
!#7 N11841 P7602 DWST_BINIT 10 0x38000f6 Int BE Pri
!#A N11840 N11841
!#7 N11842 P7603 MEMBAR
!#7 N11843 P7604 LDD 12 -1 Int LE Pri
!#7 N11844 P7604 LDD 13 -1 Int LE Pri
!#A N11843 N11844
!#7 N11845 P7605 PREFETCH 12 Int BE Pri
!#7 N11846 P7606 PREFETCH 7 Int BE Pri
!#7 N11847 P7607 MEMBAR
!#7 N11848 P7608 BSTC 6 0x430000a6 FP BE Pri
!#7 N11849 P7608 BSTC 7 0x430000a7 FP BE Pri
!#A N11848 N11849
!#7 N11850 P7608 BSTC 8 0x430000a8 FP BE Pri
!#7 N11851 P7609 MEMBAR
!#7 N11852 P7610 SWAP 21 0xffffffff 0x38000f7 Int BE Pri
!#7 N11853 P7611 PREFETCH 22 Int BE Pri
!#7 N11854 P7612 SWAP 6 0xffffffff 0x38000f8 Int BE Pri
!#7 N11855 P7613 MEMBAR
!#7 N11856 P7614 BSTC 21 0x430000a9 FP BE Pri
!#7 N11857 P7614 BSTC 22 0x430000aa FP BE Pri
!#A N11856 N11857
!#7 N11858 P7614 BSTC 23 0x430000ab FP BE Pri
!#7 N11859 P7615 MEMBAR
!#7 N11860 P7616 DWST 12 0x38000f9 Int BE Pri
!#7 N11861 P7616 DWST 13 0x38000fa Int BE Pri
!#A N11860 N11861
!#7 N11862 P7617 MEMBAR
!#7 N11863 P7618 BLD 9 -1 FP BE Pri
!#7 N11864 P7618 BLD 10 -1 FP BE Pri
!#A N11863 N11864
!#7 N11865 P7618 BLD 11 -1 FP BE Pri
!#7 N11866 P7619 MEMBAR
!#7 N11867 P7620 DWLD 17 -1,0x0 Int BE Pri
!#7 N11868 P7620 CASX 17 -1,0x0 N11867 0x38000fb Int BE Pri
!#7 N11869 P7621 DWST 11 0x38000fc Int BE Pri
!#7 N11870 P7622 ST 17 0x38000fd Int BE Pri
!#7 N11871 P7623 MEMBAR
!#7 N11872 P7624 BSTC 3 0x430000ac FP BE Pri
!#7 N11873 P7624 BSTC 4 0x430000ad FP BE Pri
!#A N11872 N11873
!#7 N11874 P7624 BSTC 5 0x430000ae FP BE Pri
!#7 N11875 P7625 MEMBAR
!#7 N11876 P7626 DWLD 9 -1 Int BE Pri
!#7 N11877 P7626 DWLD 10 -1 Int BE Pri
!#A N11876 N11877
!#7 N11878 P7626 CASX 9 -1 N11876 0x38000fe Int BE Pri
!#7 N11879 P7626 CASX 10 -1 N11877 0x38000ff Int BE Pri
!#A N11878 N11879
!#7 N11880 P7627 MEMBAR
!#7 N11881 P7628 BSTC 9 0x430000af FP BE Pri
!#7 N11882 P7628 BSTC 10 0x430000b0 FP BE Pri
!#A N11881 N11882
!#7 N11883 P7628 BSTC 11 0x430000b1 FP BE Pri
!#7 N11884 P7629 MEMBAR
!#7 N11885 P7630 LD 16 -1 Int BE Pri
!#7 N11886 P7631 MEMBAR
!#7 N11887 P7632 BLD 6 -1 FP BE Pri
!#7 N11888 P7632 BLD 7 -1 FP BE Pri
!#A N11887 N11888
!#7 N11889 P7632 BLD 8 -1 FP BE Pri
!#7 N11890 P7633 MEMBAR
!#7 N11891 P7634 SWAP 1 0xffffffff 0x3800100 Int BE Pri
!#7 N11892 P7635 MEMBAR
!#7 N11893 P7636 BSTC 0 0x430000b2 FP BE Pri
!#7 N11894 P7636 BSTC 1 0x430000b3 FP BE Pri
!#A N11893 N11894
!#7 N11895 P7636 BSTC 2 0x430000b4 FP BE Pri
!#7 N11896 P7637 MEMBAR
!#7 N11897 P7638 DWLD 6 -1 Int BE Pri
!#7 N11898 P7638 DWLD 7 -1 Int BE Pri
!#A N11897 N11898
!#7 N11899 P7639 DWLD 15 -1 Int BE Pri
!#7 N11900 P7639 DWLD 16 -1 Int BE Pri
!#A N11899 N11900
!#7 N11901 P7639 CASX 15 -1 N11899 0x3800101 Int BE Pri
!#7 N11902 P7639 CASX 16 -1 N11900 0x3800102 Int BE Pri
!#A N11901 N11902
!#7 N11903 P7640 DWLD 3 -1 Int BE Pri
!#7 N11904 P7640 DWLD 4 -1 Int BE Pri
!#A N11903 N11904
!#7 N11905 P7640 CASX 3 -1 N11903 0x3800103 Int BE Pri
!#7 N11906 P7640 CASX 4 -1 N11904 0x3800104 Int BE Pri
!#A N11905 N11906
!#7 N11907 P7641 LDD 8 -1 Int BE Pri
!#7 N11908 P7642 DWLD 14 -1 Int BE Pri
!#7 N11909 P7643 LD 7 -1 Int BE Pri
!#7 N11910 P7643 CAS 7 -1 N11909 0x3800105 Int BE Pri
!#7 N11911 P7644 SWAP 12 0xffffffff 0x3800106 Int BE Pri
!#7 N11912 P7645 REPLACEMENT 11 Int BE Pri
!#7 N11913 P7646 SWAP 19 0xffffffff 0x3800107 Int BE Pri
!#7 N11914 P7647 LDD 8 -1 Int BE Pri
!#7 N11915 P7648 ST 15 0x3800108 Int BE Pri
!#7 N11916 P7649 DWLD 21 -1 FP BE Pri
!#7 N11917 P7649 DWLD 22 -1 FP BE Pri
!#A N11916 N11917
!#7 N11918 P7650 PREFETCH 21 Int BE Pri
!#7 N11919 P7651 DWST 8 0x3800109 Int BE Pri
!#7 N11920 P7652 PREFETCH 21 Int BE Pri
!#7 N11921 P7653 MEMBAR
!#7 N11922 P7654 BSTC 15 0x430000b5 FP BE Pri
!#7 N11923 P7654 BSTC 16 0x430000b6 FP BE Pri
!#A N11922 N11923
!#7 N11924 P7654 BSTC 17 0x430000b7 FP BE Pri
!#7 N11925 P7655 MEMBAR
!#7 N11926 P7656 REPLACEMENT 16 Int BE Pri
!#7 N11927 P7657 MEMBAR
!#7 N11928 P7658 BLD 0 -1 FP BE Pri
!#7 N11929 P7658 BLD 1 -1 FP BE Pri
!#A N11928 N11929
!#7 N11930 P7658 BLD 2 -1 FP BE Pri
!#7 N11931 P7659 MEMBAR
!#7 N11932 P7660 BSTC 15 0x430000b8 FP BE Pri
!#7 N11933 P7660 BSTC 16 0x430000b9 FP BE Pri
!#A N11932 N11933
!#7 N11934 P7660 BSTC 17 0x430000ba FP BE Pri
!#7 N11935 P7661 MEMBAR
!#7 N11936 P7662 SWAP 6 0xffffffff 0x380010a Int BE Pri
!#7 N11937 P7663 SWAP 5 0xffffffff 0x380010b Int BE Pri
!#7 N11938 P7664 DWST 6 0x380010c Int BE Pri
!#7 N11939 P7664 DWST 7 0x380010d Int BE Pri
!#A N11938 N11939
!#7 N11940 P7665 DWST_BINIT 17 0x380010e Int BE Pri
!#7 N11941 P7666 MEMBAR
!#7 N11942 P7667 LD 23 -1 Int BE Pri
!#7 N11943 P7667 CAS 23 -1 N11942 0x380010f Int BE Pri
!#7 N11944 P7668 REPLACEMENT 6 Int BE Pri
!#7 N11945 P7669 DWST_BINIT 6 0x3800110 Int BE Pri
!#7 N11946 P7669 DWST_BINIT 7 0x3800111 Int BE Pri
!#A N11945 N11946
!#7 N11947 P7670 MEMBAR
!#7 N11948 P7671 BLD 0 -1 FP BE Pri
!#7 N11949 P7671 BLD 1 -1 FP BE Pri
!#A N11948 N11949
!#7 N11950 P7671 BLD 2 -1 FP BE Pri
!#7 N11951 P7672 MEMBAR
!#7 N11952 P7673 DWST_BINIT 23 0x3800112 Int BE Pri
!#7 N11953 P7674 MEMBAR
!#7 N11954 P7675 LD 21 -1 Int BE Pri
!#7 N11955 P7676 DWLD 0 -1 Int BE Pri
!#7 N11956 P7676 DWLD 1 -1 Int BE Pri
!#A N11955 N11956
!#7 N11957 P7677 ST 17 0x3800113 Int BE Pri
!#7 N11958 P7678 LD 23 -1 Int BE Pri
!#7 N11959 P7678 CAS 23 -1 N11958 0x3800114 Int BE Pri
!#7 N11960 P7679 PREFETCH 21 Int BE Pri
!#7 N11961 P7680 DWST 21 0x3800115 Int BE Pri
!#7 N11962 P7680 DWST 22 0x3800116 Int BE Pri
!#A N11961 N11962
!#7 N11963 P7681 LDD 6 -1 Int BE Pri
!#7 N11964 P7681 LDD 7 -1 Int BE Pri
!#A N11963 N11964
!#7 N11965 P7682 MEMBAR
!#7 N11966 P7683 BSTC 0 0x430000bb FP BE Pri
!#7 N11967 P7683 BSTC 1 0x430000bc FP BE Pri
!#A N11966 N11967
!#7 N11968 P7683 BSTC 2 0x430000bd FP BE Pri
!#7 N11969 P7684 MEMBAR
!#7 N11970 P7685 DWST 9 0x3800117 Int BE Pri
!#7 N11971 P7685 DWST 10 0x3800118 Int BE Pri
!#A N11970 N11971
!#7 N11972 P7686 PREFETCH 19 Int LE Pri
!#7 N11973 P7687 SWAP 3 0xffffffff 0x3800119 Int BE Pri
!#7 N11974 P7688 PREFETCH 20 Int BE Pri
!#7 N11975 P7689 DWST_BINIT 0 0x380011a Int BE Pri
!#7 N11976 P7689 DWST_BINIT 1 0x380011b Int BE Pri
!#A N11975 N11976
!#7 N11977 P7690 MEMBAR
!#7 N11978 P7691 ST_BINIT 7 0x380011c Int BE Pri
!#7 N11979 P7692 MEMBAR
!#7 N11980 P7693 DWST_BINIT 15 0x380011d Int BE Pri
!#7 N11981 P7693 DWST_BINIT 16 0x380011e Int BE Pri
!#A N11980 N11981
!#7 N11982 P7694 MEMBAR
!#7 N11983 P7695 DWST_BINIT 12 0x380011f Int BE Pri
!#7 N11984 P7695 DWST_BINIT 13 0x3800120 Int BE Pri
!#A N11983 N11984
!#7 N11985 P7696 MEMBAR
!#7 N11986 P7697 DWLD 21 -1 Int BE Pri
!#7 N11987 P7697 DWLD 22 -1 Int BE Pri
!#A N11986 N11987
!#7 N11988 P7697 CASX 21 -1 N11986 0x3800121 Int BE Pri
!#7 N11989 P7697 CASX 22 -1 N11987 0x3800122 Int BE Pri
!#A N11988 N11989
!#7 N11990 P7698 ST_BINIT 18 0x3800123 Int BE Pri
!#7 N11991 P7699 MEMBAR
!#7 N11992 P7700 DWST 15 0x3800124 Int BE Pri
!#7 N11993 P7700 DWST 16 0x3800125 Int BE Pri
!#A N11992 N11993
!#7 N11994 P7701 ST 19 0x3800126 Int BE Pri
!#7 N11995 P7702 LD 1 -1 Int BE Pri
!#7 N11996 P7702 CAS 1 -1 N11995 0x3800127 Int BE Pri
!#7 N11997 P7703 MEMBAR
!#7 N11998 P7704 BSTC 6 0x430000be FP BE Pri
!#7 N11999 P7704 BSTC 7 0x430000bf FP BE Pri
!#A N11998 N11999
!#7 N12000 P7704 BSTC 8 0x430000c0 FP BE Pri
!#7 N12001 P7705 MEMBAR
!#7 N12002 P7706 SWAP 6 0xffffffff 0x3800128 Int BE Pri
!#7 N12003 P7707 ST 10 0x3800129 Int BE Pri
!#7 N12004 P7708 MEMBAR
!#7 N12005 P7709 BSTC 9 0x430000c1 FP BE Pri
!#7 N12006 P7709 BSTC 10 0x430000c2 FP BE Pri
!#A N12005 N12006
!#7 N12007 P7709 BSTC 11 0x430000c3 FP BE Pri
!#7 N12008 P7710 MEMBAR
!#7 N12009 P7711 DWLD 9 -1 Int BE Pri
!#7 N12010 P7711 DWLD 10 -1 Int BE Pri
!#A N12009 N12010
!#7 N12011 P7712 MEMBAR
!#7 N12012 P7713 BST 9 0x430000c4 FP BE Pri
!#7 N12013 P7713 BST 10 0x430000c5 FP BE Pri
!#A N12012 N12013
!#7 N12014 P7713 BST 11 0x430000c6 FP BE Pri
!#7 N12015 P7714 MEMBAR
!#7 N12016 P7715 BLD 21 -1 FP BE Pri
!#7 N12017 P7715 BLD 22 -1 FP BE Pri
!#A N12016 N12017
!#7 N12018 P7715 BLD 23 -1 FP BE Pri
!#7 N12019 P7716 MEMBAR
!#7 N12020 P7717 SWAP 11 0xffffffff 0x380012a Int BE Pri
!#7 N12021 P7718 ST_BINIT 22 0x380012b Int BE Pri
!#7 N12022 P7719 MEMBAR
!#7 N12023 P7720 BLD 9 -1 FP BE Pri
!#7 N12024 P7720 BLD 10 -1 FP BE Pri
!#A N12023 N12024
!#7 N12025 P7720 BLD 11 -1 FP BE Pri
!#7 N12026 P7721 MEMBAR
!#7 N12027 P7722 BLD 9 -1 FP BE Pri
!#7 N12028 P7722 BLD 10 -1 FP BE Pri
!#A N12027 N12028
!#7 N12029 P7722 BLD 11 -1 FP BE Pri
!#7 N12030 P7723 MEMBAR
!#7 N12031 P7724 DWST 18 0x380012c Int BE Pri
!#7 N12032 P7724 DWST 19 0x380012d Int BE Pri
!#A N12031 N12032
!#7 N12033 P7725 DWST_BINIT 12 0x380012e Int LE Pri
!#7 N12034 P7725 DWST_BINIT 13 0x380012f Int LE Pri
!#A N12033 N12034
!#7 N12035 P7726 MEMBAR
!#7 N12036 P7727 LDD 21 -1 Int BE Pri
!#7 N12037 P7727 LDD 22 -1 Int BE Pri
!#A N12036 N12037
!#7 N12038 P7728 DWLD 12 -1 Int BE Pri
!#7 N12039 P7728 DWLD 13 -1 Int BE Pri
!#A N12038 N12039
!#7 N12040 P7728 CASX 12 -1 N12038 0x3800130 Int BE Pri
!#7 N12041 P7728 CASX 13 -1 N12039 0x3800131 Int BE Pri
!#A N12040 N12041
!#7 N12042 P7729 MEMBAR
!#7 N12043 P7730 BSTC 21 0x430000c7 FP BE Pri
!#7 N12044 P7730 BSTC 22 0x430000c8 FP BE Pri
!#A N12043 N12044
!#7 N12045 P7730 BSTC 23 0x430000c9 FP BE Pri
!#7 N12046 P7731 MEMBAR
!#7 N12047 P7732 DWLD 9 -1 Int BE Pri
!#7 N12048 P7732 DWLD 10 -1 Int BE Pri
!#A N12047 N12048
!#7 N12049 P7732 CASX 9 -1 N12047 0x3800132 Int BE Pri
!#7 N12050 P7732 CASX 10 -1 N12048 0x3800133 Int BE Pri
!#A N12049 N12050
!#7 N12051 P7733 DWLD 21 -1 Int BE Pri
!#7 N12052 P7733 DWLD 22 -1 Int BE Pri
!#A N12051 N12052
!#7 N12053 P7733 CASX 21 -1 N12051 0x3800134 Int BE Pri
!#7 N12054 P7733 CASX 22 -1 N12052 0x3800135 Int BE Pri
!#A N12053 N12054
!#7 N12055 P7734 SWAP 0 0xffffffff 0x3800136 Int BE Pri
!#7 N12056 P7735 MEMBAR
!#7 N12057 P7736 BST 21 0x430000ca FP BE Pri
!#7 N12058 P7736 BST 22 0x430000cb FP BE Pri
!#A N12057 N12058
!#7 N12059 P7736 BST 23 0x430000cc FP BE Pri
!#7 N12060 P7737 MEMBAR
!#7 N12061 P7738 ST 1 0x3800137 Int BE Pri
!#7 N12062 P7739 LDD 18 -1 Int BE Pri
!#7 N12063 P7739 LDD 19 -1 Int BE Pri
!#A N12062 N12063
!#7 N12064 P7740 DWST 17 0x3800138 Int BE Pri
!#7 N12065 P7741 MEMBAR
!#7 N12066 P7742 BST 9 0x430000cd FP BE Pri
!#7 N12067 P7742 BST 10 0x430000ce FP BE Pri
!#A N12066 N12067
!#7 N12068 P7742 BST 11 0x430000cf FP BE Pri
!#7 N12069 P7743 MEMBAR
!#7 N12070 P7744 LD 14 -1 Int BE Pri
!#7 N12071 P7745 SWAP 13 0xffffffff 0x3800139 Int BE Pri
!#7 N12072 P7746 LD 7 -1 Int BE Pri
!#7 N12073 P7746 CAS 7 -1 N12072 0x380013a Int BE Pri
!#7 N12074 P7747 DWST 20 0x380013b Int BE Pri
!#7 N12075 P7748 DWLD 6 -1 Int BE Pri
!#7 N12076 P7748 DWLD 7 -1 Int BE Pri
!#A N12075 N12076
!#7 N12077 P7748 CASX 6 -1 N12075 0x380013c Int BE Pri
!#7 N12078 P7748 CASX 7 -1 N12076 0x380013d Int BE Pri
!#A N12077 N12078
!#7 N12079 P7749 PREFETCH 3 Int BE Pri
!#7 N12080 P7750 DWST_BINIT 23 0x380013e Int BE Pri
!#7 N12081 P7751 MEMBAR
!#7 N12082 P7752 BSTC 9 0x430000d0 FP BE Pri
!#7 N12083 P7752 BSTC 10 0x430000d1 FP BE Pri
!#A N12082 N12083
!#7 N12084 P7752 BSTC 11 0x430000d2 FP BE Pri
!#7 N12085 P7753 MEMBAR
!#7 N12086 P7754 DWLD 20 -1,0x0 Int BE Pri
!#7 N12087 P7754 CASX 20 -1,0x0 N12086 0x380013f Int BE Pri
!#7 N12088 P7755 LD 12 -1 Int BE Pri
!#7 N12089 P7755 CAS 12 -1 N12088 0x3800140 Int BE Pri
!#7 N12090 P7756 SWAP 17 0xffffffff 0x3800141 Int BE Pri
!#7 N12091 P7757 MEMBAR
!#7 N12092 P7758 BLD 3 -1 FP BE Pri
!#7 N12093 P7758 BLD 4 -1 FP BE Pri
!#A N12092 N12093
!#7 N12094 P7758 BLD 5 -1 FP BE Pri
!#7 N12095 P7759 MEMBAR
!#7 N12096 P7760 LD 12 -1 Int BE Pri
!#7 N12097 P7761 DWLD 5 -1 Int BE Pri
!#7 N12098 P7762 ST 9 0x3800142 Int BE Pri
!#7 N12099 P7763 ST 13 0x3800143 Int BE Pri
!#7 N12100 P7764 DWST 8 0x3800144 Int BE Pri
!#7 N12101 P7765 REPLACEMENT 11 Int BE Pri
!#7 N12102 P7766 PREFETCH 12 Int BE Pri
!#7 N12103 P7767 DWLD 3 -1 Int BE Pri
!#7 N12104 P7767 DWLD 4 -1 Int BE Pri
!#A N12103 N12104
!#7 N12105 P7767 CASX 3 -1 N12103 0x3800145 Int BE Pri
!#7 N12106 P7767 CASX 4 -1 N12104 0x3800146 Int BE Pri
!#A N12105 N12106
!#7 N12107 P7768 MEMBAR
!#7 N12108 P7769 BSTC 9 0x430000d3 FP BE Pri
!#7 N12109 P7769 BSTC 10 0x430000d4 FP BE Pri
!#A N12108 N12109
!#7 N12110 P7769 BSTC 11 0x430000d5 FP BE Pri
!#7 N12111 P7770 MEMBAR
!#7 N12112 P7771 ST_BINIT 6 0x3800147 Int BE Pri
!#7 N12113 P7772 MEMBAR
!#7 N12114 P7773 LD 9 -1 Int BE Pri
!#7 N12115 P7774 LD 4 -1 Int BE Pri
!#7 N12116 P7775 PREFETCH 14 Int BE Pri
!#7 N12117 P7776 LD 6 -1 Int BE Pri
!#7 N12118 P7776 CAS 6 -1 N12117 0x3800148 Int BE Pri
!#7 N12119 P7777 MEMBAR
!#7 N12120 P7778 BST 3 0x430000d6 FP BE Pri
!#7 N12121 P7778 BST 4 0x430000d7 FP BE Pri
!#A N12120 N12121
!#7 N12122 P7778 BST 5 0x430000d8 FP BE Pri
!#7 N12123 P7779 MEMBAR
!#7 N12124 P7780 LDD 21 -1 Int BE Pri
!#7 N12125 P7780 LDD 22 -1 Int BE Pri
!#A N12124 N12125
!#7 N12126 P7781 MEMBAR
!#7 N12127 P7782 BLD 0 -1 FP BE Pri
!#7 N12128 P7782 BLD 1 -1 FP BE Pri
!#A N12127 N12128
!#7 N12129 P7782 BLD 2 -1 FP BE Pri
!#7 N12130 P7783 MEMBAR
!#7 N12131 P7784 LD 21 -1 Int BE Pri
!#7 N12132 P7784 CAS 21 -1 N12131 0x3800149 Int BE Pri
!#7 N12133 P7785 DWST_BINIT 5 0x380014a Int BE Pri
!#7 N12134 P7786 MEMBAR
!#7 N12135 P7787 LD 22 -1 Int BE Pri
!#7 N12136 P7788 SWAP 21 0xffffffff 0x380014b Int BE Pri
!#7 N12137 P7789 MEMBAR
!#7 N12138 P7790 BST 9 0x430000d9 FP BE Pri
!#7 N12139 P7790 BST 10 0x430000da FP BE Pri
!#A N12138 N12139
!#7 N12140 P7790 BST 11 0x430000db FP BE Pri
!#7 N12141 P7791 MEMBAR
!#7 N12142 P7792 DWST_BINIT 9 0x380014c Int BE Pri
!#7 N12143 P7792 DWST_BINIT 10 0x380014d Int BE Pri
!#A N12142 N12143
!#7 N12144 P7793 MEMBAR
!#7 N12145 P7794 DWLD 14 -1,0x0 Int BE Pri
!#7 N12146 P7794 CASX 14 -1,0x0 N12145 0x380014e Int BE Pri
!#7 N12147 P7795 MEMBAR
!#7 N12148 P7796 BLD 21 -1 FP BE Pri
!#7 N12149 P7796 BLD 22 -1 FP BE Pri
!#A N12148 N12149
!#7 N12150 P7796 BLD 23 -1 FP BE Pri
!#7 N12151 P7797 MEMBAR
!#7 N12152 P7798 PREFETCH 22 Int BE Pri
!#7 N12153 P7799 MEMBAR
!#7 N12154 P7800 BSTC 21 0x430000dc FP BE Pri
!#7 N12155 P7800 BSTC 22 0x430000dd FP BE Pri
!#A N12154 N12155
!#7 N12156 P7800 BSTC 23 0x430000de FP BE Pri
!#7 N12157 P7801 MEMBAR
!#7 N12158 P7802 PREFETCH 4 Int BE Pri
!#7 N12159 P7803 MEMBAR
!#7 N12160 P7804 BSTC 3 0x430000df FP BE Pri
!#7 N12161 P7804 BSTC 4 0x430000e0 FP BE Pri
!#A N12160 N12161
!#7 N12162 P7804 BSTC 5 0x430000e1 FP BE Pri
!#7 N12163 P7805 MEMBAR
!#7 N12164 P7806 ST_BINIT 19 0x380014f Int LE Pri
!#7 N12165 P7807 MEMBAR
!#7 N12166 P7808 SWAP 5 0xffffffff 0x3800150 Int BE Pri
!#7 N12167 P7809 MEMBAR
!#7 N12168 P7810 BST 21 0x430000e2 FP BE Pri
!#7 N12169 P7810 BST 22 0x430000e3 FP BE Pri
!#A N12168 N12169
!#7 N12170 P7810 BST 23 0x430000e4 FP BE Pri
!#7 N12171 P7811 MEMBAR
!#7 N12172 P7812 LD 22 -1 Int BE Pri
!#7 N12173 P7813 SWAP 14 0xffffffff 0x3800151 Int BE Pri
!#7 N12174 P7814 MEMBAR
!#7 N12175 P7815 BST 21 0x430000e5 FP BE Pri
!#7 N12176 P7815 BST 22 0x430000e6 FP BE Pri
!#A N12175 N12176
!#7 N12177 P7815 BST 23 0x430000e7 FP BE Pri
!#7 N12178 P7816 MEMBAR
!#7 N12179 P7817 LDD 9 -1 Int BE Pri
!#7 N12180 P7817 LDD 10 -1 Int BE Pri
!#A N12179 N12180
!#7 N12181 P7818 DWLD 15 -1 Int BE Pri
!#7 N12182 P7818 DWLD 16 -1 Int BE Pri
!#A N12181 N12182
!#7 N12183 P7818 CASX 15 -1 N12181 0x3800152 Int BE Pri
!#7 N12184 P7818 CASX 16 -1 N12182 0x3800153 Int BE Pri
!#A N12183 N12184
!#7 N12185 P7819 MEMBAR
!#7 N12186 P7820 BST 6 0x430000e8 FP BE Pri
!#7 N12187 P7820 BST 7 0x430000e9 FP BE Pri
!#A N12186 N12187
!#7 N12188 P7820 BST 8 0x430000ea FP BE Pri
!#7 N12189 P7821 MEMBAR
!#7 N12190 P7822 REPLACEMENT 10 Int BE Pri
!#7 N12191 P7823 SWAP 10 0xffffffff 0x3800154 Int BE Pri
!#7 N12192 P7824 MEMBAR
!#7 N12193 P7825 BSTC 6 0x430000eb FP BE Pri
!#7 N12194 P7825 BSTC 7 0x430000ec FP BE Pri
!#A N12193 N12194
!#7 N12195 P7825 BSTC 8 0x430000ed FP BE Pri
!#7 N12196 P7826 MEMBAR
!#7 N12197 P7827 BST 18 0x430000ee FP BE Pri
!#7 N12198 P7827 BST 19 0x430000ef FP BE Pri
!#A N12197 N12198
!#7 N12199 P7827 BST 20 0x430000f0 FP BE Pri
!#7 N12200 P7828 MEMBAR
!#7 N12201 P7829 DWST_BINIT 9 0x3800155 Int BE Pri
!#7 N12202 P7829 DWST_BINIT 10 0x3800156 Int BE Pri
!#A N12201 N12202
!#7 N12203 P7830 MEMBAR
!#7 N12204 P7831 SWAP 13 0xffffffff 0x3800157 Int LE Pri
!#7 N12205 P7832 DWLD 3 -1 Int BE Pri
!#7 N12206 P7832 DWLD 4 -1 Int BE Pri
!#A N12205 N12206
!#7 N12207 P7832 CASX 3 -1 N12205 0x3800158 Int BE Pri
!#7 N12208 P7832 CASX 4 -1 N12206 0x3800159 Int BE Pri
!#A N12207 N12208
!#7 N12209 P7833 DWLD 17 -1 FP BE Pri
!#7 N12210 P7834 PREFETCH 10 Int BE Pri
!#7 N12211 P7835 PREFETCH 5 Int LE Pri
!#7 N12212 P7836 DWLD 2 -1 Int BE Pri
!#7 N12213 P7837 MEMBAR
!#7 N12214 P7838 BSTC 18 0x430000f1 FP BE Pri
!#7 N12215 P7838 BSTC 19 0x430000f2 FP BE Pri
!#A N12214 N12215
!#7 N12216 P7838 BSTC 20 0x430000f3 FP BE Pri
!#7 N12217 P7839 MEMBAR
!#7 N12218 P7840 DWST 18 0x430000f4 FP BE Pri
!#7 N12219 P7840 DWST 19 0x430000f5 FP BE Pri
!#A N12218 N12219
!#7 N12220 P7841 DWST_BINIT 20 0x380015a Int BE Pri
!#7 N12221 P7842 MEMBAR
!#7 N12222 P7843 DWST_BINIT 18 0x380015b Int BE Pri
!#7 N12223 P7843 DWST_BINIT 19 0x380015c Int BE Pri
!#A N12222 N12223
!#7 N12224 P7844 MEMBAR
!#7 N12225 P7845 SWAP 9 0xffffffff 0x380015d Int BE Pri
!#7 N12226 P7846 MEMBAR
!#7 N12227 P7847 BST 15 0x430000f6 FP BE Pri
!#7 N12228 P7847 BST 16 0x430000f7 FP BE Pri
!#A N12227 N12228
!#7 N12229 P7847 BST 17 0x430000f8 FP BE Pri
!#7 N12230 P7848 MEMBAR
!#7 N12231 P7849 LD 11 -1 Int BE Pri
!#7 N12232 P7850 MEMBAR
!#7 N12233 P7851 BST 9 0x430000f9 FP BE Pri
!#7 N12234 P7851 BST 10 0x430000fa FP BE Pri
!#A N12233 N12234
!#7 N12235 P7851 BST 11 0x430000fb FP BE Pri
!#7 N12236 P7852 MEMBAR
!#7 N12237 P7853 DWLD 2 -1,0x0 Int BE Pri
!#7 N12238 P7853 CASX 2 -1,0x0 N12237 0x380015e Int BE Pri
!#7 N12239 P7854 PREFETCH 6 Int BE Pri
!#7 N12240 P7855 PREFETCH 7 Int BE Pri
!#7 N12241 P7856 MEMBAR
!#7 N12242 P7857 BSTC 6 0x430000fc FP BE Pri
!#7 N12243 P7857 BSTC 7 0x430000fd FP BE Pri
!#A N12242 N12243
!#7 N12244 P7857 BSTC 8 0x430000fe FP BE Pri
!#7 N12245 P7858 MEMBAR
!#7 N12246 P7859 LD 5 -1 Int BE Pri
!#7 N12247 P7859 CAS 5 -1 N12246 0x380015f Int BE Pri
!#7 N12248 P7860 LD 9 -1 Int BE Pri
!#7 N12249 P7860 CAS 9 -1 N12248 0x3800160 Int BE Pri
!#7 N12250 P7861 SWAP 18 0xffffffff 0x3800161 Int BE Pri
!#7 N12251 P7862 DWLD 0 -1 Int BE Pri
!#7 N12252 P7862 DWLD 1 -1 Int BE Pri
!#A N12251 N12252
!#7 N12253 P7863 ST 5 0x3800162 Int BE Pri
!#7 N12254 P7864 DWST_BINIT 15 0x3800163 Int BE Pri
!#7 N12255 P7864 DWST_BINIT 16 0x3800164 Int BE Pri
!#A N12254 N12255
!#7 N12256 P7865 MEMBAR
!#7 N12257 P7866 DWLD 3 -1 Int BE Pri
!#7 N12258 P7866 DWLD 4 -1 Int BE Pri
!#A N12257 N12258
!#7 N12259 P7867 MEMBAR
!#7 N12260 P7868 BST 21 0x430000ff FP BE Pri
!#7 N12261 P7868 BST 22 0x43000100 FP BE Pri
!#A N12260 N12261
!#7 N12262 P7868 BST 23 0x43000101 FP BE Pri
!#7 N12263 P7869 MEMBAR
!#7 N12264 P7870 DWST 11 0x3800165 Int BE Pri
!#7 N12265 P7871 DWLD 14 -1,0x0 Int BE Pri
!#7 N12266 P7871 CASX 14 -1,0x0 N12265 0x3800166 Int BE Pri
!#7 N12267 P7872 LD 21 -1 Int BE Pri
!#7 N12268 P7873 DWST_BINIT 6 0x3800167 Int BE Pri
!#7 N12269 P7873 DWST_BINIT 7 0x3800168 Int BE Pri
!#A N12268 N12269
!#7 N12270 P7874 MEMBAR
!#7 N12271 P7875 BST 3 0x43000102 FP BE Pri
!#7 N12272 P7875 BST 4 0x43000103 FP BE Pri
!#A N12271 N12272
!#7 N12273 P7875 BST 5 0x43000104 FP BE Pri
!#7 N12274 P7876 MEMBAR
!#7 N12275 P7877 ST_BINIT 7 0x3800169 Int BE Pri
!#7 N12276 P7878 MEMBAR
!#7 N12277 P7879 LDD 20 -1 Int BE Pri
!#7 N12278 P7880 DWST_BINIT 18 0x380016a Int BE Pri
!#7 N12279 P7880 DWST_BINIT 19 0x380016b Int BE Pri
!#A N12278 N12279
!#7 N12280 P7881 MEMBAR
!#7 N12281 P7882 DWLD 3 -1 Int BE Pri
!#7 N12282 P7882 DWLD 4 -1 Int BE Pri
!#A N12281 N12282
!#7 N12283 P7883 REPLACEMENT 9 Int BE Pri
!#7 N12284 P7884 LDD 6 -1 Int BE Pri
!#7 N12285 P7884 LDD 7 -1 Int BE Pri
!#A N12284 N12285
!#7 N12286 P7885 PREFETCH 18 Int BE Pri
!#7 N12287 P7886 SWAP 22 0xffffffff 0x380016c Int BE Pri
!#7 N12288 P7887 DWST 0 0x380016d Int BE Pri
!#7 N12289 P7887 DWST 1 0x380016e Int BE Pri
!#A N12288 N12289
!#7 N12290 P7888 DWST 3 0x43000105 FP BE Pri
!#7 N12291 P7888 DWST 4 0x43000106 FP BE Pri
!#A N12290 N12291
!#7 N12292 P7889 DWLD 6 -1 Int BE Pri
!#7 N12293 P7889 DWLD 7 -1 Int BE Pri
!#A N12292 N12293
!#7 N12294 P7889 CASX 6 -1 N12292 0x380016f Int BE Pri
!#7 N12295 P7889 CASX 7 -1 N12293 0x3800170 Int BE Pri
!#A N12294 N12295
!#7 N12296 P7890 MEMBAR
!#7 N12297 P7891 BST 3 0x43000107 FP BE Pri
!#7 N12298 P7891 BST 4 0x43000108 FP BE Pri
!#A N12297 N12298
!#7 N12299 P7891 BST 5 0x43000109 FP BE Pri
!#7 N12300 P7892 MEMBAR
!#7 N12301 P7893 ST 4 0x3800171 Int LE Pri
!#7 N12302 P7894 ST 15 0x3800172 Int BE Pri
!#7 N12303 P7895 MEMBAR
!#7 N12304 P7896 BLD 3 -1 FP BE Pri
!#7 N12305 P7896 BLD 4 -1 FP BE Pri
!#A N12304 N12305
!#7 N12306 P7896 BLD 5 -1 FP BE Pri
!#7 N12307 P7897 MEMBAR
!#7 N12308 P7898 DWST 18 0x3800173 Int BE Pri
!#7 N12309 P7898 DWST 19 0x3800174 Int BE Pri
!#A N12308 N12309
!#7 N12310 P7899 REPLACEMENT 16 Int BE Pri
!#7 N12311 P7900 ST_BINIT 19 0x3800175 Int BE Pri
!#7 N12312 P7901 MEMBAR
!#7 N12313 P7902 LD 18 -1 Int BE Pri
!#7 N12314 P7903 DWLD 8 -1,0x0 Int BE Pri
!#7 N12315 P7903 CASX 8 -1,0x0 N12314 0x3800176 Int BE Pri
!#7 N12316 P7904 DWLD 18 -1 Int BE Pri
!#7 N12317 P7904 DWLD 19 -1 Int BE Pri
!#A N12316 N12317
!#7 N12318 P7904 CASX 18 -1 N12316 0x3800177 Int BE Pri
!#7 N12319 P7904 CASX 19 -1 N12317 0x3800178 Int BE Pri
!#A N12318 N12319
!#7 N12320 P7905 DWLD 21 -1 Int BE Pri
!#7 N12321 P7905 DWLD 22 -1 Int BE Pri
!#A N12320 N12321
!#7 N12322 P7906 LDD 6 -1 Int BE Pri
!#7 N12323 P7906 LDD 7 -1 Int BE Pri
!#A N12322 N12323
!#7 N12324 P7907 LDD 15 -1 Int BE Pri
!#7 N12325 P7907 LDD 16 -1 Int BE Pri
!#A N12324 N12325
!#7 N12326 P7908 REPLACEMENT 16 Int BE Pri
!#7 N12327 P7909 DWLD 2 -1,0x0 Int BE Pri
!#7 N12328 P7909 CASX 2 -1,0x0 N12327 0x3800179 Int BE Pri
!#7 N12329 P7910 ST 2 0x380017a Int BE Pri
!#7 N12330 P7911 MEMBAR
!#7 N12331 P7912 BST 6 0x4300010a FP BE Pri
!#7 N12332 P7912 BST 7 0x4300010b FP BE Pri
!#A N12331 N12332
!#7 N12333 P7912 BST 8 0x4300010c FP BE Pri
!#7 N12334 P7913 MEMBAR
!#7 N12335 P7914 BST 12 0x4300010d FP BE Pri
!#7 N12336 P7914 BST 13 0x4300010e FP BE Pri
!#A N12335 N12336
!#7 N12337 P7914 BST 14 0x4300010f FP BE Pri
!#7 N12338 P7915 MEMBAR
!#7 N12339 P7916 ST 7 0x380017b Int BE Pri
!#7 N12340 P7917 DWST_BINIT 17 0x380017c Int BE Pri
!#7 N12341 P7918 MEMBAR
!#7 N12342 P7919 DWLD 15 -1 FP BE Pri
!#7 N12343 P7919 DWLD 16 -1 FP BE Pri
!#A N12342 N12343
!#7 N12344 P7920 SWAP 1 0xffffffff 0x380017d Int BE Pri
!#7 N12345 P7921 MEMBAR
!#7 N12346 P7922 BLD 6 -1 FP BE Pri
!#7 N12347 P7922 BLD 7 -1 FP BE Pri
!#A N12346 N12347
!#7 N12348 P7922 BLD 8 -1 FP BE Pri
!#7 N12349 P7923 MEMBAR
!#7 N12350 P7924 LD 17 -1 Int BE Pri
!#7 N12351 P7925 DWLD 15 -1 Int BE Pri
!#7 N12352 P7925 DWLD 16 -1 Int BE Pri
!#A N12351 N12352
!#7 N12353 P7926 DWLD 21 -1 Int BE Pri
!#7 N12354 P7926 DWLD 22 -1 Int BE Pri
!#A N12353 N12354
!#7 N12355 P7926 CASX 21 -1 N12353 0x380017e Int BE Pri
!#7 N12356 P7926 CASX 22 -1 N12354 0x380017f Int BE Pri
!#A N12355 N12356
!#7 N12357 P7927 LDD 0 -1 Int BE Pri
!#7 N12358 P7927 LDD 1 -1 Int BE Pri
!#A N12357 N12358
!#7 N12359 P7928 DWST 15 0x43000110 FP BE Pri
!#7 N12360 P7928 DWST 16 0x43000111 FP BE Pri
!#A N12359 N12360
!#7 N12361 P7929 LDD 20 -1 Int BE Pri
!#7 N12362 P7930 ST 20 0x3800180 Int BE Pri
!#7 N12363 P7931 DWST_BINIT 18 0x3800181 Int BE Pri
!#7 N12364 P7931 DWST_BINIT 19 0x3800182 Int BE Pri
!#A N12363 N12364
!#7 N12365 P7932 MEMBAR
!#7 N12366 P7933 DWST_BINIT 14 0x3800183 Int BE Pri
!#7 N12367 P7934 MEMBAR
!#7 N12368 P7935 REPLACEMENT 23 Int BE Pri
!#7 N12369 P7936 SWAP 0 0xffffffff 0x3800184 Int BE Pri
!#7 N12370 P7937 DWLD 11 -1,0x0 Int BE Pri
!#7 N12371 P7937 CASX 11 -1,0x0 N12370 0x3800185 Int BE Pri
!#7 N12372 P7938 ST_BINIT 8 0x3800186 Int BE Pri
!#7 N12373 P7939 MEMBAR
!#7 N12374 P7940 BST 3 0x43000112 FP BE Pri
!#7 N12375 P7940 BST 4 0x43000113 FP BE Pri
!#A N12374 N12375
!#7 N12376 P7940 BST 5 0x43000114 FP BE Pri
!#7 N12377 P7941 MEMBAR
!#7 N12378 P7942 DWLD 17 -1 Int BE Pri
!#7 N12379 P7943 LD 3 -1 Int BE Pri
!#7 N12380 P7943 CAS 3 -1 N12379 0x3800187 Int BE Pri
!#7 N12381 P7944 SWAP 4 0xffffffff 0x3800188 Int BE Pri
!#7 N12382 P7945 DWST_BINIT 14 0x3800189 Int BE Pri
!#7 N12383 P7946 MEMBAR
!#7 N12384 P7947 BLD 18 -1 FP BE Pri
!#7 N12385 P7947 BLD 19 -1 FP BE Pri
!#A N12384 N12385
!#7 N12386 P7947 BLD 20 -1 FP BE Pri
!#7 N12387 P7948 MEMBAR
!#7 N12388 P7949 DWST_BINIT 18 0x380018a Int BE Pri
!#7 N12389 P7949 DWST_BINIT 19 0x380018b Int BE Pri
!#A N12388 N12389
!#7 N12390 P7950 MEMBAR
!#7 N12391 P7951 SWAP 18 0xffffffff 0x380018c Int BE Pri
!#7 N12392 P7952 LDD 18 -1 Int BE Pri
!#7 N12393 P7952 LDD 19 -1 Int BE Pri
!#A N12392 N12393
!#7 N12394 P7953 MEMBAR
!#7 N12395 P7954 BSTC 21 0x43000115 FP BE Pri
!#7 N12396 P7954 BSTC 22 0x43000116 FP BE Pri
!#A N12395 N12396
!#7 N12397 P7954 BSTC 23 0x43000117 FP BE Pri
!#7 N12398 P7955 MEMBAR
!#7 N12399 P7956 ST 4 0x380018d Int BE Pri
!#7 N12400 P7957 LD 15 -1 Int BE Pri
!#7 N12401 P7958 MEMBAR
!#7 N12402 P7959 BLD 18 -1 FP BE Pri
!#7 N12403 P7959 BLD 19 -1 FP BE Pri
!#A N12402 N12403
!#7 N12404 P7959 BLD 20 -1 FP BE Pri
!#7 N12405 P7960 MEMBAR
!#7 N12406 P7961 BSTC 6 0x43000118 FP BE Pri
!#7 N12407 P7961 BSTC 7 0x43000119 FP BE Pri
!#A N12406 N12407
!#7 N12408 P7961 BSTC 8 0x4300011a FP BE Pri
!#7 N12409 P7962 MEMBAR
!#7 N12410 P7963 BSTC 12 0x4300011b FP BE Pri
!#7 N12411 P7963 BSTC 13 0x4300011c FP BE Pri
!#A N12410 N12411
!#7 N12412 P7963 BSTC 14 0x4300011d FP BE Pri
!#7 N12413 P7964 MEMBAR
!#7 N12414 P7965 SWAP 22 0xffffffff 0x380018e Int BE Pri
!#7 N12415 P7966 SWAP 18 0xffffffff 0x380018f Int BE Pri
!#7 N12416 P7967 MEMBAR
!#7 N12417 P7968 BSTC 21 0x4300011e FP BE Pri
!#7 N12418 P7968 BSTC 22 0x4300011f FP BE Pri
!#A N12417 N12418
!#7 N12419 P7968 BSTC 23 0x43000120 FP BE Pri
!#7 N12420 P7969 MEMBAR
!#7 N12421 P7970 DWST 17 0x3800190 Int BE Pri
!#7 N12422 P7971 LD 11 -1 FP BE Pri
!#7 N12423 P7972 DWST_BINIT 0 0x3800191 Int LE Pri
!#7 N12424 P7972 DWST_BINIT 1 0x3800192 Int LE Pri
!#A N12423 N12424
!#7 N12425 P7973 MEMBAR
!#7 N12426 P7974 DWST 3 0x3800193 Int LE Pri
!#7 N12427 P7974 DWST 4 0x3800194 Int LE Pri
!#A N12426 N12427
!#7 N12428 P7975 DWST 18 0x3800195 Int BE Pri
!#7 N12429 P7975 DWST 19 0x3800196 Int BE Pri
!#A N12428 N12429
!#7 N12430 P7976 DWLD 0 -1 Int BE Pri
!#7 N12431 P7976 DWLD 1 -1 Int BE Pri
!#A N12430 N12431
!#7 N12432 P7977 MEMBAR
!#7 N12433 P7978 BLD 6 -1 FP BE Pri
!#7 N12434 P7978 BLD 7 -1 FP BE Pri
!#A N12433 N12434
!#7 N12435 P7978 BLD 8 -1 FP BE Pri
!#7 N12436 P7979 MEMBAR
!#7 N12437 P7980 BST 15 0x43000121 FP BE Pri
!#7 N12438 P7980 BST 16 0x43000122 FP BE Pri
!#A N12437 N12438
!#7 N12439 P7980 BST 17 0x43000123 FP BE Pri
!#7 N12440 P7981 MEMBAR
!#7 N12441 P7982 DWST_BINIT 17 0x3800197 Int BE Pri
!#7 N12442 P7983 MEMBAR
!#7 N12443 P7984 LD 6 -1 Int BE Pri
!#7 N12444 P7985 MEMBAR
!#7 N12445 P7986 BSTC 6 0x43000124 FP BE Pri
!#7 N12446 P7986 BSTC 7 0x43000125 FP BE Pri
!#A N12445 N12446
!#7 N12447 P7986 BSTC 8 0x43000126 FP BE Pri
!#7 N12448 P7987 MEMBAR
!#7 N12449 P7988 PREFETCH 14 Int BE Pri
!#7 N12450 P7989 ST_BINIT 20 0x3800198 Int BE Pri
!#7 N12451 P7990 MEMBAR
!#7 N12452 P7991 BST 18 0x43000127 FP BE Pri
!#7 N12453 P7991 BST 19 0x43000128 FP BE Pri
!#A N12452 N12453
!#7 N12454 P7991 BST 20 0x43000129 FP BE Pri
!#7 N12455 P7992 MEMBAR
!#7 N12456 P7993 BST 3 0x4300012a FP BE Pri
!#7 N12457 P7993 BST 4 0x4300012b FP BE Pri
!#A N12456 N12457
!#7 N12458 P7993 BST 5 0x4300012c FP BE Pri
!#7 N12459 P7994 MEMBAR
!#7 N12460 P7995 LDD 23 -1 Int BE Pri
!#7 N12461 P7996 LD 9 -1 Int BE Pri
!#7 N12462 P7997 LD 19 -1 Int BE Pri
!#7 N12463 P7997 CAS 19 -1 N12462 0x3800199 Int BE Pri
!#7 N12464 P7998 MEMBAR
!#7 N12465 P7999 BLD 12 -1 FP BE Pri
!#7 N12466 P7999 BLD 13 -1 FP BE Pri
!#A N12465 N12466
!#7 N12467 P7999 BLD 14 -1 FP BE Pri
!#7 N12468 P8000 MEMBAR
!#7 N12469 P8001 BLD 0 -1 FP BE Pri
!#7 N12470 P8001 BLD 1 -1 FP BE Pri
!#A N12469 N12470
!#7 N12471 P8001 BLD 2 -1 FP BE Pri
!#7 N12472 P8002 MEMBAR
!#7 N12473 P8003 SWAP 16 0xffffffff 0x380019a Int BE Pri
!#7 N12474 P8004 DWLD 11 -1 Int BE Pri
!#7 N12475 P8005 DWLD 21 -1 Int BE Pri
!#7 N12476 P8005 DWLD 22 -1 Int BE Pri
!#A N12475 N12476
!#7 N12477 P8005 CASX 21 -1 N12475 0x380019b Int BE Pri
!#7 N12478 P8005 CASX 22 -1 N12476 0x380019c Int BE Pri
!#A N12477 N12478
!#7 N12479 P8006 DWST 11 0x380019d Int BE Pri
!#7 N12480 P8007 MEMBAR
!#7 N12481 P8008 BLD 9 -1 FP BE Pri
!#7 N12482 P8008 BLD 10 -1 FP BE Pri
!#A N12481 N12482
!#7 N12483 P8008 BLD 11 -1 FP BE Pri
!#7 N12484 P8009 MEMBAR
!#7 N12485 P8010 DWST 15 0x380019e Int BE Pri
!#7 N12486 P8010 DWST 16 0x380019f Int BE Pri
!#A N12485 N12486
!#7 N12487 P8011 LD 7 -1 Int BE Pri
!#7 N12488 P8012 LD 2 -1 Int BE Pri
!#7 N12489 P8013 SWAP 15 0xffffffff 0x38001a0 Int BE Pri
!#7 N12490 P8014 MEMBAR
!#7 N12491 P8015 BSTC 21 0x4300012d FP BE Pri
!#7 N12492 P8015 BSTC 22 0x4300012e FP BE Pri
!#A N12491 N12492
!#7 N12493 P8015 BSTC 23 0x4300012f FP BE Pri
!#7 N12494 P8016 MEMBAR
!#7 N12495 P8017 LD 3 -1 Int BE Pri Loop_exit
!#7 N12496 P8018 MEMBAR
