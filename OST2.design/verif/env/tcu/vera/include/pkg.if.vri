// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: pkg.if.vri
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC_PKG_IF_VRI
#define INC_PKG_IF_VRI

#include "fc_top_defines.vri"
#include "dbg_dq_pins_defines.vri"

interface pkg_if {
  input   clk              CLOCK     verilog_node "`CPU.PLL_CMP_CLK_P";  // review: need to use an always running IO2X clk

  //---- N2 input pins (listed in alphabetical order) ----
  output  DIVIDER_BYPASS   NHOLD  verilog_node "`CPU.DIVIDER_BYPASS";
  output  PLL_CMP_BYPASS   NHOLD  verilog_node "`CPU.PLL_CMP_BYPASS";
  output  PLL_TESTMODE     NHOLD  verilog_node "`CPU.PLL_TESTMODE";
  output  TRIGIN           NHOLD  verilog_node "`CPU.TRIGIN";
  output  VDD_PLL_CMP_REG  NHOLD  verilog_node "`CPU.VDD_PLL_CMP_REG";
  output  VDD_RNG_HV       NHOLD  verilog_node "`CPU.VDD_RNG_HV";
  output  VREG_SELBG_L     NHOLD  verilog_node "`CPU.VREG_SELBG_L";

  //---- N2 output pins  (listed in alphabetical order)----
  input  [1:0] PLL_CHAR_OUT       PSAMPLE #-1  verilog_node "`CPU.PLL_CHAR_OUT";
  input        RNG_ANLG_CHAR_OUT  PSAMPLE #-1  verilog_node "`CPU.RNG_ANLG_CHAR_OUT";
  input        TRIGOUT            PSAMPLE #-1  verilog_node "`CPU.TRIGOUT";

  //--- N2 bidirectional pins  (listed in alphabetical order)---
  input  [165:0] DBG_DQ_in  PSAMPLE #-1  verilog_node "`CPU.DBG_DQ";
  output [165:0] DBG_DQ_out NHOLD        verilog_node "`CPU.DBG_DQ";
}

#endif
