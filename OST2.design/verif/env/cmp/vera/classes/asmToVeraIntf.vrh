// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: asmToVeraIntf.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC__TMP_ASMTOVERAINTF_VRH
#define INC__TMP_ASMTOVERAINTF_VRH

extern class AsmToVeraIntf extends BaseAsmToVeraIntf {
  
  // trig_pc_d(kind, 64'h1234567812345678) -> intp(tid, type, vector) hex, w/no 64'h
  // trig_pc_d(kind, 64'h1234567812345678) -> intp(tid, type, vector, src, wait)    
  task intp(reg [5:0] tid = 0,
            reg [63:0] type = 0,
            reg [63:0] vec = 0,
            integer src = 16, // 0-16 are ccx ports. 16 = NCU
            integer wait = 0);

  // dump actual RAM contents
  // trig_pc_d(1,expr(@VA(.MAIN.T1_ext_intr_200), 16, 16)) -> dump_mem(addr, amount)
  task dump_mem(reg [63:0] addr=0,
                integer amount = 8);
  
  task warmrst(integer wait = 0);
  
  // SPC BFM will do a store. Pick correct port w/ BFM!!!
  // trig_pc_d(1,...) -> store(cpu/ccxPort, addr, data)
  task store(reg [7:0] ccxPortMask = 0,
             reg [63:0] addr=0,
             reg [63:0] data=0);

  task marker(string what, reg [5:0] fromTid, reg [63:0] pc);  
}

#endif
