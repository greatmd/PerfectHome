// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: CTRange.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include "CTSupportClassDefines.vri"
//This class defines an object that will return a random number when
//the Select method is called. This number will be between
//the Min and Mix values (inclusive) assigned at instantiation time.
//Example:
//
//          integer DriveDelayMin = DEFAULT_MIN_DELAY;
//          integer DriveDelayMax = DEFAULT_MAX_DELAY;
//          Range   DriveDelay = new(DriveDelayMin, DriveDelayMax);
//                     ...
//          integer FinalDriveDelay
//                     ...
//                     ...
//
//          //Each time through, data can completely random, but
//          //drive delay can only vary within a limited range.
//          repeat (n) {
//             Data = random();
//             FinalDriveDelay    = DriveDelay.Select();
//             Drive(Data, FinalDriveDelay);
//                     ...


class Range {

  local integer Minimum;
  local integer Maximum;

  task new (integer Min = 0, integer Max = CT_MAXINT)
    {
      if (Max < Min) {
	//Select exactly Min
	Minimum = Min;
	Maximum = Min;
      }
      else {
	Minimum = Min;
	Maximum = Max;
      }
    }

  function integer Select ()
  {
    Select = (random() % (Maximum-Minimum+1)) + Minimum;
  }
}
