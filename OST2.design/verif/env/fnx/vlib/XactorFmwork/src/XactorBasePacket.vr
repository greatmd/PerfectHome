// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: XactorBasePacket.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "XactorDefines.vri"
#include "CTTransactionID.vrh"
#include "cReport.vrh"

virtual class XactorBasePacket {

  // CTTransactionID handle
  CTTransactionID XactionID;
  // Report handle
  ReportClass MyReport;  
  // Drive event
  event DriveEvent;

  // The extended class declares all the fields that the packet 
  // encapsulates and initializes them through the new task.
  
  task new() {}

  // Through this task a transactionID object is passed to the packet
  virtual task SetID(CTTransactionID XactionID);

  // Returns a CTTransactionID
  virtual function CTTransactionID GetID();

  // FieldType is a string that indicates which field to set. FieldValue is the actual
  // value that the packet field will be set to.  
  virtual task Set(string FieldType, 
		   bit [XACT_FIELD_WIDTH-1:0] FieldValue);

  // FieldType is a string that indicates which field to get. FieldValue is the returned
  // value of the field indicated by FieldType.
  virtual function bit [XACT_FIELD_WIDTH-1:0] Get(string FieldType);
  
  // This function will return a packet ready to be schedule for driving.
  virtual function XactorBasePacket FormDriven();

  // This task will display the contents of the packet. TypeRep is the report type used
  // when printing the Packet.
  virtual task PktDisplay(ReportType TypeRep, 
			  string Message
			  );

  // This task will compare this packet with the packet (Pkt) passed as an argument.
  // The comparison operation is specified in the string Operation.
  virtual function bit PktCompare(string Operation,
				  XactorBasePacket Pkt);

  // This function will return an index to a hash table of size HashSize. The value to be
  // hashed will be formed by the Packet itself.
  virtual function integer PktHash(integer HashSize);

  // This function will return 1 if the data of this packet that is expected has
  // X's or Z's values. And will return 0 otherwise.
  virtual function bit PktUndef();

  // This task will take Pkt as an argument and will copy every field of Pkt to itself.
  virtual task PktCopy(XactorBasePacket Pkt);

  // This task will return an object of its same type and with the same field values.
  virtual function XactorBasePacket PktClone();

  // This task will reset the fields of the packet.
  virtual task PktReset();

  // This task will sync on DriveEvent
  virtual task SyncOnDrive() {}

  // This task will trigger DriveEvent
  virtual task TriggerDrive() {}
}

