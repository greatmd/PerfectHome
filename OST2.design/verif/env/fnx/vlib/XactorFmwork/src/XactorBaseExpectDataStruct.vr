// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: XactorBaseExpectDataStruct.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "XactorBasePacket.vrh"
#include "XactorDefines.vri"

#include "cReport.vrh"

virtual class XactorBaseExpectDataStruct {

  // Transactor Name
  protected string XactorName;  

  // Report handle. 
  ReportClass MyReport;

  task new () {}
  
  // Inserts a new node in the data structure.
  // Item is a reference to a transactor packet object
  // The function will return a reference to the inserted node
  virtual task Insert (XactorBasePacket Item,
		       var event RemoveEvents[XACT_EXPECT_DATA_STRUCT_REMOVE_EVENTS]
		       );

  // Deletes the specified node
  // Success = 1 if the node was removed and 0 otherwise
  virtual task Delete (XactorBasePacket Item,
		       var bit Success);

  // Deletes the specified node that contains "Item". The 
  // search is done by comparing Items and the node's packet
  // references.
  // Success = 1 if the node was removed and 0 otherwise
  virtual task RefDelete (XactorBasePacket Item,
			  var bit Success);
  
  // Deletes multiple nodes when Item has "wildcards"
  // Success = 1 if at least a node was removed and 0 otherwise
  virtual task WildCardDelete1 (XactorBasePacket Item,
				var bit Success);
 
  // Returns the number of nodes in the data structure
  virtual function integer CountNodes();

  // Prints each node of the data structure.
  virtual task PrintNodes();

  // Returns 1 if Item is found in the data structure and 0 otherwise
  virtual function bit InStructure(XactorBasePacket Item);

  // Returns 1 if the data structure is empty and 0 otherwise
  virtual function bit Empty();

  // Will walk the data structure and on each node triggering
  // the corresponding status flags. At the end of the walk, every node
  // is deleted by nulling the head references.
  virtual task Reset();
}


