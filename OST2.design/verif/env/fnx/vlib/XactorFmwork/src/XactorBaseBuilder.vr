// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: XactorBaseBuilder.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "XactorBasePacket.vrh"
#include "XactorBaseSignalInterface.vrh"
#include "XactorBaseManager.vrh"
#include "XactorBaseExpectDataStruct.vrh"
#include "XactorDefines.vri"
#include "cReport.vrh"

virtual class XactorBaseBuilder {

  // Report (there will only be one report instance for all the transactor
  // and monitor related objects
  ReportClass MyReport;

  // This task will be chained with the new task(s) of extended classes
  task new() {}

  // Returns a packet object specific to a transactor library
  virtual function XactorBasePacket CreatePacket();

  // Returns a manager object specific to a transactor library
  virtual function XactorBaseManager CreateManager();

  // Returns a signal interface object specific to a transactor library
  virtual function XactorBaseSignalInterface CreateSignalInterface();

  // Returns an expect data structure (this data structure will store
  // expected values without "wildcards" or "don't care" bits)
  virtual function XactorBaseExpectDataStruct CreateExpectDataStruct(){}

  // Returns an expect data structure (this data structure will store
  // expected values with "wildcards" or "don't care" bits)
  virtual function XactorBaseExpectDataStruct CreateXExpectDataStruct(){}

  // Not enforced. Used to assign a data structure for each element of a
  // hash table
  virtual function XactorBaseExpectDataStruct CreateHashElement() {}

  // Returns a string with the name of the transactor. 
  virtual function string CreateName(){}

  // Returns a report object. This should be the only report object for
  // the transactor that is being built.
  virtual function ReportClass CreateReport(){}

}
