// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: XactorListDupExpect.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include "XactorList.vrh"
  
class XactorListDupExpect extends XactorList {

  // Deletes all nodes that match i
  virtual protected task DeleteDup (XactorBasePacket i,
				    var ListNode NodePtr,
				    var bit Success
				    );

  // Deletes the node with the specified value
  virtual task Delete (XactorBasePacket i,
		       var bit Success
		       );
  
  // Deletes all nodes that match i
  virtual protected task WCDeleteDup (XactorBasePacket i,
				      var ListNode NodePtr,
				      var bit Success
				      );
  
  // Deletes multiple nodes with the specified value
  // Accepts wildcards
  virtual task WildCardDelete1 (XactorBasePacket i,
				var bit Success
				);
}

  ////////////////
 // Definitions
////////////////

// Deletes all nodes that match i
task XactorListDupExpect::DeleteDup (XactorBasePacket i,
				     var ListNode NodePtr,
				     var bit Success
				     ) {
  
  if (i.PktCompare("===", NodePtr.Item)) {
    i.SetID(NodePtr.Item.GetID());

    if(Success == 1'b1) // check if this is not the first node deleted.
      NodePtr.Item.PktDisplay(RTYP_XACTOR_FMWORK_DUP_WILDCARD_EXPECT_WARN, 
			      "Sampled Transaction satisfies duplicated Expect"
			      );
    trigger(ON, NodePtr.RemoveEvents[XACT_COMP_EXPECT_REMOVED_EVENT]); // Remove event
    trigger(ON, NodePtr.RemoveEvents[XACT_COMP_EXPECT_REMOVED_BY_XACTOR_EVENT]); // Removed by xactor
    NodePtr = NodePtr.Next;
    Success = 1'b1;
    if(NodePtr != null) {
      DeleteDup(i, 
		NodePtr, 
		Success
		);
    }
  }
  else {              
    if(NodePtr.Next != null) {
      DeleteDup(i, 
		NodePtr.Next, 
		Success
		);
    }
  }
}

// Deletes multiple nodes with the specified value
// Accepts wildcards
task XactorListDupExpect::Delete (XactorBasePacket i,
				  var bit Success
				  ) {
  Success = 1'b0;  
  
  if (Head == null) {
    Success = 1'b0;
  }
  else {
    DeleteDup(i, 
	      Head, 
	      Success
	      );
  }
}

// Deletes all nodes that match i
task XactorListDupExpect::WCDeleteDup (XactorBasePacket i,
				       var ListNode NodePtr,
				       var bit Success
				       ) {
  
  if (i.PktCompare("=?=", NodePtr.Item)) {
    i.SetID(NodePtr.Item.GetID());
    NodePtr.Item.PktCopy(i); // Copy sampled packet to expected packet

    if(Success == 1'b1) // check if this is not the first node deleted.
      NodePtr.Item.PktDisplay(RTYP_XACTOR_FMWORK_DUP_WILDCARD_EXPECT_WARN, 
			      "Sampled Transaction satisfies duplicated Expect"
			      );
    trigger(ON, NodePtr.RemoveEvents[XACT_COMP_EXPECT_REMOVED_EVENT]); // Remove event
    trigger(ON, NodePtr.RemoveEvents[XACT_COMP_EXPECT_REMOVED_BY_XACTOR_EVENT]); // Removed by xactor
    NodePtr = NodePtr.Next;
    Success = 1'b1;
    if(NodePtr != null) {
      WCDeleteDup(i, 
		  NodePtr, 
		  Success
		  );
    }
  }
  else {              
    if(NodePtr.Next != null) {
      WCDeleteDup(i, 
		  NodePtr.Next, 
		  Success
		  );
    }
  }
}

// Deletes multiple nodes with the specified value
// Accepts wildcards
task XactorListDupExpect::WildCardDelete1 (XactorBasePacket i,
					   var bit Success
					   ) {
  Success = 1'b0;  
  
  if (Head == null) {
    Success = 1'b0;
  }
  else {
    WCDeleteDup(i, 
		Head, 
		Success
		);
  }
}


