// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: XactorBinTreeDupExpect.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include "XactorBinTree.vrh"

class XactorBinTreeDupExpect extends XactorBinTree {

  // Public method. Deletes a node with the specified values and returns 
  // Success = 1 if the node was found and deleted and Success = 0 otherwise.
  virtual protected task DeleteDup (XactorBasePacket Key,
				    TreeNode NodePtr,
				    var bit Success
				    );

  // Deletes all nodes that match Key
  virtual protected task WildCardDeleteDup (XactorBasePacket Key,
					    TreeNode NodePtr,
					    var bit Success
					    );

  // Deletes all nodes that match key using wildcards. 
  virtual task Delete (XactorBasePacket Key,
		       var bit Success
		       );

  // Deletes all nodes that match key using wildcards. 
  virtual task WildCardDelete1 (XactorBasePacket Key,
				var bit Success
				);
  
}

  ////////////////
 // Definitions
////////////////

// Public method. Deletes a node with the specified values and returns 
// Success = 1 if the node was found and deleted and Success = 0 otherwise.
task XactorBinTreeDupExpect::DeleteDup (XactorBasePacket Key,
					TreeNode NodePtr,
					var bit Success
					) {
  TreeNode z;
  
  z = TreeSearch(NodePtr, Key);
  
  if(z !== null) {
    Key.SetID(z.Item.GetID());
    if(Success == 1'b1) // check if this is not the first node deleted.
      z.Item.PktDisplay(RTYP_XACTOR_FMWORK_DUP_WILDCARD_EXPECT_WARN, "Sampled Transaction satisfies duplicated Expect");

    trigger(ON, z.RemoveEvents[XACT_COMP_EXPECT_REMOVED_EVENT]); // Remove event
    trigger(ON, z.RemoveEvents[XACT_COMP_EXPECT_REMOVED_BY_XACTOR_EVENT]); // Removed by xactor
    
    Success = 1'b1;    
    DeleteNode(z);

    if(z.Right != null)
      DeleteDup (Key, z.Right, Success);
  }
}

// Deletes all nodes that match Key
task XactorBinTreeDupExpect::WildCardDeleteDup (XactorBasePacket Key,
						TreeNode NodePtr,
						var bit Success
						) {
  TreeNode z;
  
  z = WCTreeSearch(NodePtr, Key);
  
  if(z != null) {
    Key.SetID(z.Item.GetID());
    z.Item.PktCopy(Key); // Copy contents of sampled packet to expected packet
    if(Success == 1'b1) // check if this is not the first node deleted.
      z.Item.PktDisplay(RTYP_XACTOR_FMWORK_DUP_WILDCARD_EXPECT_WARN, "Sampled Transaction satisfies duplicated Expect");

    trigger(ON, z.RemoveEvents[XACT_COMP_EXPECT_REMOVED_EVENT]); // Remove event
    trigger(ON, z.RemoveEvents[XACT_COMP_EXPECT_REMOVED_BY_XACTOR_EVENT]); // Removed by xactor

    Success = 1'b1;    
    DeleteNode(z);
    

    if(z.Right != null)
      WildCardDeleteDup (Key, z.Right, Success);
  }
}

// Deletes all nodes that match key using wildcards. 
task XactorBinTreeDupExpect::Delete (XactorBasePacket Key,
				     var bit Success
				     ) {
  Success = 1'b0;    
  DeleteDup (Key, Head, Success);
}

// Deletes all nodes that match key using wildcards. 
task XactorBinTreeDupExpect::WildCardDelete1 (XactorBasePacket Key,
					      var bit Success
					      ) {
  Success = 1'b0;    
  WildCardDeleteDup (Key, Head, Success);
}

