// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: FNXPCIEXactorRegCbRecord.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include "DenaliPCIE.vri"

// report library
#include "cReport.vrh"
#include "report_macros.vri"
#include "FNXPCIEXactorReportMacros.vri"

class FNXPCIEXactorRegCbRecord {

  bit [63:0] Address;
  bit [31:0] Data;
  integer PortNum;
  integer Access;
  denaliPcieRegNumT Reg;

  protected event eRegCbProcessed;
  
  // constructor
  task new( bit [63:0] address,
	    bit [31:0] data,
	    integer    portNum,
	    integer    access );

  task MarkProcessed();
  task WaitUntilProcessed();
  function string GetStr();
}

task FNXPCIEXactorRegCbRecord::new( bit [63:0] address,
				    bit [31:0] data,
				    integer    portNum,
				    integer    access )
{
  integer iReg;

  Address = address;
  Data    = data;
  PortNum = portNum;
  Access  = access;
  iReg = Address; 
  if (cast_assign( Reg, iReg, CHECK ) == 0)
    Reg = PCIE_REG_CFG_NONE;
}

task FNXPCIEXactorRegCbRecord::MarkProcessed()
{
  trigger( ONE_BLAST, eRegCbProcessed );
}

task FNXPCIEXactorRegCbRecord::WaitUntilProcessed()
{
  sync( ANY, eRegCbProcessed );
}

function string FNXPCIEXactorRegCbRecord::GetStr()
{
  
  sprintf( GetStr, "Reg=%s  Data=%h  PortNum=%0d  Access=%0d",
	   Reg, Data, PortNum, Access );
}
