// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: niu_ldgintr_utils.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "niu_int_dev.vrh"
#include "niu_int_ldg.vrh"
#include "niu_int_qmgr.vrh"
#include "niu_int_sidmgr.vrh"
#include "pio_driver.vrh"

#define  TIME {get_time(HI), get_time(LO)}


class CNiuLdgEx extends CNiuLdg {
   task new (integer i) {
    super.new(i);
   }
task ldgIsr((integer blanket_int=0),(CniuGenIntrMsg IntrMsg=null)  );
task mask_intr(integer type);
task unmask_intr(integer type);
function bit[31:0] read_pending_bits(integer type, (integer compare=0)) ;

}
task CNiuLdgEx::ldgIsr((integer blanket_int=0),(CniuGenIntrMsg IntrMsg=null)  ){
    bit [31:0] pbits;
    printf("CNiuLdgEx::ldgIsr Custom Start ISR!! Time - %d \n",TIME);
    // Add tasks here
    // mask 
    mask_intr(IntrMsg.int_message);
    CheckIntrDev(blanket_int);
    repeat(1000)@(posedge CLOCK);
    // add tasks here
    // read pending registers
    pbits = read_pending_bits(IntrMsg.int_message,1);
    printf("pbits - %x , TIME - %d \n",pbits,TIME);
    unmask_intr(IntrMsg.int_message);
    printf("CNiuLdgEx::ldgIsr Exiting ISR!! Time - %d \n",TIME);
    // unmask
   }
task CNiuLdgEx:: mask_intr(integer type){
     integer func;
     integer row,mask;

     func = sid[6:5];
    
   }
task CNiuLdgEx:: unmask_intr(integer type){
     integer func;
     integer row,mask;
     func = sid[6:5];
   }
   function bit[31:0] CNiuLdgEx::  read_pending_bits(integer type, (integer compare=0)) {
    integer func;
    bit[63:0] ldsv0,ldsv1,ldsv2;
    bit [68:0] intr_dev_id_ldf0;
    bit [68:0] intr_dev_id_ldf1;
    bit [68:0] intr_dev_id;
	
}


