// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: txc_util.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "txc_memory_map.vri"
#include "dmc_memory_map.vri"
#include "mac_defines.vri"
#include "pio_driver.vrh"
//#include "ncu_stub.vrh"
// extern Cncu_stub ncu_driver;
extern niu_gen_pio gen_pio_drv;

class txc_util_class {

        task new( ) {
	}
 	
        task txc_init ((bit [63:0] data = 64'h1f));
        task write_train_vec(bit [31:0] data);
        task write_tdmc_train_vec(bit [31:0] data);
        task write_txc_dbgsel(bit [5:0] data);
        task write_tdmc_dbgsel(bit [5:0] data);
}


task txc_util_class::txc_init((bit [63:0] data = 64'h1f)) {

    bit [39:0] address;
    bit [63:0] w_data;
    bit [63:0] r_data;


// For DMA0


// Initialize DRR MAX BurstValue

        address = TXC_FZC_BASE + TXC_CONTROL;
        // w_data = 64'h1f; // Enable MAC All Ports and TXC 
        w_data = data; // Enable MAC All Ports and TXC 
        // ncu_driver.write_data(address,w_data);
        gen_pio_drv.pio_wr(address,w_data);
	printf(" Done with TXC_INIT \n");


}

task txc_util_class::write_train_vec(bit [31:0] data) {

   bit [39:0] address;
   bit [63:0] w_data;
   bit [63:0] r_data;

   w_data = {32'h0,data};

   address = TXC_FZC_BASE + TXC_TRAINING;
   gen_pio_drv.pio_wr(address,w_data);

   repeat (10) @(posedge CLOCK);

   address = TXC_FZC_BASE + TXC_TRAINING;
   gen_pio_drv.pio_rd(address,r_data);
   
}

task txc_util_class::write_tdmc_train_vec(bit [31:0] data) {

   bit [39:0] address;
   bit [63:0] w_data;
   bit [63:0] r_data;

   w_data = {32'h0,data};

   address = TDMC_TRAIN_VEC;
   gen_pio_drv.pio_wr(address,w_data);

   repeat (10) @(posedge CLOCK);

   address = TDMC_TRAIN_VEC;
   gen_pio_drv.pio_rd(address,r_data);

}


task txc_util_class::write_txc_dbgsel(bit [5:0] data) {
 
   bit [39:0] address;
   bit [63:0] w_data;
   bit [63:0] r_data;

   w_data = {58'h0,data};
   address = TXC_FZC_BASE + TXC_DEBUG_SELECT;
   gen_pio_drv.pio_wr(address,w_data);

   repeat (10) @(posedge CLOCK);
 
   address = TXC_FZC_BASE + TXC_DEBUG_SELECT;
   gen_pio_drv.pio_rd(address,r_data);
}

task txc_util_class::write_tdmc_dbgsel(bit [5:0] data) {

   bit [39:0] address;
   bit [63:0] w_data;
   bit [63:0] r_data;

   w_data = {58'h0,data};
   address = TDMC_DBG_SEL;
   gen_pio_drv.pio_wr(address,w_data);

   repeat (10) @(posedge CLOCK);

   address = TDMC_DBG_SEL;
   gen_pio_drv.pio_rd(address,r_data);
}


