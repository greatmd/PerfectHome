// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: niu_rxcbmgr.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "niu_mem.vrh"
#include "niu_rx_descp.vrh"
#include "niu_rxtoken.vrh"
#include "niu_cbclass.vrh"



// this class is to manage the callbacks to the memory based upon the
// token content


class CcbRxWriteMgr {

   integer max_cbs;
   integer max_goodcbs;
   integer max_dropcbs;
   integer startSemId;
   integer dropSemId;
   integer good_packetactive_cbs;
   integer drop_packetactive_cbs;
   integer GoodsemIdTab[];
   integer DropsemIdTab[];

   bit [63:0] address[];

   task new( (integer i =0 )) {
      integer j;
      max_cbs = i;

      if(i!=0) {
      max_dropcbs = 2; // TMP?
      max_goodcbs = max_cbs - max_dropcbs;
      } else {
      max_dropcbs = 0;
      max_goodcbs = 0;
      }

      good_packetactive_cbs = 0;
      drop_packetactive_cbs = 0;
      for( j=0;j<max_cbs; j ++) {
        GoodsemIdTab[j] = 0;
        DropsemIdTab[j] = 0;
      }

    

      startSemId = alloc(SEMAPHORE,0,max_cbs,0);
      dropSemId = alloc(SEMAPHORE,0,1,0);
      
   }
   function integer isAvailable() ;
   function integer getgoodpktSemId( bit [63:0] a, ( integer MAX_TIMEOUT = 5000) ) ;
   task releaseSemId(integer semId);
   function integer getdroppktSemId();

}


function integer CcbRxWriteMgr::isAvailable() {

  if( ( good_packetactive_cbs + drop_packetactive_cbs) == max_cbs)
     isAvailable = 0;
  else isAvailable = ( max_cbs - good_packetactive_cbs - drop_packetactive_cbs);

  printf(" CcbRxWriteMgr::isAvailable - %d \n",isAvailable);

}
function integer CcbRxWriteMgr::getdroppktSemId() {
  getdroppktSemId = dropSemId;
}


function integer CcbRxWriteMgr::getgoodpktSemId( bit [63:0] a, (integer MAX_TIMEOUT = 5000)) {

integer i;
integer id;
integer done;
 i = 0;
 done = 0;
 id = 0;
 while( (i<max_cbs) & (done==0)) {
  printf(" in getgoodpktSemId i = %d , GoodsemIdTab - %d \n",i,GoodsemIdTab[i ]);
  if(GoodsemIdTab[i ] ==0) { // ie free
    getgoodpktSemId =  startSemId + i;
    id = startSemId + i;
    good_packetactive_cbs++;
    GoodsemIdTab[i ] = 1; // Used
    done = 1;
  }
  i++;
 } 

 // error
 if((i== max_cbs) & (done==0)) {
   printf(" No more SemIds available i= %d  !! ERROR \n",i);
   getgoodpktSemId = -1;
 } else {
  address[id] = a;
  printf("CcbRxWriteMgr:: Allocated id - %d Address = %x \n",id,a); 
  //timeout(SEMAPHORE,MAX_TIMEOUT,id); //temp
 }

}

task CcbRxWriteMgr::releaseSemId(integer semId){

  integer i;
  i = semId - startSemId ;
  printf("CcbRxWriteMgr::  Releasing SemId - %d Address  = %x \n",semId,address[semId]);
  GoodsemIdTab[i] = 0;
  good_packetactive_cbs--;

}

