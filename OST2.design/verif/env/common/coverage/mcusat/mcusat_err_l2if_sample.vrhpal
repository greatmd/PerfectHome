// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: mcusat_err_l2if_sample.vrhpal
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
       wildcard state s_secc_0		(5'b0xxxx);
       wildcard state s_secc_1		(5'b1xxxx);
       wildcard state s_pa_0		(5'bx0xxx);
       wildcard state s_pa_1		(5'bx1xxx);
       wildcard state s_mecc_0		(5'bxx0xx);
       wildcard state s_mecc_1		(5'bxx1xx);
       wildcard state s_scb_secc_0  	(5'bxxx0x);
       wildcard state s_scb_secc_1  	(5'bxxx1x);
       wildcard state s_scb_mecc_0  	(5'bxxxx0);
       wildcard state s_scb_mecc_1  	(5'bxxxx1);

       wildcard trans t_secc_0_0  	(5'b0xxxx -> 5'b0xxxx);
       wildcard trans t_secc_0_1  	(5'b0xxxx -> 5'b1xxxx);
       wildcard trans t_secc_1_1  	(5'b1xxxx -> 5'b1xxxx);
       wildcard trans t_secc_1_0  	(5'b1xxxx -> 5'b0xxxx);
       wildcard trans t_pa_0_0  	(5'bx0xxx -> 5'bx0xxx);
       wildcard trans t_pa_0_1  	(5'bx0xxx -> 5'bx1xxx);
       wildcard trans t_pa_1_1  	(5'bx1xxx -> 5'bx1xxx);
       wildcard trans t_pa_1_0  	(5'bx1xxx -> 5'bx0xxx);
       wildcard trans t_mecc_0_0  	(5'bxx0xx -> 5'bxx0xx);
       wildcard trans t_mecc_0_1  	(5'bxx0xx -> 5'bxx1xx);
       wildcard trans t_mecc_1_1  	(5'bxx1xx -> 5'bxx1xx);
       wildcard trans t_mecc_1_0  	(5'bxx1xx -> 5'bxx0xx);
       wildcard trans t_scb_secc_0_0  	(5'bxxx0x -> 5'bxxx0x);
       wildcard trans t_scb_secc_0_1  	(5'bxxx0x -> 5'bxxx1x);
       wildcard trans t_scb_secc_1_1  	(5'bxxx1x -> 5'bxxx1x);
       wildcard trans t_scb_secc_1_0  	(5'bxxx1x -> 5'bxxx0x);
       wildcard trans t_scb_mecc_0_0  	(5'bxxxx0 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_0_1  	(5'bxxxx0 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_1_1  	(5'bxxxx1 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_1_0  	(5'bxxxx1 -> 5'bxxxx0);

       // Combinations
       wildcard trans t_secc_00_00  	(5'b0xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b0xxxx);
       wildcard trans t_secc_00_01  	(5'b0xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b1xxxx);
       wildcard trans t_secc_00_10  	(5'b0xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b0xxxx);
       wildcard trans t_secc_00_11  	(5'b0xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b1xxxx);
       wildcard trans t_secc_01_00  	(5'b0xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b0xxxx);
       wildcard trans t_secc_01_01  	(5'b0xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b1xxxx);
       wildcard trans t_secc_01_10  	(5'b0xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b0xxxx);
       wildcard trans t_secc_01_11  	(5'b0xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b1xxxx);
       wildcard trans t_secc_10_00  	(5'b1xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b0xxxx);
       wildcard trans t_secc_10_10  	(5'b1xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b0xxxx);
       wildcard trans t_secc_10_01  	(5'b1xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b1xxxx);
       wildcard trans t_secc_10_11  	(5'b1xxxx -> 5'b0xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b1xxxx);
       wildcard trans t_secc_11_00  	(5'b1xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b0xxxx);
       wildcard trans t_secc_11_01  	(5'b1xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b0xxxx -> 5'b1xxxx);
       wildcard trans t_secc_11_10  	(5'b1xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b0xxxx);
       wildcard trans t_secc_11_11  	(5'b1xxxx -> 5'b1xxxx -> 5'bxxxxx[.1:8.] -> 5'b1xxxx -> 5'b1xxxx);

       wildcard trans t_pa_00_00  	(5'bx0xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx0xxx);
       wildcard trans t_pa_11_11  	(5'bx1xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx1xxx);

       // The following PA transactions don't make sense since the 
       // PA signals don't behave like secc or mecc signals 
       // -ncr(10/20/05)

       //wildcard trans t_pa_00_01  	(5'bx0xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx1xxx);
       //wildcard trans t_pa_00_10  	(5'bx0xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx0xxx);
       //wildcard trans t_pa_00_11  	(5'bx0xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx1xxx);
       //wildcard trans t_pa_01_00  	(5'bx0xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx0xxx);
       //wildcard trans t_pa_01_01  	(5'bx0xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx1xxx);
       //wildcard trans t_pa_01_10  	(5'bx0xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx0xxx);
       //wildcard trans t_pa_01_11  	(5'bx0xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx1xxx);
       //wildcard trans t_pa_10_00  	(5'bx1xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx0xxx);
       //wildcard trans t_pa_10_10  	(5'bx1xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx0xxx);
       //wildcard trans t_pa_10_01  	(5'bx1xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx1xxx);
       //wildcard trans t_pa_10_11  	(5'bx1xxx -> 5'bx0xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx1xxx);
       //wildcard trans t_pa_11_00  	(5'bx1xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx0xxx);
       //wildcard trans t_pa_11_01  	(5'bx1xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx0xxx -> 5'bx1xxx);
       //wildcard trans t_pa_11_10  	(5'bx1xxx -> 5'bx1xxx -> 5'bxxxxx[.1:8.] -> 5'bx1xxx -> 5'bx0xxx);

       wildcard trans t_mecc_00_00  	(5'bxx0xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx0xx);
       wildcard trans t_mecc_00_01  	(5'bxx0xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx1xx);
       wildcard trans t_mecc_00_10  	(5'bxx0xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx0xx);
       wildcard trans t_mecc_00_11  	(5'bxx0xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx1xx);
       wildcard trans t_mecc_01_00  	(5'bxx0xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx0xx);
       wildcard trans t_mecc_01_01  	(5'bxx0xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx1xx);
       wildcard trans t_mecc_01_10  	(5'bxx0xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx0xx);
       wildcard trans t_mecc_01_11  	(5'bxx0xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx1xx);
       wildcard trans t_mecc_10_00  	(5'bxx1xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx0xx);
       wildcard trans t_mecc_10_10  	(5'bxx1xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx0xx);
       wildcard trans t_mecc_10_01  	(5'bxx1xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx1xx);
       wildcard trans t_mecc_10_11  	(5'bxx1xx -> 5'bxx0xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx1xx);
       wildcard trans t_mecc_11_00  	(5'bxx1xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx0xx);
       wildcard trans t_mecc_11_01  	(5'bxx1xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx0xx -> 5'bxx1xx);
       wildcard trans t_mecc_11_10  	(5'bxx1xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx0xx);
       wildcard trans t_mecc_11_11  	(5'bxx1xx -> 5'bxx1xx -> 5'bxxxxx[.1:8.] -> 5'bxx1xx -> 5'bxx1xx);

       wildcard trans t_scb_secc_00_00  (5'bxxx0x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx0x);
       wildcard trans t_scb_secc_00_01  (5'bxxx0x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx1x);
       wildcard trans t_scb_secc_00_10  (5'bxxx0x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx0x);
       wildcard trans t_scb_secc_00_11  (5'bxxx0x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx1x);
       wildcard trans t_scb_secc_01_00  (5'bxxx0x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx0x);
       wildcard trans t_scb_secc_01_01  (5'bxxx0x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx1x);
       wildcard trans t_scb_secc_01_10  (5'bxxx0x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx0x);
       wildcard trans t_scb_secc_01_11  (5'bxxx0x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx1x);
       wildcard trans t_scb_secc_10_00  (5'bxxx1x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx0x);
       wildcard trans t_scb_secc_10_10  (5'bxxx1x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx0x);
       wildcard trans t_scb_secc_10_01  (5'bxxx1x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx1x);
       wildcard trans t_scb_secc_10_11  (5'bxxx1x -> 5'bxxx0x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx1x);
       wildcard trans t_scb_secc_11_00  (5'bxxx1x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx0x);
       wildcard trans t_scb_secc_11_01  (5'bxxx1x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx0x -> 5'bxxx1x);
       wildcard trans t_scb_secc_11_10  (5'bxxx1x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx0x);
       wildcard trans t_scb_secc_11_11  (5'bxxx1x -> 5'bxxx1x -> 5'bxxxxx[.1:8.] -> 5'bxxx1x -> 5'bxxx1x);

       wildcard trans t_scb_mecc_00_00  (5'bxxxx0 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_00_01  (5'bxxxx0 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_00_10  (5'bxxxx0 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_00_11  (5'bxxxx0 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_01_00  (5'bxxxx0 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_01_01  (5'bxxxx0 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_01_10  (5'bxxxx0 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_01_11  (5'bxxxx0 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_10_00  (5'bxxxx1 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_10_10  (5'bxxxx1 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_10_01  (5'bxxxx1 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_10_11  (5'bxxxx1 -> 5'bxxxx0 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_11_00  (5'bxxxx1 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_11_01  (5'bxxxx1 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx0 -> 5'bxxxx1);
       wildcard trans t_scb_mecc_11_10  (5'bxxxx1 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx0);
       wildcard trans t_scb_mecc_11_11  (5'bxxxx1 -> 5'bxxxx1 -> 5'bxxxxx[.1:8.] -> 5'bxxxx1 -> 5'bxxxx1);

  // bad states
  //bad_state s_not_rd_q_full_n_req_state (not state);
   //wildcard bad_state s_mecc_secc_bad_0_N2_BUG_111726		(5'b1x1xx);

  // bad transitions
  //bad_trans t_not_rd_q_full_n_req_trans (not trans);

//}
