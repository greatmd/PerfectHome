// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: niu_ncu_sample.vrhpal
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
sample niu_ncu_intf_size (niu_ncu_size)
{
           wildcard state SIZE         (3'b0xx);
}

sample niu_ncu_intf_bufid_sample (niu_ncu_bufid)
{
           m_state BUFFID  	(0:1);
}

sample niu_ncu_intf_type_sample (niu_ncu_type)
{
           state READ_NACK  	( 4'b0000 );
           state READ_ACK  	( 4'b0001 );
      //     state INT        	( 4'b1000 );
}
sample niu_ncu_intf_type_trans (niu_ncu_type)
{

           state READ_NACK  	( 4'b0000 );
           state READ_ACK  	( 4'b0001 );
           state INT        	( 4'b1000 );



	   trans TYPE_TRAN30 ("READ_ACK" -> "READ_ACK");
	   trans TYPE_TRAN31 ("READ_ACK" -> "READ_NACK");
	   trans TYPE_TRAN32 ("READ_ACK" -> "INT");

	   trans TYPE_TRAN40 ("READ_NACK" -> "READ_ACK");
	   trans TYPE_TRAN41 ("READ_NACK" -> "READ_NACK");

	   trans TYPE_TRAN44 ("READ_NACK" -> "INT");

	   trans TYPE_TRAN70 ("INT" -> "READ_NACK");
	   trans TYPE_TRAN71 ("INT" -> "READ_ACK");
	   trans TYPE_TRAN72 ("INT" -> "INT");


}

sample niu_ncu_intf_cpuid_sample (niu_ncu_cpuid)
{
           m_state CPU_ID  	( 0:63 );
}

sample niu_ncu_intf_deviceid_sample (niu_ncu_deviceid)
{
           m_state DEVICE_ID  	( 64:127 ) if (niu_ncu_type== 4'b1000);
}

/*
sample niu_ncu_intf_int_vec_sample (niu_ncu_int_vec)
{
           m_state INT_VEC  	( 0:63 ) if (niu_ncu_type== 4'b1000);
}
*/
sample niu_ncu_intf_b2b_sample (niu_ncu_b2b)
{
	m_state B2B          ( 2:5 ) ;
}

sample niu_ncu_intf_stall_b2b_sample (ncu_niu_stall_b2b)
{
	m_state STALL        ( 1:30 ) ;
}


sample niu_ncu_intf_pkt_gap(niu_ncu_pkt_gap)
{
	m_state PKT_GAP          ( 1:10 ) ;
}
cross niu_ncu_id_type_cross (niu_ncu_intf_type_sample,niu_ncu_intf_cpuid_sample );
