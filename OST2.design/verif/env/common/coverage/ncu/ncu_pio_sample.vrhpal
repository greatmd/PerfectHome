// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: ncu_pio_sample.vrhpal
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
sample ncu_dmu_pio_intf_mmu (ncu_pio_mmu)
{
           wildcard state MMUD_VLD     (3'bxx1);
}

sample ncu_dmu_pio_intf_mmu_data (ncu_cov_ios.ncu_dmu_pio_data)
{
           wildcard state MMUData0     (64'haaaaaaaaaaaaaaaa) if (ncu_cov_ios.ncu_dmu_mmu_addr_vld);
           wildcard state MMUData1     (64'h5555555555555555) if (ncu_cov_ios.ncu_dmu_mmu_addr_vld);
}

sample ncu_dmu_pio_intf_mmu_pio_mix (ncu_pio_mmu)
{
           wildcard state PIO_flow_MMU (3'bx1x);
           wildcard state MMU_flow_PIO (3'bx1x);
}

sample ncu_dmu_pio_intf_tag (ncu_cov_ios.dmu_ncu_wrack_tag)
{
           m_state PIO_TYPE 		(0:15) if (ncu_cov_ios.dmu_ncu_wrack_vld);
}

sample ncu_dmu_pio_intf_type_cov (ncu_pio_type)
{
           m_state PIO_TYPE 		(0:1);
}

sample ncu_dmu_pio_intf_credit_sample (ncu_pio_credit)
{
           m_state PIO_CREDIT 		(0:15);
}


sample ncu_dmu_pio_intf_size_sample (ncu_pio_size)
{
   state PIO_SIZE0 (4'b0001) ;
   state PIO_SIZE1 (4'b0010) ;
   state PIO_SIZE2 (4'b0100) ;
   state PIO_SIZE3 (4'b1000) ;
}
sample ncu_dmu_pio_intf_cmap_sample (ncu_pio_cmap)
{
           m_state PIO_CMAP 		(0:3);
}

sample ncu_dmu_pio_intf_bufid_sample (ncu_pio_bufid)
{
   state BUFID0 (2'b00) ;
   //state BUFID1 (2'b01) ; // need tcu to do pio via JTAG
}
sample ncu_dmu_pio_intf_cpu_sample (ncu_pio_cpu)
{
   m_state CPU (0:63);
}
sample ncu_dmu_pio_intf_add_sample (ncu_pio_add[35:3])
{
           state PIO_ADD		(0:33'h1ffffffff);
	   at_least = 100;
}


sample ncu_dmu_pio_intf_b2b_sample (ncu_pio_b2b)
{
   m_state PIO_B2B    (2:16) ;
}

sample ncu_dmu_pio_intf_pkt_gap (ncu_pio_pkt_gap)
{
   m_state PKT_GAP    (1:10) ;
}
