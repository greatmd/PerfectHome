// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: flow_db_tasks.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#include <vera_defines.vrh>
#include "pcg_types.vri"
#include "flow_db.vrh"

extern integer flow_db_lock;
// extern integer flow_num;
extern flow_db_entry flow_db[];

task  flow_db_add_entry(integer org_port, integer data_length, flow_desc flow, tup_descr tup, rcv_param rx_param, 
tmt_param tx_param, tcp_state fl_state,  bit[63:0] options, integer flow_num)  {

	integer n;

	// Set LOCK
	semaphore_get(WAIT,flow_db_lock,1);

	flow_db[flow_num]              = new;
	flow_db[flow_num].org_port     = org_port;
	flow_db[flow_num].data_length  = data_length;
	flow_db[flow_num].flow_num     = flow_num; 
	flow_db[flow_num].flow         = new flow;
	flow_db[flow_num].tup          = new tup;
	flow_db[flow_num].rx_param     = new rx_param;
	flow_db[flow_num].tx_param     = new tx_param;
        //flow_db[flow_num].tx_param.last_seqno = 0;
	flow_db[flow_num].fl_state     = new fl_state;
	flow_db[flow_num].options      = options;

	//for(n=0;n<20;n++)
//		flow_db[flow_db_index].pc_check[n]     = 0;

//	flow_db_add_entry                   = flow_num;


	//flow_db_index++;
         

	// Reset LOCK
	semaphore_put(flow_db_lock,1); 
   }


task flow_db_init() {
	integer n;
	integer flow_num;

	// Alocate Semaphores
	flow_db_lock = alloc(SEMAPHORE,0,1,1);
	if(flow_db_lock == 0) {
		printf("FLOW  DB: INIT: Could not allocate spaphore flow_db_lock.\n");
	   } else	flow_num=0;

   }

