// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: std_display_class.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC__TMP_STD_DISPLAY_CLASS_VRH
#define INC__TMP_STD_DISPLAY_CLASS_VRH

#include "std_display_defines.vri"

extern class StandardDisplay { 
  integer maxerror;
  integer maxwarning;
  integer wait_cycle_to_kill;
  integer debug;
  integer debug_all;
  integer info_all;
  integer info;
  integer start_debug;
  integer quiet;
  integer errors;
  integer warnings;
  task new (
    integer maxErrors = 1,
    integer errorCnt = 0,
    integer maxWarnings = 5,
    integer wait_cycle_to_kill = 5,
    integer start_debug = 0
  );
  task dispmon (
    string context_str,
    integer level,
    string message,
    string file = null,
    integer lineNum = 0
  );
  task writemon (
    string context_str,
    integer level,
    string message,
    string file = null,
    integer lineNum = 0
  );
  task appendmon (
    string context_str,
    integer level,
    string message
  );
  function integer get_errors (
  );
  protected task init_vlabels (
  );
  protected task parse_mon_arg_str (
    string src_str
  );
  function integer context_exists (
    string context_str
  );
  task create_context (
    string context_str
  );
  task set_context_verbosity (
    string context_str,
    reg [49:0] value = 50'h3_ffff_c000_0001
  );
  function reg [49:0] get_verbosity (
    string context_str
  );
  task set_level (
    string context_str = null,
    integer level,
    integer value
  );
  task set_verbosity (
    reg [49:0] value = 50'h3_ffff_c000_0001
  );
  task print_verbosity (
    integer level,
    string context_str = null
  );
  function integer context_ndx (
    string context_str
  );
  function string get_context_name (
    integer mycontext
  );
  task set_default_verbosity (
    reg [49:0] value
  );
  function reg [49:0] get_default_verbosity (
  );
  task print_default_verbosity (
    integer level = 0
  );
  task getCounts(var integer err, var integer warn);
}

#endif
