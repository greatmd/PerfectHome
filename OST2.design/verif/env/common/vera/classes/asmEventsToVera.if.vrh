// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: asmEventsToVera.if.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC_ASMEVENTSTOVERA_IF_VRH
#define INC_ASMEVENTSTOVERA_IF_VRH


interface  asmEventsToVera_if {

  input        clk      CLOCK    hdl_node "tb_top.cpu.l2clk";
  input [63:0] core_running_status NSAMPLE #-0 hdl_node "tb_top.cmp_core_running_status";

     input [63:0] ev_pc0 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc0";
     input [63:0] ev_pc1 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc1";
     input [63:0] ev_pc2 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc2";
     input [63:0] ev_pc3 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc3";
     input [63:0] ev_pc4 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc4";
     input [63:0] ev_pc5 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc5";
     input [63:0] ev_pc6 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc6";
     input [63:0] ev_pc7 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc7";
     input [63:0] ev_pc8 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc8";
     input [63:0] ev_pc9 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc9";
     input [63:0] ev_pc10 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc10";
     input [63:0] ev_pc11 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc11";
     input [63:0] ev_pc12 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc12";
     input [63:0] ev_pc13 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc13";
     input [63:0] ev_pc14 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc14";
     input [63:0] ev_pc15 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc15";
     input [63:0] ev_pc16 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc16";
     input [63:0] ev_pc17 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc17";
     input [63:0] ev_pc18 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc18";
     input [63:0] ev_pc19 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc19";
     input [63:0] ev_pc20 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc20";
     input [63:0] ev_pc21 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc21";
     input [63:0] ev_pc22 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc22";
     input [63:0] ev_pc23 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc23";
     input [63:0] ev_pc24 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc24";
     input [63:0] ev_pc25 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc25";
     input [63:0] ev_pc26 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc26";
     input [63:0] ev_pc27 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc27";
     input [63:0] ev_pc28 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc28";
     input [63:0] ev_pc29 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc29";
     input [63:0] ev_pc30 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc30";
     input [63:0] ev_pc31 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc31";
     input [63:0] ev_pc32 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc32";
     input [63:0] ev_pc33 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc33";
     input [63:0] ev_pc34 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc34";
     input [63:0] ev_pc35 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc35";
     input [63:0] ev_pc36 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc36";
     input [63:0] ev_pc37 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc37";
     input [63:0] ev_pc38 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc38";
     input [63:0] ev_pc39 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc39";
     input [63:0] ev_pc40 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc40";
     input [63:0] ev_pc41 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc41";
     input [63:0] ev_pc42 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc42";
     input [63:0] ev_pc43 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc43";
     input [63:0] ev_pc44 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc44";
     input [63:0] ev_pc45 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc45";
     input [63:0] ev_pc46 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc46";
     input [63:0] ev_pc47 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc47";
     input [63:0] ev_pc48 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc48";
     input [63:0] ev_pc49 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc49";
     input [63:0] ev_pc50 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc50";
     input [63:0] ev_pc51 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc51";
     input [63:0] ev_pc52 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc52";
     input [63:0] ev_pc53 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc53";
     input [63:0] ev_pc54 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc54";
     input [63:0] ev_pc55 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc55";
     input [63:0] ev_pc56 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc56";
     input [63:0] ev_pc57 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc57";
     input [63:0] ev_pc58 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc58";
     input [63:0] ev_pc59 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc59";
     input [63:0] ev_pc60 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc60";
     input [63:0] ev_pc61 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc61";
     input [63:0] ev_pc62 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc62";
     input [63:0] ev_pc63 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_pc63";

  input [63:0] ev_ready NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_ready";

// .for (64 = 0; 64 < 64; 64++ ) {
//      input ev_ready64 NSAMPLE #-0 hdl_node "tb_top.nas_top.ev_ready64";
// .}
}

port asmEventCore {
  clk;
//  ev_ready;
  ev_pc;
}

bind asmEventCore asmEventCore0 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready0;
  ev_pc     asmEventsToVera_if.ev_pc0;
}

bind asmEventCore asmEventCore1 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready1;
  ev_pc     asmEventsToVera_if.ev_pc1;
}

bind asmEventCore asmEventCore2 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready2;
  ev_pc     asmEventsToVera_if.ev_pc2;
}

bind asmEventCore asmEventCore3 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready3;
  ev_pc     asmEventsToVera_if.ev_pc3;
}

bind asmEventCore asmEventCore4 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready4;
  ev_pc     asmEventsToVera_if.ev_pc4;
}

bind asmEventCore asmEventCore5 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready5;
  ev_pc     asmEventsToVera_if.ev_pc5;
}

bind asmEventCore asmEventCore6 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready6;
  ev_pc     asmEventsToVera_if.ev_pc6;
}

bind asmEventCore asmEventCore7 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready7;
  ev_pc     asmEventsToVera_if.ev_pc7;
}

bind asmEventCore asmEventCore8 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready8;
  ev_pc     asmEventsToVera_if.ev_pc8;
}

bind asmEventCore asmEventCore9 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready9;
  ev_pc     asmEventsToVera_if.ev_pc9;
}

bind asmEventCore asmEventCore10 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready10;
  ev_pc     asmEventsToVera_if.ev_pc10;
}

bind asmEventCore asmEventCore11 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready11;
  ev_pc     asmEventsToVera_if.ev_pc11;
}

bind asmEventCore asmEventCore12 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready12;
  ev_pc     asmEventsToVera_if.ev_pc12;
}

bind asmEventCore asmEventCore13 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready13;
  ev_pc     asmEventsToVera_if.ev_pc13;
}

bind asmEventCore asmEventCore14 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready14;
  ev_pc     asmEventsToVera_if.ev_pc14;
}

bind asmEventCore asmEventCore15 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready15;
  ev_pc     asmEventsToVera_if.ev_pc15;
}

bind asmEventCore asmEventCore16 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready16;
  ev_pc     asmEventsToVera_if.ev_pc16;
}

bind asmEventCore asmEventCore17 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready17;
  ev_pc     asmEventsToVera_if.ev_pc17;
}

bind asmEventCore asmEventCore18 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready18;
  ev_pc     asmEventsToVera_if.ev_pc18;
}

bind asmEventCore asmEventCore19 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready19;
  ev_pc     asmEventsToVera_if.ev_pc19;
}

bind asmEventCore asmEventCore20 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready20;
  ev_pc     asmEventsToVera_if.ev_pc20;
}

bind asmEventCore asmEventCore21 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready21;
  ev_pc     asmEventsToVera_if.ev_pc21;
}

bind asmEventCore asmEventCore22 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready22;
  ev_pc     asmEventsToVera_if.ev_pc22;
}

bind asmEventCore asmEventCore23 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready23;
  ev_pc     asmEventsToVera_if.ev_pc23;
}

bind asmEventCore asmEventCore24 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready24;
  ev_pc     asmEventsToVera_if.ev_pc24;
}

bind asmEventCore asmEventCore25 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready25;
  ev_pc     asmEventsToVera_if.ev_pc25;
}

bind asmEventCore asmEventCore26 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready26;
  ev_pc     asmEventsToVera_if.ev_pc26;
}

bind asmEventCore asmEventCore27 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready27;
  ev_pc     asmEventsToVera_if.ev_pc27;
}

bind asmEventCore asmEventCore28 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready28;
  ev_pc     asmEventsToVera_if.ev_pc28;
}

bind asmEventCore asmEventCore29 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready29;
  ev_pc     asmEventsToVera_if.ev_pc29;
}

bind asmEventCore asmEventCore30 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready30;
  ev_pc     asmEventsToVera_if.ev_pc30;
}

bind asmEventCore asmEventCore31 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready31;
  ev_pc     asmEventsToVera_if.ev_pc31;
}

bind asmEventCore asmEventCore32 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready32;
  ev_pc     asmEventsToVera_if.ev_pc32;
}

bind asmEventCore asmEventCore33 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready33;
  ev_pc     asmEventsToVera_if.ev_pc33;
}

bind asmEventCore asmEventCore34 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready34;
  ev_pc     asmEventsToVera_if.ev_pc34;
}

bind asmEventCore asmEventCore35 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready35;
  ev_pc     asmEventsToVera_if.ev_pc35;
}

bind asmEventCore asmEventCore36 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready36;
  ev_pc     asmEventsToVera_if.ev_pc36;
}

bind asmEventCore asmEventCore37 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready37;
  ev_pc     asmEventsToVera_if.ev_pc37;
}

bind asmEventCore asmEventCore38 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready38;
  ev_pc     asmEventsToVera_if.ev_pc38;
}

bind asmEventCore asmEventCore39 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready39;
  ev_pc     asmEventsToVera_if.ev_pc39;
}

bind asmEventCore asmEventCore40 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready40;
  ev_pc     asmEventsToVera_if.ev_pc40;
}

bind asmEventCore asmEventCore41 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready41;
  ev_pc     asmEventsToVera_if.ev_pc41;
}

bind asmEventCore asmEventCore42 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready42;
  ev_pc     asmEventsToVera_if.ev_pc42;
}

bind asmEventCore asmEventCore43 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready43;
  ev_pc     asmEventsToVera_if.ev_pc43;
}

bind asmEventCore asmEventCore44 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready44;
  ev_pc     asmEventsToVera_if.ev_pc44;
}

bind asmEventCore asmEventCore45 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready45;
  ev_pc     asmEventsToVera_if.ev_pc45;
}

bind asmEventCore asmEventCore46 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready46;
  ev_pc     asmEventsToVera_if.ev_pc46;
}

bind asmEventCore asmEventCore47 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready47;
  ev_pc     asmEventsToVera_if.ev_pc47;
}

bind asmEventCore asmEventCore48 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready48;
  ev_pc     asmEventsToVera_if.ev_pc48;
}

bind asmEventCore asmEventCore49 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready49;
  ev_pc     asmEventsToVera_if.ev_pc49;
}

bind asmEventCore asmEventCore50 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready50;
  ev_pc     asmEventsToVera_if.ev_pc50;
}

bind asmEventCore asmEventCore51 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready51;
  ev_pc     asmEventsToVera_if.ev_pc51;
}

bind asmEventCore asmEventCore52 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready52;
  ev_pc     asmEventsToVera_if.ev_pc52;
}

bind asmEventCore asmEventCore53 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready53;
  ev_pc     asmEventsToVera_if.ev_pc53;
}

bind asmEventCore asmEventCore54 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready54;
  ev_pc     asmEventsToVera_if.ev_pc54;
}

bind asmEventCore asmEventCore55 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready55;
  ev_pc     asmEventsToVera_if.ev_pc55;
}

bind asmEventCore asmEventCore56 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready56;
  ev_pc     asmEventsToVera_if.ev_pc56;
}

bind asmEventCore asmEventCore57 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready57;
  ev_pc     asmEventsToVera_if.ev_pc57;
}

bind asmEventCore asmEventCore58 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready58;
  ev_pc     asmEventsToVera_if.ev_pc58;
}

bind asmEventCore asmEventCore59 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready59;
  ev_pc     asmEventsToVera_if.ev_pc59;
}

bind asmEventCore asmEventCore60 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready60;
  ev_pc     asmEventsToVera_if.ev_pc60;
}

bind asmEventCore asmEventCore61 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready61;
  ev_pc     asmEventsToVera_if.ev_pc61;
}

bind asmEventCore asmEventCore62 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready62;
  ev_pc     asmEventsToVera_if.ev_pc62;
}

bind asmEventCore asmEventCore63 {
  clk       asmEventsToVera_if.clk;
//  ev_ready  asmEventsToVera_if.ev_ready63;
  ev_pc     asmEventsToVera_if.ev_pc63;
}


// keep this!
//   probes[0] = asmEventCore0;
//   probes[1] = asmEventCore1;
//   probes[2] = asmEventCore2;
//   probes[3] = asmEventCore3;
//   probes[4] = asmEventCore4;
//   probes[5] = asmEventCore5;
//   probes[6] = asmEventCore6;
//   probes[7] = asmEventCore7;
//   probes[8] = asmEventCore8;
//   probes[9] = asmEventCore9;
//   probes[10] = asmEventCore10;
//   probes[11] = asmEventCore11;
//   probes[12] = asmEventCore12;
//   probes[13] = asmEventCore13;
//   probes[14] = asmEventCore14;
//   probes[15] = asmEventCore15;
//   probes[16] = asmEventCore16;
//   probes[17] = asmEventCore17;
//   probes[18] = asmEventCore18;
//   probes[19] = asmEventCore19;
//   probes[20] = asmEventCore20;
//   probes[21] = asmEventCore21;
//   probes[22] = asmEventCore22;
//   probes[23] = asmEventCore23;
//   probes[24] = asmEventCore24;
//   probes[25] = asmEventCore25;
//   probes[26] = asmEventCore26;
//   probes[27] = asmEventCore27;
//   probes[28] = asmEventCore28;
//   probes[29] = asmEventCore29;
//   probes[30] = asmEventCore30;
//   probes[31] = asmEventCore31;
//   probes[32] = asmEventCore32;
//   probes[33] = asmEventCore33;
//   probes[34] = asmEventCore34;
//   probes[35] = asmEventCore35;
//   probes[36] = asmEventCore36;
//   probes[37] = asmEventCore37;
//   probes[38] = asmEventCore38;
//   probes[39] = asmEventCore39;
//   probes[40] = asmEventCore40;
//   probes[41] = asmEventCore41;
//   probes[42] = asmEventCore42;
//   probes[43] = asmEventCore43;
//   probes[44] = asmEventCore44;
//   probes[45] = asmEventCore45;
//   probes[46] = asmEventCore46;
//   probes[47] = asmEventCore47;
//   probes[48] = asmEventCore48;
//   probes[49] = asmEventCore49;
//   probes[50] = asmEventCore50;
//   probes[51] = asmEventCore51;
//   probes[52] = asmEventCore52;
//   probes[53] = asmEventCore53;
//   probes[54] = asmEventCore54;
//   probes[55] = asmEventCore55;
//   probes[56] = asmEventCore56;
//   probes[57] = asmEventCore57;
//   probes[58] = asmEventCore58;
//   probes[59] = asmEventCore59;
//   probes[60] = asmEventCore60;
//   probes[61] = asmEventCore61;
//   probes[62] = asmEventCore62;
//   probes[63] = asmEventCore63;


#endif
