// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: memArray.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC__TMP_MEMARRAY_VRH
#define INC__TMP_MEMARRAY_VRH

typedef class StandardDisplay;
typedef class BaseUtils;

#include <baseUtilsClass.vrh>

extern class MemArray { 
  task new (
    bit shift = 0,
    StandardDisplay dbgin,
    bit retnRandom = 0
  );
  task loadMem (
    string mem_data,
    reg loadOnlyIOmem = 0,
    reg hash_on = 0,
    BaseUtils utils = null
  );
  task dump_mem (
    string filename,
    bit [39:0] addr,
    integer num,
    bit shft
  );
  task write_mem (
    bit [39:0] addr,
    bit [63:0] data,
    integer id = 0
  );
  task writeBM (
    bit [39:0] addr,
    bit [63:0] data,
    bit [7:0] byteMask,
    integer id = 0
  );
  task write512 (
    bit [39:0] addr,
    bit [511:0] data,
    integer id=0,
    reg revEndian=0
  );
  task write128 (
    bit [39:0] addr,
    bit [127:0] data,
    integer id=0,
    bit revEndian = 0
  );
  function bit [63:0] read_mem (
    bit [39:0] addr,
    integer id = 0,
    bit uninitWarn = 0
  );
  function bit [511:0] read512 (
    bit [39:0] addr,
    integer id=0,
    bit revEndian = 0,
    bit uninitWarn = 0
  );
  function bit [127:0] read128 (
    bit [39:0] addr,
    integer id=0,
    bit revEndian = 0,
    bit uninitWarn = 0
  );
  task freeMem (
    bit [39:0] start,
    bit [39:0] ending = 0,
    integer amount = 0
  );
  task dumpMem (
    bit [39:0] start,
    integer amount
  );
  task dumpArray();
}

#endif
