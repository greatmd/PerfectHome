// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: ccx_tag_class.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC__TMP_CCX_TAG_CLASS_VRH
#define INC__TMP_CCX_TAG_CLASS_VRH

extern class TAG_MEM { 
  string name;
  reg type;
  reg [2:0] max_tag;
  reg [6:0] max_line;
  reg [239:0] tag_mem [128];
  task new (
    reg new_type,
    reg [6:0] new_max_line,
    reg [2:0] new_max_tag,
    integer inst=0
  );
  task dump_mem (
    integer msglevel
  );
  task dump_line (
    string why,
    reg [6:0] index,
    integer msglevel
  );
  task dump_group (
    string why, 
    reg [5:0] index
  );
  task write_tag (
    reg [2:0] way,
    reg [6:0] index,
    reg [28:0] tag,
    reg valid,
    reg hitCheck=0
  );
  function reg [3:0] get_way (
    string why,
    reg [6:0] index,
    reg [28:0] tag
  );
  task search_tagmem (
    var reg valid,
    var reg [6:0] index
  );
  task get_tag (
    reg [6:0] index,
    var reg valid,
    var reg [28:0] tag
  );
  task read_line (
    reg [6:0] index,
    var reg [28:0] tag0,
    var reg [28:0] tag1,
    var reg [28:0] tag2,
    var reg [28:0] tag3,
    var reg [28:0] tag4,
    var reg [28:0] tag5,
    var reg [28:0] tag6,
    var reg [28:0] tag7,
    var reg valid0,
    var reg valid1,
    var reg valid2,
    var reg valid3,
    var reg valid4,
    var reg valid5,
    var reg valid6,
    var reg valid7
  );
  function reg line_valid (
    reg [6:0] index
  );
  task error_check (
    reg [2:0] way,
    reg [6:0] index
  );
  task create_vector (reg format, 
                      reg [3:0] way, 
                      var reg [31:0] vect
  );
  task evict_group (reg [28:0] evict_tag,
                    reg [4:0] evict_index,
                    var reg [111:0] inv_vect
  );

}

#endif
