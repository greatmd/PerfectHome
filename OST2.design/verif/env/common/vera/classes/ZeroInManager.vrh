// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: ZeroInManager.vrh
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
#ifndef INC____TMP_ZEROINMANAGER_VRH
#define INC____TMP_ZEROINMANAGER_VRH

#include <vera_defines.vrh>
#include <ListMacros.vrh>
#include "ZeroInDefines.vri"
#include "std_display_defines.vri"
#include "std_display_class.vrh"
#include "plusArgMacros.vri"
extern class AssertionInfo { 
  string _pathToAssertion;
  string _type;
  string _module;
  string _statistic;
  bit [63:0] _valueToCheck;
  task new (
    string a_type,
    string a_path,
    string a_module,
    string a_statistic = "",
    bit [63:0] a_valueToCheck = 1
  );
}
extern class VeraListNodeAssertionInfo { 
  AssertionInfo _VERA_List_Node_Data_;
  VeraListNodeAssertionInfo _VERA_List_Node_m_next_;
  VeraListNodeAssertionInfo _VERA_List_Node_m_prev_;
  function AssertionInfo data (
  );
}
extern class VeraListIterator_AssertionInfo { 
  VeraListNodeAssertionInfo _VERA_List_Iterator_M_node_;
  integer _VERA_List_Id_;
  task new (
    VeraListNodeAssertionInfo node
  );
  task next (
  );
  task prev (
  );
  function AssertionInfo data (
  );
  function integer neq (
    VeraListIterator_AssertionInfo iter
  );
  function integer eq (
    VeraListIterator_AssertionInfo iter
  );
}
extern class VeraList_AssertionInfo extends _Synopsys_Vera_List_ { 
  function VeraListIterator_AssertionInfo start (
  );
  function VeraListIterator_AssertionInfo finish (
  );
  task insert (
    VeraListIterator_AssertionInfo _pos,
    AssertionInfo value
  );
  function VeraListIterator_AssertionInfo erase (
    VeraListIterator_AssertionInfo position
  );
  function integer calculate_size (
  );
  function integer size (
  );
  function integer empty (
  );
  function AssertionInfo front (
  );
  function AssertionInfo back (
  );
  task swap (
    VeraList_AssertionInfo L
  );
  task push_front (
    AssertionInfo value
  );
  task push_back (
    AssertionInfo value
  );
  task pop_front (
  );
  task pop_back (
  );
  task clear (
  );
  task purge (
  );
  function VeraListIterator_AssertionInfo erase_range (
    VeraListIterator_AssertionInfo _first,
    VeraListIterator_AssertionInfo _last
  );
  task insert_range (
    VeraListIterator_AssertionInfo _pos,
    VeraListIterator_AssertionInfo _first,
    VeraListIterator_AssertionInfo _last
  );
  task assign (
    VeraListIterator_AssertionInfo _first2,
    VeraListIterator_AssertionInfo _last2
  );
}
extern class ZeroInManager { 
  StandardDisplay _dbg;
  bit _zeroInCheckOff;
  string _name;
  task new (
    StandardDisplay a_dbg,
    string a_name
  );
  task turnOffAllAssertionsInModule (
    string a_moduleName
  );
  virtual task addCheck (
    string a_type,
    string a_pathToAssertion,
    string a_moduleName = "",
    string a_statistic = "",
    bit [63:0] a_valueToCheck = 0
  );
  virtual task disableCheck (
    string a_type,
    string a_pathToAssertion,
    string a_moduleName = ""
  );
  virtual task enableCheck (
    string a_type,
    string a_pathToAssertion,
    string a_moduleName = ""
  );
  virtual function bit checkIfCovered (
    string a_type,
    string a_pathToAssertion,
    string a_statistic,
    bit [63:0] a_val
  );
  function bit checkIfFired (
    string a_type,
    string a_pathToAssertion,
    string a_check,
    string a_module
  );
  virtual function bit coveredAllChecks (
  );
}

#endif
