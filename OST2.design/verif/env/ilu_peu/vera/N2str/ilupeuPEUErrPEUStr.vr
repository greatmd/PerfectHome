// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: ilupeuPEUErrPEUStr.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
class LpuErrPEUStr extends PEUStrBase 
  {
  integer f_errQueue;				// A mailbox for bad pkt headers
  PEC_ERRtype f_err;				// The LPU error of interest  
  bit f_errSpecified;				// Was an error specified?

  task new( PEUTestEnv a_env )
    {
    super.new( a_env );
    f_errQueue = 0;
    f_errSpecified = 0;
    }

  task SetErrQueue( integer a_queue )
    {
    f_errQueue = a_queue;
    } /* end SetErrQueue */

  function bit SetError( PEC_ERRtype a_error )
    {
    if ( PEC_ERR_isLPU(a_error) )
      {
      f_err = a_error;
      f_errSpecified = 1;
      SetError = 0;
      }
    else
      SetError = 1;
    } /* end SetError */

  task Execute()
    {
    PEC_ERRtype lpuErr;

					// Pick an error, if none was specified.
    if ( f_errSpecified )
      lpuErr = f_err;
    else
      {
      lpuErr = e_ERR_none;
      while( !PEC_ERR_isLPU(lpuErr) ) lpuErr += urandom()%10 + 1;
      }

					// Present the error to the TLU.
    f_env.setLPUerror( lpuErr );
    repeat(5) @(posedge CLOCK);

					// Tell the error-checker about this
					// bad-boy.
    if ( f_errQueue != 0 )
      {
      mailbox_put( f_errQueue, lpuErr );
      mailbox_put( f_errQueue, 128'bx );
      }

    } /* end Execute */
  } /* end LpuErrPEUStr */
