// ========== Copyright Header Begin ==========================================
// 
// OpenSPARC T2 Processor File: ilupeuIhbErrPEUStr.vr
// Copyright (C) 1995-2007 Sun Microsystems, Inc. All Rights Reserved
// 4150 Network Circle, Santa Clara, California 95054, U.S.A.
//
// * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// For the avoidance of doubt, and except that if any non-GPL license 
// choice is available it will apply instead, Sun elects to use only 
// the General Public License version 2 (GPLv2) at this time for any 
// software where a choice of GPL license versions is made 
// available with the language indicating that GPLv2 or any later version 
// may be used, or where a choice of which version of the GPL is applied is 
// otherwise unspecified. 
//
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, 
// CA 95054 USA or visit www.sun.com if you need additional information or 
// have any questions. 
// 
// ========== Copyright Header End ============================================
class IhbErrPEUStr extends PEUStrBase 
  {
  integer f_errQueue;				// A mailbox for bad pkt headers
  integer f_len;				// The packet's payload length
  bit f_lenSpecified;				// Was a length specified?
  bit[4:0] f_type;				// The packet's type
  bit f_typeSpecified;				// Was a type specified?
  bit[3:0] f_mask;				// Which bits are in error?

  task new( PEUTestEnv a_env )
    {
    super.new( a_env );
    f_errQueue = 0;
    f_lenSpecified = 0;
    f_typeSpecified = 0;
    f_mask = 4'b0;
    }

  task SetErrQueue( integer a_queue )
    {
    f_errQueue = a_queue;
    } /* end SetErrQueue */

  task SetLength( integer a_len )
    {
    f_len = a_len;
    f_lenSpecified = 1;
    } /* end SetLength */

  task SetType( integer a_type )
    {
    f_type = a_type;
    f_typeSpecified = 1;
    } /* end SetType */

  task SetMask( bit[3:0] a_mask )
    {
    f_mask = a_mask;
    } /* end SetMask */

  task Execute()
    {
    bit[PEC_PCI__HDR] egressHdr;		// The egress TLP's header
    integer egressData;				// A payload descriptor
    bit[7:0] tlpTag;				// The tag for the TLP
    bit[7:0] egressAddr;			// The DOU starting address
    bit[PEC_PCI__HDR] ingressHdr;		// The ingress TLP's header
    integer ingressData;			// A payload descriptor
    bit[3:0] errMask;
    bit[63:0] address;

    if ( f_mask != 0 )
      errMask = f_mask;
    else
      errMask = urandom()%15 + 1;


					// Build a TLP, using the specified
					// type and length, if any.
    if ( !f_typeSpecified )
      {
      randcase
        {
        4 : { f_type = PEC_PCI__TYPE_MEM; f_len = urandom()%16 + 1; }
        1 : { f_type = PEC_PCI__TYPE_MSG; f_len = 1; }
        1 : { f_type = PEC_PCI__TYPE_CPL; f_len = urandom()%4 + 1; }
        }
      }

    else if ( !f_lenSpecified ) 
      {
      if ( f_type == PEC_PCI__TYPE_CPL )
        f_len = urandom()%4 + 1;
      else if ( f_type == PEC_PCI__TYPE_MEM )
        f_len = urandom()%16 + 1;
      else
        f_len = 1;
      }

					// If a completion (with data) was
					// requested, then base it on a PIO
					// read request.
    if ( f_type == PEC_PCI__TYPE_CPL )
      {
      f_env.allocRdTag( tlpTag );
      f_env.genEgressRdReq( tlpTag, egressHdr, egressData, f_len );
      f_env.driveILU( egressHdr, 0, egressData );
      f_env.expectPCIE( egressHdr, egressData );
      f_env.genIngressCpl( egressHdr, ingressHdr, ingressData );
      }
    else
      {
      f_env.allocDmaTag( tlpTag );
      if ( f_len == 0 )
        f_env.genIngressRdReq( tlpTag, ingressHdr, ingressData );
      else
        f_env.genIngressWrReq( tlpTag, ingressHdr, ingressData, f_len );
      }

// Tweak a couple of parameters for IOS so it looks like a bypass packet
#ifdef N2_IOS
    ingressHdr[PEC_PCI__FMT_4DW] = 1;
    address = ingressHdr[PEC_PCI__ADDR];
    address[63:39] = 25'h1fff800;
    ingressHdr[PEC_PCI__ADDR] = address;
#endif

					// Present the TLP to the TLU, and 
					// specify that parity errors are to
					// be injected into the IHB.
					// We aren't going to release the tag
					// so that only one error is injected.
    f_env.reserveIngressCredits( ingressHdr );
    f_env.injectIHBerror( tlpTag, errMask );
    f_env.drivePCIE( ingressHdr, ingressData );
    f_env.consumeIngressCredits( ingressHdr );

					// We can't expect the TLP from the ILU
					// since it is corrupted.  But we do
					// expect to enter the "drain state".
    f_env.enterDrainState();

					// We have to wait for a bit before
					// we can tell the error-checker 
					// about the problem.
//  f_env.waitIngressLatency( ingressHdr );
//N2 review    while( !IHB.err ) @(posedge IHB.clk);
    f_env.wait(100);

					// Free the tag if we sent in a PIO req.
//    if ( f_type == PEC_PCI__TYPE_CPL )
//      f_env.freePioTag( tlpTag );

					// Tell the error-checker about this
					// bad-boy.
    if ( f_errQueue != 0 )
      {
      mailbox_put( f_errQueue, e_ERR_ilu_ihb );
      mailbox_put( f_errQueue, ingressHdr );
      }

    } /* end Execute */
  } /* end IhbErrPEUStr */
