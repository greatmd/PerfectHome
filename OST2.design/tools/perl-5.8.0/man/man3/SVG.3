.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SVG 3"
.TH SVG 3 "2003-11-02" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
SVG \- Perl extension for generating Scalable Vector Graphics (SVG) documents
.Sh "VERSION"
.IX Subsection "VERSION"
Version 2.26, 12.01.03
.PP
Refer to SVG::Manual for the complete manual
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1SVG\s0 is a 100% Perl module which generates a nested data structure containing the
\&\s-1DOM\s0 representation of an \s-1SVG\s0 (Scalable Vector Graphics) image. Using \s-1SVG\s0, you
can generate \s-1SVG\s0 objects, embed other \s-1SVG\s0 instances into it, access the \s-1DOM\s0
object, create and access javascript, and generate \s-1SMIL\s0 animation content.
.PP
Refer to SVG::Manual for the complete manual.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ronan Oger, \s-1RO\s0 \s-1IT\s0 Systemms GmbH, ronan@roasp.com
.SH "CREDITS"
.IX Header "CREDITS"
Peter Wainwright, peter@roasp.com Excellent ideas, beta\-testing, SVG::Parser
.SH "EXAMPLES"
.IX Header "EXAMPLES"
http://www.roasp.com/index.shtml?svg.pod
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1),\s-1SVG\s0,\s-1SVG::DOM\s0,\s-1SVG::XML\s0,SVG::Element,SVG::Parser, SVG::Manual
http://www.roasp.com/
http://www.perlsvg.com/
http://www.roitsystems.com/
http://www.w3c.org/Graphics/SVG/
.SH "Methods"
.IX Header "Methods"
\&\s-1SVG\s0 provides both explicit and generic element constructor methods. Explicit
generators are generally (with a few exceptions) named for the element they
generate. If a tag method is required for a tag containing hyphens, the method 
name replaces the hyphen with an underscore. ie: to generate tag <column\-heading id=\*(L"new\*(R">
you would use method \f(CW$svg\fR\->column_heading(id=>'new').
.PP
All element constructors take a hash of element attributes and options;
element attributes such as 'id' or 'border' are passed by name, while options for the
method (such as the type of an element that supports multiple alternate forms)
are passed preceded by a hyphen, e.g '\-type'. Both types may be freely
intermixed; see the \*(L"fe\*(R" method and code examples througout the documentation
for more examples.
.Sh "new (constructor)"
.IX Subsection "new (constructor)"
$svg = \s-1SVG\-\s0>new(%attributes)
.PP
Creates a new \s-1SVG\s0 object. Attributes of the document \s-1SVG\s0 element be passed as
an optional list of key value pairs. Additionally, \s-1SVG\s0 options (prefixed with
a hyphen) may be set on a per object basis:
.PP
\&\fBExample:\fR
.PP
.Vb 1
\&    my $svg1=new SVG;
.Ve
.PP
.Vb 1
\&    my $svg2=new SVG(id => 'document_element');
.Ve
.PP
.Vb 14
\&    my $svg3=new SVG(
\&        -printerror => 1,
\&        -raiseerror => 0,
\&        -indent     => '  ',
\&    -elsep      =>"\en",  # element line (vertical) separator
\&        -docroot => 'svg', #default document root element (SVG specification assumes svg). Defaults to 'svg' if undefined
\&        -sysid      => 'abc', #optional system identifyer 
\&        -pubid      => "-//W3C//DTD SVG 1.0//EN", #public identifyer default value is "-//W3C//DTD SVG 1.0//EN" if undefined
\&        -namespace => 'mysvg',
\&        -inline   => 1
\&        id          => 'document_element',
\&        width       => 300,
\&        height      => 200,
\&    );
.Ve
.PP
Default \s-1SVG\s0 options may also be set in the import list. See \*(L"\s-1EXPORTS\s0\*(R" above
for more on the available options. 
.PP
Furthermore, the following options:
.PP
.Vb 7
\&    -version
\&    -encoding
\&    -standalone
\&    -namespace
\&    -inline
\&    -pubid (formerly -identifier)
\&    -sysid (standalone)
.Ve
.PP
may also be set in xmlify, overriding any corresponding values set in the \s-1SVG\-\s0>new declaration
.Sh "xmlify (alias: to_xml render)"
.IX Subsection "xmlify (alias: to_xml render)"
$string = \f(CW$svg\fR\->xmlify(%attributes);
.PP
Returns xml representation of svg document.
.PP
\&\fB\s-1XML\s0 Declaration\fR
.PP
.Vb 10
\&    Name               Default Value
\&    -version           '1.0'               
\&    -encoding          'UTF-8'
\&    -standalone        'yes'
\&    -namespace         'svg' - namespace for elements. 
\&                               Can also be used in any element method to over-ride
\&                               the current namespace
\&    -inline            '0' - If '1', then this is an inline document.
\&    -pubid             '-//W3C//DTD SVG 1.0//EN';
\&    -sysid             'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'
.Ve
