.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pastel::Geometry::AffineTransform 3"
.TH Pastel::Geometry::AffineTransform 3 "2003-01-06" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Pastel::Geometry::AffineTranform
.PP
This module encapsulates the 2D tranformation matrix of graphics.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Every elements of the graphics object can be geometrically transformed. 
\&\s-1SVG\s0 specification allows \- Translation, Scaling, Roatation and Skew. 
Transformation itself is represented by a 3 X 3 matrix. Like in Java 
AffineTranform class we will represent it here like this\-
.PP
.Vb 3
\&        [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
\&        [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
\&        [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
.Ve
.PP
.Vb 3
\&      Where x' and y' are the new coordinates and x and y are the old ones.
\&      In SVG it is represented as-
\&      <g transform="matrix(m00,m10,m01,m11,m02,m12)">...</g>
.Ve
.PP
<B>Translation:</B>
.PP
.Vb 3
\&        [ x']   [   1    0    tx  ] [ x ] 
\&        [ y'] = [   0    1    ty  ] [ y ] 
\&        [ 1 ]   [   0    0    1   ] [ 1 ]
.Ve
.PP
.Vb 3
\&      Where tx and ty are the distances to translate. It is represented
\&      in SVG as-
\&      <g transform="translate(tx, ty)">...</g>
.Ve
.PP
<B>Scaling:</B>     
.PP
.Vb 3
\&        [ x']   [   Sx   0    0  ] [ x ] 
\&        [ y'] = [   0    Sy   0  ] [ y ] 
\&        [ 1 ]   [   0    0    1  ] [ 1 ]
.Ve
.PP
In \s-1SVG\-\s0
     <g transform=\*(L"scale(Sx, Sy)\*(R">...</g>
     If Sy is not provided it is assumed to be equals to Sx.
.PP
<b>Rotation:</b>
        [ x']   [  cos(a)   \-sin(a)    0  ] [ x ] 
	[ y'] = [  sin(a)    cos(a)    0  ] [ y ] 
	[ 1 ]   [   0         0        1  ] [ 1 ]
.PP
In \s-1SVG\-\s0
.PP
.Vb 3
\&     <g transform="rotate(a, [x, y])">...</g>
\&     If x and y are provided is like translating to that point then rotating
\&     and then coming to the original position.
.Ve
.PP
<b>SkewX and Y:</b>
.PP
.Vb 2
\&     <g transform="skewX(a)">...</g>
\&     <g transform="skewY(a)">...</g>
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Pastel;
\&    my $g2 = Pastel::Graphics->new(...);
\&    # Create two tranfoms
\&    my $transform1 = Pastel::Geometry::AffineTranform->new();
\&    my $transform2 = Pastel::Geometry::AffineTranform->new();
.Ve
.PP
.Vb 3
\&    # Modify Transfom1
\&    $transform1->set_to_indentity();
\&    $transform1->rotate(45);
.Ve
.PP
.Vb 2
\&    # Modify Transform2
\&    $transform2->scale(0.5,0.5);
.Ve
.PP
.Vb 2
\&    # Join both the transform
\&    $transform1->concatanate($transform2);
.Ve
.PP
.Vb 2
\&    # To concatanate to existing transform in $g2 call transform()
\&    $g2->transform($transform1);
.Ve
.PP
.Vb 2
\&    # To replace the existing transform
\&    $g2->set_transform($transform2);
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "Pastel::Geometry::AffineTransform\->\fInew()\fR" 4
.IX Item "Pastel::Geometry::AffineTransform->new()"
.PD 0
.IP "Pastel::Geometry::AffineTransform\->new(\-transform=>$tx)" 4
.IX Item "Pastel::Geometry::AffineTransform->new(-transform=>$tx)"
.PD
$tx is another Pastel::Geometry::AffineTransform object. 
.IP "Pastel::Geometry::AffineTransform\->new(@array)" 4
.IX Item "Pastel::Geometry::AffineTransform->new(@array)"
@array is 4 or 6 elements numbers representing 4 non-tranaslatable entries
or the complete array of 6 specifiable entries of 3 X 3 transformation matrix.
.ie n .IP "Pastel::Geometry::AffineTransform\->new(\-m00=>$n, \-m10=>$n, \-m01=>$n, \-m11=>$n, \-m02=>$n, \-m12=>, $n)" 4
.el .IP "Pastel::Geometry::AffineTransform\->new(\-m00=>$n, \-m10=>$n, \-m01=>$n, \-m11=>$n, \-m02=>$n, \-m12=>, \f(CW$n\fR)" 4
.IX Item "Pastel::Geometry::AffineTransform->new(-m00=>$n, -m10=>$n, -m01=>$n, -m11=>$n, -m02=>$n, -m12=>, $n)"
Complete transformation matrix. \f(CW$n\fR = numbers.
.IP "Pastel::Geometry::AffineTransform\->new($n1,$n2,$n3,$n4,$n5,$n6)" 4
.IX Item "Pastel::Geometry::AffineTransform->new($n1,$n2,$n3,$n4,$n5,$n6)"
.PD 0
.IP "Pastel::Geometry::AffineTransform\->new(\-m00=>$n, \-m10=>$n, \-m01=>$n, \-m11=>$n)" 4
.IX Item "Pastel::Geometry::AffineTransform->new(-m00=>$n, -m10=>$n, -m01=>$n, -m11=>$n)"
