.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Date::Format 3"
.TH Date::Format 3 "2002-03-07" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Date::Format \- Date formating subroutines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Date::Format;
.Ve
.PP
.Vb 1
\&        @lt = localtime(time);
.Ve
.PP
.Vb 2
\&        print time2str($template, time);
\&        print strftime($template, @lt);
.Ve
.PP
.Vb 2
\&        print time2str($template, time, $zone);
\&        print strftime($template, @lt, $zone);
.Ve
.PP
.Vb 2
\&        print ctime(time);
\&        print asctime(@lt);
.Ve
.PP
.Vb 2
\&        print ctime(time, $zone);
\&        print asctime(@lt, $zone);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides routines to format dates into \s-1ASCII\s0 strings. They
correspond to the C library routines \f(CW\*(C`strftime\*(C'\fR and \f(CW\*(C`ctime\*(C'\fR.
.IP "time2str(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "time2str(TEMPLATE, TIME [, ZONE])"
\&\f(CW\*(C`time2str\*(C'\fR converts \f(CW\*(C`TIME\*(C'\fR into an \s-1ASCII\s0 string using the conversion
specification given in \f(CW\*(C`TEMPLATE\*(C'\fR. \f(CW\*(C`ZONE\*(C'\fR if given specifies the zone
which the output is required to be in, \f(CW\*(C`ZONE\*(C'\fR defaults to your current zone.
.IP "strftime(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "strftime(TEMPLATE, TIME [, ZONE])"
\&\f(CW\*(C`strftime\*(C'\fR is similar to \f(CW\*(C`time2str\*(C'\fR with the exception that the time is
passed as an array, such as the array returned by \f(CW\*(C`localtime\*(C'\fR.
.IP "ctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "ctime(TIME [, ZONE])"
\&\f(CW\*(C`ctime\*(C'\fR calls \f(CW\*(C`time2str\*(C'\fR with the given arguments using the
conversion specification \f(CW"%a %b %e %T %Y\en"\fR
.IP "asctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
.IX Item "asctime(TIME [, ZONE])"
\&\f(CW\*(C`asctime\*(C'\fR calls \f(CW\*(C`time2str\*(C'\fR with the given arguments using the
conversion specification \f(CW"%a %b %e %T %Y\en"\fR
.SH "MULTI-LANGUAGE SUPPORT"
.IX Header "MULTI-LANGUAGE SUPPORT"
Date::Format is capable of formating into several languages, these are
English, French, German and Italian. Changing the language is done via
a static method call, for example
.PP
.Vb 1
\&        Date::Format->language('German');
.Ve
.PP
will change the language in which all subsequent dates are formatted.
.PP
This is only a first pass, I am considering changing this to be
.PP
.Vb 2
\&        $lang = Date::Language->new('German');
\&        $lang->time2str("%a %b %e %T %Y\en", time);
.Ve
.PP
I am open to suggestions on this.
.SH "CONVERSION SPECIFICATION"
.IX Header "CONVERSION SPECIFICATION"
Each conversion specification  is  replaced  by  appropriate
characters   as   described  in  the  following  list.   The
appropriate  characters  are  determined  by   the   \s-1LC_TIME\s0
category of the program's locale.
.PP
.Vb 39
\&        %%      PERCENT
\&        %a      day of the week abbr
\&        %A      day of the week
\&        %b      month abbr
\&        %B      month
\&        %c      MM/DD/YY HH:MM:SS
\&        %C      ctime format: Sat Nov 19 21:05:57 1994
\&        %d      numeric day of the month, with leading zeros (eg 01..31)
\&        %e      numeric day of the month, without leading zeros (eg 1..31)
\&        %D      MM/DD/YY
\&        %h      month abbr
\&        %H      hour, 24 hour clock, leading 0's)
\&        %I      hour, 12 hour clock, leading 0's)
\&        %j      day of the year
\&        %k      hour
\&        %l      hour, 12 hour clock
\&        %L      month number, starting with 1
\&        %m      month number, starting with 01
\&        %M      minute, leading 0's
\&        %n      NEWLINE
\&        %o      ornate day of month -- "1st", "2nd", "25th", etc.
\&        %p      AM or PM 
\&        %P      am or pm (Yes %p and %P are backwards :)
\&        %q      Quarter number, starting with 1
\&        %r      time format: 09:05:57 PM
\&        %R      time format: 21:05
\&        %s      seconds since the Epoch, UCT
\&        %S      seconds, leading 0's
\&        %t      TAB
\&        %T      time format: 21:05:57
\&        %U      week number, Sunday as first day of week
\&        %w      day of the week, numerically, Sunday == 0
\&        %W      week number, Monday as first day of week
\&        %x      date format: 11/19/94
\&        %X      time format: 21:05:57
\&        %y      year (2 digits)
\&        %Y      year (4 digits)
\&        %Z      timezone in ascii. eg: PST
\&        %z      timezone in format -/+0000
.Ve
.PP
\&\f(CW%d\fR, \f(CW%e\fR, \f(CW%H\fR, \f(CW%I\fR, \f(CW%j\fR, \f(CW%k\fR, \f(CW%l\fR, \f(CW%m\fR, \f(CW%M\fR, \f(CW%q\fR,
\&\f(CW%y\fR and \f(CW%Y\fR can be output in Roman numerals by prefixing the letter
with \f(CW\*(C`O\*(C'\fR, e.g. \f(CW%OY\fR will output the year as roman numerals.
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <gbarr@pobox.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-1999 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
