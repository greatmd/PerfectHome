.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Traversal 3"
.TH Graph::Traversal 3 "2004-04-04" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Graph::Traversal \- graph traversal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Graph::Traversal;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.IP "new" 4
.IX Item "new"
.Vb 1
\&        $s = Graph::Traversal->new($G, %param)
.Ve
.Sp
Returns a new graph search object for the graph \f(CW$G\fR
and the parameters \f(CW%param\fR.
.Sp
Usually not used directly but instead via frontends like
Graph::DFS for depth-first searching and Graph::BFS for
breadth-first searching:
.Sp
.Vb 2
\&        $dfs = Graph::DFS->new($G, %param)
\&        $bfs = Graph::BFS->new($G, %param)
.Ve
.Sp
\&\fI%param documentation to be written\fR
.IP "reset" 4
.IX Item "reset"
.Vb 1
\&        $S->reset
.Ve
.Sp
Resets a graph search object \f(CW$S\fR to its initial state.
.IP "next_preorder" 4
.IX Item "next_preorder"
.Vb 1
\&        $v = $s->next_preorder
.Ve
.Sp
Returns the next vertex in preorder of the graph
encapsulated within the search object \f(CW$s\fR.
.IP "next_postorder" 4
.IX Item "next_postorder"
.Vb 1
\&        $v = $S->next_postorder
.Ve
.Sp
Returns the next vertex in postorder of the graph
encapsulated within the search object \f(CW$S\fR.
.IP "next_edge" 4
.IX Item "next_edge"
.Vb 1
\&        ($u, $v) = $s->next_edge
.Ve
.Sp
Returns the vertices of the next edge of the graph
encapsulated within the search object \f(CW$s\fR.
.IP "preorder" 4
.IX Item "preorder"
.Vb 1
\&        @V = $S->preorder
.Ve
.Sp
Returns all the vertices in preorder of the graph
encapsulated within the search object \f(CW$S\fR.
.IP "postorder" 4
.IX Item "postorder"
.Vb 1
\&        @V = $S->postorder
.Ve
.Sp
Returns all the vertices in postorder of the graph
encapsulated within the search object \f(CW$S\fR.
.IP "edges" 4
.IX Item "edges"
.Vb 1
\&        @V = $S->edges
.Ve
.Sp
Returns all the edges of the graph
encapsulated within the search object \f(CW$S\fR.
.IP "roots" 4
.IX Item "roots"
.Vb 1
\&        @R = $S->roots
.Ve
.Sp
Returns all the root vertices of the trees of
the graph encapsulated within the search object \f(CW$S\fR.
\&\*(L"The root vertices\*(R" is ambiguous: what really happens
is that either the roots from the previous search made
on the \f(CW$s\fR are returned; or a preorder search is done
and the roots of this search are returned.
.IP "_vertex_roots" 4
.IX Item "_vertex_roots"
.Vb 1
\&        %R = $S->_vertex_roots
.Ve
.Sp
Returns as a hash of ($vertex, index) pairs where index is an index
into the vertex_root list of the traversal.
.Sp
\&\*(L"The root vertices\*(R" is ambiguous; see the documentation of the \fIroots()\fR
method for more details.
.Sp
(This is the old \fIvertex_roots()\fR.)
.IP "vertex_roots" 4
.IX Item "vertex_roots"
.Vb 1
\&        %R = $S->vertex_roots
.Ve
.Sp
Returns as a hash of ($vertex, \f(CW$root\fR) pairs all the vertices
and the root vertices of their search trees of the graph
encapsulated within the search object \f(CW$S\fR.
.Sp
\&\*(L"The root vertices\*(R" is ambiguous; see the documentation of
the \fIroots()\fR method for more details.
.Sp
(See also \fI_vertex_roots()\fR).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1999, O'Reilly & Associates.
.PP
This code is distributed under the same copyright terms as Perl itself.
