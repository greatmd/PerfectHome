.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Entities 3"
.TH HTML::Entities 3 "2003-01-18" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Entities \- Encode or decode strings with HTML entities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTML::Entities;
.Ve
.PP
.Vb 3
\& $a = "V&aring;re norske tegn b&oslash;r &#230res";
\& decode_entities($a);
\& encode_entities($a, "\e200-\e377");
.Ve
.PP
For example, this:
.PP
.Vb 2
\& $input = "vis-à-vis Beyoncé's naïve papier-mâché résumé";
\& print encode_entities($in), "\en"
.Ve
.PP
Prints this out:
.PP
.Vb 1
\& vis-&agrave;-vis Beyonc&eacute;'s na&iuml;ve papier-m&acirc;ch&eacute; r&eacute;sum&eacute;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module deals with encoding and decoding of strings with \s-1HTML\s0
character entities.  The module provides the following functions:
.IP "decode_entities($string)" 4
.IX Item "decode_entities($string)"
This routine replaces \s-1HTML\s0 entities found in the \f(CW$string\fR with the
corresponding \s-1ISO\-8859\-1\s0 character, and if possible (under perl 5.7
or later) will replace to Unicode characters.  Unrecognized
entities are left alone.
.Sp
This routine is exported by default.
.IP "encode_entities($string, [$unsafe_chars])" 4
.IX Item "encode_entities($string, [$unsafe_chars])"
This routine replaces unsafe characters in \f(CW$string\fR with their entity
representation. A second argument can be given to specify which
characters to consider unsafe (i.e., which to escape). The default set
of characters to encode are control chars, high-bit chars, and the
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`>\*(C'\fR, and \f(CW\*(C`"\*(C'\fR
characters.  But this, for example, would encode \fIjust\fR the
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`>\*(C'\fR, and \f(CW\*(C`"\*(C'\fR characters:
.Sp
.Vb 1
\&  $escaped = encode_entities($input, '<>&"');
.Ve
.Sp
This routine is exported by default.
.IP "encode_entities_numeric($string, [$unsafe_chars])" 4
.IX Item "encode_entities_numeric($string, [$unsafe_chars])"
This routine works just like encode_entities, except that the replacement
entities are always \f(CW\*(C`&#x\f(CIhexnum\f(CW;\*(C'\fR and never \f(CW\*(C`&\f(CIentname\f(CW;\*(C'\fR.  For
example, \f(CW\*(C`escape_entities("r\exF4le")\*(C'\fR returns \*(L"r&ocirc;le\*(R", but
\&\f(CW\*(C`escape_entities_numeric("r\exF4le")\*(C'\fR returns \*(L"r&#xF4;le\*(R".
.Sp
This routine is \fInot\fR exported by default.  But you can always
export it with \f(CW\*(C`use HTML::Entities qw(encode_entities_numeric);\*(C'\fR
or even \f(CW\*(C`use HTML::Entities qw(:DEFAULT encode_entities_numeric);\*(C'\fR
.PP
All these routines modify the string passed as the first argument, if
called in a void context.  In scalar and array contexts, the encoded or
decoded string is returned (without changing the input string).
.PP
If you prefer not to import these routines into your namespace, you can
call them as:
.PP
.Vb 4
\&  use HTML::Entities ();
\&  $decoded = HTML::Entities::decode($a);
\&  $encoded = HTML::Entities::encode($a);
\&  $encoded = HTML::Entities::encode_numeric($a);
.Ve
.PP
The module can also export the \f(CW%char2entity\fR and the \f(CW%entity2char\fR
hashes, which contain the mapping from all characters to the
corresponding entities (and vice versa, respectively).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-2003 Gisle Aas. All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
