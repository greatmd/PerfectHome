.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ordinate 3"
.TH Ordinate 3 "2000-08-24" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Lingua::EN::Numbers::Ordinate \-\- go from cardinal number (3) to ordinal ("3rd")
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Lingua::EN::Numbers::Ordinate;
\&  print ordinate(4), "\en";
\&   # prints 4th
\&  print ordinate(-342), "\en";
\&   # prints -342nd
.Ve
.PP
.Vb 9
\&  # Example of actual use:
\&  ...
\&  for(my $i = 0; $i < @records; $i++) {
\&    unless(is_valid($record[$i]) {
\&      warn "The ", ordinate($i), " record is invalid!\en"; 
\&      next;
\&    }
\&    ...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There are two kinds of numbers in English \*(-- cardinals (1, 2, 3...), and
ordinals (1st, 2nd, 3rd...).  This library provides functions for giving
the ordinal form of a number, given its cardinal value.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "ordinate(\s-1SCALAR\s0)" 4
.IX Item "ordinate(SCALAR)"
Returns a string consisting of that scalar's string form, plus the
appropriate ordinal suffix.  Example: \f(CW\*(C`ordinate(23)\*(C'\fR returns \*(L"23rd\*(R".
.Sp
As a special case, \f(CW\*(C`ordinate(undef)\*(C'\fR and \f(CW\*(C`ordinate("")\*(C'\fR return \*(L"0th\*(R",
not \*(L"th\*(R".
.Sp
This function is exported by default.
.IP "th(\s-1SCALAR\s0)" 4
.IX Item "th(SCALAR)"
Merely an alias for \f(CW\*(C`ordinate\*(C'\fR, but not exported by default.
.IP "ordsuf(\s-1SCALAR\s0)" 4
.IX Item "ordsuf(SCALAR)"
Returns just the appropriate ordinal suffix for the given scalar
numeric value.  This is what \f(CW\*(C`ordinate\*(C'\fR uses to actually do its
work.  For example, \f(CWordsuf(3)\fR is \*(L"rd\*(R". 
.Sp
Not exported by default.
.PP
The above functions are all prototyped to take a scalar value,
so \f(CW\*(C`ordinate(@stuff)\*(C'\fR is the same as \f(CW\*(C`ordinate(scalar @stuff)\*(C'\fR.
.SH "CAVEATS"
.IX Header "CAVEATS"
* Note that this library knows only about numbers, not number\-words.
\&\f(CW\*(C`ordinate('seven')\*(C'\fR might just as well be \f(CW\*(C`ordinate('superglue')\*(C'\fR
or \f(CW\*(C`ordinate("\ex1E\ex9A")\*(C'\fR \*(-- you'll get the fallthru case of the input
string plus \*(L"th\*(R".
.PP
* As is unavoidable, \f(CW\*(C`ordinate(0256)\*(C'\fR returns \*(L"174th\*(R" (because ordinate
sees the value 174). Similarly, \f(CW\*(C`ordinate(1E12)\*(C'\fR returns
\&\*(L"1000000000000th\*(R".  Returning \*(L"trillionth\*(R" would be nice, but that's an
awfully atypical case.
.PP
* Note that this library's algorithm (as well as the basic concept
and implementation of ordinal numbers) is totally language specific.
.PP
To pick a trivial example, consider that in French, 1 ordinates
as \*(L"1ier\*(R", whereas 41 ordinates as \*(L"41ieme\*(R".
.SH "STILL NOT SATISFIED?"
.IX Header "STILL NOT SATISFIED?"
Bored of this...?
.PP
.Vb 4
\&  use Lingua::EN::Numbers::Ordinate qw(ordinate th);
\&  ...
\&  print th($n), " entry processed...\en";
\&  ...
.Ve
.PP
Try this bit of lunacy:
.PP
.Vb 3
\&  {
\&    my $th_object;
\&    sub _th () { $th_object }
.Ve
.PP
.Vb 11
\&    package Lingua::EN::Numbers::Ordinate::Overloader;
\&    my $x; # Gotta have something to bless.
\&    $th_object = bless \e$x; # Define the object now, which _th returns
\&    use Carp ();
\&    use Lingua::EN::Numbers::Ordinate ();
\&    sub overordinate {
\&      Carp::croak "_th should be used only as postfix!" unless $_[2];
\&      Lingua::EN::Numbers::Ordinate::ordinate($_[1]);
\&    }
\&    use overload '&' => \e&overordinate;
\&  }
.Ve
.PP
Then you get to do:
.PP
.Vb 2
\&  print 3 & _th, "\en";
\&    # prints "3rd"
.Ve
.PP
.Vb 3
\&  print 1 + 2 & _th, "\en";
\&    # prints "3rd" too!
\&    # Because of the precedence of & !
.Ve
.PP
.Vb 2
\&  print _th & 3, "\en";
\&    # dies with: "th should be used only as postfix!"
.Ve
.PP
Kooky, isn't it?  For more delightful deleria like this, see
Damian Conway's \fIObject Oriented Perl\fR from Manning Press.
.PP
Kinda makes you like \f(CWth(3)\fR, doesn't it?
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000 Sean M. Burke.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sean M. Burke \f(CW\*(C`sburke@cpan.org\*(C'\fR
