.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigRat 3"
.TH Math::BigRat 3 "2002-06-01" "perl v5.8.0" "Perl Programmers Reference Guide"
.SH "NAME"
Math::BigRat \- arbitrarily big rationals
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::BigRat;
.Ve
.PP
.Vb 1
\&  $x = Math::BigRat->new('3/7');
.Ve
.PP
.Vb 1
\&  print $x->bstr(),"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is just a placeholder until the real thing is up and running. Watch this
space...
.Sh "\s-1MATH\s0 \s-1LIBRARY\s0"
.IX Subsection "MATH LIBRARY"
Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:
.PP
.Vb 1
\&        use Math::BigRat lib => 'Calc';
.Ve
.PP
You can change this by using:
.PP
.Vb 1
\&        use Math::BigRat lib => 'BitVect';
.Ve
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use Math::BigRat lib => 'Foo,Math::BigInt::Bar';
.Ve
.PP
Calc.pm uses as internal format an array of elements of some decimal base
(usually 1e7, but this might be differen for some systems) with the least
significant digit first, while BitVect.pm uses a bit vector of base 2, most
significant bit first. Other modules might use even different means of
representing the numbers. See the respective module documentation for further
details.
.SH "METHODS"
.IX Header "METHODS"
Any method not listed here is dervied from Math::BigFloat (or
Math::BigInt), so make sure you check these two modules for further
information.
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&        $x = Math::BigRat->new('1/3');
.Ve
.PP
Create a new Math::BigRat object. Input can come in various forms:
.PP
.Vb 6
\&        $x = Math::BigRat->new('1/3');                          # simple string
\&        $x = Math::BigRat->new('1 / 3');                        # spaced
\&        $x = Math::BigRat->new('1 / 0.1');                      # w/ floats
\&        $x = Math::BigRat->new(Math::BigInt->new(3));           # BigInt
\&        $x = Math::BigRat->new(Math::BigFloat->new('3.1'));     # BigFloat
\&        $x = Math::BigRat->new(Math::BigInt::Lite->new('2'));   # BigLite
.Ve
.Sh "\fInumerator()\fP"
.IX Subsection "numerator()"
.Vb 1
\&        $n = $x->numerator();
.Ve
.PP
Returns a copy of the numerator (the part above the line) as signed BigInt.
.Sh "\fIdenominator()\fP"
.IX Subsection "denominator()"
.Vb 1
\&        $d = $x->denominator();
.Ve
.PP
Returns a copy of the denominator (the part under the line) as positive BigInt.
.Sh "\fIparts()\fP"
.IX Subsection "parts()"
.Vb 1
\&        ($n,$d) = $x->parts();
.Ve
.PP
Return a list consisting of (signed) numerator and (unsigned) denominator as
BigInts.
.Sh "\fIas_number()\fP"
.IX Subsection "as_number()"
Returns a copy of the object as BigInt by truncating it to integer.
.Sh "\fIbfac()\fP"
.IX Subsection "bfac()"
.Vb 1
\&        $x->bfac();
.Ve
.PP
Calculates the factorial of \f(CW$x\fR. For instance:
.PP
.Vb 2
\&        print Math::BigRat->new('3/1')->bfac(),"\en";    # 1*2*3
\&        print Math::BigRat->new('5/1')->bfac(),"\en";    # 1*2*3*4*5
.Ve
.PP
Only works for integers for now.
.Sh "\fIblog()\fP"
.IX Subsection "blog()"
Is not yet implemented.
.Sh "\fIbround()\fP/\fIround()\fP/\fIbfround()\fP"
.IX Subsection "bround()/round()/bfround()"
Are not yet implemented.
.SH "BUGS"
.IX Header "BUGS"
Some things are not yet implemented, or only implemented half\-way.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat and Math::Big as well as Math::BigInt::BitVect,
Math::BigInt::Pari and  Math::BigInt::GMP.
.PP
The package at
<http://search.cpan.org/search?mode=module&query=Math%3A%3ABigRat> may
contain more documentation and examples as well as testcases.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> 2001\-2002. 
