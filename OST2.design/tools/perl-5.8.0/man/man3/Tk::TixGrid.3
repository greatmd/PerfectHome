.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TIXGRID 1"
.TH TIXGRID 1 "2000-12-30" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Tk::TixGrid \- Create and manipulate Tix Grid widgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\ \fI$tixgrid\fR = \fI$parent\fR\->\fBTixGrid\fR?(\fIoptions\fR)?;
.PP
.Vb 2
\&    The port of C code and bindings is done but needs
\&    debugging.  THERE ARE KNOWN BUGS. Work in progress ...
.Ve
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-background\fR
	\fB\-borderwidth\fR
	\fB\-cursor\fR
	\fB\-font\fR
	\fB\-foreground\fR
	\fB\-height\fR
	\fB\-highlightbackground\fR
	\fB\-highlightcolor\fR
	\fB\-highlightthickness\fR
	\fB\-padx\fR
	\fB\-pady\fR
	\fB\-relief\fR
	\fB\-selectbackground\fR
	\fB\-selectborderwidth\fR
	\fB\-selectforeground\fR
	\fB\-state\fR
	\fB\-takefocus\fR
	\fB\-width\fR
	\fB\-xscrollcommand\fR
	\fB\-yscrollcommand\fR
.PP
See Tk::options for details of the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.IP "Name:	\fBbrowseCmd\fR" 4
.IX Item "Name:	browseCmd"
.PD 0
.IP "Class:	\fBBrowseCmd\fR" 4
.IX Item "Class:	BrowseCmd"
.IP "Switch:	\fB\-browsecmd\fR" 4
.IX Item "Switch:	-browsecmd"
.PD
?docu here?  Not in configure output but used in bindings ??!!
.Sp
If defined, gives a perl/Tk callback
to be executed when the
user browses a grid cell (This is normally the case when
the user clicks on an entry).  When this callback is called, it is
passed with two additional parameters: \fIx\fR \fIy\fR, where (\fIx\fR,\fIy\fR)
is the location of the cell that has just been clicked.
.IP "Name:	\fBCommand\fR" 4
.IX Item "Name:	Command"
.PD 0
.IP "Class:	\fBCommand\fR" 4
.IX Item "Class:	Command"
.IP "Switch:	\fB\-command\fR" 4
.IX Item "Switch:	-command"
.PD
?docu here?  Not in configure output but used in bindings ??!!
.IP "Name:	\fBeditDoneCmd\fR" 4
.IX Item "Name:	editDoneCmd"
.PD 0
.IP "Class:	\fBEditDoneCmd\fR" 4
.IX Item "Class:	EditDoneCmd"
.IP "Switch:	\fB\-editdonecmd\fR" 4
.IX Item "Switch:	-editdonecmd"
.PD
If defined, gives a perl/Tk callback
to be executed when the
user has edited grid cell. When this callback is called, it is
passed with two additional parameters: \fIx\fR \fIy\fR, where (\fIx\fR,\fIy\fR)
is the location of the cell that has just been edited.
.IP "Name:	\fBeditNotifyCmd\fR" 4
.IX Item "Name:	editNotifyCmd"
.PD 0
.IP "Class:	\fBEditNotifyCmd\fR" 4
.IX Item "Class:	EditNotifyCmd"
.IP "Switch:	\fB\-editnotifycmd\fR" 4
.IX Item "Switch:	-editnotifycmd"
.PD
If defined gives a perl/Tk callback
to be executed when the user tries to edit a grid cell.
When this callback is called, it is passed with two additional
parameters: \fIx\fR \fIy\fR, where (\fIx\fR,\fIy\fR,) is the location
of the cell. This callback should return a boolean value: \fBtrue\fR
indicates that the cell is editable and \fBfalse\fR otherwise.
.IP "Name:	\fBFloatingCols\fR" 4
.IX Item "Name:	FloatingCols"
.PD 0
.IP "Class:	\fBfloatingCols\fR" 4
.IX Item "Class:	floatingCols"
.IP "Switch:	\fB\-floatingcols\fR" 4
.IX Item "Switch:	-floatingcols"
.PD
Defines the number of columns that fixed when the widget
is horizontally scrolled.  These column(s)
can be used as label(s) for the column(s).  The floating column(s)
can be configured in the \fB\-formatcmd\fR callback with the
\&\fBformatBorder\fR method.  The default value is 0.
.IP "Name:	\fBFloatingRows\fR" 4
.IX Item "Name:	FloatingRows"
.PD 0
.IP "Class:	\fBfloatingRows\fR" 4
.IX Item "Class:	floatingRows"
.IP "Switch:	\fB\-floatingrows\fR" 4
.IX Item "Switch:	-floatingrows"
.PD
Defines the number of rows that are fixed when the widget
is vertically scrolled.  These row(s)
can be used as label(s) for the row(s).  The floating row(s)
can be configured in the \fB\-formatcmd\fR callback with the
\&\fBformatBorder\fR method.  The default value is 0.
.IP "Name:	\fBformatCmd\fR" 4
.IX Item "Name:	formatCmd"
.PD 0
.IP "Class:	\fBFormatCmd\fR" 4
.IX Item "Class:	FormatCmd"
.IP "Switch:	\fB\-formatcmd\fR" 4
.IX Item "Switch:	-formatcmd"
.PD
If defined, gives a perl/Tk callback to be
executed when the grid cells need to be formatted on the screen.
Normally, this callback calls the \fBformat\fR method (see below).
When this callback is called, it is passed with five additional
parameters: \fItype\fR \fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR. \fItype\fR gives the
logical type of the region in the grid. It may be one of the
following.
.RS 4
.IP "\fBx\-region\fR" 8
.IX Item "x-region"
the horizontal margin
.IP "\fBy\-region\fR" 8
.IX Item "y-region"
the vertical margin
.IP "\fBs\-region\fR" 8
.IX Item "s-region"
the area where the horizontal and vertical margins are joined
.IP "\fBmain\fR" 8
.IX Item "main"
all the cells that do not fall into the above three types
.RE
.RS 4
.Sp
\&\fIx1\fR \fIy1\fR \fIx2\fR \fIy2\fR gives the extent of the region that needs
formatting.
.RE
.IP "Name:	\fBleftMargin\fR" 4
.IX Item "Name:	leftMargin"
.PD 0
.IP "Class:	\fBLeftMargin\fR" 4
.IX Item "Class:	LeftMargin"
.IP "Switch:	\fB\-leftmargin\fR" 4
.IX Item "Switch:	-leftmargin"
.PD
In the number of cells, gives the width of vertical margin.
A zero indicates that no vertical should be drawn.
.IP "Name:	\fBitemType\fR" 4
.IX Item "Name:	itemType"
.PD 0
.IP "Class:	\fBItemType\fR" 4
.IX Item "Class:	ItemType"
.IP "Switch:	\fB\-itemtype\fR" 4
.IX Item "Switch:	-itemtype"
.PD
?docu here?
.IP "Name:	\fBselectMode\fR" 4
.IX Item "Name:	selectMode"
.PD 0
.IP "Class:	\fBSelectMode\fR" 4
.IX Item "Class:	SelectMode"
.IP "Switch:	\fB\-selectmode\fR" 4
.IX Item "Switch:	-selectmode"
.PD
Specifies one of several styles for manipulating the selection.
The value of the option may be arbitrary, but the default bindings
expect it to be either \fBsingle\fR, \fBbrowse\fR, \fBmultiple\fR, or \fBextended\fR;
the default value is \fBsingle\fR.
.IP "Name:	\fBselectUnit\fR" 4
.IX Item "Name:	selectUnit"
.PD 0
.IP "Class:	\fBSelectUnit\fR" 4
.IX Item "Class:	SelectUnit"
.IP "Switch:	\fB\-selectunit\fR" 4
.IX Item "Switch:	-selectunit"
.PD
Specifies the selection unit. Valid values are \fBcell\fR, \fBcolumn\fR or \fBrow\fR.
.IP "Name:	\fBsizeCmd\fR" 4
.IX Item "Name:	sizeCmd"
.PD 0
.IP "Class:	\fBSizeCmd\fR" 4
.IX Item "Class:	SizeCmd"
.IP "Switch:	\fB\-sizecmd\fR" 4
.IX Item "Switch:	-sizecmd"
.PD
?docu here?
.IP "Name:	\fBtopMargin\fR" 4
.IX Item "Name:	topMargin"
.PD 0
.IP "Class:	\fBTopMargin\fR" 4
.IX Item "Class:	TopMargin"
.IP "Switch:	\fB\-topmargin\fR" 4
.IX Item "Switch:	-topmargin"
.PD
In the number of cells, gives the height of horizontal margin.
A zero indicates that no horizontal should be drawn.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBTixGrid\fR method creates a TixGrid new window and returns a
blessed reference of this TixGrid widget.
Additional options,
described above, may be specified on the command line or in the
option database to configure aspects of the \fBTixGrid\fR widget
such as its cursor and relief.
.PP
A Grid widget displays its contents in a two dimensional grid of cells.
Each cell may contain one Tix display item, which may be in text,
graphics or other formats. See Tk::DItem for more information
about Tix display items. Individual cells, or groups of cells,
can be formatted with a wide range of attributes, such as its color,
relief and border.
.SH "WIDGET METHODS"
.IX Header "WIDGET METHODS"
The \fBTixGrid\fR method creates a TixGrid widget and returns a blessed
reference of this TixGrid widget.  This reference may be used to
invoke various operations on the widget.  It has the following general
form:
.PP
\&\ \fI$tixgrid\fR\->\fBmethod\fR?(\fIarg, arg, ...\fR)?
.PP
\&\fIarg\fRs determine the exact behavior of the method. The following
methods are possible for \fBTixGrid\fR widgets:
.IP "\fI$tixgrid\fR\->\fBanchor\fR(\fIaction\fR, \fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->anchor(action, x, y)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBanchor\fR\fIAction\fR(\fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->anchorAction(x, y)"
.PD
Manipulates the \fBanchor cell\fR of the \fBTixGrid\fR widget.
The anchor cell is the end of the selection that is fixed
while the user is dragging out a selection with the mouse.
\&\fIAction\fR can be \fBclear\fR, \fBget\fR or \fBset\fR.  If \fIaction\fR
is \fBclear\fR, \fIx\fR and \fIy\fR args are not accepted.
.IP "\fI$tixgrid\fR\->\fBbdtype\fR(\fIx\fR, \fIy\fR ?,\fIxbdWidth\fR, \fIybdWidth\fR?)" 4
.IX Item "$tixgrid->bdtype(x, y ?,xbdWidth, ybdWidth?)"
????
.IP "\fI$tixgrid\fR\->\fBcget\fR('\fI\-option\fR')" 4
.IX Item "$tixgrid->cget('-option')"
Returns the current value of the configuration option given
by \fI\-option\fR. \fI\-option\fR may have any of the values accepted
by the \fBTixGrid\fR constructor method.
.IP "\fI$tixgrid\fR\->\fBconfigure\fR(?\fI\-option\fR??=>\fIvalue\fR, \fI\-option\fR=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->configure(?-option??=>value, -option=>value, ...?)"
Query or modify the configuration options of the widget.
If no \fI\-option\fR is specified, returns a list describing all
of the available options for \fI$tixgrid\fR (see \fBTk_ConfigureInfo\fR
for information on the format of this list.) If \fI\-option\fR is
specified with no \fIvalue\fR, then the method returns a list describing
the one named option (this list will be identical to the corresponding
sublist of the value returned if no \fI\-option\fR is specified).
If one or more \fIoption-value\fR pairs are specified, then the
method modifies the given widget option(s) to have the given value(s);
in this case the method returns an empty string. \fI\-option\fR may have
any of the values accepted by the \fBTixGrid\fR constructor method.
.IP "\fI$tixgrid\fR\->\fBdelete\fR(\fIdim\fR, \fIfrom\fR?, \fIto\fR?)" 4
.IX Item "$tixgrid->delete(dim, from?, to?)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBdeleteColumn\fR(\fIfrom\fR?, \fIto\fR?)" 4
.IX Item "$tixgrid->deleteColumn(from?, to?)"
.IP "\fI$tixgrid\fR\->\fBdeleteRow\fR(\fIfrom\fR?, \fIto\fR?)" 4
.IX Item "$tixgrid->deleteRow(from?, to?)"
.PD
\&\fIDim\fR may be \fBrow\fR or \fBcolumn\fR. If \fIto\fR is not given,
deletes a single row (or column) at the position \fIfrom\fR.
If \fIto\fR is given, deletes the range of rows (or columns)
from position \fIfrom\fR through \fIto\fR.
.IP "\fI$tixgrid\fR\->\fBdragsite\fR(\fIoption\fR, \fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->dragsite(option, x, y)"
?docu here? not implemented :\-(
.IP "\fI$tixgrid\fR\->\fBdropsite\fR(\fIoption\fR, \fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->dropsite(option, x, y)"
?docu here? not implemented :\-(
.IP "\fI$tixgrid\fR\->\fBeditApply\fR" 4
.IX Item "$tixgrid->editApply"
If any cell is being edited, de-highlight the cell and
applies the changes.
.IP "\fI$tixgrid\fR\->\fBeditSet\fR(\fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->editSet(x, y)"
Highlights the cell at (\fIx\fR,\fIy\fR) for editing,
if the \fB\-editnotify\fR callback returns true for this cell.
.IP "\fI$tixgrid\fR\->\fBentrycget\fR(\fIx\fR, \fIy\fR, '\fI\-option\fR')" 4
.IX Item "$tixgrid->entrycget(x, y, '-option')"
Returns the current value of the configuration option given by
\&\fI\-option\fR of the cell at (\fIx\fR,\fIy\fR).  \fI\-option\fR may have any
of the values accepted by the \fBset\fR method.
.IP "\fI$tixgrid\fR\->\fBentryconfigure\fR(\fIx\fR, \fIy\fR?, \fI\-option\fR??=>\fIvalue\fR, \fI\-option\fR=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->entryconfigure(x, y?, -option??=>value, -option=>value, ...?)"
Query or modify the configuration options of the cell at (\fIx\fR,\fIy\fR).
If no \fI\-option\fR is specified, returns a list describing all of the
available options for the cell (see \fBTk_ConfigureInfo\fR for information
on the format of this list.)  If \fI\-option\fR is specified with no
\&\fIvalue\fR, then the method returns a list describing the one named
option (this list will be identical to the corresponding sublist
of the value returned if no \fI\-option\fR is specified.) If one or
more \fIoption-value\fR pairs are specified, then the method modifies
the given widget option(s) to have the given value(s); in this case
the method returns an empty string.  \fIOption\fR may have any of the
values accepted by the \fBset\fR method.
.IP "\fI$tixgrid\fR\->\fBformat\fR(\fIoption\fR, ?\fIargs\fR, ...?)" 4
.IX Item "$tixgrid->format(option, ?args, ...?)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBformatBorder\fR(\fIx1,y1\fR, \fIx2,y2\fR, \fIoptions\fR);" 4
.IX Item "$tixgrid->formatBorder(x1,y1, x2,y2, options);"
.IP "\fI$tixgrid\fR\->\fBformatGrid\fR(\fIx1,y1\fR, \fIx2,y2\fR, \fIoptions\fR);" 4
.IX Item "$tixgrid->formatGrid(x1,y1, x2,y2, options);"
.PD
the \fBformat\fR method can only be called by the \fB\-formatcmd\fR callback
of the tixGrid widget.
.Sp
?docu complete?
.IP "\fI$tixgrid\fR\->\fBgeometryinfo\fR(?\fIwidth\fR, ?\fIheight\fR, ...?)" 4
.IX Item "$tixgrid->geometryinfo(?width, ?height, ...?)"
?docu here?  Return a list of 4 floats! Currently \*(L"{first1 last1} {first2,last2}\*(R" :\-(
.IP "\fI$tixgrid\fR\->\fBindex\fR(\fI$coordx\fR, \fI$coordy\fR)" 4
.IX Item "$tixgrid->index($coordx, $coordy)"
?docu here?
.Sp
retuns \fI(nx, ny)\fR of entry at position (\fI$coordx\fR, \fI$coordy\fR).
(??widget or screen offset??)
.IP "\fI$tixgrid\fR\->\fBinfo\fR(\fIoption\fR, ?\fIargs\fR, ...?)" 4
.IX Item "$tixgrid->info(option, ?args, ...?)"
?docu here?
.IP "\fI$tixgrid\fR\->\fBmove\fR(\fIdim\fR, \fIfrom\fR, \fIto\fR, \fIoffset\fR)" 4
.IX Item "$tixgrid->move(dim, from, to, offset)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBmoveColumn\fR(\fIfrom\fR, \fIto\fR, \fIoffset\fR)" 4
.IX Item "$tixgrid->moveColumn(from, to, offset)"
.IP "\fI$tixgrid\fR\->\fBmoveRow\fR(\fIfrom\fR, \fIto\fR, \fIoffset\fR)" 4
.IX Item "$tixgrid->moveRow(from, to, offset)"
.PD
\&\fIDim\fR may be \fBrow\fR or \fBcolumn\fR. Moves the range of rows
(or columns) from position \fIfrom\fR through \fIto\fR by the distance
indicated by \fIoffset\fR. For example,
\&\fI$tixgrid\fR\->\fBmoveRow\fR(\fB2\fR, \fB4\fR, \fB1\fR) moves the rows 2,3,4
to rows 3,4,5.
.IP "\fI$tixgrid\fR\->\fBnearest\fR(\fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->nearest(x, y)"
?docu here?  screen pos (pixels) to entry (nx,ny) translation.
.IP "\fI$tixgrid\fR\->\fBselection\fR(\fIoption\fR, \fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 4
.IX Item "$tixgrid->selection(option, x1, y1 ?,x2, y2?)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBselection\fR\fIOption\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 4
.IX Item "$tixgrid->selectionOption(x1, y1 ?,x2, y2?)"
.PD
Option one of: \fBadjust\fR, \fBclear\fR, \fBincludes\fR, \fBset\fR, and \fBtoggle\fR.
.Sp
x1 (y1) has not to be greater than x2 (y2), but only x2 and y2 can be 'max'.
.Sp
\&\s-1BUG:\s0 \fIselection includes\fR: has no visible effect (as in Tix). Eh???
.Sp
\&\s-1BUG:\s0 \fIselection clear\fR: only works for 0, 0, max, max (as in Tix). Eh???
.Sp
When \fIx2, y2\fR are not given they default to \fIx1, y1\fR, respectively.
.RS 4
.IP "\fI$tixgrid\fR\->\fBselectionAdjust\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 8
.IX Item "$tixgrid->selectionAdjust(x1, y1 ?,x2, y2?)"
?docu here?
.IP "\fI$tixgrid\fR\->\fBselectionClear\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 8
.IX Item "$tixgrid->selectionClear(x1, y1 ?,x2, y2?)"
?docu here?
.IP "\fI$tixgrid\fR\->\fBselectionIncludes\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 8
.IX Item "$tixgrid->selectionIncludes(x1, y1 ?,x2, y2?)"
?docu here?
.IP "\fI$tixgrid\fR\->\fBselectionSet\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 8
.IX Item "$tixgrid->selectionSet(x1, y1 ?,x2, y2?)"
?docu here?
.IP "\fI$tixgrid\fR\->\fBselectionToggle\fR(\fIx1\fR, \fIy1\fR ?,\fIx2\fR, \fIy2\fR?)" 8
.IX Item "$tixgrid->selectionToggle(x1, y1 ?,x2, y2?)"
?docu here?
.RE
.RS 4
.RE
.IP "\fI$tixgrid\fR\->\fBset\fR(\fIx\fR, \fIy\fR?, \fB\-itemtype\fR=>\fItype\fR??, \fI\-option\fR=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->set(x, y?, -itemtype=>type??, -option=>value, ...?)"
Creates a new display item at the cell at (\fIx\fR,\fIy\fR). The optional
\&\fB\-itemtype\fR parameter gives the type of the display item.
An additional list of \fIoption-value\fR pairs specify options
of the display item. If a display item already exists at this cell,
the old item will be deleted automatically.
.IP "\fI$tixgrid\fR\->\fBsize\fR(\fIdim\fR, \fIindex\fR?, \fI\-option\fR??=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->size(dim, index?, -option??=>value, ...?)"
.PD 0
.IP "\fI$tixgrid\fR\->\fBsizeColumn\fR(\fIindex\fR?, \fI\-option\fR??=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->sizeColumn(index?, -option??=>value, ...?)"
.IP "\fI$tixgrid\fR\->\fBsizeRow\fR(\fIindex\fR?, \fI\-option\fR??=>\fIvalue\fR, \fI...\fR?)" 4
.IX Item "$tixgrid->sizeRow(index?, -option??=>value, ...?)"
.PD
Queries or sets the size of the row or column given by \fIdim\fR and
\&\fIindex\fR. \fIDim\fR may be \fBrow\fR or \fBcolumn\fR.  \fIIndex\fR may be any
non-negative integer that gives the position of a given row (or column).
\&\fIIndex\fR can also be the string \fBdefault\fR; in this case, this method
queries or sets the default size of all rows (or columns).
When no \fIoption-value\fR pair is given, this method returns
a list containing the current size setting of the given row (or column).
When \fIoption-value\fR pairs are given, the corresponding options
of the size setting of the given row are changed. \fI\-option\fR may be
one of the following:
.RS 4
.IP "\fB\-pad0\fR => \fIpixels\fR" 8
.IX Item "-pad0 => pixels"
Specifies the paddings to the left of a column or the top of a row.
.IP "\fB\-pad1\fR => \fIpixels\fR" 8
.IX Item "-pad1 => pixels"
Specifies the paddings to the right of a column or the bottom of a row.
.IP "\fB\-size\fR => \fIval\fR" 8
.IX Item "-size => val"
Specifies the width of a column or the height of a row.
\&\fIVal\fR may be: \fBauto\fR \*(-- the width of the column is set
the widest cell in the column; a valid Tk screen distance
unit (see \fBTk_GetPixels\fR); or a real number following by the
word \fBchars\fR (e.g. \fB3.4chars\fR) that sets the width of the
column to the given number of characters.
.RE
.RS 4
.RE
.IP "\fI$tixgrid\fR\->\fBsort\fR(\fIdimension\fR, \fIstart\fR, \fIend\fR, ?\fIargs ...\fR?)" 4
.IX Item "$tixgrid->sort(dimension, start, end, ?args ...?)"
?docu here? (not supported on Win* OSs up to now)
.IP "\fI$tixgrid\fR\->\fBunset\fR(\fIx\fR, \fIy\fR)" 4
.IX Item "$tixgrid->unset(x, y)"
Clears the cell at (\fIx\fR,\fIy\fR) by removing its display item.
.IP "\fI$tixgrid\fR\->\fBxview\fR" 4
.IX Item "$tixgrid->xview"
?docu here?
.IP "\fI$tixgrid\fR\->\fByview\fR" 4
.IX Item "$tixgrid->yview"
?docu here?
.SH "BINDINGS"
.IX Header "BINDINGS"
to be done.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::DItem
Tk::callbacks
Tk::FloatEntry
.SH "BUGS"
.IX Header "BUGS"
C code and bindings of TixGrid have some bugs.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
tix, tixgrid, table, display item, spreadsheet
