.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBD::ADO 3"
.TH DBD::ADO 3 "2002-10-01" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
DBD::ADO \- A DBI driver for Microsoft ADO (Active Data Objects)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI;
.Ve
.PP
.Vb 1
\&  $dbh = DBI->connect("dbi:ADO:dsn", $user, $passwd);
.Ve
.PP
.Vb 4
\&        Options in the connect string:
\&        dbi:ADO:dsn;CommandTimeout=60 (your number)
\&        dbi:ADO:dsn;ConnectTimeout=60 (your number)
\&        or include both ConnectTimeout and CommandTimeout.
.Ve
.PP
.Vb 3
\&        The dsn may be a standard ODBC dsn or a dsn-less. 
\&        See the ADO documentation for more information on
\&        the dsn-less connection.
.Ve
.PP
.Vb 1
\&  # See the DBI module documentation for full details
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DBD::ADO\s0 module supports \s-1ADO\s0 access on a Win32 machine.  
\&\s-1DBD::ADO\s0 is written to support the standard \s-1DBI\s0 interface to
data sources.
.SH "Connection"
.IX Header "Connection"
.Vb 1
\&  $dbh = DBI->connect("dbi:ADO:dsn", $user, $passwd, $attribs);
.Ve
.PP
.Vb 1
\&        Connection supports dsn and dsn-less calls.
.Ve
.PP
.Vb 3
\&        $dbh = DBI->connect( "dbi:ADO:File Name=oracle.udl", 
\&                $user, $passwd, {RaiseError => [0|1], PrintError => [0|1],
\&                AutoCommit => [0|1]});
.Ve
.PP
.Vb 10
\&        In addition the following attributes may be set in the connect string:
\&                Attributes
\&                CommandTimeout
\&                ConnectionString
\&                ConnectionTimeout
\&                CursorLocation
\&                DefaultDatabase
\&                IsolationLevel
\&                Mode
\&                Provider
.Ve
.PP
.Vb 2
\&        WARNING: The application is responsible for passing the correct
\&        information when setting any of these attributes.
.Ve
.SH "Functions support"
.IX Header "Functions support"
.Vb 2
\&        Using the standard DBI function call
\&                $dbh->func( arguments, 'function name')
.Ve
.PP
.Vb 2
\&        You may access the following functions: (case sensitave)
\&                OpenSchema
.Ve
.PP
.Vb 1
\&        All functions return a valid statement handle upon success.
.Ve
.PP
.Vb 5
\&                OpenSchema supports the following arguments:
\&                        Any valid ADO Schema name such as
\&                        adSchemaCatalogs
\&                        adSchemaIndexes
\&                        adSchemaProviderTypes
.Ve
.PP
.Vb 2
\&                        example:
\&                        my $sth = $dbh->func( 'adSchemaProviderTypes', 'OpenSchema' );
.Ve
.SH "Enhanced DBI Methods"
.IX Header "Enhanced DBI Methods"
.Sh "table_info"
.IX Subsection "table_info"
\&\fBWarning:\fR This method is experimental and may change or disappear.
.PP
.Vb 1
\&        $sth = $dbh->table_info(\e%attr);
.Ve
.PP
.Vb 6
\&        $sth = $dbh->table_info({ 
\&                TABLE_TYPE => 'VIEW', 
\&                ADO_Columns => 1, 
\&                Trim_Catalog => 0, 
\&                Filter => q{TABLE_NAME LIKE 'C%'},
\&        });
.Ve
.PP
Returns an active statement handle that can be used to fetch
information about tables and views that exist in the database.  
By default the handle contains the columns described in the \s-1DBI\s0 documentation:
.PP
.Vb 1
\&        TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS
.Ve
.RE
.IP "\fBADO_Columns\fR"
.IX Item "ADO_Columns"
Additional ADO-only fields will be included if the ADO_Columns attribute 
is set to true:
.PP
.Vb 1
\&        %attr = (ADO_Columns => 1);
.Ve
.RE
.IP "\fBTrim_Catalog\fR"
.IX Item "Trim_Catalog"
Some \s-1ADO\s0 providers include path info in the \s-1TABLE_CAT\s0 column.  
This information will be trimmed if the Trim_Catalog attribute is set to true:
.PP
.Vb 1
\&        %attr = (Trim_Catalog => 1);
.Ve
.RE
.IP "\fBCriteria\fR"
.IX Item "Criteria"
The \s-1ADO\s0 driver allows column criteria to be specified.  In this way the 
record set can be restricted, for example, to only include tables of type '\s-1VIEW\s0':
.PP
.Vb 1
\&        %attr = (TABLE_TYPE => 'VIEW')
.Ve
.PP
You can add criteria for any of the following columns:
.PP
.Vb 1
\&        TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE
.Ve
.RE
.IP "\fBFilter\fR"
.IX Item "Filter"
The \s-1ADO\s0 driver also allows the recordset to be filtered on a Criteria string: 
a string made up of one or more individual clauses concatenated with \s-1AND\s0 or \s-1OR\s0 operators.  
.PP
.Vb 1
\&        %attr = (Filter => q{TABLE_TYPE LIKE 'SYSTEM%'})
.Ve
.PP
The criteria string is made up of clauses in the form FieldName\-Operator\-Value.  
This is more flexible than using column criteria in that the filter allows a number of operators: 
.PP
.Vb 1
\&        <, >, <=, >=, <>, =, or LIKE
.Ve
.PP
The Fieldname must be one of the \s-1ADO\s0 '\s-1TABLES\s0 Rowset' column names:
.PP
.Vb 2
\&        TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, DESCRIPTION, 
\&        TABLE_GUID, TABLE_PROPID, DATE_CREATED, DATE_MODIFIED
.Ve
.PP
Value is the value with which you will compare the field values 
(for example, 'Smith', #8/24/95#, 12.345, or \f(CW$50\fR.00). 
Use single quotes with strings and pound signs (#) with dates. 
For numbers, you can use decimal points, dollar signs, and scientific notation. 
If Operator is \s-1LIKE\s0, Value can use wildcards. 
Only the asterisk (*) and percent sign (%) wild cards are allowed, 
and they must be the last character in the string. Value cannot be null. 
.Sh "tables"
.IX Subsection "tables"
\&\fBWarning:\fR This method is experimental and may change or disappear.
.PP
.Vb 1
\&        @names = $dbh->tables(\e%attr);
.Ve
.PP
Returns a list of table and view names. 
Accepts any of the attributes described in the table_info method:
.PP
.Vb 1
\&        @names = $dbh->tables({ TABLE_TYPE => 'VIEW' });
.Ve
.SH "Warnings"
.IX Header "Warnings"
.Vb 6
\&        Support for type_info_all is supported, however, you're not using
\&        a true OLE DB provider (using the MS OLE DB -> ODBC), the first
\&        hash may not be the "best" solution for the data type.
\&        adSchemaProviderTypes does provide for a "best match" column, however
\&        the MS OLE DB -> ODBC provider does not support the best match.
\&        Currently the types are sorted by DATA_TYPE BEST_MATCH IS_LONG ...
.Ve
.SH "ADO"
.IX Header "ADO"
It is strongly recommended that you use the latest version of \s-1ADO\s0
(2.1 at the time this was written). You can download it from:
.PP
.Vb 1
\&  http://www.microsoft.com/Data/download.htm
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Phlip and Tim Bunce. With many thanks to Jan Dubois, Jochen Wiedmann
and Thomas Lowery for additions, debuggery and general help.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1ADO\s0 Reference book:  \s-1ADO\s0 2.0 Programmer's Reference, David Sussman and
Alex Homer, Wrox, \s-1ISBN\s0 1\-861001\-83\-5. If there's anything better please
let me know.
.PP
http://www.able\-consulting.com/tech.htm
