.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "B::Bytecode 3"
.TH B::Bytecode 3 "2002-06-01" "perl v5.8.0" "Perl Programmers Reference Guide"
.SH "NAME"
B::Bytecode \- Perl compiler's bytecode backend
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        perl -MO=Bytecode[,OPTIONS] foo.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This compiler backend takes Perl source and generates a
platform-independent bytecode encapsulating code to load the
internal structures perl uses to run your program. When the
generated bytecode is loaded in, your program is ready to run,
reducing the time which perl would have taken to load and parse
your program into its internal semi-compiled form. That means that
compiling with this backend will not help improve the runtime
execution speed of your program but may improve the start-up time.
Depending on the environment in which your program runs this may
or may not be a help.
.PP
The resulting bytecode can be run with a special byteperl executable
or (for non-main programs) be loaded via the \f(CW\*(C`byteload_fh\*(C'\fR function
in the \fIB\fR module.
.SH "OPTIONS"
.IX Header "OPTIONS"
If there are any non-option arguments, they are taken to be names of
objects to be saved (probably doesn't work properly yet).  Without
extra arguments, it saves the main program.
.IP "\fB\-ofilename\fR" 4
.IX Item "-ofilename"
Output to filename instead of \s-1STDOUT\s0.
.IP "\fB\-afilename\fR" 4
.IX Item "-afilename"
Append output to filename.
.IP "\fB\-\-\fR" 4
.IX Item "--"
Force end of options.
.IP "\fB\-f\fR" 4
.IX Item "-f"
Force optimisations on or off one at a time. Each can be preceded
by \fBno\-\fR to turn the option off (e.g. \fB\-fno\-compress\-nullops\fR).
.IP "\fB\-fcompress\-nullops\fR" 4
.IX Item "-fcompress-nullops"
Only fills in the necessary fields of ops which have
been optimised away by perl's internal compiler.
.IP "\fB\-fomit\-sequence\-numbers\fR" 4
.IX Item "-fomit-sequence-numbers"
Leaves out code to fill in the op_seq field of all ops
which is only used by perl's internal compiler.
.IP "\fB\-fbypass\-nullops\fR" 4
.IX Item "-fbypass-nullops"
If op\->op_next ever points to a \s-1NULLOP\s0, replaces the op_next field
with the first non-NULLOP in the path of execution.
.IP "\fB\-On\fR" 4
.IX Item "-On"
Optimisation level (n = 0, 1, 2, ...). \fB\-O\fR means \fB\-O1\fR.
\&\fB\-O1\fR sets \fB\-fcompress\-nullops\fR \fB\-fomit\-sequence numbers\fR.
\&\fB\-O2\fR adds \fB\-fbypass\-nullops\fR.
.IP "\fB\-D\fR" 4
.IX Item "-D"
Debug options (concatenated or separate flags like \f(CW\*(C`perl \-D\*(C'\fR).
.IP "\fB\-Do\fR" 4
.IX Item "-Do"
Prints each \s-1OP\s0 as it's processed.
.IP "\fB\-Db\fR" 4
.IX Item "-Db"
Print debugging information about bytecompiler progress.
.IP "\fB\-Da\fR" 4
.IX Item "-Da"
Tells the (bytecode) assembler to include source assembler lines
in its output as bytecode comments.
.IP "\fB\-DC\fR" 4
.IX Item "-DC"
Prints each \s-1CV\s0 taken from the final symbol tree walk.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Output (bytecode) assembler source rather than piping it
through the assembler and outputting bytecode.
.IP "\fB\-upackage\fR" 4
.IX Item "-upackage"
Stores package in the output.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&    perl -MO=Bytecode,-O6,-ofoo.plc,-umain foo.pl
.Ve
.PP
.Vb 2
\&    perl -MO=Bytecode,-S,-umain foo.pl > foo.S
\&    assemble foo.S > foo.plc
.Ve
.PP
Note that \f(CW\*(C`assemble\*(C'\fR lives in the \f(CW\*(C`B\*(C'\fR subdirectory of your perl
library directory. The utility called perlcc may also be used to 
help make use of this compiler.
.PP
.Vb 1
\&    perl -MO=Bytecode,-uFoo,-oFoo.pmc Foo.pm
.Ve
.SH "BUGS"
.IX Header "BUGS"
Output is still huge and there are still occasional crashes during
either compilation or ByteLoading. Current status: experimental.
.SH "AUTHORS"
.IX Header "AUTHORS"
Malcolm Beattie, \f(CW\*(C`mbeattie@sable.ox.ac.uk\*(C'\fR
Benjamin Stuhl, \f(CW\*(C`sho_pi@hotmail.com\*(C'\fR
