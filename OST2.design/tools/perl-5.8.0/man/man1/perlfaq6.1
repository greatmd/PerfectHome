.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ6 1"
.TH PERLFAQ6 1 "2002-06-08" "perl v5.8.0" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq6 \- Regular Expressions ($Revision: 1.12 $, $Date: 2002/06/01 22:31:09 $)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section is surprisingly small because the rest of the \s-1FAQ\s0 is
littered with answers involving regular expressions.  For example,
decoding a \s-1URL\s0 and checking whether something is a number are handled
with regular expressions, but those answers are found elsewhere in
this document (in perlfaq9: ``How do I decode or create those %\-encodings 
on the web'' and perlfaq4: ``How do I determine whether a scalar is
a number/whole/integer/float'', to be precise).
.Sh "How can I hope to use regular expressions without creating illegible and unmaintainable code?"
.IX Subsection "How can I hope to use regular expressions without creating illegible and unmaintainable code?"
Three techniques can make regular expressions maintainable and
understandable.
.IP "Comments Outside the Regex" 4
.IX Item "Comments Outside the Regex"
Describe what you're doing and how you're doing it, using normal Perl
comments.
.Sp
.Vb 3
\&    # turn the line into the first word, a colon, and the
\&    # number of characters on the rest of the line
\&    s/^(\ew+)(.*)/ lc($1) . ":" . length($2) /meg;
.Ve
.IP "Comments Inside the Regex" 4
.IX Item "Comments Inside the Regex"
The \f(CW\*(C`/x\*(C'\fR modifier causes whitespace to be ignored in a regex pattern
(except in a character class), and also allows you to use normal
comments there, too.  As you can imagine, whitespace and comments help
a lot.
.Sp
\&\f(CW\*(C`/x\*(C'\fR lets you turn this:
.Sp
.Vb 1
\&    s{<(?:[^>'"]*|".*?"|'.*?')+>}{}gs;
.Ve
.Sp
into this:
.Sp
.Vb 10
\&    s{ <                    # opening angle bracket
\&        (?:                 # Non-backreffing grouping paren
\&             [^>'"] *       # 0 or more things that are neither > nor ' nor "
\&                |           #    or else
\&             ".*?"          # a section between double quotes (stingy match)
\&                |           #    or else
\&             '.*?'          # a section between single quotes (stingy match)
\&        ) +                 #   all occurring one or more times
\&       >                    # closing angle bracket
\&    }{}gsx;                 # replace with nothing, i.e. delete
.Ve
.Sp
It's still not quite so clear as prose, but it is very useful for
describing the meaning of each part of the pattern.
.IP "Different Delimiters" 4
.IX Item "Different Delimiters"
While we normally think of patterns as being delimited with \f(CW\*(C`/\*(C'\fR
characters, they can be delimited by almost any character.  perlre
describes this.  For example, the \f(CW\*(C`s///\*(C'\fR above uses braces as
delimiters.  Selecting another delimiter can avoid quoting the
delimiter within the pattern:
.Sp
.Vb 2
\&    s/\e/usr\e/local/\e/usr\e/share/g;      # bad delimiter choice
\&    s#/usr/local#/usr/share#g;          # better
.Ve
.Sh "I'm having trouble matching over more than one line.  What's wrong?"
.IX Subsection "I'm having trouble matching over more than one line.  What's wrong?"
Either you don't have more than one line in the string you're looking
at (probably), or else you aren't using the correct modifier(s) on
your pattern (possibly).
.PP
There are many ways to get multiline data into a string.  If you want
it to happen automatically while reading input, you'll want to set $/
(probably to '' for paragraphs or \f(CW\*(C`undef\*(C'\fR for the whole file) to
allow you to read more than one line at a time.
.PP
Read perlre to help you decide which of \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR (or both)
you might want to use: \f(CW\*(C`/s\*(C'\fR allows dot to include newline, and \f(CW\*(C`/m\*(C'\fR
allows caret and dollar to match next to a newline, not just at the
end of the string.  You do need to make sure that you've actually
got a multiline string in there.
.PP
For example, this program detects duplicate words, even when they span
line breaks (but not paragraph ones).  For this example, we don't need
\&\f(CW\*(C`/s\*(C'\fR because we aren't using dot in a regular expression that we want
to cross line boundaries.  Neither do we need \f(CW\*(C`/m\*(C'\fR because we aren't
wanting caret or dollar to match at any point inside the record next
to newlines.  But it's imperative that $/ be set to something other
than the default, or else we won't actually ever have a multiline
record read in.
.PP
.Vb 6
\&    $/ = '';            # read in more whole paragraph, not just one line
\&    while ( <> ) {
\&        while ( /\eb([\ew'-]+)(\es+\e1)+\eb/gi ) {   # word starts alpha
\&            print "Duplicate $1 at paragraph $.\en";
\&        }
\&    }
.Ve
.PP
Here's code that finds sentences that begin with \*(L"From \*(R" (which would
be mangled by many mailers):
.PP
.Vb 6
\&    $/ = '';            # read in more whole paragraph, not just one line
\&    while ( <> ) {
\&        while ( /^From /gm ) { # /m makes ^ match next to \en
\&            print "leading from in paragraph $.\en";
\&        }
\&    }
.Ve
.PP
Here's code that finds everything between \s-1START\s0 and \s-1END\s0 in a paragraph:
.PP
.Vb 6
\&    undef $/;           # read in whole file, not just one line or paragraph
\&    while ( <> ) {
\&        while ( /START(.*?)END/sgm ) { # /s makes . cross line boundaries
\&            print "$1\en";
\&        }
\&    }
.Ve
.Sh "How can I pull out lines between two patterns that are themselves on different lines?"
.IX Subsection "How can I pull out lines between two patterns that are themselves on different lines?"
You can use Perl's somewhat exotic \f(CW\*(C`..\*(C'\fR operator (documented in
perlop):
.PP
.Vb 1
\&    perl -ne 'print if /START/ .. /END/' file1 file2 ...
.Ve
.PP
If you wanted text and not lines, you would use
.PP
.Vb 1
\&    perl -0777 -ne 'print "$1\en" while /START(.*?)END/gs' file1 file2 ...
.Ve
.PP
But if you want nested occurrences of \f(CW\*(C`START\*(C'\fR through \f(CW\*(C`END\*(C'\fR, you'll
run up against the problem described in the question in this section
on matching balanced text.
.PP
Here's another example of using \f(CW\*(C`..\*(C'\fR:
.PP
.Vb 7
\&    while (<>) {
\&        $in_header =   1  .. /^$/;
\&        $in_body   = /^$/ .. eof();
\&        # now choose between them
\&    } continue {
\&        reset if eof();         # fix $.
\&    }
.Ve
.Sh "I put a regular expression into $/ but it didn't work. What's wrong?"
.IX Subsection "I put a regular expression into $/ but it didn't work. What's wrong?"
$/ must be a string, not a regular expression.  Awk has to be better
for something. :\-)
.PP
Actually, you could do this if you don't mind reading the whole file
into memory:
.PP
.Vb 2
\&    undef $/;
\&    @records = split /your_pattern/, <FH>;
.Ve
.PP
The Net::Telnet module (available from \s-1CPAN\s0) has the capability to
wait for a pattern in the input stream, or timeout if it doesn't
appear within a certain time.
.PP
.Vb 4
\&    ## Create a file with three lines.
\&    open FH, ">file";
\&    print FH "The first line\enThe second line\enThe third line\en";
\&    close FH;
.Ve
.PP
.Vb 2
\&    ## Get a read/write filehandle to it.
\&    $fh = new IO::File "+<file";
.Ve
.PP
.Vb 3
\&    ## Attach it to a "stream" object.
\&    use Net::Telnet;
\&    $file = new Net::Telnet (-fhopen => $fh);
.Ve
.PP
.Vb 3
\&    ## Search for the second line and print out the third.
\&    $file->waitfor('/second line\en/');
\&    print $file->getline;
.Ve
.Sh "How do I substitute case insensitively on the \s-1LHS\s0 while preserving case on the \s-1RHS\s0?"
.IX Subsection "How do I substitute case insensitively on the LHS while preserving case on the RHS?"
Here's a lovely Perlish solution by Larry Rosler.  It exploits
properties of bitwise xor on \s-1ASCII\s0 strings.
.PP
.Vb 1
\&    $_= "this is a TEsT case";
.Ve
.PP
.Vb 2
\&    $old = 'test';
\&    $new = 'success';
.Ve
.PP
.Vb 5
\&    s{(\eQ$old\eE)}
\&     { uc $new | (uc $1 ^ $1) .
\&        (uc(substr $1, -1) ^ substr $1, -1) x
\&            (length($new) - length $1)
\&     }egi;
.Ve
.PP
.Vb 1
\&    print;
.Ve
.PP
And here it is as a subroutine, modeled after the above:
.PP
.Vb 3
\&    sub preserve_case($$) {
\&        my ($old, $new) = @_;
\&        my $mask = uc $old ^ $old;
.Ve
.PP
.Vb 3
\&        uc $new | $mask .
\&            substr($mask, -1) x (length($new) - length($old))        
\&    }
.Ve
.PP
.Vb 3
\&    $a = "this is a TEsT case";
\&    $a =~ s/(test)/preserve_case($1, "success")/egi;
\&    print "$a\en";
.Ve
.PP
This prints:
.PP
.Vb 1
\&    this is a SUcCESS case
.Ve
.PP
As an alternative, to keep the case of the replacement word if it is
longer than the original, you can use this code, by Jeff Pinyan:
.PP
.Vb 3
\&  sub preserve_case {
\&    my ($from, $to) = @_;
\&    my ($lf, $lt) = map length, @_;
.Ve
.PP
.Vb 2
\&    if ($lt < $lf) { $from = substr $from, 0, $lt }
\&    else { $from .= substr $to, $lf }
.Ve
.PP
.Vb 2
\&    return uc $to | ($from ^ uc $from);
\&  }
.Ve
.PP
This changes the sentence to \*(L"this is a SUcCess case.\*(R"
.PP
Just to show that C programmers can write C in any programming language,
if you prefer a more C\-like solution, the following script makes the
substitution have the same case, letter by letter, as the original.
(It also happens to run about 240% slower than the Perlish solution runs.)
If the substitution has more characters than the string being substituted,
the case of the last character is used for the rest of the substitution.
.PP
.Vb 8
\&    # Original by Nathan Torkington, massaged by Jeffrey Friedl
\&    #
\&    sub preserve_case($$)
\&    {
\&        my ($old, $new) = @_;
\&        my ($state) = 0; # 0 = no change; 1 = lc; 2 = uc
\&        my ($i, $oldlen, $newlen, $c) = (0, length($old), length($new));
\&        my ($len) = $oldlen < $newlen ? $oldlen : $newlen;
.Ve
.PP
.Vb 21
\&        for ($i = 0; $i < $len; $i++) {
\&            if ($c = substr($old, $i, 1), $c =~ /[\eW\ed_]/) {
\&                $state = 0;
\&            } elsif (lc $c eq $c) {
\&                substr($new, $i, 1) = lc(substr($new, $i, 1));
\&                $state = 1;
\&            } else {
\&                substr($new, $i, 1) = uc(substr($new, $i, 1));
\&                $state = 2;
\&            }
\&        }
\&        # finish up with any remaining new (for when new is longer than old)
\&        if ($newlen > $oldlen) {
\&            if ($state == 1) {
\&                substr($new, $oldlen) = lc(substr($new, $oldlen));
\&            } elsif ($state == 2) {
\&                substr($new, $oldlen) = uc(substr($new, $oldlen));
\&            }
\&        }
\&        return $new;
\&    }
.Ve
.ie n .Sh "How can I make ""\ew"" match national character sets?"
.el .Sh "How can I make \f(CW\ew\fP match national character sets?"
.IX Subsection "How can I make w match national character sets?"
See perllocale.
.ie n .Sh "How can I match a locale-smart version of ""/[a\-zA\-Z]/""?"
.el .Sh "How can I match a locale-smart version of \f(CW/[a\-zA\-Z]/\fP?"
.IX Subsection "How can I match a locale-smart version of /[a-zA-Z]/?"
One alphabetic character would be \f(CW\*(C`/[^\eW\ed_]/\*(C'\fR, no matter what locale
you're in.  Non-alphabetics would be \f(CW\*(C`/[\eW\ed_]/\*(C'\fR (assuming you don't
consider an underscore a letter).
.Sh "How can I quote a variable to use in a regex?"
.IX Subsection "How can I quote a variable to use in a regex?"
The Perl parser will expand \f(CW$variable\fR and \f(CW@variable\fR references in
regular expressions unless the delimiter is a single quote.  Remember,
too, that the right-hand side of a \f(CW\*(C`s///\*(C'\fR substitution is considered
a double-quoted string (see perlop for more details).  Remember
also that any regex special characters will be acted on unless you
precede the substitution with \eQ.  Here's an example:
.PP
.Vb 3
\&    $string = "to die?";
\&    $lhs = "die?";
\&    $rhs = "sleep, no more";
.Ve
.PP
.Vb 2
\&    $string =~ s/\eQ$lhs/$rhs/;
\&    # $string is now "to sleep no more"
.Ve
.PP
Without the \eQ, the regex would also spuriously match \*(L"di\*(R".
.ie n .Sh "What is ""/o"" really for?"
.el .Sh "What is \f(CW/o\fP really for?"
.IX Subsection "What is /o really for?"
Using a variable in a regular expression match forces a re-evaluation
(and perhaps recompilation) each time the regular expression is
encountered.  The \f(CW\*(C`/o\*(C'\fR modifier locks in the regex the first time
it's used.  This always happens in a constant regular expression, and
in fact, the pattern was compiled into the internal format at the same
time your entire program was.
.PP
Use of \f(CW\*(C`/o\*(C'\fR is irrelevant unless variable interpolation is used in
the pattern, and if so, the regex engine will neither know nor care
whether the variables change after the pattern is evaluated the \fIvery
first\fR time.
.PP
\&\f(CW\*(C`/o\*(C'\fR is often used to gain an extra measure of efficiency by not
performing subsequent evaluations when you know it won't matter
(because you know the variables won't change), or more rarely, when
you don't want the regex to notice if they do.
.PP
For example, here's a \*(L"paragrep\*(R" program:
.PP
.Vb 5
\&    $/ = '';  # paragraph mode
\&    $pat = shift;
\&    while (<>) {
\&        print if /$pat/o;
\&    }
.Ve
.Sh "How do I use a regular expression to strip C style comments from a file?"
.IX Subsection "How do I use a regular expression to strip C style comments from a file?"
While this actually can be done, it's much harder than you'd think.
For example, this one-liner
.PP
.Vb 1
\&    perl -0777 -pe 's{/\e*.*?\e*/}{}gs' foo.c
.Ve
.PP
will work in many but not all cases.  You see, it's too simple-minded for
certain kinds of C programs, in particular, those with what appear to be
comments in quoted strings.  For that, you'd need something like this,
created by Jeffrey Friedl and later modified by Fred Curtis.
.PP
.Vb 4
\&    $/ = undef;
\&    $_ = <>;
\&    s#/\e*[^*]*\e*+([^/*][^*]*\e*+)*/|("(\e\e.|[^"\e\e])*"|'(\e\e.|[^'\e\e])*'|.[^/"'\e\e]*)#$2#gs
\&    print;
.Ve
.PP
This could, of course, be more legibly written with the \f(CW\*(C`/x\*(C'\fR modifier, adding
whitespace and comments.  Here it is expanded, courtesy of Fred Curtis.
.PP
.Vb 8
\&    s{
\&       /\e*         ##  Start of /* ... */ comment
\&       [^*]*\e*+    ##  Non-* followed by 1-or-more *'s
\&       (
\&         [^/*][^*]*\e*+
\&       )*          ##  0-or-more things which don't start with /
\&                   ##    but do end with '*'
\&       /           ##  End of /* ... */ comment
.Ve
.PP
.Vb 1
\&     |         ##     OR  various things which aren't comments:
.Ve
.PP
.Vb 8
\&       (
\&         "           ##  Start of " ... " string
\&         (
\&           \e\e.           ##  Escaped char
\&         |               ##    OR
\&           [^"\e\e]        ##  Non "\e
\&         )*
\&         "           ##  End of " ... " string
.Ve
.PP
.Vb 1
\&       |         ##     OR
.Ve
.PP
.Vb 7
\&         '           ##  Start of ' ... ' string
\&         (
\&           \e\e.           ##  Escaped char
\&         |               ##    OR
\&           [^'\e\e]        ##  Non '\e
\&         )*
\&         '           ##  End of ' ... ' string
.Ve
.PP
.Vb 1
\&       |         ##     OR
.Ve
.PP
.Vb 4
\&         .           ##  Anything other char
\&         [^/"'\e\e]*   ##  Chars which doesn't start a comment, string or escape
\&       )
\&     }{$2}gxs;
.Ve
.PP
A slight modification also removes \*(C+ comments:
.PP
.Vb 1
\&    s#/\e*[^*]*\e*+([^/*][^*]*\e*+)*/|//[^\en]*|("(\e\e.|[^"\e\e])*"|'(\e\e.|[^'\e\e])*'|.[^/"'\e\e]*)#$2#gs;
.Ve
.Sh "Can I use Perl regular expressions to match balanced text?"
.IX Subsection "Can I use Perl regular expressions to match balanced text?"
Historically, Perl regular expressions were not capable of matching
balanced text.  As of more recent versions of perl including 5.6.1
experimental features have been added that make it possible to do this.
Look at the documentation for the (??{ }) construct in recent perlre manual
pages to see an example of matching balanced parentheses.  Be sure to take
special notice of the  warnings present in the manual before making use
of this feature.
.PP
\&\s-1CPAN\s0 contains many modules that can be useful for matching text
depending on the context.  Damian Conway provides some useful
patterns in Regexp::Common.  The module Text::Balanced provides a
general solution to this problem.
.PP
One of the common applications of balanced text matching is working
with \s-1XML\s0 and \s-1HTML\s0.  There are many modules available that support
these needs.  Two examples are HTML::Parser and XML::Parser. There
are many others.
.PP
An elaborate subroutine (for 7\-bit \s-1ASCII\s0 only) to pull out balanced
and possibly nested single chars, like \f(CW\*(C``\*(C'\fR and \f(CW\*(C`'\*(C'\fR, \f(CW\*(C`{\*(C'\fR and \f(CW\*(C`}\*(C'\fR,
or \f(CW\*(C`(\*(C'\fR and \f(CW\*(C`)\*(C'\fR can be found in
http://www.cpan.org/authors/id/TOMC/scripts/pull_quotes.gz .
.PP
The C::Scan module from \s-1CPAN\s0 also contains such subs for internal use,
but they are undocumented.
.Sh "What does it mean that regexes are greedy?  How can I get around it?"
.IX Subsection "What does it mean that regexes are greedy?  How can I get around it?"
Most people mean that greedy regexes match as much as they can.
Technically speaking, it's actually the quantifiers (\f(CW\*(C`?\*(C'\fR, \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`+\*(C'\fR,
\&\f(CW\*(C`{}\*(C'\fR) that are greedy rather than the whole pattern; Perl prefers local
greed and immediate gratification to overall greed.  To get non-greedy
versions of the same quantifiers, use (\f(CW\*(C`??\*(C'\fR, \f(CW\*(C`*?\*(C'\fR, \f(CW\*(C`+?\*(C'\fR, \f(CW\*(C`{}?\*(C'\fR).
.PP
An example:
.PP
.Vb 3
\&        $s1 = $s2 = "I am very very cold";
\&        $s1 =~ s/ve.*y //;      # I am cold
\&        $s2 =~ s/ve.*?y //;     # I am very cold
.Ve
.PP
Notice how the second substitution stopped matching as soon as it
encountered \*(L"y \*(R".  The \f(CW\*(C`*?\*(C'\fR quantifier effectively tells the regular
expression engine to find a match as quickly as possible and pass
control on to whatever is next in line, like you would if you were
playing hot potato.
.Sh "How do I process each word on each line?"
.IX Subsection "How do I process each word on each line?"
Use the split function:
.PP
.Vb 5
\&    while (<>) {
\&        foreach $word ( split ) { 
\&            # do something with $word here
\&        } 
\&    }
.Ve
.PP
Note that this isn't really a word in the English sense; it's just
chunks of consecutive non-whitespace characters.
.PP
To work with only alphanumeric sequences (including underscores), you
might consider
.PP
.Vb 5
\&    while (<>) {
\&        foreach $word (m/(\ew+)/g) {
\&            # do something with $word here
\&        }
\&    }
.Ve
.Sh "How can I print out a word-frequency or line-frequency summary?"
.IX Subsection "How can I print out a word-frequency or line-frequency summary?"
To do this, you have to parse out each word in the input stream.  We'll
pretend that by word you mean chunk of alphabetics, hyphens, or
apostrophes, rather than the non-whitespace chunk idea of a word given
in the previous question:
.PP
.Vb 8
\&    while (<>) {
\&        while ( /(\eb[^\eW_\ed][\ew'-]+\eb)/g ) {   # misses "`sheep'"
\&            $seen{$1}++;
\&        }
\&    }
\&    while ( ($word, $count) = each %seen ) {
\&        print "$count $word\en";
\&    }
.Ve
.PP
If you wanted to do the same thing for lines, you wouldn't need a
regular expression:
.PP
.Vb 6
\&    while (<>) { 
\&        $seen{$_}++;
\&    }
\&    while ( ($line, $count) = each %seen ) {
\&        print "$count $line";
\&    }
.Ve
.PP
If you want these output in a sorted order, see perlfaq4: ``How do I
sort a hash (optionally by value instead of key)?''.
.Sh "How can I do approximate matching?"
.IX Subsection "How can I do approximate matching?"
See the module String::Approx available from \s-1CPAN\s0.
.Sh "How do I efficiently match many regular expressions at once?"
.IX Subsection "How do I efficiently match many regular expressions at once?"
The following is extremely inefficient:
.PP
.Vb 10
\&    # slow but obvious way
\&    @popstates = qw(CO ON MI WI MN);
\&    while (defined($line = <>)) {
\&        for $state (@popstates) {
\&            if ($line =~ /\eb$state\eb/i) {  
\&                print $line;
\&                last;
\&            }
\&        }
\&    }
.Ve
.PP
That's because Perl has to recompile all those patterns for each of
the lines of the file.  As of the 5.005 release, there's a much better
approach, one which makes use of the new \f(CW\*(C`qr//\*(C'\fR operator:
.PP
.Vb 9
\&    # use spiffy new qr// operator, with /i flag even
\&    use 5.005;
\&    @popstates = qw(CO ON MI WI MN);
\&    @poppats   = map { qr/\eb$_\eb/i } @popstates;
\&    while (defined($line = <>)) {
\&        for $patobj (@poppats) {
\&            print $line if $line =~ /$patobj/;
\&        }
\&    }
.Ve
.ie n .Sh "Why don't word-boundary searches with ""\eb"" work for me?"
.el .Sh "Why don't word-boundary searches with \f(CW\eb\fP work for me?"
.IX Subsection "Why don't word-boundary searches with b work for me?"
Two common misconceptions are that \f(CW\*(C`\eb\*(C'\fR is a synonym for \f(CW\*(C`\es+\*(C'\fR and
that it's the edge between whitespace characters and non-whitespace
characters.  Neither is correct.  \f(CW\*(C`\eb\*(C'\fR is the place between a \f(CW\*(C`\ew\*(C'\fR
character and a \f(CW\*(C`\eW\*(C'\fR character (that is, \f(CW\*(C`\eb\*(C'\fR is the edge of a
\&\*(L"word\*(R").  It's a zero-width assertion, just like \f(CW\*(C`^\*(C'\fR, \f(CW\*(C`$\*(C'\fR, and all
the other anchors, so it doesn't consume any characters.  perlre
describes the behavior of all the regex metacharacters.
.PP
Here are examples of the incorrect application of \f(CW\*(C`\eb\*(C'\fR, with fixes:
.PP
.Vb 2
\&    "two words" =~ /(\ew+)\eb(\ew+)/;          # WRONG
\&    "two words" =~ /(\ew+)\es+(\ew+)/;         # right
.Ve
.PP
.Vb 2
\&    " =matchless= text" =~ /\eb=(\ew+)=\eb/;   # WRONG
\&    " =matchless= text" =~ /=(\ew+)=/;       # right
.Ve
.PP
Although they may not do what you thought they did, \f(CW\*(C`\eb\*(C'\fR and \f(CW\*(C`\eB\*(C'\fR
can still be quite useful.  For an example of the correct use of
\&\f(CW\*(C`\eb\*(C'\fR, see the example of matching duplicate words over multiple
lines.
.PP
An example of using \f(CW\*(C`\eB\*(C'\fR is the pattern \f(CW\*(C`\eBis\eB\*(C'\fR.  This will find
occurrences of \*(L"is\*(R" on the insides of words only, as in \*(L"thistle\*(R", but
not \*(L"this\*(R" or \*(L"island\*(R".
.Sh "Why does using $&, $`, or $' slow my program down?"
.IX Subsection "Why does using $&, $`, or $' slow my program down?"
Once Perl sees that you need one of these variables anywhere in
the program, it provides them on each and every pattern match.
The same mechanism that handles these provides for the use of \f(CW$1\fR, \f(CW$2\fR,
etc., so you pay the same price for each regex that contains capturing
parentheses.  If you never use $&, etc., in your script, then regexes
\&\fIwithout\fR capturing parentheses won't be penalized. So avoid $&, $',
and $` if you can, but if you can't, once you've used them at all, use
them at will because you've already paid the price.  Remember that some
algorithms really appreciate them.  As of the 5.005 release.  the $&
variable is no longer \*(L"expensive\*(R" the way the other two are.
.ie n .Sh "What good is ""\eG"" in a regular expression?"
.el .Sh "What good is \f(CW\eG\fP in a regular expression?"
.IX Subsection "What good is G in a regular expression?"
The notation \f(CW\*(C`\eG\*(C'\fR is used in a match or substitution in conjunction with
the \f(CW\*(C`/g\*(C'\fR modifier to anchor the regular expression to the point just past
where the last match occurred, i.e. the \fIpos()\fR point.  A failed match resets
the position of \f(CW\*(C`\eG\*(C'\fR unless the \f(CW\*(C`/c\*(C'\fR modifier is in effect. \f(CW\*(C`\eG\*(C'\fR can be
used in a match without the \f(CW\*(C`/g\*(C'\fR modifier; it acts the same (i.e. still
anchors at the \fIpos()\fR point) but of course only matches once and does not
update \fIpos()\fR, as non\-\f(CW\*(C`/g\*(C'\fR expressions never do. \f(CW\*(C`\eG\*(C'\fR in an expression
applied to a target string that has never been matched against a \f(CW\*(C`/g\*(C'\fR
expression before or has had its \fIpos()\fR reset is functionally equivalent to
\&\f(CW\*(C`\eA\*(C'\fR, which matches at the beginning of the string.
.PP
For example, suppose you had a line of text quoted in standard mail
and Usenet notation, (that is, with leading \f(CW\*(C`>\*(C'\fR characters), and
you want change each leading \f(CW\*(C`>\*(C'\fR into a corresponding \f(CW\*(C`:\*(C'\fR.  You
could do so in this way:
.PP
.Vb 1
\&     s/^(>+)/':' x length($1)/gem;
.Ve
.PP
Or, using \f(CW\*(C`\eG\*(C'\fR, the much simpler (and faster):
.PP
.Vb 1
\&    s/\eG>/:/g;
.Ve
.PP
A more sophisticated use might involve a tokenizer.  The following
lex-like example is courtesy of Jeffrey Friedl.  It did not work in
5.003 due to bugs in that release, but does work in 5.004 or better.
(Note the use of \f(CW\*(C`/c\*(C'\fR, which prevents a failed match with \f(CW\*(C`/g\*(C'\fR from
resetting the search position back to the beginning of the string.)
.PP
.Vb 9
\&    while (<>) {
\&      chomp;
\&      PARSER: {
\&           m/ \eG( \ed+\eb    )/gcx    && do { print "number: $1\en";  redo; };
\&           m/ \eG( \ew+      )/gcx    && do { print "word:   $1\en";  redo; };
\&           m/ \eG( \es+      )/gcx    && do { print "space:  $1\en";  redo; };
\&           m/ \eG( [^\ew\ed]+ )/gcx    && do { print "other:  $1\en";  redo; };
\&      }
\&    }
.Ve
.PP
Of course, that could have been written as
.PP
.Vb 21
\&    while (<>) {
\&      chomp;
\&      PARSER: {
\&           if ( /\eG( \ed+\eb    )/gcx  {
\&                print "number: $1\en";
\&                redo PARSER;
\&           }
\&           if ( /\eG( \ew+      )/gcx  {
\&                print "word: $1\en";
\&                redo PARSER;
\&           }
\&           if ( /\eG( \es+      )/gcx  {
\&                print "space: $1\en";
\&                redo PARSER;
\&           }
\&           if ( /\eG( [^\ew\ed]+ )/gcx  {
\&                print "other: $1\en";
\&                redo PARSER;
\&           }
\&      }
\&    }
.Ve
.PP
but then you lose the vertical alignment of the regular expressions.
.Sh "Are Perl regexes DFAs or NFAs?  Are they \s-1POSIX\s0 compliant?"
.IX Subsection "Are Perl regexes DFAs or NFAs?  Are they POSIX compliant?"
While it's true that Perl's regular expressions resemble the DFAs
(deterministic finite automata) of the \fIegrep\fR\|(1) program, they are in
fact implemented as NFAs (non\-deterministic finite automata) to allow
backtracking and backreferencing.  And they aren't POSIX-style either,
because those guarantee worst-case behavior for all cases.  (It seems
that some people prefer guarantees of consistency, even when what's
guaranteed is slowness.)  See the book \*(L"Mastering Regular Expressions\*(R"
(from O'Reilly) by Jeffrey Friedl for all the details you could ever
hope to know on these matters (a full citation appears in
perlfaq2).
.Sh "What's wrong with using grep or map in a void context?"
.IX Subsection "What's wrong with using grep or map in a void context?"
The problem is that both grep and map build a return list,
regardless of the context.  This means you're making Perl go
to the trouble of building a list that you then just throw away.
If the list is large, you waste both time and space.  If your
intent is to iterate over the list then use a for loop for this
purpose.
.Sh "How can I match strings with multibyte characters?"
.IX Subsection "How can I match strings with multibyte characters?"
Starting from Perl 5.6 Perl has had some level of multibyte character
support.  Perl 5.8 or later is recommended.  Supported multibyte
character repertoires include Unicode, and legacy encodings
through the Encode module.  See perluniintro, perlunicode,
and Encode.
.PP
If you are stuck with older Perls, you can do Unicode with the
\&\f(CW\*(C`Unicode::String\*(C'\fR module, and character conversions using the
\&\f(CW\*(C`Unicode::Map8\*(C'\fR and \f(CW\*(C`Unicode::Map\*(C'\fR modules.  If you are using
Japanese encodings, you might try using the jperl 5.005_03.
.PP
Finally, the following set of approaches was offered by Jeffrey
Friedl, whose article in issue #5 of The Perl Journal talks about
this very matter.
.PP
Let's suppose you have some weird Martian encoding where pairs of
\&\s-1ASCII\s0 uppercase letters encode single Martian letters (i.e. the two
bytes \*(L"\s-1CV\s0\*(R" make a single Martian letter, as do the two bytes \*(L"\s-1SG\s0\*(R",
\&\*(L"\s-1VS\s0\*(R", \*(L"\s-1XX\s0\*(R", etc.). Other bytes represent single characters, just like
\&\s-1ASCII\s0.
.PP
So, the string of Martian \*(L"I am \s-1CVSGXX\s0!\*(R" uses 12 bytes to encode the
nine characters 'I', ' ', 'a', 'm', ' ', '\s-1CV\s0', '\s-1SG\s0', '\s-1XX\s0', '!'.
.PP
Now, say you want to search for the single character \f(CW\*(C`/GX/\*(C'\fR. Perl
doesn't know about Martian, so it'll find the two bytes \*(L"\s-1GX\s0\*(R" in the \*(L"I
am \s-1CVSGXX\s0!\*(R"  string, even though that character isn't there: it just
looks like it is because \*(L"\s-1SG\s0\*(R" is next to \*(L"\s-1XX\s0\*(R", but there's no real
\&\*(L"\s-1GX\s0\*(R".  This is a big problem.
.PP
Here are a few ways, all painful, to deal with it:
.PP
.Vb 3
\&   $martian =~ s/([A-Z][A-Z])/ $1 /g; # Make sure adjacent ``martian'' bytes
\&                                      # are no longer adjacent.
\&   print "found GX!\en" if $martian =~ /GX/;
.Ve
.PP
Or like this:
.PP
.Vb 6
\&   @chars = $martian =~ m/([A-Z][A-Z]|[^A-Z])/g;
\&   # above is conceptually similar to:     @chars = $text =~ m/(.)/g;
\&   #
\&   foreach $char (@chars) {
\&       print "found GX!\en", last if $char eq 'GX';
\&   }
.Ve
.PP
Or like this:
.PP
.Vb 3
\&   while ($martian =~ m/\eG([A-Z][A-Z]|.)/gs) {  # \eG probably unneeded
\&       print "found GX!\en", last if $1 eq 'GX';
\&   }
.Ve
.PP
Or like this:
.PP
.Vb 1
\&    die "sorry, Perl doesn't (yet) have Martian support )-:\en";
.Ve
.PP
There are many double\- (and multi\-) byte encodings commonly used these
days.  Some versions of these have 1\-, 2\-, 3\-, and 4\-byte characters,
all mixed.
.Sh "How do I match a pattern that is supplied by the user?"
.IX Subsection "How do I match a pattern that is supplied by the user?"
Well, if it's really a pattern, then just use
.PP
.Vb 2
\&    chomp($pattern = <STDIN>);
\&    if ($line =~ /$pattern/) { }
.Ve
.PP
Alternatively, since you have no guarantee that your user entered
a valid regular expression, trap the exception this way:
.PP
.Vb 1
\&    if (eval { $line =~ /$pattern/ }) { }
.Ve
.PP
If all you really want to search for a string, not a pattern,
then you should either use the \fIindex()\fR function, which is made for
string searching, or if you can't be disabused of using a pattern
match on a non\-pattern, then be sure to use \f(CW\*(C`\eQ\*(C'\fR...\f(CW\*(C`\eE\*(C'\fR, documented
in perlre.
.PP
.Vb 1
\&    $pattern = <STDIN>;
.Ve
.PP
.Vb 5
\&    open (FILE, $input) or die "Couldn't open input $input: $!; aborting";
\&    while (<FILE>) {
\&        print if /\eQ$pattern\eE/;
\&    }
\&    close FILE;
.Ve
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
